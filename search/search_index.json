{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Th\u00f4ng tin c\u1ee7a t\u00f4i \u00b6 Name: Bui Hai Nam Date of birth: 25/09/1992 Skype: Connect I started my coding journey when I was 21 year old. As a Mobile programmer, working on both platform Android and IOS I have had numerous opportunity to use the programming languages C++ Java , Kotlin , Swift and Dart . No matter the route you take, it doesn\u2019t really matter as long as you practice a shit ton. Look through the popular languages and decide which one you want to start with. I\u2019d go with one of the following: Java, Swift, Kotlin, C, C++, Dart, PHP. It doesn\u2019t matter that much, and before you get a job doing it you\u2019ll probably want to have bounced around a little bit. Instead of giving step by step instructions, I'm going to give you a few pointers. Please pay attention to these, don't just be like \"yeah whatever.\" Following these tips will make you grow way faster, and if you actually follow these tips completely, you'll probably be the fastest learning programmer in history. **Nobody follows these rules until way later than they should have, and everyone regrets it a bit. **It's not a huge deal because everyone does it, but you can seriously make a huge difference. You could be job-ready in 3 months easy if you practice every day and do this stuff. If you don't, I'd say you're probably looking at about 1--3 years of practice at least before anyone hires you. So without further ado, and in somewhat of a loose order of most to least important, my guide to learning how to program: Practice way more than you study/read. Don't just read how to do things, try them. You'll find that most of the time, there's complexities that aren't mentioned in the text, and you'll learn way more. Just because you think you know how to make a class in C++ doesn't mean you even know how to get the code to compile. This is by far the most important point. Don't learn a programming language, learn to program. Sure, you'll use a programming language and get proficient with it, but it's just a tool. If you pick up a book from start to finish on a language, you'll have learned so much stuff you are never going to use. If you insist on using a textbook, use one that emphasizes examples, or teaches you a programming practice like web development or machine learning. Most programming language focused textbooks aren't good as anything but a reference. Furthermore, it's really important not to be tied to any one language, especially as a beginner. There's a ton of great material out there that is taught in a certain language, but is universally important. You should be able to learn from examples that are written in a language you've never used. Try random stuff. Try new frameworks, packages, languages, ideas, etc. just to see how they work. Never made an app? Try it. Never used a front end JS framework? Try it. Buy an arduino. Get a book on object oriented design. Try using a NoSQL database for your next project, or try using a hosted database on AWS. Don't take days off. Taking time off takes you 'out of the zone.' You want these problems in the back of your mind at all times. Taking days off forces you to get back in the zone, and remember things. I come up with solutions to problems or cool ideas all the time, whether I'm driving home from work or at the gym. Make programming a hobby. Learn to enjoy it. This comes with straying away from reading textbooks, and practicing more. Make cool shit. Get experience. Don't say \"I heard that's a bad idea.\" Say \"that's a bad idea, this is what happened to me when I tried that.\" Nobody gives a shit about what you read in a textbook, I promise. Well at least not nearly as much as they care about what you experienced firsthand. Finish proects 100%. Don't say 'eh it's pretty much done.' and move on. Finish it. Publish it. Tell your parents and friends to use it. You'll never know how much work was actually left. The very end of a project can introduce massive holes in your code. Even moreso, once you've launched it, your users will find plenty more. Get it published and get people using it. Network. Internet has introduced me to a lot of cool programmers that have tons of knowledge to give me. Work in a team as much as possible, it will teach you how companies do things at scale. Version control, task management, code documentation, code readability, loose coupling of objects, etc. are all way more important when working on projects with others. Read tech blogs and info sites. Techcrunch, Techmeme, Medium,quora, Stackoverflow, Linkedin, and facebook are the ones I use the most. My newsfeeds on all of those are filled with the newest info on the tech industry. If people read this I'll edit it as I think of more.","title":"About"},{"location":"#thong-tin-cua-toi","text":"Name: Bui Hai Nam Date of birth: 25/09/1992 Skype: Connect I started my coding journey when I was 21 year old. As a Mobile programmer, working on both platform Android and IOS I have had numerous opportunity to use the programming languages C++ Java , Kotlin , Swift and Dart . No matter the route you take, it doesn\u2019t really matter as long as you practice a shit ton. Look through the popular languages and decide which one you want to start with. I\u2019d go with one of the following: Java, Swift, Kotlin, C, C++, Dart, PHP. It doesn\u2019t matter that much, and before you get a job doing it you\u2019ll probably want to have bounced around a little bit. Instead of giving step by step instructions, I'm going to give you a few pointers. Please pay attention to these, don't just be like \"yeah whatever.\" Following these tips will make you grow way faster, and if you actually follow these tips completely, you'll probably be the fastest learning programmer in history. **Nobody follows these rules until way later than they should have, and everyone regrets it a bit. **It's not a huge deal because everyone does it, but you can seriously make a huge difference. You could be job-ready in 3 months easy if you practice every day and do this stuff. If you don't, I'd say you're probably looking at about 1--3 years of practice at least before anyone hires you. So without further ado, and in somewhat of a loose order of most to least important, my guide to learning how to program: Practice way more than you study/read. Don't just read how to do things, try them. You'll find that most of the time, there's complexities that aren't mentioned in the text, and you'll learn way more. Just because you think you know how to make a class in C++ doesn't mean you even know how to get the code to compile. This is by far the most important point. Don't learn a programming language, learn to program. Sure, you'll use a programming language and get proficient with it, but it's just a tool. If you pick up a book from start to finish on a language, you'll have learned so much stuff you are never going to use. If you insist on using a textbook, use one that emphasizes examples, or teaches you a programming practice like web development or machine learning. Most programming language focused textbooks aren't good as anything but a reference. Furthermore, it's really important not to be tied to any one language, especially as a beginner. There's a ton of great material out there that is taught in a certain language, but is universally important. You should be able to learn from examples that are written in a language you've never used. Try random stuff. Try new frameworks, packages, languages, ideas, etc. just to see how they work. Never made an app? Try it. Never used a front end JS framework? Try it. Buy an arduino. Get a book on object oriented design. Try using a NoSQL database for your next project, or try using a hosted database on AWS. Don't take days off. Taking time off takes you 'out of the zone.' You want these problems in the back of your mind at all times. Taking days off forces you to get back in the zone, and remember things. I come up with solutions to problems or cool ideas all the time, whether I'm driving home from work or at the gym. Make programming a hobby. Learn to enjoy it. This comes with straying away from reading textbooks, and practicing more. Make cool shit. Get experience. Don't say \"I heard that's a bad idea.\" Say \"that's a bad idea, this is what happened to me when I tried that.\" Nobody gives a shit about what you read in a textbook, I promise. Well at least not nearly as much as they care about what you experienced firsthand. Finish proects 100%. Don't say 'eh it's pretty much done.' and move on. Finish it. Publish it. Tell your parents and friends to use it. You'll never know how much work was actually left. The very end of a project can introduce massive holes in your code. Even moreso, once you've launched it, your users will find plenty more. Get it published and get people using it. Network. Internet has introduced me to a lot of cool programmers that have tons of knowledge to give me. Work in a team as much as possible, it will teach you how companies do things at scale. Version control, task management, code documentation, code readability, loose coupling of objects, etc. are all way more important when working on projects with others. Read tech blogs and info sites. Techcrunch, Techmeme, Medium,quora, Stackoverflow, Linkedin, and facebook are the ones I use the most. My newsfeeds on all of those are filled with the newest info on the tech industry. If people read this I'll edit it as I think of more.","title":"Th\u00f4ng tin c\u1ee7a t\u00f4i"},{"location":"dart/dart_async_intro/","text":"C\u0169ng nh\u01b0 c\u00e1c ng\u00f4n ng\u1eef kh\u00e1c, Dart kh\u00f4ng th\u1ec3 thi\u1ebfu vi\u1ec7c l\u1eadp tr\u00ecnh b\u1ea5t \u0111\u1ed3ng b\u1ed9. Code ch\u1ea1y trong Dart l\u00e0 ch\u1ea1y tr\u00ean m\u1ed9t lu\u1ed3ng (thread), d\u00f2ng code b\u1ea1n vi\u1ebft n\u00f3 thi h\u00e0nh h\u1ebft c\u00e2u l\u1ec7nh n\u00e0y sang c\u00e2u l\u1ec7nh kh\u00e1c. N\u00ean m\u1ed9t kh\u1ed1i l\u1ec7nh n\u00e0o \u0111\u00f3 kh\u00f3a thread (l\u00e0m t\u1eafc thread) th\u00ec to\u00e0n b\u1ed9 \u1ee9ng d\u1ee5ng b\u1ecb treo. C\u00e1c Asynchronous operations gi\u00fap ch\u01b0\u01a1ng tr\u00ecnh c\u1ee7a b\u1ea1n ho\u00e0n th\u00e0nh c\u00f4ng vi\u1ec7c kh\u00e1c trong khi ch\u1edd \u0111\u1ee3i m\u1ed9t operation k\u1ebft th\u00fac. Dart s\u1eed d\u1ee5ng Future v\u00e0 Stream \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\u00e1c ho\u1ea1t \u0111\u1ed9ng kh\u00f4ng \u0111\u1ed3ng b\u1ed9. 1. Future \u00b6 Future l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng Future \u0111\u1ea1i di\u1ec7n cho m\u1ed9t t\u00ednh to\u00e1n m\u00e0 gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 c\u00f3 th\u1ec3 ch\u01b0a c\u00f3 s\u1eb5n. Future tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a t\u00ednh to\u00e1n khi n\u00f3 ho\u00e0n th\u00e0nh v\u00e0o m\u1ed9t th\u1eddi \u0111i\u1ec3m n\u00e0o \u0111\u00f3 trong t\u01b0\u01a1ng lai. Future th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho c\u00e1c t\u00ednh to\u00e1n c\u00f3 kh\u1ea3 n\u0103ng d\u00e0i nh\u01b0 I/O v\u00e0 t\u01b0\u01a1ng t\u00e1c v\u1edbi ng\u01b0\u1eddi d\u00f9ng. \u0110\u1ec3 l\u00e0m vi\u1ec7c v\u1edbi Future , b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng async v\u00e0 await ho\u1eb7c Future API. Function b\u1ea5t \u0111\u1ed3ng b\u1ed9 \u0111\u01b0\u1ee3c khai b\u00e1o c\u00f3 t\u1eeb kh\u00f3a async ph\u00eda sau, v\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng tr\u1ea3 v\u1ec1 c\u1ee7a function l\u00e0 Future\\ , v\u1edbi T l\u00e0 ki\u1ec3u bi\u1ec3u th\u1ee9c return tr\u1ea3 v\u1ec1. N\u1ebfu m\u1ed9t function \u0111\u00e3 khai b\u00e1o l\u00e0 b\u1ea5t \u0111\u1ed3ng b\u1ed9 async th\u00ec trong function c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng th\u00eam t\u1eeb kh\u00f3a await - ch\u1edd cho bi\u1ec3u th\u1ee9c thi h\u00e0nh xong m\u1edbi thi h\u00e0nh c\u00e1c code ti\u1ebfp theo c\u1ee7a function. main () { Future f = showInfomation (); f . then (( data ) => notifyFinish ( data )) . catchError (( e ) => print ( 'L\u1ed7i x\u1ea3y ra - ' + e . toString ())); secondFunction (); } notifyFinish ( String s ) { print ( s ); } Future < String > showInfomation () async { var data = await getInfomation (); print ( 'This is your data -' + DateTime . now (). toString ()); print ( data ); return 'showInfomation Complete!' ; //Tr\u1ea3 v\u1ec1 chu\u1ed7i - ch\u1ee9a trong Future } const info = '#4fs358wredsfadsfdfdw' ; getInfomation () { return info ; } secondFunction () { print ( 'Th\u1eddi gian - ' + DateTime . now (). toString ()); } Future < String > showInfomation () async { var data = await getInfomation (); print ( 'This is your data -' + DateTime . now (). toString ()); print ( data ); return 'showInfomation Complete!' ; //Tr\u1ea3 v\u1ec1 chu\u1ed7i - ch\u1ee9a trong Future } Tr\u1ea3 v\u1ec1 t\u1eeb h\u00e0m async l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng Future. T\u1eeb \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0y, ta c\u00f3 th\u1ec3 g\u00e1n c\u00e1c h\u00e0m callback, \u0111\u01b0\u1ee3c ch\u1ea1y m\u1ed7i khi d\u1eef li\u1ec7u ho\u00e0n th\u00e0nh tr\u1ea3 v\u1ec1 b\u1edfi h\u00e0m async , \u0111\u1ec3 g\u00e1n h\u00e0m callback s\u1eed d\u1ee5ng ph\u01b0\u01a1ng th\u1ee9c: Future.then((data) => callBack(data)); main () { Future f = showInfomation (); f . then (( data ) => notifyFinish ( data )) . catchError (( e ) => print ( 'L\u1ed7i x\u1ea3y ra - ' + e . toString ())); secondFunction (); } N\u1ebfu mu\u1ed1n b\u1eaft l\u1ed7i trong h\u00e0m async c\u0169ng d\u00f9ng bi\u1ec3u th\u1ee9c try ... catch Ho\u1eb7c t\u1eeb \u0111\u1ed1i t\u01b0\u1ee3ng Future tr\u1ea3 v\u1ec1 th\u00ec s\u1eed d\u1ee5ng ph\u01b0\u01a1ng th\u1ee9c catchError() D\u00f9ng bi\u1ec3u th\u1ee9c try ... catch Future < String > showInfomation () async { var data ; try { data = await getInfomation (); } catch ( e ) { //X\u1eed l\u00fd l\u1ed7i }; print ( 'This is your data -' + DateTime . now (). toString ()); print ( data ); return 'showInfomation Complete!' ; } N\u1ebfu kh\u00f4ng b\u1eaft l\u1ed7i tr\u1ef1c ti\u1ebfp t\u1eeb async , c\u00f3 th\u1ec3 b\u1eaft l\u1ed7i \u1edf Future , \u0111\u00e2y l\u00e0 v\u00ed d\u1ee5: main () { Future f = showInfomation (); f . then (( data ) => notifyFinish ( data )) . catchError (( e ) => print ( 'L\u1ed7i x\u1ea3y ra - ' + e . toString ())); secondFunction (); } B\u1ea1n h\u00e3y throw m\u1ed9t Exception trong h\u00e0m getInfomation, ho\u1eb7c showInfomation \u0111\u1ec3 xem l\u1ed7i b\u1eaft \u0111\u01b0\u1ee3c. V\u00ed d\u1ee5 ph\u00e1t sinh l\u1ed7i \u1edf h\u00e0m getInfomation getInfomation () { for ( int i = 1 ; i <= 1000 ; i ++ ); throw new Exception ( 'Kh\u00f4ng l\u1ea5y \u0111\u01b0\u1ee3c th\u00f4ng tin' ); return info ; } 2. Generator function \u00b6 C\u00f3 th\u1ec3 hi\u1ec3u Generator function l\u00e0 m\u1ed9t function, c\u00f3 kh\u1ea3 n\u0103ng t\u1ea1m ng\u01b0ng th\u1ef1c thi tr\u01b0\u1edbc khi h\u00e0m k\u1ebft th\u00fac, v\u00e0 c\u00f3 th\u1ec3 ti\u1ebfp t\u1ee5c ch\u1ea1y \u1edf 1 th\u1eddi \u0111i\u1ec3m kh\u00e1c. Synchronous generator: Tr\u1ea3 v\u1ec1 1 Iterable object. sync* Asynchronous generator: Tr\u1ea3 v\u1ec1 1 Stream object. async* M\u1ed9t s\u1ed1 t\u1eeb kh\u00f3a th\u01b0\u1eddng s\u1eed d\u1ee5ng trong generator function: sync* , async* : \u0111\u00e1nh d\u1ea5u l\u00e0 generator function. yield : ph\u00e1t ra c\u00e1c gi\u00e1 tr\u1ecb. yield* : ph\u00e1t ra c\u00e1c gi\u00e1 tr\u1ecb n\u1ebfu generator l\u00e0 \u0111\u1ec7 quy. await for : \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 ho\u1ea1t \u0111\u1ed9ng t\u1ed1t v\u1edbi stream. Iterable naturalsTo ( n ) sync * { int k = 0 ; while ( k < n ) yield k ++ ; } Stream asynchronousNaturalsTo ( n ) async * { int k = 0 ; while ( k < n ) yield k ++ ; } Iterable naturalsDownFrom ( n ) sync * { if ( n > 0 ) { yield n ; yield * naturalsDownFrom ( n - 1 ); } } 3. Stream \u00b6 Cung c\u1ea5p m\u1ed9t chu\u1ed7i d\u1eef li\u1ec7u kh\u00f4ng \u0111\u1ed3ng b\u1ed9(t\u01b0\u01a1ng t\u1ef1 v\u1edbi observables trong Rx, LiveData trong Android JetPack). StreamController \u00b6 C\u00f3 ch\u1ee9a 1 simple stream. s\u1eed d\u1ee5ng \u0111\u1ec3 t\u1ea1o stream, ki\u1ec3m so\u00e1t stream(listen on, push event). StreamController < String > streamController = new StreamController (); streamController . stream . listen (( data ) { print ( \"DataReceived: \" + data ); }, onDone: () { print ( \"Task Done\" ); }, onError: ( error ) { print ( \"Some Error\" ); }); streamController . add ( \"This a test data\" ); StreamSubscription \u00b6 Cung c\u1ea5p c\u00e1c s\u1ef1 ki\u1ec7n cho listener v\u00e0 gi\u1eef c\u00e1c callbacks \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 x\u1eed l\u00fd c\u00e1c s\u1ef1 ki\u1ec7n. Khi b\u1ea1n \u0111\u1ecbnh ngh\u0129a 1 listener, b\u1ea1n s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c StreamSubscription object. StreamSubscription s\u1ebd th\u00f4ng b\u00e1o cho b\u1ea1n bi\u1ebft c\u00f3 \u0111i\u1ec1u g\u00ec \u0111\u1eb7c bi\u1ec7t x\u1ea3y ra trong Stream(Gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c \u0111\u1ea9y ra kh\u1ecfi Stream, c\u00f3 l\u1ed7i x\u1ea3y ra, Stream b\u1ecb hu\u1ef7...). Do \u0111\u00f3, StreamSubscription c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 t\u1ea1m d\u1eebng/ti\u1ebfp t\u1ee5c event t\u1eeb c\u00e1c stream khi \u0111\u01b0\u1ee3c y\u00eau c\u1ea7u. Ch\u00fa \u00fd: Ph\u1ea3i \u0111\u1ea3m b\u1ea3o h\u1ee7y StreamSubscription khi kh\u00f4ng c\u1ea7n thi\u1ebft. final StreamSubscription subscription = ctrl . stream . where (( value ) => ( value % 2 == 0 )) . listen (( value ) => print ( ' $ value ' )); subscription . onData (( value ) => print ( \"sub_ $ value \" )); StreamTransformer \u00b6 \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 x\u1eed l\u00fd d\u1eef li\u1ec7u tr\u01b0\u1edbc khi d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c \u0111\u1ea9y ra ngo\u00e0i. \u0110\u1ea7u ra c\u1ee7a StreamTransformer l\u00e0 1 Stream. M\u1ed9t StreamTransformer c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng trong 1 s\u1ed1 qu\u00e1 tr\u00ecnh nh\u01b0: Filtering: l\u1ecdc d\u1eef li\u1ec7u theo 1 \u0111\u1ecbnh ngh\u0129a n\u00e0o \u0111\u00f3. Regrouping: T\u1eadp h\u1ee3p c\u00e1c d\u1eef li\u1ec7u. Modification: Ch\u1ec9nh s\u1eeda d\u1eef li\u1ec7u. Ch\u00e8n d\u1eef li\u1ec7u v\u00e0o 1 lu\u1ed3ng kh\u00e1c. Buffering. Processing: Th\u1ef1c hi\u1ec7n 1 h\u00e0nh \u0111\u1ed9ng/ ho\u1ea1t \u0111\u1ed9ng n\u00e0o \u0111\u00f3 d\u1ef1a v\u00e0o d\u1eef li\u1ec7u. v.v... \u0110\u1ec3 t\u1ea1o ra 1 StreamTransformer , s\u1eed d\u1ee5ng factory constructor fromHandlers() . V\u00e0 \u0111\u1ec3 b\u1eaft \u0111\u1ea7u s\u1eed d\u1ee5ng StreamTransformer cho Stream th\u00ec g\u1ecdi method transform() v\u00e0 truy\u1ec1n v\u00e0o 1 StreamTransformer StreamTransformer < S , T > . fromHandlers ({ void handleData ( S data , EventSink < T > sink ), void handleError ( Object error , StackTrace stackTrace , EventSink < T > sink ), void handleDone ( EventSink < T > sink ) }) stringStream . transform ( new StreamTransformer < String , String > . fromHandlers ( handleData: ( String value , EventSink < String > sink ) { sink . add ( value ); sink . add ( value ); // Duplicate the incoming events. })); C\u00f3 2 lo\u1ea1i Stream : Single-subscription Stream , Broadcast Streams . Single-subscription Stream: \u00b6 L\u00e0 lo\u1ea1i Stream ch\u1ec9 cho ph\u00e9p t\u1ea1o duy nh\u1ea5t 1 listener. Khi th\u00eam 1 listener tr\u1ecf v\u00e0o Stream n\u00e0y, th\u00ec n\u00f3 s\u1ebd hu\u1ef7 \u0111i listener \u0111\u1ea7u ti\u00ean. C\u00e1ch \u0111\u1ec3 t\u1ea1o ra 1 Single-subscription Stream l\u00e0 s\u1eed d\u1ee5ng StreamController v\u1edbi constructor m\u1eb7c \u0111\u1ecbnh. V\u00ed d\u1ee5 v\u1ec1 Single-subcription Stream: void main () { // // Initialize a \"Single-Subscription\" Stream controller // final StreamController ctrl = StreamController (); // // Initialize a single listener which simply prints the data // as soon as it receives it // final StreamSubscription subscription = ctrl . stream . listen (( data ) => print ( ' $ data ' )); // final StreamSubscription subscription1 = ctrl.stream.listen((data) => print('$data')); // wrong and throw exception 'Bad state: Stream has already been listened to.' // // We here add the data that will flow inside the stream // ctrl . sink . add ( 'my name' ); ctrl . sink . add ( 1234 ); ctrl . sink . add ({ 'a' : 'element A' , 'b' : 'element B' }); ctrl . sink . add ( 123.45 ); // // We release the StreamController // ctrl . close (); } Broadcast Streams \u00b6 Ng\u01b0\u1ee3c l\u1ea1i v\u1edbi lo\u1ea1i tr\u00ean, n\u00f3 cho ph\u00e9p t\u1ea1o r\u1ea5t nhi\u1ec1u listener. C\u00f3 th\u1ec3 th\u00eam listener v\u00e0o Broadcast Streams b\u1ea5t c\u1ee9 l\u00fac n\u00e0o. Listener m\u1edbi s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c c\u00e1c event k\u1ec3 t\u1eeb th\u1eddi \u0111i\u1ec3m n\u00f3 b\u1eaft \u0111\u1ea7u \u0111\u0103ng k\u00fd Stream. \u0110\u1ec3 t\u1ea1o 1 Broadcast Streams , ta s\u1eed d\u1ee5ng factory constructor c\u1ee7a StreamController l\u00e0 StreamController.broadcast() . StreamController < String > streamController = new StreamController . broadcast (); main () { print ( \"Creating a StreamController...\" ); //First subscription streamController . stream . listen (( data ) { print ( \"DataReceived1: \" + data ); }, onDone: () { print ( \"Task Done1\" ); }, onError: ( error ) { print ( \"Some Error1\" ); }); //Second subscription streamController . stream . listen (( data ) { print ( \"DataReceived2: \" + data ); }, onDone: () { print ( \"Task Done2\" ); }, onError: ( error ) { print ( \"Some Error2\" ); }); streamController . add ( \"This a test data\" ); streamController . sink . add ( 'SINK' ); print ( \"code controller is here\" ); } T\u1ed5ng k\u1ebft \u00b6 B\u00e0i vi\u1ebft \u0111\u00e3 tr\u00ecnh b\u00e0y t\u1ed5ng quan v\u1ec1 x\u1eed l\u00fd \u0111\u1ed3ng b\u1ed9 v\u00e0 b\u1ea5t \u0111\u1ed3ng b\u1ed9 trong dart. \u0110\u1ec3 c\u00f3 c\u00e1i nh\u00ecn t\u1ed5ng quan h\u01a1n, t\u00f4i xin \u0111\u01b0a ra m\u1ed9t v\u00ed d\u1ee5 s\u1eed d\u1ee5ng k\u1ebft h\u1ee3p nh\u1eefng \u0111i\u1ec1u \u0111\u00e3 tr\u00ecnh b\u00e0y b\u00ean tr\u00ean Future < int > sumStream ( Stream < int > stream ) async { var sum = 0 ; await for ( var value in stream ) { sum += value ; } return sum ; } Stream < int > countStream ( int to ) async * { for ( int i = 1 ; i <= to ; i ++ ) { if ( i == 5 ) throw Exception ; yield i ; // yield will throw value to stream listen and handle. await Future . delayed ( Duration ( seconds: 1 )); } } secondFunction () { print ( 'secondFunction' ); } main () async { var stream = countStream ( 10 ); stream . listen (( data ) => { print ( data )}, onDone: () => { print ( 'stream onDone' )}, onError: ( err ) => { print ( 'error: $ err ' ) }); // this is a single stream subcription, so it can listen only once. secondFunction (); Future z = new Future . sync (() => print ( 'bla' )); // this function listen stream once above, so can not execute these comment code below // var sum = await sumStream(stream).catchError((err) => {print('error: $err')}); // print(sum); // 55 } B\u00e0i vi\u1ebft xin \u0111\u01b0\u1ee3c d\u1eebng t\u1ea1i \u0111\u00e2y. Mong b\u1ea1n c\u00f3 th\u1ec3 hi\u1ec3u v\u00e0 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c c\u00e1c Asynchronous operations \u0111\u1ed3ng b\u1ed9 trong Dart. Trong qu\u00e1 tr\u00ecnh t\u00ecm hi\u1ec3u kh\u00f4ng tr\u00e1nh kh\u1ecfi sai s\u00f3t, hy v\u1ecdng \u0111\u01b0\u1ee3c s\u1ef1 g\u00f3p \u00fd c\u1ee7a m\u1ecdi ng\u01b0\u1eddi.","title":"Dart Async"},{"location":"dart/dart_async_intro/#1-future","text":"Future l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng Future \u0111\u1ea1i di\u1ec7n cho m\u1ed9t t\u00ednh to\u00e1n m\u00e0 gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 c\u00f3 th\u1ec3 ch\u01b0a c\u00f3 s\u1eb5n. Future tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a t\u00ednh to\u00e1n khi n\u00f3 ho\u00e0n th\u00e0nh v\u00e0o m\u1ed9t th\u1eddi \u0111i\u1ec3m n\u00e0o \u0111\u00f3 trong t\u01b0\u01a1ng lai. Future th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho c\u00e1c t\u00ednh to\u00e1n c\u00f3 kh\u1ea3 n\u0103ng d\u00e0i nh\u01b0 I/O v\u00e0 t\u01b0\u01a1ng t\u00e1c v\u1edbi ng\u01b0\u1eddi d\u00f9ng. \u0110\u1ec3 l\u00e0m vi\u1ec7c v\u1edbi Future , b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng async v\u00e0 await ho\u1eb7c Future API. Function b\u1ea5t \u0111\u1ed3ng b\u1ed9 \u0111\u01b0\u1ee3c khai b\u00e1o c\u00f3 t\u1eeb kh\u00f3a async ph\u00eda sau, v\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng tr\u1ea3 v\u1ec1 c\u1ee7a function l\u00e0 Future\\ , v\u1edbi T l\u00e0 ki\u1ec3u bi\u1ec3u th\u1ee9c return tr\u1ea3 v\u1ec1. N\u1ebfu m\u1ed9t function \u0111\u00e3 khai b\u00e1o l\u00e0 b\u1ea5t \u0111\u1ed3ng b\u1ed9 async th\u00ec trong function c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng th\u00eam t\u1eeb kh\u00f3a await - ch\u1edd cho bi\u1ec3u th\u1ee9c thi h\u00e0nh xong m\u1edbi thi h\u00e0nh c\u00e1c code ti\u1ebfp theo c\u1ee7a function. main () { Future f = showInfomation (); f . then (( data ) => notifyFinish ( data )) . catchError (( e ) => print ( 'L\u1ed7i x\u1ea3y ra - ' + e . toString ())); secondFunction (); } notifyFinish ( String s ) { print ( s ); } Future < String > showInfomation () async { var data = await getInfomation (); print ( 'This is your data -' + DateTime . now (). toString ()); print ( data ); return 'showInfomation Complete!' ; //Tr\u1ea3 v\u1ec1 chu\u1ed7i - ch\u1ee9a trong Future } const info = '#4fs358wredsfadsfdfdw' ; getInfomation () { return info ; } secondFunction () { print ( 'Th\u1eddi gian - ' + DateTime . now (). toString ()); } Future < String > showInfomation () async { var data = await getInfomation (); print ( 'This is your data -' + DateTime . now (). toString ()); print ( data ); return 'showInfomation Complete!' ; //Tr\u1ea3 v\u1ec1 chu\u1ed7i - ch\u1ee9a trong Future } Tr\u1ea3 v\u1ec1 t\u1eeb h\u00e0m async l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng Future. T\u1eeb \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0y, ta c\u00f3 th\u1ec3 g\u00e1n c\u00e1c h\u00e0m callback, \u0111\u01b0\u1ee3c ch\u1ea1y m\u1ed7i khi d\u1eef li\u1ec7u ho\u00e0n th\u00e0nh tr\u1ea3 v\u1ec1 b\u1edfi h\u00e0m async , \u0111\u1ec3 g\u00e1n h\u00e0m callback s\u1eed d\u1ee5ng ph\u01b0\u01a1ng th\u1ee9c: Future.then((data) => callBack(data)); main () { Future f = showInfomation (); f . then (( data ) => notifyFinish ( data )) . catchError (( e ) => print ( 'L\u1ed7i x\u1ea3y ra - ' + e . toString ())); secondFunction (); } N\u1ebfu mu\u1ed1n b\u1eaft l\u1ed7i trong h\u00e0m async c\u0169ng d\u00f9ng bi\u1ec3u th\u1ee9c try ... catch Ho\u1eb7c t\u1eeb \u0111\u1ed1i t\u01b0\u1ee3ng Future tr\u1ea3 v\u1ec1 th\u00ec s\u1eed d\u1ee5ng ph\u01b0\u01a1ng th\u1ee9c catchError() D\u00f9ng bi\u1ec3u th\u1ee9c try ... catch Future < String > showInfomation () async { var data ; try { data = await getInfomation (); } catch ( e ) { //X\u1eed l\u00fd l\u1ed7i }; print ( 'This is your data -' + DateTime . now (). toString ()); print ( data ); return 'showInfomation Complete!' ; } N\u1ebfu kh\u00f4ng b\u1eaft l\u1ed7i tr\u1ef1c ti\u1ebfp t\u1eeb async , c\u00f3 th\u1ec3 b\u1eaft l\u1ed7i \u1edf Future , \u0111\u00e2y l\u00e0 v\u00ed d\u1ee5: main () { Future f = showInfomation (); f . then (( data ) => notifyFinish ( data )) . catchError (( e ) => print ( 'L\u1ed7i x\u1ea3y ra - ' + e . toString ())); secondFunction (); } B\u1ea1n h\u00e3y throw m\u1ed9t Exception trong h\u00e0m getInfomation, ho\u1eb7c showInfomation \u0111\u1ec3 xem l\u1ed7i b\u1eaft \u0111\u01b0\u1ee3c. V\u00ed d\u1ee5 ph\u00e1t sinh l\u1ed7i \u1edf h\u00e0m getInfomation getInfomation () { for ( int i = 1 ; i <= 1000 ; i ++ ); throw new Exception ( 'Kh\u00f4ng l\u1ea5y \u0111\u01b0\u1ee3c th\u00f4ng tin' ); return info ; }","title":"1. Future"},{"location":"dart/dart_async_intro/#2-generator-function","text":"C\u00f3 th\u1ec3 hi\u1ec3u Generator function l\u00e0 m\u1ed9t function, c\u00f3 kh\u1ea3 n\u0103ng t\u1ea1m ng\u01b0ng th\u1ef1c thi tr\u01b0\u1edbc khi h\u00e0m k\u1ebft th\u00fac, v\u00e0 c\u00f3 th\u1ec3 ti\u1ebfp t\u1ee5c ch\u1ea1y \u1edf 1 th\u1eddi \u0111i\u1ec3m kh\u00e1c. Synchronous generator: Tr\u1ea3 v\u1ec1 1 Iterable object. sync* Asynchronous generator: Tr\u1ea3 v\u1ec1 1 Stream object. async* M\u1ed9t s\u1ed1 t\u1eeb kh\u00f3a th\u01b0\u1eddng s\u1eed d\u1ee5ng trong generator function: sync* , async* : \u0111\u00e1nh d\u1ea5u l\u00e0 generator function. yield : ph\u00e1t ra c\u00e1c gi\u00e1 tr\u1ecb. yield* : ph\u00e1t ra c\u00e1c gi\u00e1 tr\u1ecb n\u1ebfu generator l\u00e0 \u0111\u1ec7 quy. await for : \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 ho\u1ea1t \u0111\u1ed9ng t\u1ed1t v\u1edbi stream. Iterable naturalsTo ( n ) sync * { int k = 0 ; while ( k < n ) yield k ++ ; } Stream asynchronousNaturalsTo ( n ) async * { int k = 0 ; while ( k < n ) yield k ++ ; } Iterable naturalsDownFrom ( n ) sync * { if ( n > 0 ) { yield n ; yield * naturalsDownFrom ( n - 1 ); } }","title":"2. Generator function"},{"location":"dart/dart_async_intro/#3-stream","text":"Cung c\u1ea5p m\u1ed9t chu\u1ed7i d\u1eef li\u1ec7u kh\u00f4ng \u0111\u1ed3ng b\u1ed9(t\u01b0\u01a1ng t\u1ef1 v\u1edbi observables trong Rx, LiveData trong Android JetPack).","title":"3. Stream"},{"location":"dart/dart_async_intro/#streamcontroller","text":"C\u00f3 ch\u1ee9a 1 simple stream. s\u1eed d\u1ee5ng \u0111\u1ec3 t\u1ea1o stream, ki\u1ec3m so\u00e1t stream(listen on, push event). StreamController < String > streamController = new StreamController (); streamController . stream . listen (( data ) { print ( \"DataReceived: \" + data ); }, onDone: () { print ( \"Task Done\" ); }, onError: ( error ) { print ( \"Some Error\" ); }); streamController . add ( \"This a test data\" );","title":"StreamController"},{"location":"dart/dart_async_intro/#streamsubscription","text":"Cung c\u1ea5p c\u00e1c s\u1ef1 ki\u1ec7n cho listener v\u00e0 gi\u1eef c\u00e1c callbacks \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 x\u1eed l\u00fd c\u00e1c s\u1ef1 ki\u1ec7n. Khi b\u1ea1n \u0111\u1ecbnh ngh\u0129a 1 listener, b\u1ea1n s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c StreamSubscription object. StreamSubscription s\u1ebd th\u00f4ng b\u00e1o cho b\u1ea1n bi\u1ebft c\u00f3 \u0111i\u1ec1u g\u00ec \u0111\u1eb7c bi\u1ec7t x\u1ea3y ra trong Stream(Gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c \u0111\u1ea9y ra kh\u1ecfi Stream, c\u00f3 l\u1ed7i x\u1ea3y ra, Stream b\u1ecb hu\u1ef7...). Do \u0111\u00f3, StreamSubscription c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 t\u1ea1m d\u1eebng/ti\u1ebfp t\u1ee5c event t\u1eeb c\u00e1c stream khi \u0111\u01b0\u1ee3c y\u00eau c\u1ea7u. Ch\u00fa \u00fd: Ph\u1ea3i \u0111\u1ea3m b\u1ea3o h\u1ee7y StreamSubscription khi kh\u00f4ng c\u1ea7n thi\u1ebft. final StreamSubscription subscription = ctrl . stream . where (( value ) => ( value % 2 == 0 )) . listen (( value ) => print ( ' $ value ' )); subscription . onData (( value ) => print ( \"sub_ $ value \" ));","title":"StreamSubscription"},{"location":"dart/dart_async_intro/#streamtransformer","text":"\u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 x\u1eed l\u00fd d\u1eef li\u1ec7u tr\u01b0\u1edbc khi d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c \u0111\u1ea9y ra ngo\u00e0i. \u0110\u1ea7u ra c\u1ee7a StreamTransformer l\u00e0 1 Stream. M\u1ed9t StreamTransformer c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng trong 1 s\u1ed1 qu\u00e1 tr\u00ecnh nh\u01b0: Filtering: l\u1ecdc d\u1eef li\u1ec7u theo 1 \u0111\u1ecbnh ngh\u0129a n\u00e0o \u0111\u00f3. Regrouping: T\u1eadp h\u1ee3p c\u00e1c d\u1eef li\u1ec7u. Modification: Ch\u1ec9nh s\u1eeda d\u1eef li\u1ec7u. Ch\u00e8n d\u1eef li\u1ec7u v\u00e0o 1 lu\u1ed3ng kh\u00e1c. Buffering. Processing: Th\u1ef1c hi\u1ec7n 1 h\u00e0nh \u0111\u1ed9ng/ ho\u1ea1t \u0111\u1ed9ng n\u00e0o \u0111\u00f3 d\u1ef1a v\u00e0o d\u1eef li\u1ec7u. v.v... \u0110\u1ec3 t\u1ea1o ra 1 StreamTransformer , s\u1eed d\u1ee5ng factory constructor fromHandlers() . V\u00e0 \u0111\u1ec3 b\u1eaft \u0111\u1ea7u s\u1eed d\u1ee5ng StreamTransformer cho Stream th\u00ec g\u1ecdi method transform() v\u00e0 truy\u1ec1n v\u00e0o 1 StreamTransformer StreamTransformer < S , T > . fromHandlers ({ void handleData ( S data , EventSink < T > sink ), void handleError ( Object error , StackTrace stackTrace , EventSink < T > sink ), void handleDone ( EventSink < T > sink ) }) stringStream . transform ( new StreamTransformer < String , String > . fromHandlers ( handleData: ( String value , EventSink < String > sink ) { sink . add ( value ); sink . add ( value ); // Duplicate the incoming events. })); C\u00f3 2 lo\u1ea1i Stream : Single-subscription Stream , Broadcast Streams .","title":"StreamTransformer"},{"location":"dart/dart_async_intro/#single-subscription-stream","text":"L\u00e0 lo\u1ea1i Stream ch\u1ec9 cho ph\u00e9p t\u1ea1o duy nh\u1ea5t 1 listener. Khi th\u00eam 1 listener tr\u1ecf v\u00e0o Stream n\u00e0y, th\u00ec n\u00f3 s\u1ebd hu\u1ef7 \u0111i listener \u0111\u1ea7u ti\u00ean. C\u00e1ch \u0111\u1ec3 t\u1ea1o ra 1 Single-subscription Stream l\u00e0 s\u1eed d\u1ee5ng StreamController v\u1edbi constructor m\u1eb7c \u0111\u1ecbnh. V\u00ed d\u1ee5 v\u1ec1 Single-subcription Stream: void main () { // // Initialize a \"Single-Subscription\" Stream controller // final StreamController ctrl = StreamController (); // // Initialize a single listener which simply prints the data // as soon as it receives it // final StreamSubscription subscription = ctrl . stream . listen (( data ) => print ( ' $ data ' )); // final StreamSubscription subscription1 = ctrl.stream.listen((data) => print('$data')); // wrong and throw exception 'Bad state: Stream has already been listened to.' // // We here add the data that will flow inside the stream // ctrl . sink . add ( 'my name' ); ctrl . sink . add ( 1234 ); ctrl . sink . add ({ 'a' : 'element A' , 'b' : 'element B' }); ctrl . sink . add ( 123.45 ); // // We release the StreamController // ctrl . close (); }","title":"Single-subscription Stream:"},{"location":"dart/dart_async_intro/#broadcast-streams","text":"Ng\u01b0\u1ee3c l\u1ea1i v\u1edbi lo\u1ea1i tr\u00ean, n\u00f3 cho ph\u00e9p t\u1ea1o r\u1ea5t nhi\u1ec1u listener. C\u00f3 th\u1ec3 th\u00eam listener v\u00e0o Broadcast Streams b\u1ea5t c\u1ee9 l\u00fac n\u00e0o. Listener m\u1edbi s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c c\u00e1c event k\u1ec3 t\u1eeb th\u1eddi \u0111i\u1ec3m n\u00f3 b\u1eaft \u0111\u1ea7u \u0111\u0103ng k\u00fd Stream. \u0110\u1ec3 t\u1ea1o 1 Broadcast Streams , ta s\u1eed d\u1ee5ng factory constructor c\u1ee7a StreamController l\u00e0 StreamController.broadcast() . StreamController < String > streamController = new StreamController . broadcast (); main () { print ( \"Creating a StreamController...\" ); //First subscription streamController . stream . listen (( data ) { print ( \"DataReceived1: \" + data ); }, onDone: () { print ( \"Task Done1\" ); }, onError: ( error ) { print ( \"Some Error1\" ); }); //Second subscription streamController . stream . listen (( data ) { print ( \"DataReceived2: \" + data ); }, onDone: () { print ( \"Task Done2\" ); }, onError: ( error ) { print ( \"Some Error2\" ); }); streamController . add ( \"This a test data\" ); streamController . sink . add ( 'SINK' ); print ( \"code controller is here\" ); }","title":"Broadcast Streams"},{"location":"dart/dart_async_intro/#tong-ket","text":"B\u00e0i vi\u1ebft \u0111\u00e3 tr\u00ecnh b\u00e0y t\u1ed5ng quan v\u1ec1 x\u1eed l\u00fd \u0111\u1ed3ng b\u1ed9 v\u00e0 b\u1ea5t \u0111\u1ed3ng b\u1ed9 trong dart. \u0110\u1ec3 c\u00f3 c\u00e1i nh\u00ecn t\u1ed5ng quan h\u01a1n, t\u00f4i xin \u0111\u01b0a ra m\u1ed9t v\u00ed d\u1ee5 s\u1eed d\u1ee5ng k\u1ebft h\u1ee3p nh\u1eefng \u0111i\u1ec1u \u0111\u00e3 tr\u00ecnh b\u00e0y b\u00ean tr\u00ean Future < int > sumStream ( Stream < int > stream ) async { var sum = 0 ; await for ( var value in stream ) { sum += value ; } return sum ; } Stream < int > countStream ( int to ) async * { for ( int i = 1 ; i <= to ; i ++ ) { if ( i == 5 ) throw Exception ; yield i ; // yield will throw value to stream listen and handle. await Future . delayed ( Duration ( seconds: 1 )); } } secondFunction () { print ( 'secondFunction' ); } main () async { var stream = countStream ( 10 ); stream . listen (( data ) => { print ( data )}, onDone: () => { print ( 'stream onDone' )}, onError: ( err ) => { print ( 'error: $ err ' ) }); // this is a single stream subcription, so it can listen only once. secondFunction (); Future z = new Future . sync (() => print ( 'bla' )); // this function listen stream once above, so can not execute these comment code below // var sum = await sumStream(stream).catchError((err) => {print('error: $err')}); // print(sum); // 55 } B\u00e0i vi\u1ebft xin \u0111\u01b0\u1ee3c d\u1eebng t\u1ea1i \u0111\u00e2y. Mong b\u1ea1n c\u00f3 th\u1ec3 hi\u1ec3u v\u00e0 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c c\u00e1c Asynchronous operations \u0111\u1ed3ng b\u1ed9 trong Dart. Trong qu\u00e1 tr\u00ecnh t\u00ecm hi\u1ec3u kh\u00f4ng tr\u00e1nh kh\u1ecfi sai s\u00f3t, hy v\u1ecdng \u0111\u01b0\u1ee3c s\u1ef1 g\u00f3p \u00fd c\u1ee7a m\u1ecdi ng\u01b0\u1eddi.","title":"T\u1ed5ng k\u1ebft"},{"location":"dart/dart_core/","text":"Trong b\u00e0i vi\u1ebft Tr\u01b0\u1edbc m\u00ecnh \u0111\u00e3 h\u01b0\u1edbng d\u1eabn c\u00e1c b\u1ea1n c\u00e0i \u0111\u1eb7t m\u00f4i tr\u01b0\u1eddng v\u00e0 setup c\u00e1c ki\u1ec3u d\u1ef1 \u00e1n Dart tr\u00ean Intellij IDEA. \u1ede b\u00e0i vi\u1ebft n\u00e0y m\u00ecnh s\u1ebd m\u00f4 t\u1ea3 chi ti\u1ebft v\u1ec1 c\u00fa ph\u00e1p c\u0169ng nh\u01b0 c\u00e1c t\u00ednh n\u0103ng c\u1ee7a Dart . N\u1ebfu c\u00e1c b\u1ea1n v\u1eabn ch\u01b0a s\u1eb5n s\u00e0ng c\u00e0i Dart SDK l\u00ean m\u00e1y t\u00ednh th\u00ec d\u00f9ng t\u1ea1m Dartpad \u0111\u1ec3 ch\u1ea1y th\u1eed code nh\u00e9 B\u1ea5m v\u00e0o n\u00fat \u0111\u1ec3 compile v\u00e0 run code. // Define a function. printInteger ( int aNumber ) { print ( 'The number is $ aNumber .' ); // Print to console. } // This is where the app starts executing. main () { var number = 42 ; // Declare and initialize a variable. printInteger ( number ); // Call a function. } Important concepts \u00b6 Khi b\u1ea1n code Dart language, h\u00e3y lu\u00f4n ghi nh\u1edb nh\u1eefng kh\u00e1i ni\u1ec7m sau trong \u0111\u1ea7u: M\u1ecdi th\u1ee9 b\u1ea1n g\u00e1n v\u00e0o c\u00e1c bi\u1ebfn (variable) \u0111\u1ec1u l\u00e0 m\u1ed9t object , v\u00e0 m\u1ed7i object l\u00e0 m\u1ed9t instance c\u1ee7a class . Ngay c\u1ea3 numbers, functions, v\u00e0 null c\u0169ng l\u00e0 c\u00e1c objects . T\u1ea5t c\u1ea3 objects \u0111\u01b0\u1ee3c k\u1ebf th\u1eeba t\u1eeb [Object][] class. M\u1eb7c d\u00f9 Dart l\u00e0 ng\u00f4n ng\u1eef strongly typed (ch\u00fa tr\u1ecdng v\u00e0o ki\u1ec3u d\u1eef li\u1ec7u), nh\u01b0ng type annotations l\u1ea1i l\u00e0 tu\u1ef3 ch\u1ecdn v\u00ec Dart c\u00f3 th\u1ec3 t\u1ef1 suy ra ki\u1ec3u d\u1ef1a v\u00e0o gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn. V\u00ed d\u1ee5 trong \u0111o\u1ea1n code tr\u00ean, number s\u1ebd mang ki\u1ec3u int . Khi b\u1ea1n kh\u00f4ng mong \u0111\u1ee3i m\u1ed9t ki\u1ec3u nh\u1ea5t \u0111\u1ecbnh n\u00e0o, h\u00e3y s\u1eed d\u1ee5ng ki\u1ec3u dynamic . Dart h\u1ed7 tr\u1ee3 generic types, v\u00ed d\u1ee5 nh\u01b0 List<int> (m\u1ed9t danh s\u00e1ch c\u00e1c s\u1ed1 integers) ho\u1eb7c List<dynamic> (m\u1ed9t danh s\u00e1ch c\u00e1c objects mang ki\u1ec3u b\u1ea5t k\u1ef3). Dart h\u1ed7 tr\u1ee3 top-level functions (v\u00ed d\u1ee5 nh\u01b0 main() ), c\u0169ng nh\u01b0 c\u00e1c functions g\u1eafn li\u1ec1n v\u1edbi m\u1ed9t class ho\u1eb7c object (t\u01b0\u01a1ng \u1ee9ng v\u1edbi static v\u00e0 instance methods ). B\u1ea1n c\u0169ng c\u00f3 th\u1ec3 t\u1ea1o ra functions b\u00ean trong functions (g\u1ecdi l\u00e0 nested ho\u1eb7c local functions ). T\u01b0\u01a1ng t\u1ef1, Dart h\u1ed7 tr\u1ee3 top-level variables , c\u0169ng nh\u01b0 c\u00e1c variables g\u1eafn li\u1ec1n v\u1edbi m\u1ed9t class ho\u1eb7c object (st\u01b0\u01a1ng \u1ee9ng v\u1edbi static v\u00e0 instance variables ). Instance variables \u0111\u00f4i l\u00fac \u0111\u01b0\u1ee3c bi\u1ebft t\u1edbi v\u1edbi t\u00ean g\u1ecdi fields ho\u1eb7c properties . Kh\u00f4ng gi\u1ed1ng v\u1edbi Java, Dart kh\u00f4ng c\u00f3 keywords public , protected , private . N\u1ebfu m\u1ed9t bi\u1ebfn (identifier) b\u1eaft \u0111\u1ea7u v\u1edbi d\u1ea5u underscore (_), N\u00f3 s\u1ebd l\u00e0 private trong library c\u1ee7a n\u00f3 (V\u00ed d\u1ee5 khi b\u1ea1n import th\u01b0 vi\u1ec7n \u0111\u00f3 v\u00e0o th\u00ec ch\u00fang s\u1ebd ko th\u1ec3 d\u00f9ng b\u00ean ngo\u00e0i th\u01b0 vi\u1ec7n). Chi ti\u1ebft h\u01a1n t\u1ea1i Libraries and visibility . Identifiers c\u00f3 th\u1ec3 b\u1eaft \u0111\u1ea7u b\u1eb1ng ch\u1eef c\u00e1i ho\u1eb7c d\u1ea5u g\u1ea1ch d\u01b0\u1edbi (_), theo sau l\u00e0 b\u1ea5t k\u1ef3 s\u1ef1 k\u1ebft h\u1ee3p n\u00e0o c\u1ee7a c\u00e1c k\u00fd t\u1ef1 \u0111\u00f3 c\u00f9ng v\u1edbi ch\u1eef s\u1ed1.. \u0110\u00f4i khi, vi\u1ec7c nh\u00ecn nh\u1eadn m\u1ed9t th\u1ee9 n\u00e0o \u0111\u00f3 trong Dart l\u00e0 m\u1ed9t expression hay m\u1ed9t statement c\u00f3 th\u1ec3 tr\u1edf n\u00ean quan tr\u1ecdng, do \u0111\u00f3 vi\u1ec7c s\u1eed d\u1ee5ng 2 t\u1eeb ng\u1eef \u0111\u1ec3 m\u00f4 t\u1ea3 s\u1ebd r\u1ea5t h\u1eefu \u00edch. Dart tools c\u00f3 th\u1ec3 th\u00f4ng b\u00e1o 2 lo\u1ea1i v\u1ea5n \u0111\u1ec1 khi th\u1ef1c thi: warnings v\u00e0 errors . Warnings ch\u1ec9 \u0111\u01a1n gi\u1ea3n ch\u1ec9 ra nh\u1eefng \u0111o\u1ea1n code c\u00f3 th\u1ec3 kh\u00f4ng ch\u1ea1y \u0111\u00fang nh\u01b0ng ch\u00fang kh\u00f4ng ng\u0103n ch\u01b0\u01a1ng tr\u00ecnh c\u1ee7a b\u1ea1n th\u1ef1c thi. Errors c\u00f3 th\u1ec3 l\u00e0 l\u1ed7i x\u1ea3y ra l\u00fac compile-time ho\u1eb7c run-time . Compile-time hi\u1ec3n nhi\u00ean s\u1ebd khi\u1ebfn code b\u1ea1n kh\u00f4ng ch\u1ea1y \u0111\u01b0\u1ee3c; K\u1ebft qu\u1ea3 c\u1ee7a run-time error l\u1ea1i l\u00e0 nh\u1eefng exception \u0111\u01b0\u1ee3c throw ra khi ch\u1ea1y. Variables \u00b6 \u0110\u1ec3 khai b\u00e1o m\u1ed9t bi\u1ebfn name tham chi\u1ebfu t\u1edbi String object v\u1edbi gi\u00e1 tr\u1ecb \u201cBob\u201d, ta c\u00f3 th\u1ec3 d\u00f9ng 1 trong 3 c\u00e1ch sau: var name = 'Bob' ; dynamic name = 'Bob' ; String name = 'Bob' ; Default value \u00b6 Gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o c\u1ee7a m\u1ed9t bi\u1ebfn b\u1ea5t k\u1ef3 \u0111\u1ec1u l\u00e0 null . int lineCount ; assert ( lineCount == null ); Final and const \u00b6 N\u1ebfu b\u1ea1n kh\u00f4ng mu\u1ed1n gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn b\u1ecb thay \u0111\u1ed5i, h\u00e3y s\u1eed d\u1ee5ng final ho\u1eb7c const thay v\u00ec d\u00f9ng var/type ; Vi\u1ec7c hi\u1ec3u r\u00f5 nguy\u00ean l\u00fd ho\u1ea1t \u0111\u1ed9ng final v\u1edbi const kh\u00f4ng h\u1ec1 \u0111\u01a1n gi\u1ea3n m\u1ed9t ch\u00fat n\u00e0o final name = 'Bob' ; // Without a type annotation // name = 'Alice'; // Uncommenting this causes an error: Error: Setter not found: 'name'. final String nickname = 'Bobby' ; // With a type annotation const bar = 1000000 ; // Unit of pressure (dynes/cm2) const double atm = 1.01325 * bar ; // Standard atmosphere final ngh\u0129a l\u00e0 single-assignment M\u1ed7i m\u1ed9t bi\u1ebfn final ho\u1eb7c m\u1ed9t thu\u1ed9c t\u00ednh ph\u1ea3i c\u00f3 m\u1ed9t kh\u1edfi t\u1ea1o. V\u00e0 m\u1ed9t khi b\u1ea1n \u0111\u00e3 g\u00e1n gi\u00e1 tr\u1ecb cho bi\u1ebfn \u0111\u00f3 th\u00ec, b\u1ea1n s\u1ebd ko th\u1ec3 g\u00e1n l\u1ea1i cho n\u00f3 1 gi\u00e1 tr\u1ecb kh\u00e1c. final List finalList = new List (); finalList . addAll ([ 'one' , 'two' , 'three' ]); // Fail: can not assign new value/reference to final finalList finalList = new List (); // But you can change the content of the list finalList . clear (); finalList . forEach (( f ) => print ( f )); //empty const ngh\u0129a l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng b\u1ea5t bi\u1ebfn kh\u00f4ng \u0111\u1ed5i \u1edf th\u1eddi \u0111i\u1ec3m compile code. M\u1ed9t khi b\u1ea1n g\u00e1n gi\u00e1 tr\u1ecb t\u1edbi m\u1ed9t const object th\u00ec b\u1ea1n kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb \u0111\u00f3. V\u00e0 gi\u00e1 tr\u1ecb \u0111\u00f3 ph\u1ea3i \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o v\u00e0o th\u1eddi \u0111i\u1ec3m compile code, ch\u1ee9 ko ph\u1ea3i \u0111\u1ee3i t\u1edbi th\u1eddi \u0111i\u1ec3m run code. const List constList = const [ 'one' , 'two' , 'three' ]; constList . add ( 'four' ); // Can not add to immutable object constList = new List (); // Can not assign new value constList . clear (); // Can not change the content constList . forEach (( f ) => print ( \"const $ f \" )); N\u1ebfu const variable \u1edf class level, h\u00e3y s\u1eed d\u1ee5ng static const . Ngo\u00e0i ra, const kh\u00f4ng ch\u1ec9 \u0111\u01b0\u1ee3c d\u00f9ng trong \u0111\u1ecbnh ngh\u0129a h\u1eb1ng bi\u1ebfn (constant variables), m\u00e0 n\u00f3 c\u00f2n c\u00f3 th\u1ec3 t\u1ea1o ra h\u1eb1ng gi\u00e1 tr\u1ecb (constant values). // Note: [] t\u1ea1o ra m\u1ed9t list r\u1ed7ng. // const [] t\u1ea1o ra m\u1ed9t list r\u1ed7ng v\u00e0 kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i (EIL: empty, immutable list). var foo = const []; // foo \u0111ang l\u00e0 m\u1ed9t EIL. final bar = const []; // bar s\u1ebd lu\u00f4n lu\u00f4n l\u00e0 EIL. const baz = const []; // baz l\u00e0 m\u1ed9t compile-time constant EIL. // N\u1ebfu b\u1ea1n c\u1ed1 t\u00ecnh s\u1eeda gi\u00e1 tr\u1ecb c\u1ee7a const variable list s\u1ebd c\u00f3 l\u1ed7i // foo[0] = 1; // Cannot modify an unmodifiable list // B\u1ea1n c\u00f3 th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a m\u1ed9t non-final, non-const variable // Ngay c\u1ea3 khi n\u00f3 c\u00f3 gi\u00e1 tr\u1ecb = const value. foo = [ 1 , 2 ]; // B\u1ea1n kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a 2 bi\u1ebfn sau. // bar = []; // Unhandled exception. // baz = []; // Unhandled exception. Built-in types \u00b6 Dart h\u1ed7 tr\u1ee3 c\u00e1c ki\u1ec3u sau: numbers strings booleans lists (hay c\u00f2n g\u1ecdi l\u00e0 arrays) maps runes (bi\u1ec3u di\u1ec5n Unicode characters theo d\u1ea1ng chu\u1ed7i) symbols M\u00ecnh s\u1ebd ch\u1ec9 \u0111\u1ec1 c\u1eadp t\u1edbi c\u00e1c ki\u1ec3u m\u00e0 m\u00ecnh th\u00edch =)) Maps \u00b6 \u0110\u1ec3 kh\u1edfi t\u1ea1o m\u1ed9t Map object, ta c\u00f3 th\u1ec3 d\u00f9ng c\u00e1c c\u00e1ch sau: var gifts = { // Key: Value 'first' : 'partridge' , 'second' : 'turtledoves' , 'fifth' : 'golden rings' }; var gifts = Map (); gifts [ 'first' ] = 'partridge' ; gifts [ 'second' ] = 'turtledoves' ; gifts [ 'fifth' ] = 'golden rings' ; S\u1eed d\u1ee5ng .length s\u1ebd tr\u1ea3 v\u1ec1 s\u1ed1 l\u01b0\u1ee3ng c\u1eb7p key-value trong map: var gifts = { 'first' : 'partridge' }; gifts [ 'fourth' ] = 'calling birds' ; assert ( gifts . length == 2 ); Ch\u00fang ta c\u0169ng s\u1ebd g\u1eb7p l\u1ed7i n\u1ebfu c\u1ed1 t\u00ecnh thay \u0111\u1ed5i constant Map (constant values) final constantMap = const { 2 : 'helium' , 10 : 'neon' , 18 : 'argon' , }; // constantMap[2] = 'Helium'; // Uncommenting this causes an error: Cannot set value in unmodifiable Map. Runes \u00b6 Trong Dart, runes l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p m\u00e3 UTF-32 c\u1ee7a string. Unicode \u0111\u1ecbnh ngh\u0129a m\u1ed9t gi\u00e1 tr\u1ecb s\u1ed1 duy nh\u1ea5t cho m\u1ed7i k\u00fd t\u1ef1 g\u1ed3m ch\u1eef c\u00e1i, s\u1ed1 v\u00e0 k\u00fd hi\u1ec7u s\u1eed d\u1ee5ng trong h\u1ec7 th\u1ed1ng ch\u1eef vi\u1ebft tr\u00ean th\u1ebf gi\u1edbi. V\u00ec m\u1ed9t Dart string l\u00e0 s\u1ef1 n\u1ed1i ti\u1ebfp tu\u1ea7n t\u1ef1 c\u1ee7a c\u00e1c UTF-16 code units, bi\u1ec3u di\u1ec5n gi\u00e1 tr\u1ecb 32-bit Unicode trong m\u1ed9t string \u0111\u00f2i h\u1ecfi c\u00e1c c\u00fa ph\u00e1p \u0111\u1eb7c bi\u1ec7t. C\u00e1ch th\u00f4ng d\u1ee5ng \u0111\u1ec3 bi\u1ec3u di\u1ec5n m\u1ed9t m\u00e3 Unicode l\u00e0 \\uXXXX , \u1edf \u0111\u00e2y XXXX l\u00e0 m\u1ed9t chu\u1ed7i g\u1ed3m 4-ch\u1eef s\u1ed1 hexidecimal (h\u1ec7 th\u1eadp l\u1ee5c ph\u00e2n, c\u01a1 s\u1ed1 16). V\u00ed d\u1ee5, K\u00ed t\u1ef1 tr\u00e1i tim (\u2665) l\u00e0 \\u2665 . \u0110\u1ec3 bi\u1ec3u di\u1ec5n nhi\u1ec1u ho\u1eb7c \u00edt h\u01a1n 4 hex digits, ta \u0111\u1eb7t gi\u00e1 tr\u1ecb c\u1ee7a ch\u00fang trong d\u1ea5u ngo\u1eb7c nh\u1ecdn. V\u00ed d\u1ee5 v\u1edbi emoji ( ) s\u1ebd bi\u1ec3u di\u1ec5n l\u00e0 \\u{1f600} . String class c\u00f3 c\u00e1c thu\u1ed9c t\u00ednh m\u00e0 b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 l\u1ea5y th\u00f4ng v\u1ec1 rune. codeUnitAt v\u00e0 codeUnit properties tr\u1ea3 v\u1ec1 m\u00e3 16-bit. Ho\u1eb7c d\u00f9ng runes property \u0111\u1ec3 l\u1ea5y runes of a string . V\u00ed d\u1ee5 b\u00ean d\u01b0\u1edbi mi\u00eau t\u1ea3 m\u1ed1i quan h\u1ec7 gi\u1eefa runes, 16-bit code units, v\u00e0 32-bit code points. var clapping = ' \\u{1f44f} ' ; print ( clapping ); print ( clapping . codeUnits ); print ( clapping . runes . toList ()); Runes input = new Runes ( ' \\u2665 \\u{1f605} \\u{1f60e} \\u{1f47b} \\u{1f596} \\u{1f44d} ' ); print ( new String . fromCharCodes ( input )); S\u1ebd in ra \ud83d\udc4f [55357, 56399] [128079] \u2665 \ud83d\ude05 \ud83d\ude0e \ud83d\udc7b \ud83d\udd96 \ud83d\udc4d Functions \u00b6 V\u00ec Dart l\u00e0 true object-oriented language n\u00ean function c\u0169ng l\u00e0 object. B\u1ea1n c\u00f3 th\u1ec3 khai b\u00e1o 1 function theo c\u00e1c ki\u1ec3u b\u00ean d\u01b0\u1edbi: bool isNoble ( int atomicNumber ) { return _nobleGases [ atomicNumber ] != null ; } isNoble ( atomicNumber ) { return _nobleGases [ atomicNumber ] != null ; } bool isNoble ( int atomicNumber ) => _nobleGases [ atomicNumber ] != null ; Optional parameters \u00b6 Optional named parameters: S\u1eed d\u1ee5ng d\u1ea5u ngo\u1eb7c nh\u1ecdn {param1, param2, \u2026} Optional positional parameters: S\u1eed d\u1ee5ng d\u1ea5u ngo\u1eb7c vu\u00f4ng [param1, param2, \u2026] Default parameter values: S\u1eed d\u1ee5ng d\u1ea5u = \u0111\u1ec3 khai b\u00e1o gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho optional parameter String drink ({ String drinks = 'whisky' }) { return 'I am drink $ drinks ' ; } String say ( String from , String msg , [ String device ]) { var result = ' $ from says $ msg ' ; if ( device != null ) { result = ' $ result with a $ device ' ; } return result ; } print ( drink ()); print ( drink ( drinks: 'vodka' )); print ( say ( 'Bob' , 'Howdy' )); print ( say ( 'Bob' , 'Howdy' , 'smoke signal' )); s\u1ebd cho ra k\u1ebft qu\u1ea3: I am drink whisky I am drink vodka Bob says Howdy Bob says Howdy with a smoke signal The main() function \u00b6 T\u1ea5t c\u1ea3 c\u00e1c \u1ee9ng d\u1ee5ng \u0111\u1ec1u c\u00f3 m\u1ed9t h\u00e0m top-level main() . main() tr\u1ea3 v\u1ec3 ki\u1ec3u void v\u00e0 c\u00f3 tham s\u1ed1 tu\u1ef3 ch\u1ecdn l\u00e0 List<String> . void main ( List < String > arguments ) { print ( arguments ); assert ( arguments . length == 2 ); assert ( int . parse ( arguments [ 0 ]) == 1 ); assert ( arguments [ 1 ] == 'test' ); } Ch\u00fa \u00fd khi compile code n\u1ebfu mu\u1ed1n c\u00e1c c\u00e2u l\u1ec7nh assert c\u00f3 hi\u1ec7u l\u1ef1c th\u00ec b\u1ea1n nh\u1edb th\u00eam flag sau v\u00e0o nh\u00e9: $ dart --enable-asserts bin/main.dart 1 test Functions as first-class objects \u00b6 Dart cho ph\u00e9p truy\u1ec1n m\u1ed9t function v\u1edbi t\u01b0 c\u00e1ch l\u00e0 bi\u1ebfn c\u1ee7a m\u1ed9t function kh\u00e1c, v\u00e0 c\u0169ng c\u00f3 th\u1ec3 g\u00e1n m\u1ed9t function v\u00e0o m\u1ed9t bi\u1ebfn. void printElement ( int element ) { print ( element ); } var list = [ 1 , 2 , 3 ]; // Pass printElement as a parameter. list . forEach ( printElement ); var loudify = ( msg ) => '!!! ${ msg . toUpperCase () } !!!' ; assert ( loudify ( 'hello' ) == '!!! HELLO !!!' ); Anonymous functions \u00b6 B\u1ea1n c\u00f3 th\u1ec3 t\u1ea1o ra c\u00e1c h\u00e0m v\u00f4 danh ( anonymous function ) hay \u0111\u00f4i l\u00fac g\u1ecdi l\u00e0 lambda ho\u1eb7c closure . ([[ Type ] param1 [, \u2026 ]]) { codeBlock ; }; Closures \u00b6 Ch\u1ec9 c\u1ea7n ch\u00fa \u00fd ki\u1ec3u tr\u1ea3 v\u1ec1 c\u1ee7a wrap function l\u00e0 Function . /// Returns a function that adds [addBy] to the /// function's argument. Function makeAdder ( num addBy ) { return ( num i ) => addBy + i ; } // Create a function that adds 2. var add2 = makeAdder ( 2 ); // Create a function that adds 4. var add4 = makeAdder ( 4 ); assert ( add2 ( 3 ) == 5 ); assert ( add4 ( 3 ) == 7 ); Operators \u00b6 Arithmetic operators \u00b6 Th\u1ea5y c\u00f3 c\u00e1i to\u00e1n t\u1eed n\u00e0y l\u1ea1 l\u1ea1 assert ( 5 / 2 == 2.5 ); // Ph\u00e9p chia tr\u1ea3 v\u1ec1 ki\u1ec3u double assert ( 5 ~/ 2 == 2 ); // Ph\u00e9p chia tr\u1ea3 v\u1ec1 ki\u1ec3u int Type test operators \u00b6 M\u1ed9t to\u00e1n t\u1eed m\u00ecnh ngh\u0129 l\u00e0 r\u1ea5t m\u1edbi, d\u00f9ng \u0111\u1ec3 check ki\u1ec3u c\u1ee7a bi\u1ebfn l\u00fac runtime. Ph\u00e9p to\u00e1n \u00dd ngh\u0129a as \u00c9p ki\u1ec3u is True n\u1ebfu object c\u00f3 c\u00f9ng ki\u1ec3u \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh is! True n\u1ebfu object kh\u00f4ng c\u00f9ng ki\u1ec3u \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh M\u1ecdi th\u1ee9 trong dart \u0111\u1ec1u l\u00e0 Object String s = 'String is Object' ; assert ( s is Object == true ); Assignment operators \u00b6 // Assign value to a a = value ; // Assign value to b if b is null; otherwise, b stays the same b ??= value ; Ta d\u00f9ng to\u00e1n t\u1eed ??= khi mu\u1ed1n g\u00e1n gi\u00e1 tr\u1ecb cho bi\u1ebfn ch\u1ec9 khi bi\u1ebfn \u0111\u00f3 \u0111ang l\u00e0 null . Logical operators \u00b6 if ( ! done && ( col == 0 || col == 3 )) { // ...Do something... } Conditional expressions \u00b6 condition ? expr1 : expr2 N\u1ebfu condition l\u00e0 true, th\u1ef1c hi\u1ec7n expr1 (v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a n\u00f3); ng\u01b0\u1ee3c l\u1ea1i, th\u1ef1c hi\u1ec7n v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a expr2 . expr1 ?? expr2 N\u1ebfu expr1 kh\u00e1c null , tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a ch\u00ednh n\u00f3; ng\u01b0\u1ee3c l\u1ea1i, tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a expr2 . Cascade notation (..) \u00b6 Cascades d\u1ecbch n\u00f4m na l\u00e0 th\u00e1c n\u01b0\u1edbc =)) c\u00fa ph\u00e1p l\u00e0 d\u1ea5u .. , cho ph\u00e9p anh em th\u1ef1c hi\u1ec7n nhi\u1ec1u thao t\u00e1c tu\u1ea7n t\u1ef1 tr\u00ean 1 object. Nh\u00ecn th\u00ec gi\u1ed1ng v\u1edbi thu\u1eadt ng\u1eef chain method ( Fluent_interface ) nh\u01b0ng c\u01a1 ch\u1ebf c\u00f3 \u0111\u00f4i ph\u1ea7n kh\u00e1c bi\u1ec7t. querySelector ( '#confirm' ) // Get an object. .. text = 'Confirm' // Use its members. .. classes . add ( 'important' ) .. onClick . listen (( e ) => window . alert ( 'Confirmed!' )); Trong \u0111o\u1ea1n code tr\u00ean, th\u00ec d\u00f2ng \u0111\u1ea7u g\u1ecdi t\u1edbi method querySelector() , tr\u1ea3 v\u1ec1 m\u1ed9t selector object. C\u00e1c d\u00f2ng ti\u1ebfp theo th\u1ef1c hi\u1ec7n c\u00e1c thao t\u00e1c v\u1edbi selector object, ignore b\u1ea5t k\u1ef3 k\u1ebft qu\u1ea3 n\u00e0o m\u00e0 c\u00e1c method \u0111\u00f3 tr\u1ea3 v\u1ec1. Ch\u00fang ta c\u00f3 th\u1ec3 vi\u1ebft l\u1ea1i nh\u01b0 sau: var button = querySelector ( '#confirm' ); button . text = 'Confirm' ; button . classes . add ( 'important' ); button . onClick . listen (( e ) => window . alert ( 'Confirmed!' )); \u0110\u1eb7c bi\u1ec7t l\u01b0u \u00fd l\u00e0 method \u0111\u1ea7u ti\u00ean ho\u1eb7c function kh\u1edfi t\u1ea1o cascade ph\u1ea3i tr\u1ea3 v\u1ec1 m\u1ed9t object th\u1ef1c s\u1ef1. V\u00ed d\u1ee5 \u0111o\u1ea1n code sau s\u1ebd ko th\u1ef1c hi\u1ec7n \u0111c: var sb = StringBuffer (); sb . write ( 'foo' ) .. write ( 'bar' ); // Error: method 'write' isn't defined for 'void'. \u1ede d\u00f2ng tr\u00ean sb.write('foo') ch\u00ednh l\u00e0 gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o, tuy nhi\u00ean sb.write('foo') = void , do \u0111\u00f3 b\u1ea1n kh\u00f4ng th\u1ec3 b\u1eaft \u0111\u1ea7u m\u1ed9t cascade tr\u00ean void . Other operators \u00b6 H\u1ecdc th\u00eam m\u1ed9t to\u00e1n t\u1eed m\u1edbi: ?. , t\u01b0\u01a1ng t\u1ef1 nh\u01b0 . d\u00f9ng \u0111\u1ec3 truy xu\u1ea5t c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a m\u1ed9t object, nh\u01b0ng an to\u00e0n h\u01a1n ch\u00fat. V\u00ed d\u1ee5: foo?.bar s\u1ebd select ra thu\u1ed9c t\u00ednh bar t\u1eeb foo , v\u00e0 n\u1ebfu foo = null th\u00ec k\u1ebft qu\u1ea3 c\u1ee7a foo?.bar = null . Control flow statements \u00b6 Dart s\u1eed d\u1ee5ng c\u00e1c c\u00e2u l\u1ec7nh sau \u0111\u1ec3 control lu\u1ed3ng x\u1eed l\u00fd: \u0110i\u1ec1u ki\u1ec7n if v\u00e0 else V\u00f2ng l\u1eb7p for V\u00f2ng l\u1eb7p while v\u00e0 do-while C\u00e2u l\u1ec7nh break v\u00e0 continue C\u00e2u l\u1ec7nh switch v\u00e0 case C\u00e2u l\u1ec7nh assert If and else \u00b6 Bi\u1ec3u th\u1ee9c trong \u0111i\u1ec1u ki\u1ec7n if b\u1eaft bu\u1ed9c ph\u1ea3i l\u00e0 ki\u1ec3u bool . \u0110o\u1ea1n code sau s\u1ebd kh\u00f4ng th\u1ec3 ch\u1ea1y, do 1 c\u00f3 type l\u00e0 int . if ( 1 ) { print ( 'We can not execute this code!' ); } For loops \u00b6 Closure b\u00ean trong Dart's for loops c\u00f3 th\u1ec3 capture \u0111\u01b0\u1ee3c value v\u00e0 index \u1edf th\u1eddi \u0111i\u1ec3m compile-time, tr\u00e1nh \u0111\u01b0\u1ee3c c\u00e1c l\u1ed7i c\u01a1 b\u1ea3n hay x\u1ea3y ra trong Javascript. H\u00e3y th\u1eed so s\u00e1nh 2 \u0111o\u1ea1n code v\u00e0 k\u1ebft qu\u1ea3 output ra gi\u1eefa 2 ng\u00f4n ng\u1eef xem sao :hugs: Javascript var callbacks = []; for ( var i = 0 ; i < 2 ; i ++ ) { callbacks . push (() => console . log ( i )); } callbacks . forEach (( c ) => c ()); terminal 2 2 Dart var callbacks = []; for ( var i = 0 ; i < 2 ; i ++ ) { callbacks . add (() => print ( i )); } callbacks . forEach (( c ) => c ()); 0 1 Dart support l\u1ec7nh for-in v\u00e0 forEach var collection = [ 0 , 1 , 2 ]; for ( var x in collection ) { print ( x ); // 0 1 2 } candidates . forEach (( candidate ) => candidate . interview ()); Assert \u00b6 Dart h\u1ed7 tr\u1ee3 method assert , d\u00f9ng \u0111\u1ec3 ng\u0103n ch\u01b0\u01a1ng tr\u00ecnh ti\u1ebfp t\u1ee5c th\u1ef1c thi n\u1ebfu c\u00f3 b\u1ea5t k\u1ef3 \u0111i\u1ec1u ki\u1ec7n n\u00e0o b\u00ean trong n\u00f3 l\u00e0 false . // Make sure the variable has a non-null value. assert ( text != null ); // Make sure the value is less than 100. assert ( number < 100 ); // Make sure this is an https URL. assert ( urlString . startsWith ( 'https' )); \u0110\u1ec3 thay th\u1ebf n\u1ed9i dung hi\u1ec3n th\u1ecb khi assert th\u1ea5t b\u1ea1i, ch\u00fang ta th\u00eam message v\u00e0o tham s\u1ed1 th\u1ee9 hai. var urlString = 'www.google.com' ; assert ( urlString . startsWith ( 'https' ), 'URL ( $ urlString ) should start with \"https\".' ); Failed assertion: line 7 pos 8: 'urlString.startsWith('https')': URL (www.google.com) should start with \"https\". Exceptions \u00b6 Throw \u00b6 Th\u00f4ng th\u01b0\u1eddng ch\u00fang ta s\u1ebd raise m\u1ed9t exception nh\u01b0 sau throw new Exception ( \"message\" ); throw UnimplementedError (); throw FormatException ( 'Expected at least 1 section' ); \u0111\u00f4i khi c\u00f3 th\u1ec3 l\u00e0 1 objects throw 'Out of llamas!' ; \u0110\u1ec3 n\u00e2ng cao ch\u1ea5t l\u01b0\u1ee3ng, c\u0169ng nh\u01b0 \u00fd ngh\u0129a c\u1ee7a code th\u00ec b\u1ea1n n\u00ean nghi\u00ean c\u1ee9u implement exception l\u00e0 subtype c\u1ee7a c\u00e1c method/class t\u1eeb Error v\u00e0 Exception Catch \u00b6 try { breedMoreLlamas (); } on OutOfLlamasException { // A specific exception buyMoreLlamas (); } on Exception catch ( e ) { // Anything else that is an exception print ( 'Unknown exception: $ e ' ); } catch ( e ) { // No specified type, handles all print ( 'Something really unknown: $ e ' ); } B\u1ea1n c\u00f3 th\u1ec3 ch\u1ec9 \u0111\u1ecbnh 1 ho\u1eb7c 2 parameters cho method catch() . try { // \u00b7\u00b7\u00b7 } on Exception catch ( e ) { print ( 'Exception details: \\n $ e ' ); } catch ( e , s ) { print ( 'Exception details: \\n $ e ' ); print ( 'Stack trace: \\n $ s ' ); } Finally \u00b6 Ki\u1ebfn th\u1ee9c v\u00f4 c\u00f9ng c\u0103n b\u1ea3n Code block \u0111\u1eb7t trong finally s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi d\u00f9 c\u00f3 hay kh\u00f4ng c\u00f3 ngo\u1ea1i l\u1ec7. try { breedMoreLlamas (); } finally { // Always clean up, even if an exception is thrown. cleanLlamaStalls (); } try { breedMoreLlamas (); } catch ( e ) { print ( 'Error: $ e ' ); // Handle the exception first. } finally { cleanLlamaStalls (); // Then clean up. } Classes \u00b6 Dart l\u00e0 ng\u00f4n ng\u1eef h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng v\u1edbi class (m\u1ecdi object \u0111\u1ec1u l\u00e0 m\u1ed9t instance c\u1ee7a class) v\u00e0 mixin-based inheritance (m\u1eb7c d\u00f9 m\u1ed9t class ch\u1ec9 c\u00f3 duy nh\u1ea5t m\u1ed9t superclass, nh\u01b0ng m\u00e0 class body (c\u00e1c variable, method) c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u1ea1i nh\u01b0 multiple class hierarchies (\u0111a th\u1eeba k\u1ebf)). // Create a Point using Point(). var p1 = new Point ( 2 , 2 ); // Create a Point using Point.fromJson(). var p2 = new Point . fromJson ( jsonData ); T\u1eeb Dart 2 b\u1ea1n c\u00f3 th\u1ec3 b\u1ecf t\u1eeb kh\u00f3a new . V\u00ed d\u1ee5: var p1 = Point(2, 2) . Using class members \u00b6 S\u1eed d\u1ee5ng ?. thay cho . khi truy xu\u1ea5t members c\u1ee7a class gi\u00fap ta tr\u00e1nh \u0111\u01b0\u1ee3c c\u00e1c exception khi object c\u00f3 gi\u00e1 tr\u1ecb null: // If p is non-null, set its y value to 4. p ? . y = 4 ; Constructors \u00b6 class Point { num x , y ; Point ( num x , num y ) { // There's a better way to do this, stay tuned. this . x = x ; this . y = y ; } } this keyword \u0111\u1ec3 ch\u1ec9 current instance. Dart c\u00f2n h\u1ed7 tr\u1ee3 pattern constructor class Point { num x , y ; // Syntactic sugar for setting x and y // before the constructor body runs. Point ( this . x , this . y ); } Default constructors \u00b6 N\u1ebfu b\u1ea1n ko khai b\u00e1o constructor c\u0169ng m\u00e9o sao c\u1ea3 , m\u1eb7c \u0111\u1ecbnh Dart s\u1ebd t\u1ea1o ra constructor kh\u00f4ng tham s\u1ed1 cho class \u0111\u00f3. Constructors aren\u2019t inherited \u00b6 M\u1ed9t \u0111i\u1ec1u \u0111\u00e1ng l\u01b0u \u00fd l\u00e0 trong Dart th\u00ec subclasses kh\u00f4ng k\u1ebf th\u1eeba constructor t\u1eeb superclass Named constructors \u00b6 S\u1eed d\u1ee5ng named constructor \u0111\u1ec3 c\u00f3 th\u1ec3 implement nhi\u1ec1u constructors cho m\u1ed9t class: class Point { num x , y ; Point ( this . x , this . y ); // Named constructor Point . origin () { x = 0 ; y = 0 ; } } Invoking a non-default superclass constructor \u00b6 M\u1eb7c \u0111\u1ecbnh th\u00ec constructor c\u1ee7a subclass s\u1ebd g\u1ecdi t\u1edbi unnamed, no-argument constructor c\u1ee7a superclass. Constructor c\u1ee7a superclass s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi \u1edf \u0111i\u1ec3m b\u1eaft \u0111\u1ea7u c\u1ee7a constructor body. N\u1ebfu c\u00f3 m\u1ed9t initializer list \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng, n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi tr\u01b0\u1edbc khi g\u1ecdi t\u1edbi superclass. V\u1ec1 c\u01a1 b\u1ea3n th\u00ec th\u1ee9 t\u1ef1 th\u1ef1c thi constructor nh\u01b0 sau: initializer list superclass's no-arg constructor main class's no-arg constructor T\u01b0\u01a1ng t\u1ef1 ch\u00fang ta h\u00e3y th\u1eed xem c\u00e1c case sau: Superclass kh\u00f4ng khai b\u00e1o constructor: class Person { String firstName ; } class Employee extends Person { Employee ( Map data ) { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } in Employee Th\u1ebf l\u00e0 subclass kh\u00f4ng g\u1ecdi c\u00e1i default constructor, code v\u1eabn ch\u1ea1y v\u00f4 t\u01b0 Superclass khai b\u00e1o unnamed, no-agrument constructor, v\u00e0 subclass g\u1ecdi constructor \u0111\u00f3 (tr\u01b0\u1eddng h\u1ee3p kh\u00f4ng g\u1ecdi c\u0169ng th\u1ebf) class Person { String firstName ; Person () { print ( 'in Person' ); } } class Employee extends Person { Employee ( Map data ) : super () { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } in Person in Employee Ok, m\u1eb7c cho tham s\u1ed1 gi\u1eefa constructor c\u1ee7a super v\u00e0 subclass kh\u00e1c nhau, code v\u1eabn \u1ed5n Superclass khai b\u00e1o unamed constructor (constructor n\u00e0y c\u00f3 argument) v\u00e0 subclass kh\u00f4ng g\u1ecdi constructor \u0111\u00f3: class Person { String firstName ; Person ( num x ) { print ( 'in Person' ); } } class Employee extends Person { Employee ( Map data ) { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } Error: The unnamed constructor in 'Person' requires arguments. NG, ko g\u1ecdi ko \u0111\u01b0\u1ee3c Superclass khai b\u00e1o named constructor v\u00e0 subclass kh\u00f4ng g\u1ecdi constructor \u0111\u00f3 class Person { String firstName ; Person . fromJson () { print ( 'in Person' ); } } class Employee extends Person { Employee ( Map data ) { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } Error: 'Person' doesn't have an unnamed constructor. Tr\u01b0\u1eddng h\u1ee3p n\u00e0y cho ch\u00fang ta th\u1ea5y ngay m\u1ed9t \u0111i\u1ec1u l\u00e0 n\u1ebfu superclass c\u00f3 m\u1ed9t named constructor, \u0111\u1ed3ng ngh\u0129a v\u1edbi vi\u1ec7c c\u00e1c subclass c\u0169ng ph\u1ea3i t\u1ea1o ra constructor v\u00e0 g\u1ecdi l\u1ea1i construcor c\u1ee7a superclass \u0111\u00f3. Th\u1eed s\u1eeda l\u1ea1i code c\u1ee7a Employee , ta c\u00f3 k\u1ebft qu\u1ea3 sau: class Employee extends Person { Employee ( Map data ) : super . fromJson () { print ( 'in Employee' ); } } in Person in Employee Superclass khai b\u00e1o c\u1ea3 named & unnamed constructor th\u00ec sao ??? class Person { String firstName ; Person () { print ( 'in unnamed Person' ); } Person . fromJson ( Map data ) { print ( 'in fromJson Person' ); } } class Employee extends Person { Employee ( Map data ) : super () { // :super.fromJson(data) print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } in unnamed Person // in fromJson Person in Employee R\u00f5 r\u00e0ng \u1edf tr\u01b0\u1eddng h\u1ee3p superclass c\u00f3 m\u1ed9t unnamed, no-argument constructor th\u00ec g\u1ecdi hay ko g\u1ecdi c\u0169ng ko th\u00e0nh v\u1ea5n \u0111\u1ec1. V\u00e0 g\u1ecdi c\u00e1i n\u00e0o c\u0169ng \u0111c. Ch\u00fang ta c\u0169ng c\u00f3 th\u1ec3 truy\u1ec1n tham s\u1ed1 v\u00e0o superclass constructor th\u00f4ng qua k\u1ebft qu\u1ea3 t\u00ednh to\u00e1n c\u1ee7a m\u1ed9t method , tuy nhi\u00ean tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n n\u00e0y (hay n\u1ed9i t\u1ea1i trong method ) kh\u00f4ng \u0111\u01b0\u1ee3c access t\u1edbi this class Employee extends Person { Employee () : super . fromJson ( getDefaultData ()); // \u00b7\u00b7\u00b7 } Initializer list \u00b6 // Initializer list sets instance variables before // the constructor body runs. Point . fromJson ( Map < String , num > json ) : x = json [ 'x' ], y = json [ 'y' ] { print ( 'In Point.fromJson(): ( $ x , $ y )' ); } L\u01b0u \u00fd: Khi kh\u1edfi t\u1ea1o (\u1ede code tr\u00ean th\u00ec initializer l\u00e0 code block sau d\u1ea5u :) kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p truy c\u1eadp t\u1edbi bi\u1ebfn this . Trong qu\u00e1 tr\u00ecnh development, b\u1ea1n c\u00f3 th\u1ec3 validate inputs b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng assert trong initializer list. Point . withAssert ( this . x , this . y ) : assert ( x >= 0 ) { print ( 'In Point.withAssert(): ( $ x , $ y )' ); } Redirecting constructors \u00b6 \u0110\u00f4i l\u00fac nhi\u1ec7m v\u1ee5 duy nh\u1ea5t c\u1ee7a m\u1ed9t constructor ch\u1ec9 l\u00e0 chuy\u1ec3n h\u01b0\u1edbng sang m\u1ed9t constructor kh\u00e1c trong c\u00f9ng m\u1ed9t class. Redirecting constructor lu\u00f4n c\u00f3 body l\u00e0 r\u1ed7ng, v\u00e0 ch\u1ec9 sinh ra \u0111\u1ec3 g\u1ecdi t\u1edbi m\u1ed9t constructor kh\u00e1c sau d\u1ea5u : . class Point { num x , y ; // The main constructor for this class. Point ( this . x , this . y ) { print ( 'This coordinate: x= $ x y= $ y ' ); } // Delegates to the main constructor. Point . alongXAxis ( num x ) : this ( x , 0 ); } var p = Point . alongXAxis ( 1 ); This coordinate: x=1 y=0 Trong v\u00ed d\u1ee5 tr\u00ean th\u00ec Point1.alongXAxis ch\u00ednh l\u00e0 redirecting constructor . Constant constructors \u00b6 N\u1ebfu nh\u01b0 b\u1ea1n mu\u1ed1n t\u1ea1o ra m\u1ed9t object kh\u00f4ng \u0111\u1ed5i, h\u00e3y t\u1ea1o ra m\u1ed9t const constructor, v\u00e0 \u0111\u1ea3m b\u1ea3o r\u1eb1ng c\u00e1c variable l\u00e0 final: class ImmutablePoint { static final ImmutablePoint origin = const ImmutablePoint ( 0 , 0 ); final num x , y ; const ImmutablePoint ( this . x , this . y ); } Factory constructors \u00b6 Ch\u00fang ta s\u1eed d\u1ee5ng factory khi mu\u1ed1n implement constructor kh\u00f4ng ch\u1ec9 \u0111\u1ec3 t\u1ea1o ra m\u1ed9t instance m\u1edbi c\u1ee7a class m\u00e0 c\u00f2n c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t instance t\u1eeb cache, ho\u1eb7c m\u1ed9t subtype instance. V\u00ed d\u1ee5 sau implement Logger class l\u00e0m nhi\u1ec7m v\u1ee5 class Logger { final String name ; bool mute = false ; // _cache is library-private, thanks to // the _ in front of its name. static final Map < String , Logger > _cache = < String , Logger > {}; factory Logger ( String name ) { print ( 'Logger \\' s name: $ name ' ); print ( 'Logger \\' s cache: $ _cache ' ); if ( _cache . containsKey ( name )) { return _cache [ name ]; } else { final logger = Logger . _internal ( name ); _cache [ name ] = logger ; return logger ; } } Logger . _internal ( this . name ); void log ( String msg ) { if ( ! mute ) print ( 'Log message: $ msg ' ); } } main () { var loggerOne = Logger ( 'UI' ); loggerOne . log ( 'Button clicked' ); print ( '**************' ); var loggerTwo = Logger ( 'UI' ); loggerTwo . log ( 'Icon clicked' ); } Logger's name: UI Logger's cache: {} Log message: Button clicked ************** Logger's name: UI Logger's cache: {UI: Instance of 'Logger'} Log message: Icon clicked L\u01b0u \u00fd r\u1eb1ng Factory constructor kh\u00f4ng th\u1ec3 truy c\u1eadp v\u00e0o this . Methods \u00b6 Instance methods \u00b6 Ko c\u00f3 g\u00ec \u0111\u1eb7c s\u1eafc ngo\u00e0i vi\u1ec7c truy xu\u1ea5t t\u1edbi instance variables m\u00e0 ko c\u1ea7n this . import 'dart:math' ; class Point { num x , y ; Point ( this . x , this . y ); num distanceTo ( Point other ) { var dx = x - other . x ; var dy = y - other . y ; return sqrt ( dx * dx + dy * dy ); } } Getters and setters \u00b6 N\u1ebfu b\u1ea1n \u0111\u00e3 t\u1eebng code Typescript th\u00ec th\u1ea5y kh\u00f4ng kh\u00e1c m\u1ea5y class Rectangle { num left , top , width , height ; Rectangle ( this . left , this . top , this . width , this . height ); // Define two calculated properties: right and bottom. num get right => left + width ; set right ( num value ) => left = value - width ; num get bottom => top + height ; set bottom ( num value ) => top = value - height ; } void main () { var rect = Rectangle ( 3 , 4 , 20 , 15 ); assert ( rect . left == 3 ); rect . right = 12 ; assert ( rect . left == - 8 ); } Abstract methods \u00b6 Abstract methods ch\u1ec9 t\u1ed3n t\u1ea1i b\u00ean trong abstract classes . abstract class Doer { // Define instance variables and methods... void doSomething (); // Define an abstract method. } class EffectiveDoer extends Doer { void doSomething () { // Provide an implementation, so the method is not abstract here... } } Overridable operators \u00b6 Ph\u1ea7n n\u00e0y m\u00f4 t\u1ea3 c\u00e1ch implement ho\u1ea1t \u0111\u1ed9ng c\u1ee7a c\u00e1c to\u00e1n t\u1eed v\u1edbi 1 object. V\u00ed d\u1ee5 b\u1ea1n c\u00f3 Vector class, v\u00e0 b\u1ea1n c\u1ea7n \u0111\u1ecbnh ngh\u0129a th\u00eam ph\u00e9p + 2 vectors ch\u1eb3ng h\u1ea1n. . . . . < + | [] > / ^ []= <= ~/ & ~ >= * << == \u2013 % >> class Vector { final int x , y ; const Vector ( this . x , this . y ); /// Overrides + (a + b). Vector operator + ( Vector v ) { return Vector ( x + v . x , y + v . y ); } /// Overrides - (a - b). Vector operator - ( Vector v ) { return Vector ( x - v . x , y - v . y ); } } void main () { final v = Vector ( 2 , 3 ); final w = Vector ( 2 , 2 ); // v == (2, 3) assert ( v . x == 2 && v . y == 3 ); // v + w == (4, 5) assert (( v + w ). x == 4 && ( v + w ). y == 5 ); // v - w == (0, 1) assert (( v - w ). x == 0 && ( v - w ). y == 1 ); } Abstract classes \u00b6 S\u1eed d\u1ee5ng abstract modifier \u0111\u1ec3 khai b\u00e1o m\u1ed9t abstract class \u2014M\u1ed9t class kh\u00f4ng th\u1ec3 t\u1ea1o instance. Abstract classes th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a interfaces . Tuy nhi\u00ean n\u1ebfu b\u1ea1n mu\u1ed1n t\u1ea1o instance t\u1eebIf you want your abstract class to appear to be instantiable, define a factory constructor. // This class is declared abstract and thus // can't be instantiated. abstract class AbstractContainer { // Define constructors, fields, methods... void updateChildren (); // Abstract method. } Implicit interfaces \u00b6 M\u1ed7i class trong Dart ng\u1ea7m \u0111\u1ecbnh ngh\u0129a m\u1ed9t interface ch\u1ee9a to\u00e0n b\u1ed9 c\u00e1c instance member c\u1ee7a class \u0111\u00f3. D\u1ecb vl, abstract th\u00ec c\u00f3 keyword c\u00f2n interface th\u00ec m\u00e9o ko // A person. The implicit interface contains greet(). // A person. The implicit interface contains greet(). class Person { // In the interface, but visible only in this library. final _name ; // Not in the interface, since this is a constructor. Person ( this . _name ); // In the interface. String greet ( String who ) => 'Hello, $ who . I am $ _name .' ; } // An implementation of the Person interface. class Impostor implements Person { get _name => '' ; String greet ( String who ) => 'Hi $ who . Do you know who I am?' ; } String greetBob ( Person person ) => person . greet ( 'Bob' ); void main () { print ( greetBob ( Person ( 'Kathy' ))); print ( greetBob ( Impostor ())); } N\u1ebfu nh\u01b0 class Impostor kh\u00f4ng khai b\u00e1o method greet th\u00ec ch\u00fang ta s\u1ebd nh\u1eadn qu\u1ea3 \u0111\u1eafng sau Error: The non-abstract class 'Impostor' is missing implementations for these members: 'greet'. Dart h\u1ed7 tr\u1ee3 \u0111a k\u1ebf th\u1eeba class Point implements Comparable , Location {...} Extending a class \u00b6 S\u1eed d\u1ee5ng extends \u0111\u1ec3 t\u1ea1o ra subclass, v\u00e0 super \u0111\u1ec3 tr\u1ecf t\u1edbi superclass: class Television { void turnOn () { _illuminateDisplay (); _activateIrSensor (); } // \u00b7\u00b7\u00b7 } class SmartTelevision extends Television { void turnOn () { super . turnOn (); _bootNetworkInterface (); _initializeMemory (); _upgradeApps (); } // \u00b7\u00b7\u00b7 } Overriding members \u00b6 Subclasses c\u00f3 th\u1ec3 override (ghi \u0111\u00e8) instance methods, getters, v\u00e0 setters. Ch\u00fang ta s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 @override \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh methods, ... b\u1ecb ghi \u0111\u00e8: class SmartTelevision extends Television { @ override void turnOn () {...} // \u00b7\u00b7\u00b7 } \u0110\u1ec3 thu h\u1eb9p (si\u1ebft ch\u1eb7t) ki\u1ec3u c\u1ee7a method parameter ho\u1eb7c instance variable hay c\u00f2n g\u1ecdi l\u00e0 type safe , b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 covariant : class Animal { String name ; Animal ( this . name ); void chase ( Animal x ) { print ( ' $ name chase ${ x . name } ' ); } } class Dog extends Animal { Dog () : super ( 'Dog' ); } class Mouse extends Animal { Mouse () : super ( 'Mouse' ); } class Cat extends Animal { Cat () : super ( 'Cat' ); void chase ( covariant Mouse x ) { super . chase ( x ); } } void main () { Cat c = new Cat (); Dog d = new Dog (); Mouse m = new Mouse (); d . chase ( m ); // Dog chase Mouse c . chase ( m ); // Cat chase Mouse c . chase ( d ); // Error: A value of type '#lib1::Dog' can't be assigned to a variable of type '#lib1::Mouse'. } noSuchMethod() \u00b6 H\u00e3y ghi \u0111\u00e8 ph\u01b0\u01a1ng th\u1ee9c noSuchMethod() trong tr\u01b0\u1eddng h\u1ee3p b\u1ea1n mu\u1ed1n b\u1eaft c\u00e1c tr\u01b0\u1eddng h\u1ee3p ng\u01b0\u1eddi d\u00f9ng truy c\u1eadp method ho\u1eb7c variable kh\u00f4ng t\u1ed3n t\u1ea1i class A { // Unless you override noSuchMethod, using a // non-existent member results in a NoSuchMethodError. @ override void noSuchMethod ( Invocation invocation ) { print ( 'You tried to use a non-existent member: ' + ' ${ invocation . memberName } ' ); } } Enumerated types \u00b6 Using enums \u00b6 \u0110\u1ec3 khai b\u00e1o m\u1ed9t ki\u1ec3u enumerations , ta s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 enum : enum Color { red , green , blue } M\u1ed7i gi\u00e1 tr\u1ecb b\u00ean trong enum \u0111\u1ec1u c\u00f3 method index getter, tr\u1ea3 v\u1ec1 v\u1ecb tr\u00ed c\u1ee7a ch\u00fang (0-based array): assert ( Color . red . index == 0 ); assert ( Color . green . index == 1 ); assert ( Color . blue . index == 2 ); \u0110\u1ec3 l\u1ea5y ra to\u00e0n b\u1ed9 c\u00e1c gi\u00e1 tr\u1ecb trong enum, ch\u00fang ta s\u1eed d\u1ee5ng enum\u2019s values constant. List < Color > colors = Color . values ; assert ( colors [ 2 ] == Color . blue ); Adding features to a class: mixins \u00b6 Mixin l\u00e0 m\u1ed9t t\u00ednh n\u0103ng t\u01b0\u01a1ng t\u1ef1 v\u1edbi trait trong php, ta s\u1eed d\u1ee5ng withth keywords v\u00e0 theo sau n\u00f3 l\u00e0 m\u1ed9t ho\u1eb7c nhi\u1ec1u mixin names. class Musician extends Performer with Musical { // \u00b7\u00b7\u00b7 } class Maestro extends Person with Musical , Aggressive , Demented { Maestro ( String maestroName ) { name = maestroName ; canConduct = true ; } } \u0110\u1ec3 implement mixin c\u1ea7n t\u1ea1o m\u1ed9t class k\u1ebf th\u1eeba Object, kh\u00f4ng c\u00f3 constructor v\u00e0 kh\u00f4ng g\u1ecdi t\u1edbi super : abstract class Musical { bool canPlayPiano = false ; bool canCompose = false ; bool canConduct = false ; void entertainMe () { if ( canPlayPiano ) { print ( 'Playing piano' ); } else if ( canConduct ) { print ( 'Waving hands' ); } else { print ( 'Humming to self' ); } } } Class variables and methods \u00b6 S\u1eed d\u1ee5ng static keyword \u0111\u1ec3 implement class-wide variables v\u00e0 methods. Static variables \u00b6 class Queue { static const initialCapacity = 16 ; // \u00b7\u00b7\u00b7 } void main () { assert ( Queue . initialCapacity == 16 ); } Bi\u1ebfn static s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o cho t\u1edbi khi n\u00f3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Static methods \u00b6 import 'dart:math' ; class Point { num x , y ; Point ( this . x , this . y ); static num distanceBetween ( Point a , Point b ) { var dx = a . x - b . x ; var dy = a . y - b . y ; return sqrt ( dx * dx + dy * dy ); } } void main () { var a = Point ( 2 , 2 ); var b = Point ( 4 , 4 ); var distance = Point . distanceBetween ( a , b ); assert ( 2.8 < distance && distance < 2.9 ); print ( distance ); } B\u00ean trong static method kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p s\u1eed d\u1ee5ng this . Generics \u00b6 N\u1ebfu \u0111\u00e3 \u0111\u1ecdc c\u00e1c ghi ch\u00fa ph\u00eda tr\u00ean th\u00ec \u1eaft h\u1eb3n b\u1ea1n \u0111\u00e3 bi\u1ebft t\u1edbi List<E> v\u1edbi E l\u00e0 m\u1ed9t ki\u1ec3u (v\u00ed d\u1ee5: int ). V\u1ec1 m\u1eb7t quy \u01b0\u1edbc <\u2026> \u0111\u00e1nh d\u1ea5u List l\u00e0 m\u1ed9t ki\u1ec3u generic (ho\u1eb7c parameterized ). Why use generics? \u00b6 L\u1ee3i \u00edch: Code sinh ra t\u1ed1t h\u01a1n n\u1ebfu \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh \u0111\u00fang ki\u1ec3u c\u1ee7a k\u1ebft qu\u1ea3. var names = List < String > (); names . addAll ([ 'Seth' , 'Kathy' , 'Lars' ]); names . add ( 42 ); // Error S\u1eed d\u1ee5ng generic gi\u00fap gi\u1ea3m code duplication. abstract class ObjectCache { Object getByKey ( String key ); void setByKey ( String key , Object value ); } abstract class StringCache { String getByKey ( String key ); void setByKey ( String key , String value ); } 2 class tr\u00ean c\u00f3 th\u1ec3 thay b\u1eb1ng m\u1ed9t class t\u01b0\u01a1ng \u0111\u01b0\u01a1ng abstract class Cache < T > { T getByKey ( String key ); void setByKey ( String key , T value ); } Theo quy \u01b0\u1edbc, ki\u1ec3u b\u00ean trong <\u2026> l\u00e0 nh\u1eefng ch\u1eef c\u00e1i nh\u01b0: E, T, S, K, hay V. Using collection literals \u00b6 List v\u00e0 map \u0111\u1ec1u c\u00f3 th\u1ec3 parameterized. <type> (cho lists) v\u00e0 <keyType, valueType> (cho maps). var names = < String > [ 'Seth' , 'Kathy' , 'Lars' ]; var pages = < String , String > { 'index.html' : 'Homepage' , 'robots.txt' : 'Hints for web robots' , 'humans.txt' : 'We are people, not machines' }; Using parameterized types with constructors \u00b6 Dart h\u1ed7 tr\u1ee3 l\u1eadp tr\u00ecnh vi\u00ean ch\u1ec9 \u0111\u1ecbnh r\u00f5 m\u1ed9t ho\u1eb7c nhi\u1ec1u ki\u1ec3u khi s\u1eed d\u1ee5ng constructor: var names = List < String > (); names . addAll ([ 'Seth' , 'Kathy' , 'Lars' ]); var nameSet = Set < String > . from ( names ); class View { int x ; View ( this . x ); } var views = Map < int , View > (); views [ 0 ] = View ( 0 ); Generic collections and the types they contain \u00b6 var names = List < String > (); names . addAll ([ 'Seth' , 'Kathy' , 'Lars' ]); print ( names is List < String > ); // true M\u1ecdi ki\u1ec3u generic trong Dart \u0111\u1ec1u \u0111\u01b0\u1ee3c reified (c\u1ee5 th\u1ec3 ho\u00e1), \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 th\u00f4ng tin v\u1ec1 ki\u1ec3u d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c mang \u0111i ngay c\u1ea3 khi runtime . Ng\u01b0\u1ee3c l\u1ea1i, generic trong Java s\u1eed d\u1ee5ng erasure (xo\u00e1 b\u1ecf), \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 b\u1ea1n c\u00f3 th\u1ec3 ki\u1ec3m tra \u0111\u01b0\u1ee3c object l\u00e0 m\u1ed9t List, nh\u01b0ng b\u1ea1n kh\u00f4ng th\u1ec3 ki\u1ec3m tra chi ti\u1ebft t\u1edbi m\u1ee9c List<String> . Restricting the parameterized type \u00b6 Khi code m\u1ed9t generic type, b\u1ea1n c\u00f3 th\u1ec3 mu\u1ed1n gi\u1edbi h\u1ea1n c\u00e1c ki\u1ec3u parameters c\u1ee7a n\u00f3. Khi \u0111\u00f3 h\u00e3y s\u1eed d\u1ee5ng extends . class Foo < T extends SomeBaseClass > { // Implementation goes here... String toString () => \"Instance of 'Foo< $ T >'\" ; } class Extender extends SomeBaseClass {...} Ho\u00e0n to\u00e0n OK n\u1ebfu b\u1ea1n s\u1eed d\u1ee5ng SomeBaseClass ho\u1eb7c b\u1ea5t k\u1ef3 subclasses n\u00e0o c\u1ee7a n\u00f3: var someBaseClassFoo = Foo < SomeBaseClass > (); var extenderFoo = Foo < Extender > (); ho\u1eb7c kh\u00f4ng m\u1ed9t ki\u1ec3u n\u00e0o c\u1ea3: var foo = Foo (); print ( foo ); // Instance of 'Foo<SomeBaseClass>' N\u1ebfu b\u1ea1n ch\u1ec9 \u0111\u1ecbnh m\u1ed9t ki\u1ec3u non- SomeBaseClass s\u1ebd c\u00f3 l\u1ed7i: var foo = Foo < Object > (); Using generic methods \u00b6 V\u00e0o l\u00fac kh\u1edfi t\u1ea1o, Dart\u2019s generic gi\u1edbi h\u1ea1n trong classes. T first < T > ( List < T > ts ) { // Do some initial work or error checking, then... T tmp = ts [ 0 ]; // Do some additional checking or processing... return tmp ; } Ki\u1ec3u generic parameter trong first (<T>) cho ph\u00e9p b\u1ea1n s\u1eed ki\u1ec3u argument T \u1edf m\u1ed9t v\u00e0i n\u01a1i: Trong function\u2019s tr\u1ea3 v\u1ec1 ki\u1ec3u ( T ). Trong ki\u1ec3u c\u1ee7a tham s\u1ed1 ( List<T> ). Trong ki\u1ec3u c\u1ee7a bi\u1ebfn \u0111\u1ecba ph\u01b0\u01a1ng ( T tmp ). Chi ti\u1ebft h\u01a1n \u0111\u1ec3 khai b\u00e1o m\u1ed9t generic methods Ki\u1ec3u parameter c\u1ee7a generic methods \u0111\u01b0\u1ee3c li\u1ec7t k\u00ea ngay sau t\u00ean c\u1ee7a method/function v\u00e0 b\u00ean trong <> /// 2 ki\u1ec3u c\u1ee7a parameters, [K] v\u00e0 [V]. Map < K , V > singletonMap < K , V > ( K key , V value ) { return < K , V > { key , value }; } Trong tr\u01b0\u1eddng h\u1ee3p ki\u1ec3u l\u00e0 class, b\u1ea1n c\u00f3 th\u1ec3 th\u00eam gi\u1edbi h\u1ea1n cho n\u00f3 /// Danh s\u00e1ch 2 s\u1ed1 ki\u1ec3u [T] d\u1eabn xu\u1ea5t t\u1eeb ki\u1ec3u num. T sumPair < T extends num > ( List < T > items ) { return items [ 0 ] + items [ 1 ]; } Class methods ( instance v\u00e0 static ) c\u00f3 th\u1ec3 khai b\u00e1o generic parameters theo c\u00e1ch t\u01b0\u01a1ng t\u1ef1: class C { static int f < S , T > ( int x ) => 3 ; int m < S , T > ( int x ) => 3 ; } Generic method v\u1edbi t\u01b0 c\u00e1ch l\u00e0 function-typed parameters, local functions, v\u00e0 function expressions: /// Truy\u1ec1n v\u00e0o generic method l\u00e0 m\u1ed9t [callback] parameter. void functionTypedParameter ( T callback < T > ( T thing )) {} // Khai b\u00e1o local generic function `itself`. void localFunction () { T itself < T > ( T thing ) => thing ; } // G\u00e1n m\u1ed9t generic function expression cho m\u1ed9t local variable. void functionExpression () { var lambda = < T > ( T thing ) => thing ; } Chi ti\u1ebft h\u01a1n v\u1ec1 Generic method, c\u00e1c b\u1ea1n xem th\u00eam t\u1ea1i \u0111\u00e2y . Libraries and visibility \u00b6 \u0110\u1ec3 t\u1ea1o ra c\u00e1c shareable code base, ch\u00fang ta s\u1eed d\u1ee5ng 2 directives l\u00e0 import v\u00e0 library . Libraries ko ch\u1ec9 cung c\u1ea5p c\u00e1c APIs m\u00e0 c\u00f2n \u1ea9n ch\u1ee9a c\u00e1c member ch\u1ec9 t\u1ed3n t\u1ea1i v\u00e0 truy xu\u1ea5t \u0111\u01b0\u1ee3c (visible) b\u00ean trong ch\u00fang. V\u00ed d\u1ee5 c\u00e1c identifiers b\u1eaft \u0111\u1ea7u b\u1eb1ng d\u1ea5u g\u1ea1ch d\u01b0\u1edbi (_). M\u1ecdi \u1ee9ng d\u1ee5ng Dart \u0111\u1ec1u l\u00e0 c\u00e1c library ngay c\u1ea3 khi n\u00f3 kh\u00f4ng s\u1eed d\u1ee5ng library directive. Libraries c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i v\u00e0 s\u1eed d\u1ee5ng th\u00f4ng qua c\u00f4ng c\u1ee5 pub . Using libraries \u00b6 S\u1eed d\u1ee5ng t\u1eeb kho\u00e1 import \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh ph\u1ea1m vi namespace s\u1ebd s\u1eed d\u1ee5ng c\u1ee7a m\u1ed9t library import 'dart:html' ; V\u1edbi c\u00e1c th\u01b0 vi\u1ec7n built-in th\u00ec URI c\u00f3 scheme dart: , c\u00f2n v\u1edbi c\u00e1c th\u01b0 vi\u1ec7n kh\u00e1c ta s\u1eed d\u1ee5ng system path ho\u1eb7c scheme package: import 'package:test/test.dart' ; Specifying a library prefix \u00b6 \u0110\u1ec3 tr\u00e1nh conflict khi import, ta d\u00f9ng alias: If you import two libraries that have conflicting identifiers , then you can specify a prefix for one or both libraries . For example , if library1 and library2 both have an Element class , then you might have code like this : import 'package:lib1/lib1.dart' ; import 'package:lib2/lib2.dart' as lib2 ; // Uses Element from lib1. Element element1 = Element (); // Uses Element from lib2. lib2 . Element element2 = lib2 . Element (); Importing only part of a library \u00b6 Import m\u1ed9t ph\u1ea7n c\u1ee7a library: // Import only foo. import 'package:lib1/lib1.dart' show foo ; // Import all names EXCEPT foo. import 'package:lib2/lib2.dart' hide foo ; Lazily loading a library \u00b6 Deferred loading (hay c\u00f2n g\u1ecdi l\u00e0 lazy loading ) cho ph\u00e9p \u1ee9ng d\u1ee5ng load c\u00e1c library theo nhu c\u1ea7u (on demand) n\u1ebfu c\u1ea7n. M\u1ed9t v\u00e0i tr\u01b0\u1eddng h\u1ee3p sau c\u00f3 th\u1ec3 b\u1ea1n s\u1ebd mu\u1ed1n d\u00f9ng deferred loading: Gi\u1ea3m th\u1eddi gi\u1ea3n b\u1eaft \u0111\u1ea7u kh\u1edfi t\u1ea1o app. Th\u1ef1c hi\u1ec7n A/B testing. \u0110\u1ec3 load ch\u1ee9c n\u0103ng \u00edt s\u1eed d\u1ee5ng nh\u01b0 h\u1ed9p tho\u1ea1i dialog ho\u1eb7c m\u00e0n h\u00ecnh tu\u1ef3 ch\u1ecdn. \u0110\u1ec3 lazily load m\u1ed9t library, b\u1ea1n c\u1ea7n import ch\u00fang b\u1eb1ng c\u00fa ph\u00e1p deferred as . import 'package:greetings/hello.dart' deferred as hello ; Khi b\u1ea1n c\u1ea7n s\u1eed d\u1ee5ng library, g\u1ecdi h\u00e0m loadLibrary() qua \u0111\u1ecbnh danh c\u1ee7a ch\u00fang: Future greet () async { await hello . loadLibrary (); hello . printGreeting (); } Trong \u0111o\u1ea1n code tr\u00ean, await keyword d\u1eebng ch\u01b0\u01a1ng tr\u00ecnh l\u1ea1i cho t\u1edbi khi th\u01b0 vi\u1ec7n \u0111\u01b0\u1ee3c load xong. B\u1ea1n c\u00f3 th\u1ec3 g\u1ecdi loadLibrary() nhi\u1ec1u l\u1ea7n trong m\u1ed9t th\u01b0 vi\u1ec7n m\u00e0 kh\u00f4ng g\u1eb7p b\u1ea5t c\u1ee9 v\u1ea5n \u0111\u1ec1 g\u00ec, v\u00ec th\u01b0 vi\u1ec7n ch\u1ec9 load m\u1ed9t l\u1ea7n duy nh\u1ea5t. Lu\u00f4n ghi nh\u1edb r\u1eb1ng - C\u00e1c constant c\u1ee7a library kh\u00f4ng \u0111\u01b0\u1ee3c coi l\u00e0 constant trong file import. N\u00ean nh\u1edb r\u1eb1ng, constant kh\u00f4ng t\u00f4ng t\u1ea1i cho t\u1edbi khi library \u0111\u01b0\u1ee3c load. - B\u1ea1n ko th\u1ec3 s\u1eed d\u1ee5ng ki\u1ec3u t\u1eeb deferred library trong file import. Thay v\u00e0o \u0111\u00f3, h\u00e3y suy x\u00e9t c\u00e1c di chuy\u1ec3n n\u00f3 sang interface types \u0111\u1ec3 c\u00f3 th\u1ec3 import b\u1eb1ng c\u1ea3 deferred library v\u00e0 importing file. - Dart ng\u1ea7m th\u00eam loadLibrary() v\u00e0o namespace m\u00e0 b\u1ea1n khai b\u00e1o s\u1eed d\u1ee5ng deferred. loadLibrary() function tr\u1ea3 v\u1ec1 Future . Implementing libraries \u00b6 Tham kh\u1ea3o Create Library Packages n\u1ebfu b\u1ea1n mu\u1ed1n vi\u1ebft th\u01b0 vi\u1ec7n cho Dart. Asynchrony support \u00b6 Dart libraries l\u00e0 m\u1ed9t b\u1ed9 si\u00eau \u0111\u1ea7y \u0111\u1ee7 c\u00e1c functions tr\u1ea3 v\u1ec3 Future ho\u1eb7c Stream objects. Nh\u1eefng function n\u00e0y l\u00e0 b\u1ea5t \u0111\u1ed3ng b\u1ed9 ( asynchronous ), t\u01b0\u01a1ng t\u1ef1 Javascript ch\u00fang ta c\u00f3 1 c\u1eb7p t\u1eeb kho\u00e1 async v\u00e0 await . Handling Futures \u00b6 Khi b\u1ea1n mu\u1ed1n k\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c ho\u00e0n th\u00e0nh trong t\u01b0\u01a1ng lai (Future), b\u1ea1n c\u00f3 2 c\u00e1ch sau: - S\u1eed d\u1ee5ng async v\u00e0 await . - S\u1eed d\u1ee5ng Future API. Code s\u1eed d\u1ee5ng async v\u00e0 await l\u00e0 b\u1ea5t \u0111\u1ed3ng b\u1ed9, nh\u01b0ng h\u1ea7u nh\u01b0 ch\u00fang gi\u1ed1ng nh\u01b0 c\u00e1c \u0111o\u1ea1n code x\u1eed l\u00fd \u0111\u1ed3ng b\u1ed9. V\u00ed d\u1ee5, \u0111o\u1ea1n code sau s\u1eed d\u1ee5ng await \u0111\u1ec3 ch\u1edd k\u1ebft qu\u1ea3 c\u1ee7a x\u1eed l\u00fd t\u1eeb function b\u1ea5t \u0111\u1ed3ng b\u1ed9: await lookUpVersion (); \u0110\u1ec3 d\u00f9ng await th\u00ec code b\u1eaft bu\u1ed9c ph\u1ea3i n\u1eb1m trong async function Future checkVersion () async { var version = await lookUpVersion (); // Do something with version } S\u1eed d\u1ee5ng try , catch , v\u00e0 finally \u0111\u1ec3 x\u1eed l\u00fd errors & cleanup trong code c\u00f3 s\u1eed d\u1ee5ng await : try { version = await lookUpVersion (); } catch ( e ) { // React to inability to look up the version } L\u01b0u \u00fd : async function tr\u1ea3 v\u1ec1 Future object. Trong await expression , gi\u00e1 tr\u1ecb c\u1ee7a expression th\u01b0\u1eddng l\u00e0 Future ; v\u00e0 n\u1ebfu kh\u00f4ng ph\u1ea3i th\u00ec gi\u00e1 tr\u1ecb \u0111\u00f3 c\u0169ng s\u1ebd t\u1ef1 \u0111\u1ed9ng \u0111\u01b0\u1ee3c wrapp v\u00e0o trong Future object. Future object d\u1eabn t\u1edbi m\u1ed9t promise tr\u1ea3 v\u1ec1 object. Sau c\u00f9ng, gi\u00e1 tr\u1ecb c\u1ee7a await expression s\u1ebd tr\u1ea3 v\u1ec1 object \u0111\u00f3. await expression s\u1ebd d\u1eebng vi\u1ec7c th\u1ef1c thi l\u1ea1i cho t\u1edbi khi object s\u1eb5n s\u00e0ng. N\u1ebfu b\u1ea1n g\u1eb7p l\u1ed7i compile-time khi s\u1eed d\u1ee5ng await , h\u00e3y \u0111\u1ea3m b\u1ea3o r\u0103ng b\u1ea1n \u0111ang s\u1eed d\u1ee5ng await b\u00ean trong async function. V\u00ed d\u1ee5 sau s\u1eed d\u1ee5ng await trong app\u2019s main() function, body c\u1ee7a main() ph\u1ea3i \u0111i k\u00e8m v\u1edbi keyword async : Future main () async { checkVersion (); print ( 'In main: version is ${ await lookUpVersion () } ' ); } Declaring async functions \u00b6 V\u00ed d\u1ee5 chuy\u1ec3n t\u1eeb function \u0111\u1ed3ng b\u1ed9 sang function b\u1ea5t \u0111\u1ed3ng b\u1ed9: String lookUpVersion () => '1.0.0' ; Future < String > lookUpVersion () async => '1.0.0' ; Handling Streams \u00b6 Khi b\u1ea1n c\u1ea7n l\u1ea5y gi\u00e1 tr\u1ecb t\u1eeb m\u1ed9t Stream, b\u1ea1n c\u00f3 2 l\u1ef1a ch\u1ecdn - S\u1eed d\u1ee5ng async v\u00e0 asynchronous for loop ( await for ). - S\u1eed d\u1ee5ng Stream API. await for ( varOrType identifier in expression ) { // Executes each time the stream emits a value. } Gi\u00e1 tr\u1ecb c\u1ee7a expression ph\u1ea3i c\u00f3 ki\u1ec3u Stream . Qu\u00e1 tr\u00ecnh ch\u1ea1y nh\u01b0 sau: \u0110\u1ee3i cho t\u1edbi khi stream \u0111\u01b0a ra gi\u00e1 tr\u1ecb. Th\u1ef1c thi code b\u00ean trong for loop . L\u1eb7p l\u1ea1i 1 v\u00e0 2 cho t\u1edbi khi stream b\u1ecb close. \u0110\u1ec3 d\u1eebng vi\u1ec7c l\u1eafng nghe stream, b\u1ea1n c\u00f3 th\u1ec3 break ho\u1eb7c return , which breaks out of the for loop and unsubscribes from the stream. Generators \u00b6 Dart h\u1ed7 tr\u1ee3 2 lo\u1ea1i built-in generator functions: - Synchronous generator: Tr\u1ea3 v\u1ec1 Iterable object. Iterable < int > naturalsTo ( int n ) sync * { int k = 0 ; while ( k < n ) yield k ++ ; } - Asynchronous generator: Tr\u1ea3 v\u1ec1 Stream object. Stream < int > asynchronousNaturalsTo ( int n ) async * { int k = 0 ; while ( k < n ) yield k ++ ; } Callable classes \u00b6 \u0110\u1ec3 c\u00f3 th\u1ec3 g\u1ecdi Dart class nh\u01b0 function, ta implement ph\u01b0\u01a1ng th\u1ee9c call(). class WannabeFunction { call ( String a , String b , String c ) => ' $ a $ b $ c !' ; } main () { var wf = new WannabeFunction (); var out = wf ( \"Hi\" , \"there,\" , \"gang\" ); print ( ' $ out ' ); } Hi there, gang! Isolates \u00b6 H\u1ea7u h\u1ebft computers, ho\u1eb7c mobile platforms \u0111\u01b0\u1ee3c trang b\u1ecb multi-core CPUs. \u0110\u1ec3 t\u1eadn d\u1ee5ng t\u1ed1i \u0111a l\u1ee3i th\u1ebf \u0111\u00f3, th\u00f4ng developer c\u00f3 th\u1ec3 ch\u1ea1y \u0111\u1ed3ng th\u1eddi c\u00e1c shared-memory threads. Tuy nhi\u00ean, vi\u1ec7c chia s\u1ebb tr\u1ea1ng th\u00e1i (shared-state) c\u1ee7a c\u00e1c concurrency r\u1ea5t d\u1ec5 d\u1eabn t\u1edbi l\u1ed7i c\u0169ng nh\u01b0 l\u00e0m code tr\u1edf n\u00ean ph\u1ee9c t\u1ea1p. Thay v\u00ec s\u1ee7 d\u1ee5ng threads, t\u1ea5t c\u1ea3 Dart code \u0111\u01b0\u1ee3c th\u1ef1c thi \u1edf b\u00ean trong 1 v\u00f9ng c\u00f4 l\u1eadp. M\u1ed7i v\u00f9ng v\u00f4 l\u1eadp c\u00f3 memory heap ri\u00eang, \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng state c\u1ee7a v\u00f9ng isolate n\u00e0y kh\u00f4ng b\u1ecb truy c\u1eadp b\u1edfi v\u00f9ng isolate kh\u00e1c. Chi ti\u1ebft tham kh\u1ea3o dart:isolate . Typedefs \u00b6 Trong Dart, m\u1ecdi th\u1ee9 \u0111\u1ec1u l\u00e0 object. typedef , ho\u1eb7c function-type alias, \u0111\u1eb7t t\u00ean cho function m\u00e0 b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a c\u00e1c fields v\u00e0 tr\u1ea3 v\u1ec1 types. \u0110o\u1ea1n code sau kh\u00f4ng s\u1eed d\u1ee5ng typedef, v\u00e0 th\u00f4ng tin v\u1ec1 ki\u1ec3u s\u1ebd bi\u1ebfn m\u1ea5t khi b\u1ea1n g\u00e1n compare = f , trong khi ki\u1ec3u c\u1ee7a f l\u00e0 (Object, Object) \u2192 int . class SortedCollection { Function compare ; SortedCollection ( int f ( Object a , Object b )) { compare = f ; } } // Initial, broken implementation. int sort ( Object a , Object b ) => 0 ; void main () { SortedCollection coll = SortedCollection ( sort ); // All we know is that compare is a function, // but what type of function? assert ( coll . compare is Function ); } Hot fix s\u1eed d\u1ee5ng typedef typedef Compare = int Function ( Object a , Object b ); class SortedCollection { Compare compare ; SortedCollection ( this . compare ); } // Initial, broken implementation. int sort ( Object a , Object b ) => 0 ; void main () { SortedCollection coll = SortedCollection ( sort ); assert ( coll . compare is Function ); assert ( coll . compare is Compare ); } V\u1edbi phi\u00ean b\u1ea3n Dart 2 hi\u1ec7n t\u1ea1i th\u00ec typedefs ch\u1ec9 gi\u1edbi h\u1ea1n s\u1eed d\u1ee5ng v\u1edbi function . typedef c\u0169ng ch\u1ec9 \u0111\u01a1n gi\u1ea3n l\u00e0 m\u1ed9t alias, gi\u00fap ch\u00fang ta check ki\u1ec3u c\u1ee7a m\u1ed7i function: typedef Compare < T > = int Function ( T a , T b ); int sort ( int a , int b ) => a - b ; void main () { assert ( sort is Compare < int > ); // True! } Driving Deep \u00b6 \u0110\u1ec3 hi\u1ec3u s\u00e2u h\u01a1n v\u1ec1 Dart th\u00ec kh\u00f4ng c\u00f2n c\u00e1ch n\u00e0o kh\u00e1c ngo\u00e0i m\u1ea7n v\u00e0o core c\u1ee7a Dart. B\u1ea1n c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u s\u00e2u v\u1ec1 c\u01a1 ch\u1ebf ho\u1ea1t \u0111\u1ed9c v\u00e0 c\u00e1ch s\u1eed d\u1ee5ng c\u1ee7a Dart libraries t\u1ea1i A Tour of the Dart Libraries . V\u00e0 l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 code trong s\u00e1ng, convention chu\u1ea9n, hi\u1ec3u nh\u1eefng \u0111i\u1ec1u n\u00ean v\u00e0 kh\u00f4ng n\u00ean khi code Dart, th\u00ec b\u1ea1n n\u00ean \u0111\u1ecdc th\u00eam Effective Dart . References \u00b6 Dart Home Page A Tour of the Dart Language","title":"Dart Basic"},{"location":"dart/dart_core/#important-concepts","text":"Khi b\u1ea1n code Dart language, h\u00e3y lu\u00f4n ghi nh\u1edb nh\u1eefng kh\u00e1i ni\u1ec7m sau trong \u0111\u1ea7u: M\u1ecdi th\u1ee9 b\u1ea1n g\u00e1n v\u00e0o c\u00e1c bi\u1ebfn (variable) \u0111\u1ec1u l\u00e0 m\u1ed9t object , v\u00e0 m\u1ed7i object l\u00e0 m\u1ed9t instance c\u1ee7a class . Ngay c\u1ea3 numbers, functions, v\u00e0 null c\u0169ng l\u00e0 c\u00e1c objects . T\u1ea5t c\u1ea3 objects \u0111\u01b0\u1ee3c k\u1ebf th\u1eeba t\u1eeb [Object][] class. M\u1eb7c d\u00f9 Dart l\u00e0 ng\u00f4n ng\u1eef strongly typed (ch\u00fa tr\u1ecdng v\u00e0o ki\u1ec3u d\u1eef li\u1ec7u), nh\u01b0ng type annotations l\u1ea1i l\u00e0 tu\u1ef3 ch\u1ecdn v\u00ec Dart c\u00f3 th\u1ec3 t\u1ef1 suy ra ki\u1ec3u d\u1ef1a v\u00e0o gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn. V\u00ed d\u1ee5 trong \u0111o\u1ea1n code tr\u00ean, number s\u1ebd mang ki\u1ec3u int . Khi b\u1ea1n kh\u00f4ng mong \u0111\u1ee3i m\u1ed9t ki\u1ec3u nh\u1ea5t \u0111\u1ecbnh n\u00e0o, h\u00e3y s\u1eed d\u1ee5ng ki\u1ec3u dynamic . Dart h\u1ed7 tr\u1ee3 generic types, v\u00ed d\u1ee5 nh\u01b0 List<int> (m\u1ed9t danh s\u00e1ch c\u00e1c s\u1ed1 integers) ho\u1eb7c List<dynamic> (m\u1ed9t danh s\u00e1ch c\u00e1c objects mang ki\u1ec3u b\u1ea5t k\u1ef3). Dart h\u1ed7 tr\u1ee3 top-level functions (v\u00ed d\u1ee5 nh\u01b0 main() ), c\u0169ng nh\u01b0 c\u00e1c functions g\u1eafn li\u1ec1n v\u1edbi m\u1ed9t class ho\u1eb7c object (t\u01b0\u01a1ng \u1ee9ng v\u1edbi static v\u00e0 instance methods ). B\u1ea1n c\u0169ng c\u00f3 th\u1ec3 t\u1ea1o ra functions b\u00ean trong functions (g\u1ecdi l\u00e0 nested ho\u1eb7c local functions ). T\u01b0\u01a1ng t\u1ef1, Dart h\u1ed7 tr\u1ee3 top-level variables , c\u0169ng nh\u01b0 c\u00e1c variables g\u1eafn li\u1ec1n v\u1edbi m\u1ed9t class ho\u1eb7c object (st\u01b0\u01a1ng \u1ee9ng v\u1edbi static v\u00e0 instance variables ). Instance variables \u0111\u00f4i l\u00fac \u0111\u01b0\u1ee3c bi\u1ebft t\u1edbi v\u1edbi t\u00ean g\u1ecdi fields ho\u1eb7c properties . Kh\u00f4ng gi\u1ed1ng v\u1edbi Java, Dart kh\u00f4ng c\u00f3 keywords public , protected , private . N\u1ebfu m\u1ed9t bi\u1ebfn (identifier) b\u1eaft \u0111\u1ea7u v\u1edbi d\u1ea5u underscore (_), N\u00f3 s\u1ebd l\u00e0 private trong library c\u1ee7a n\u00f3 (V\u00ed d\u1ee5 khi b\u1ea1n import th\u01b0 vi\u1ec7n \u0111\u00f3 v\u00e0o th\u00ec ch\u00fang s\u1ebd ko th\u1ec3 d\u00f9ng b\u00ean ngo\u00e0i th\u01b0 vi\u1ec7n). Chi ti\u1ebft h\u01a1n t\u1ea1i Libraries and visibility . Identifiers c\u00f3 th\u1ec3 b\u1eaft \u0111\u1ea7u b\u1eb1ng ch\u1eef c\u00e1i ho\u1eb7c d\u1ea5u g\u1ea1ch d\u01b0\u1edbi (_), theo sau l\u00e0 b\u1ea5t k\u1ef3 s\u1ef1 k\u1ebft h\u1ee3p n\u00e0o c\u1ee7a c\u00e1c k\u00fd t\u1ef1 \u0111\u00f3 c\u00f9ng v\u1edbi ch\u1eef s\u1ed1.. \u0110\u00f4i khi, vi\u1ec7c nh\u00ecn nh\u1eadn m\u1ed9t th\u1ee9 n\u00e0o \u0111\u00f3 trong Dart l\u00e0 m\u1ed9t expression hay m\u1ed9t statement c\u00f3 th\u1ec3 tr\u1edf n\u00ean quan tr\u1ecdng, do \u0111\u00f3 vi\u1ec7c s\u1eed d\u1ee5ng 2 t\u1eeb ng\u1eef \u0111\u1ec3 m\u00f4 t\u1ea3 s\u1ebd r\u1ea5t h\u1eefu \u00edch. Dart tools c\u00f3 th\u1ec3 th\u00f4ng b\u00e1o 2 lo\u1ea1i v\u1ea5n \u0111\u1ec1 khi th\u1ef1c thi: warnings v\u00e0 errors . Warnings ch\u1ec9 \u0111\u01a1n gi\u1ea3n ch\u1ec9 ra nh\u1eefng \u0111o\u1ea1n code c\u00f3 th\u1ec3 kh\u00f4ng ch\u1ea1y \u0111\u00fang nh\u01b0ng ch\u00fang kh\u00f4ng ng\u0103n ch\u01b0\u01a1ng tr\u00ecnh c\u1ee7a b\u1ea1n th\u1ef1c thi. Errors c\u00f3 th\u1ec3 l\u00e0 l\u1ed7i x\u1ea3y ra l\u00fac compile-time ho\u1eb7c run-time . Compile-time hi\u1ec3n nhi\u00ean s\u1ebd khi\u1ebfn code b\u1ea1n kh\u00f4ng ch\u1ea1y \u0111\u01b0\u1ee3c; K\u1ebft qu\u1ea3 c\u1ee7a run-time error l\u1ea1i l\u00e0 nh\u1eefng exception \u0111\u01b0\u1ee3c throw ra khi ch\u1ea1y.","title":"Important concepts"},{"location":"dart/dart_core/#variables","text":"\u0110\u1ec3 khai b\u00e1o m\u1ed9t bi\u1ebfn name tham chi\u1ebfu t\u1edbi String object v\u1edbi gi\u00e1 tr\u1ecb \u201cBob\u201d, ta c\u00f3 th\u1ec3 d\u00f9ng 1 trong 3 c\u00e1ch sau: var name = 'Bob' ; dynamic name = 'Bob' ; String name = 'Bob' ;","title":"Variables"},{"location":"dart/dart_core/#default-value","text":"Gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o c\u1ee7a m\u1ed9t bi\u1ebfn b\u1ea5t k\u1ef3 \u0111\u1ec1u l\u00e0 null . int lineCount ; assert ( lineCount == null );","title":"Default value"},{"location":"dart/dart_core/#final-and-const","text":"N\u1ebfu b\u1ea1n kh\u00f4ng mu\u1ed1n gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn b\u1ecb thay \u0111\u1ed5i, h\u00e3y s\u1eed d\u1ee5ng final ho\u1eb7c const thay v\u00ec d\u00f9ng var/type ; Vi\u1ec7c hi\u1ec3u r\u00f5 nguy\u00ean l\u00fd ho\u1ea1t \u0111\u1ed9ng final v\u1edbi const kh\u00f4ng h\u1ec1 \u0111\u01a1n gi\u1ea3n m\u1ed9t ch\u00fat n\u00e0o final name = 'Bob' ; // Without a type annotation // name = 'Alice'; // Uncommenting this causes an error: Error: Setter not found: 'name'. final String nickname = 'Bobby' ; // With a type annotation const bar = 1000000 ; // Unit of pressure (dynes/cm2) const double atm = 1.01325 * bar ; // Standard atmosphere final ngh\u0129a l\u00e0 single-assignment M\u1ed7i m\u1ed9t bi\u1ebfn final ho\u1eb7c m\u1ed9t thu\u1ed9c t\u00ednh ph\u1ea3i c\u00f3 m\u1ed9t kh\u1edfi t\u1ea1o. V\u00e0 m\u1ed9t khi b\u1ea1n \u0111\u00e3 g\u00e1n gi\u00e1 tr\u1ecb cho bi\u1ebfn \u0111\u00f3 th\u00ec, b\u1ea1n s\u1ebd ko th\u1ec3 g\u00e1n l\u1ea1i cho n\u00f3 1 gi\u00e1 tr\u1ecb kh\u00e1c. final List finalList = new List (); finalList . addAll ([ 'one' , 'two' , 'three' ]); // Fail: can not assign new value/reference to final finalList finalList = new List (); // But you can change the content of the list finalList . clear (); finalList . forEach (( f ) => print ( f )); //empty const ngh\u0129a l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng b\u1ea5t bi\u1ebfn kh\u00f4ng \u0111\u1ed5i \u1edf th\u1eddi \u0111i\u1ec3m compile code. M\u1ed9t khi b\u1ea1n g\u00e1n gi\u00e1 tr\u1ecb t\u1edbi m\u1ed9t const object th\u00ec b\u1ea1n kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb \u0111\u00f3. V\u00e0 gi\u00e1 tr\u1ecb \u0111\u00f3 ph\u1ea3i \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o v\u00e0o th\u1eddi \u0111i\u1ec3m compile code, ch\u1ee9 ko ph\u1ea3i \u0111\u1ee3i t\u1edbi th\u1eddi \u0111i\u1ec3m run code. const List constList = const [ 'one' , 'two' , 'three' ]; constList . add ( 'four' ); // Can not add to immutable object constList = new List (); // Can not assign new value constList . clear (); // Can not change the content constList . forEach (( f ) => print ( \"const $ f \" )); N\u1ebfu const variable \u1edf class level, h\u00e3y s\u1eed d\u1ee5ng static const . Ngo\u00e0i ra, const kh\u00f4ng ch\u1ec9 \u0111\u01b0\u1ee3c d\u00f9ng trong \u0111\u1ecbnh ngh\u0129a h\u1eb1ng bi\u1ebfn (constant variables), m\u00e0 n\u00f3 c\u00f2n c\u00f3 th\u1ec3 t\u1ea1o ra h\u1eb1ng gi\u00e1 tr\u1ecb (constant values). // Note: [] t\u1ea1o ra m\u1ed9t list r\u1ed7ng. // const [] t\u1ea1o ra m\u1ed9t list r\u1ed7ng v\u00e0 kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i (EIL: empty, immutable list). var foo = const []; // foo \u0111ang l\u00e0 m\u1ed9t EIL. final bar = const []; // bar s\u1ebd lu\u00f4n lu\u00f4n l\u00e0 EIL. const baz = const []; // baz l\u00e0 m\u1ed9t compile-time constant EIL. // N\u1ebfu b\u1ea1n c\u1ed1 t\u00ecnh s\u1eeda gi\u00e1 tr\u1ecb c\u1ee7a const variable list s\u1ebd c\u00f3 l\u1ed7i // foo[0] = 1; // Cannot modify an unmodifiable list // B\u1ea1n c\u00f3 th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a m\u1ed9t non-final, non-const variable // Ngay c\u1ea3 khi n\u00f3 c\u00f3 gi\u00e1 tr\u1ecb = const value. foo = [ 1 , 2 ]; // B\u1ea1n kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a 2 bi\u1ebfn sau. // bar = []; // Unhandled exception. // baz = []; // Unhandled exception.","title":"Final and const"},{"location":"dart/dart_core/#built-in-types","text":"Dart h\u1ed7 tr\u1ee3 c\u00e1c ki\u1ec3u sau: numbers strings booleans lists (hay c\u00f2n g\u1ecdi l\u00e0 arrays) maps runes (bi\u1ec3u di\u1ec5n Unicode characters theo d\u1ea1ng chu\u1ed7i) symbols M\u00ecnh s\u1ebd ch\u1ec9 \u0111\u1ec1 c\u1eadp t\u1edbi c\u00e1c ki\u1ec3u m\u00e0 m\u00ecnh th\u00edch =))","title":"Built-in types"},{"location":"dart/dart_core/#maps","text":"\u0110\u1ec3 kh\u1edfi t\u1ea1o m\u1ed9t Map object, ta c\u00f3 th\u1ec3 d\u00f9ng c\u00e1c c\u00e1ch sau: var gifts = { // Key: Value 'first' : 'partridge' , 'second' : 'turtledoves' , 'fifth' : 'golden rings' }; var gifts = Map (); gifts [ 'first' ] = 'partridge' ; gifts [ 'second' ] = 'turtledoves' ; gifts [ 'fifth' ] = 'golden rings' ; S\u1eed d\u1ee5ng .length s\u1ebd tr\u1ea3 v\u1ec1 s\u1ed1 l\u01b0\u1ee3ng c\u1eb7p key-value trong map: var gifts = { 'first' : 'partridge' }; gifts [ 'fourth' ] = 'calling birds' ; assert ( gifts . length == 2 ); Ch\u00fang ta c\u0169ng s\u1ebd g\u1eb7p l\u1ed7i n\u1ebfu c\u1ed1 t\u00ecnh thay \u0111\u1ed5i constant Map (constant values) final constantMap = const { 2 : 'helium' , 10 : 'neon' , 18 : 'argon' , }; // constantMap[2] = 'Helium'; // Uncommenting this causes an error: Cannot set value in unmodifiable Map.","title":"Maps"},{"location":"dart/dart_core/#runes","text":"Trong Dart, runes l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p m\u00e3 UTF-32 c\u1ee7a string. Unicode \u0111\u1ecbnh ngh\u0129a m\u1ed9t gi\u00e1 tr\u1ecb s\u1ed1 duy nh\u1ea5t cho m\u1ed7i k\u00fd t\u1ef1 g\u1ed3m ch\u1eef c\u00e1i, s\u1ed1 v\u00e0 k\u00fd hi\u1ec7u s\u1eed d\u1ee5ng trong h\u1ec7 th\u1ed1ng ch\u1eef vi\u1ebft tr\u00ean th\u1ebf gi\u1edbi. V\u00ec m\u1ed9t Dart string l\u00e0 s\u1ef1 n\u1ed1i ti\u1ebfp tu\u1ea7n t\u1ef1 c\u1ee7a c\u00e1c UTF-16 code units, bi\u1ec3u di\u1ec5n gi\u00e1 tr\u1ecb 32-bit Unicode trong m\u1ed9t string \u0111\u00f2i h\u1ecfi c\u00e1c c\u00fa ph\u00e1p \u0111\u1eb7c bi\u1ec7t. C\u00e1ch th\u00f4ng d\u1ee5ng \u0111\u1ec3 bi\u1ec3u di\u1ec5n m\u1ed9t m\u00e3 Unicode l\u00e0 \\uXXXX , \u1edf \u0111\u00e2y XXXX l\u00e0 m\u1ed9t chu\u1ed7i g\u1ed3m 4-ch\u1eef s\u1ed1 hexidecimal (h\u1ec7 th\u1eadp l\u1ee5c ph\u00e2n, c\u01a1 s\u1ed1 16). V\u00ed d\u1ee5, K\u00ed t\u1ef1 tr\u00e1i tim (\u2665) l\u00e0 \\u2665 . \u0110\u1ec3 bi\u1ec3u di\u1ec5n nhi\u1ec1u ho\u1eb7c \u00edt h\u01a1n 4 hex digits, ta \u0111\u1eb7t gi\u00e1 tr\u1ecb c\u1ee7a ch\u00fang trong d\u1ea5u ngo\u1eb7c nh\u1ecdn. V\u00ed d\u1ee5 v\u1edbi emoji ( ) s\u1ebd bi\u1ec3u di\u1ec5n l\u00e0 \\u{1f600} . String class c\u00f3 c\u00e1c thu\u1ed9c t\u00ednh m\u00e0 b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 l\u1ea5y th\u00f4ng v\u1ec1 rune. codeUnitAt v\u00e0 codeUnit properties tr\u1ea3 v\u1ec1 m\u00e3 16-bit. Ho\u1eb7c d\u00f9ng runes property \u0111\u1ec3 l\u1ea5y runes of a string . V\u00ed d\u1ee5 b\u00ean d\u01b0\u1edbi mi\u00eau t\u1ea3 m\u1ed1i quan h\u1ec7 gi\u1eefa runes, 16-bit code units, v\u00e0 32-bit code points. var clapping = ' \\u{1f44f} ' ; print ( clapping ); print ( clapping . codeUnits ); print ( clapping . runes . toList ()); Runes input = new Runes ( ' \\u2665 \\u{1f605} \\u{1f60e} \\u{1f47b} \\u{1f596} \\u{1f44d} ' ); print ( new String . fromCharCodes ( input )); S\u1ebd in ra \ud83d\udc4f [55357, 56399] [128079] \u2665 \ud83d\ude05 \ud83d\ude0e \ud83d\udc7b \ud83d\udd96 \ud83d\udc4d","title":"Runes"},{"location":"dart/dart_core/#functions","text":"V\u00ec Dart l\u00e0 true object-oriented language n\u00ean function c\u0169ng l\u00e0 object. B\u1ea1n c\u00f3 th\u1ec3 khai b\u00e1o 1 function theo c\u00e1c ki\u1ec3u b\u00ean d\u01b0\u1edbi: bool isNoble ( int atomicNumber ) { return _nobleGases [ atomicNumber ] != null ; } isNoble ( atomicNumber ) { return _nobleGases [ atomicNumber ] != null ; } bool isNoble ( int atomicNumber ) => _nobleGases [ atomicNumber ] != null ;","title":"Functions"},{"location":"dart/dart_core/#optional-parameters","text":"Optional named parameters: S\u1eed d\u1ee5ng d\u1ea5u ngo\u1eb7c nh\u1ecdn {param1, param2, \u2026} Optional positional parameters: S\u1eed d\u1ee5ng d\u1ea5u ngo\u1eb7c vu\u00f4ng [param1, param2, \u2026] Default parameter values: S\u1eed d\u1ee5ng d\u1ea5u = \u0111\u1ec3 khai b\u00e1o gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho optional parameter String drink ({ String drinks = 'whisky' }) { return 'I am drink $ drinks ' ; } String say ( String from , String msg , [ String device ]) { var result = ' $ from says $ msg ' ; if ( device != null ) { result = ' $ result with a $ device ' ; } return result ; } print ( drink ()); print ( drink ( drinks: 'vodka' )); print ( say ( 'Bob' , 'Howdy' )); print ( say ( 'Bob' , 'Howdy' , 'smoke signal' )); s\u1ebd cho ra k\u1ebft qu\u1ea3: I am drink whisky I am drink vodka Bob says Howdy Bob says Howdy with a smoke signal","title":"Optional parameters"},{"location":"dart/dart_core/#the-main-function","text":"T\u1ea5t c\u1ea3 c\u00e1c \u1ee9ng d\u1ee5ng \u0111\u1ec1u c\u00f3 m\u1ed9t h\u00e0m top-level main() . main() tr\u1ea3 v\u1ec3 ki\u1ec3u void v\u00e0 c\u00f3 tham s\u1ed1 tu\u1ef3 ch\u1ecdn l\u00e0 List<String> . void main ( List < String > arguments ) { print ( arguments ); assert ( arguments . length == 2 ); assert ( int . parse ( arguments [ 0 ]) == 1 ); assert ( arguments [ 1 ] == 'test' ); } Ch\u00fa \u00fd khi compile code n\u1ebfu mu\u1ed1n c\u00e1c c\u00e2u l\u1ec7nh assert c\u00f3 hi\u1ec7u l\u1ef1c th\u00ec b\u1ea1n nh\u1edb th\u00eam flag sau v\u00e0o nh\u00e9: $ dart --enable-asserts bin/main.dart 1 test","title":"The main() function"},{"location":"dart/dart_core/#functions-as-first-class-objects","text":"Dart cho ph\u00e9p truy\u1ec1n m\u1ed9t function v\u1edbi t\u01b0 c\u00e1ch l\u00e0 bi\u1ebfn c\u1ee7a m\u1ed9t function kh\u00e1c, v\u00e0 c\u0169ng c\u00f3 th\u1ec3 g\u00e1n m\u1ed9t function v\u00e0o m\u1ed9t bi\u1ebfn. void printElement ( int element ) { print ( element ); } var list = [ 1 , 2 , 3 ]; // Pass printElement as a parameter. list . forEach ( printElement ); var loudify = ( msg ) => '!!! ${ msg . toUpperCase () } !!!' ; assert ( loudify ( 'hello' ) == '!!! HELLO !!!' );","title":"Functions as first-class objects"},{"location":"dart/dart_core/#anonymous-functions","text":"B\u1ea1n c\u00f3 th\u1ec3 t\u1ea1o ra c\u00e1c h\u00e0m v\u00f4 danh ( anonymous function ) hay \u0111\u00f4i l\u00fac g\u1ecdi l\u00e0 lambda ho\u1eb7c closure . ([[ Type ] param1 [, \u2026 ]]) { codeBlock ; };","title":"Anonymous functions"},{"location":"dart/dart_core/#closures","text":"Ch\u1ec9 c\u1ea7n ch\u00fa \u00fd ki\u1ec3u tr\u1ea3 v\u1ec1 c\u1ee7a wrap function l\u00e0 Function . /// Returns a function that adds [addBy] to the /// function's argument. Function makeAdder ( num addBy ) { return ( num i ) => addBy + i ; } // Create a function that adds 2. var add2 = makeAdder ( 2 ); // Create a function that adds 4. var add4 = makeAdder ( 4 ); assert ( add2 ( 3 ) == 5 ); assert ( add4 ( 3 ) == 7 );","title":"Closures"},{"location":"dart/dart_core/#operators","text":"","title":"Operators"},{"location":"dart/dart_core/#arithmetic-operators","text":"Th\u1ea5y c\u00f3 c\u00e1i to\u00e1n t\u1eed n\u00e0y l\u1ea1 l\u1ea1 assert ( 5 / 2 == 2.5 ); // Ph\u00e9p chia tr\u1ea3 v\u1ec1 ki\u1ec3u double assert ( 5 ~/ 2 == 2 ); // Ph\u00e9p chia tr\u1ea3 v\u1ec1 ki\u1ec3u int","title":"Arithmetic operators"},{"location":"dart/dart_core/#type-test-operators","text":"M\u1ed9t to\u00e1n t\u1eed m\u00ecnh ngh\u0129 l\u00e0 r\u1ea5t m\u1edbi, d\u00f9ng \u0111\u1ec3 check ki\u1ec3u c\u1ee7a bi\u1ebfn l\u00fac runtime. Ph\u00e9p to\u00e1n \u00dd ngh\u0129a as \u00c9p ki\u1ec3u is True n\u1ebfu object c\u00f3 c\u00f9ng ki\u1ec3u \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh is! True n\u1ebfu object kh\u00f4ng c\u00f9ng ki\u1ec3u \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh M\u1ecdi th\u1ee9 trong dart \u0111\u1ec1u l\u00e0 Object String s = 'String is Object' ; assert ( s is Object == true );","title":"Type test operators"},{"location":"dart/dart_core/#assignment-operators","text":"// Assign value to a a = value ; // Assign value to b if b is null; otherwise, b stays the same b ??= value ; Ta d\u00f9ng to\u00e1n t\u1eed ??= khi mu\u1ed1n g\u00e1n gi\u00e1 tr\u1ecb cho bi\u1ebfn ch\u1ec9 khi bi\u1ebfn \u0111\u00f3 \u0111ang l\u00e0 null .","title":"Assignment operators"},{"location":"dart/dart_core/#logical-operators","text":"if ( ! done && ( col == 0 || col == 3 )) { // ...Do something... }","title":"Logical operators"},{"location":"dart/dart_core/#conditional-expressions","text":"condition ? expr1 : expr2 N\u1ebfu condition l\u00e0 true, th\u1ef1c hi\u1ec7n expr1 (v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a n\u00f3); ng\u01b0\u1ee3c l\u1ea1i, th\u1ef1c hi\u1ec7n v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a expr2 . expr1 ?? expr2 N\u1ebfu expr1 kh\u00e1c null , tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a ch\u00ednh n\u00f3; ng\u01b0\u1ee3c l\u1ea1i, tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a expr2 .","title":"Conditional expressions"},{"location":"dart/dart_core/#cascade-notation","text":"Cascades d\u1ecbch n\u00f4m na l\u00e0 th\u00e1c n\u01b0\u1edbc =)) c\u00fa ph\u00e1p l\u00e0 d\u1ea5u .. , cho ph\u00e9p anh em th\u1ef1c hi\u1ec7n nhi\u1ec1u thao t\u00e1c tu\u1ea7n t\u1ef1 tr\u00ean 1 object. Nh\u00ecn th\u00ec gi\u1ed1ng v\u1edbi thu\u1eadt ng\u1eef chain method ( Fluent_interface ) nh\u01b0ng c\u01a1 ch\u1ebf c\u00f3 \u0111\u00f4i ph\u1ea7n kh\u00e1c bi\u1ec7t. querySelector ( '#confirm' ) // Get an object. .. text = 'Confirm' // Use its members. .. classes . add ( 'important' ) .. onClick . listen (( e ) => window . alert ( 'Confirmed!' )); Trong \u0111o\u1ea1n code tr\u00ean, th\u00ec d\u00f2ng \u0111\u1ea7u g\u1ecdi t\u1edbi method querySelector() , tr\u1ea3 v\u1ec1 m\u1ed9t selector object. C\u00e1c d\u00f2ng ti\u1ebfp theo th\u1ef1c hi\u1ec7n c\u00e1c thao t\u00e1c v\u1edbi selector object, ignore b\u1ea5t k\u1ef3 k\u1ebft qu\u1ea3 n\u00e0o m\u00e0 c\u00e1c method \u0111\u00f3 tr\u1ea3 v\u1ec1. Ch\u00fang ta c\u00f3 th\u1ec3 vi\u1ebft l\u1ea1i nh\u01b0 sau: var button = querySelector ( '#confirm' ); button . text = 'Confirm' ; button . classes . add ( 'important' ); button . onClick . listen (( e ) => window . alert ( 'Confirmed!' )); \u0110\u1eb7c bi\u1ec7t l\u01b0u \u00fd l\u00e0 method \u0111\u1ea7u ti\u00ean ho\u1eb7c function kh\u1edfi t\u1ea1o cascade ph\u1ea3i tr\u1ea3 v\u1ec1 m\u1ed9t object th\u1ef1c s\u1ef1. V\u00ed d\u1ee5 \u0111o\u1ea1n code sau s\u1ebd ko th\u1ef1c hi\u1ec7n \u0111c: var sb = StringBuffer (); sb . write ( 'foo' ) .. write ( 'bar' ); // Error: method 'write' isn't defined for 'void'. \u1ede d\u00f2ng tr\u00ean sb.write('foo') ch\u00ednh l\u00e0 gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o, tuy nhi\u00ean sb.write('foo') = void , do \u0111\u00f3 b\u1ea1n kh\u00f4ng th\u1ec3 b\u1eaft \u0111\u1ea7u m\u1ed9t cascade tr\u00ean void .","title":"Cascade notation (..)"},{"location":"dart/dart_core/#other-operators","text":"H\u1ecdc th\u00eam m\u1ed9t to\u00e1n t\u1eed m\u1edbi: ?. , t\u01b0\u01a1ng t\u1ef1 nh\u01b0 . d\u00f9ng \u0111\u1ec3 truy xu\u1ea5t c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a m\u1ed9t object, nh\u01b0ng an to\u00e0n h\u01a1n ch\u00fat. V\u00ed d\u1ee5: foo?.bar s\u1ebd select ra thu\u1ed9c t\u00ednh bar t\u1eeb foo , v\u00e0 n\u1ebfu foo = null th\u00ec k\u1ebft qu\u1ea3 c\u1ee7a foo?.bar = null .","title":"Other operators"},{"location":"dart/dart_core/#control-flow-statements","text":"Dart s\u1eed d\u1ee5ng c\u00e1c c\u00e2u l\u1ec7nh sau \u0111\u1ec3 control lu\u1ed3ng x\u1eed l\u00fd: \u0110i\u1ec1u ki\u1ec7n if v\u00e0 else V\u00f2ng l\u1eb7p for V\u00f2ng l\u1eb7p while v\u00e0 do-while C\u00e2u l\u1ec7nh break v\u00e0 continue C\u00e2u l\u1ec7nh switch v\u00e0 case C\u00e2u l\u1ec7nh assert","title":"Control flow statements"},{"location":"dart/dart_core/#if-and-else","text":"Bi\u1ec3u th\u1ee9c trong \u0111i\u1ec1u ki\u1ec7n if b\u1eaft bu\u1ed9c ph\u1ea3i l\u00e0 ki\u1ec3u bool . \u0110o\u1ea1n code sau s\u1ebd kh\u00f4ng th\u1ec3 ch\u1ea1y, do 1 c\u00f3 type l\u00e0 int . if ( 1 ) { print ( 'We can not execute this code!' ); }","title":"If and else"},{"location":"dart/dart_core/#for-loops","text":"Closure b\u00ean trong Dart's for loops c\u00f3 th\u1ec3 capture \u0111\u01b0\u1ee3c value v\u00e0 index \u1edf th\u1eddi \u0111i\u1ec3m compile-time, tr\u00e1nh \u0111\u01b0\u1ee3c c\u00e1c l\u1ed7i c\u01a1 b\u1ea3n hay x\u1ea3y ra trong Javascript. H\u00e3y th\u1eed so s\u00e1nh 2 \u0111o\u1ea1n code v\u00e0 k\u1ebft qu\u1ea3 output ra gi\u1eefa 2 ng\u00f4n ng\u1eef xem sao :hugs: Javascript var callbacks = []; for ( var i = 0 ; i < 2 ; i ++ ) { callbacks . push (() => console . log ( i )); } callbacks . forEach (( c ) => c ()); terminal 2 2 Dart var callbacks = []; for ( var i = 0 ; i < 2 ; i ++ ) { callbacks . add (() => print ( i )); } callbacks . forEach (( c ) => c ()); 0 1 Dart support l\u1ec7nh for-in v\u00e0 forEach var collection = [ 0 , 1 , 2 ]; for ( var x in collection ) { print ( x ); // 0 1 2 } candidates . forEach (( candidate ) => candidate . interview ());","title":"For loops"},{"location":"dart/dart_core/#assert","text":"Dart h\u1ed7 tr\u1ee3 method assert , d\u00f9ng \u0111\u1ec3 ng\u0103n ch\u01b0\u01a1ng tr\u00ecnh ti\u1ebfp t\u1ee5c th\u1ef1c thi n\u1ebfu c\u00f3 b\u1ea5t k\u1ef3 \u0111i\u1ec1u ki\u1ec7n n\u00e0o b\u00ean trong n\u00f3 l\u00e0 false . // Make sure the variable has a non-null value. assert ( text != null ); // Make sure the value is less than 100. assert ( number < 100 ); // Make sure this is an https URL. assert ( urlString . startsWith ( 'https' )); \u0110\u1ec3 thay th\u1ebf n\u1ed9i dung hi\u1ec3n th\u1ecb khi assert th\u1ea5t b\u1ea1i, ch\u00fang ta th\u00eam message v\u00e0o tham s\u1ed1 th\u1ee9 hai. var urlString = 'www.google.com' ; assert ( urlString . startsWith ( 'https' ), 'URL ( $ urlString ) should start with \"https\".' ); Failed assertion: line 7 pos 8: 'urlString.startsWith('https')': URL (www.google.com) should start with \"https\".","title":"Assert"},{"location":"dart/dart_core/#exceptions","text":"","title":"Exceptions"},{"location":"dart/dart_core/#throw","text":"Th\u00f4ng th\u01b0\u1eddng ch\u00fang ta s\u1ebd raise m\u1ed9t exception nh\u01b0 sau throw new Exception ( \"message\" ); throw UnimplementedError (); throw FormatException ( 'Expected at least 1 section' ); \u0111\u00f4i khi c\u00f3 th\u1ec3 l\u00e0 1 objects throw 'Out of llamas!' ; \u0110\u1ec3 n\u00e2ng cao ch\u1ea5t l\u01b0\u1ee3ng, c\u0169ng nh\u01b0 \u00fd ngh\u0129a c\u1ee7a code th\u00ec b\u1ea1n n\u00ean nghi\u00ean c\u1ee9u implement exception l\u00e0 subtype c\u1ee7a c\u00e1c method/class t\u1eeb Error v\u00e0 Exception","title":"Throw"},{"location":"dart/dart_core/#catch","text":"try { breedMoreLlamas (); } on OutOfLlamasException { // A specific exception buyMoreLlamas (); } on Exception catch ( e ) { // Anything else that is an exception print ( 'Unknown exception: $ e ' ); } catch ( e ) { // No specified type, handles all print ( 'Something really unknown: $ e ' ); } B\u1ea1n c\u00f3 th\u1ec3 ch\u1ec9 \u0111\u1ecbnh 1 ho\u1eb7c 2 parameters cho method catch() . try { // \u00b7\u00b7\u00b7 } on Exception catch ( e ) { print ( 'Exception details: \\n $ e ' ); } catch ( e , s ) { print ( 'Exception details: \\n $ e ' ); print ( 'Stack trace: \\n $ s ' ); }","title":"Catch"},{"location":"dart/dart_core/#finally","text":"Ki\u1ebfn th\u1ee9c v\u00f4 c\u00f9ng c\u0103n b\u1ea3n Code block \u0111\u1eb7t trong finally s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi d\u00f9 c\u00f3 hay kh\u00f4ng c\u00f3 ngo\u1ea1i l\u1ec7. try { breedMoreLlamas (); } finally { // Always clean up, even if an exception is thrown. cleanLlamaStalls (); } try { breedMoreLlamas (); } catch ( e ) { print ( 'Error: $ e ' ); // Handle the exception first. } finally { cleanLlamaStalls (); // Then clean up. }","title":"Finally"},{"location":"dart/dart_core/#classes","text":"Dart l\u00e0 ng\u00f4n ng\u1eef h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng v\u1edbi class (m\u1ecdi object \u0111\u1ec1u l\u00e0 m\u1ed9t instance c\u1ee7a class) v\u00e0 mixin-based inheritance (m\u1eb7c d\u00f9 m\u1ed9t class ch\u1ec9 c\u00f3 duy nh\u1ea5t m\u1ed9t superclass, nh\u01b0ng m\u00e0 class body (c\u00e1c variable, method) c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u1ea1i nh\u01b0 multiple class hierarchies (\u0111a th\u1eeba k\u1ebf)). // Create a Point using Point(). var p1 = new Point ( 2 , 2 ); // Create a Point using Point.fromJson(). var p2 = new Point . fromJson ( jsonData ); T\u1eeb Dart 2 b\u1ea1n c\u00f3 th\u1ec3 b\u1ecf t\u1eeb kh\u00f3a new . V\u00ed d\u1ee5: var p1 = Point(2, 2) .","title":"Classes"},{"location":"dart/dart_core/#using-class-members","text":"S\u1eed d\u1ee5ng ?. thay cho . khi truy xu\u1ea5t members c\u1ee7a class gi\u00fap ta tr\u00e1nh \u0111\u01b0\u1ee3c c\u00e1c exception khi object c\u00f3 gi\u00e1 tr\u1ecb null: // If p is non-null, set its y value to 4. p ? . y = 4 ;","title":"Using class members"},{"location":"dart/dart_core/#constructors","text":"class Point { num x , y ; Point ( num x , num y ) { // There's a better way to do this, stay tuned. this . x = x ; this . y = y ; } } this keyword \u0111\u1ec3 ch\u1ec9 current instance. Dart c\u00f2n h\u1ed7 tr\u1ee3 pattern constructor class Point { num x , y ; // Syntactic sugar for setting x and y // before the constructor body runs. Point ( this . x , this . y ); }","title":"Constructors"},{"location":"dart/dart_core/#default-constructors","text":"N\u1ebfu b\u1ea1n ko khai b\u00e1o constructor c\u0169ng m\u00e9o sao c\u1ea3 , m\u1eb7c \u0111\u1ecbnh Dart s\u1ebd t\u1ea1o ra constructor kh\u00f4ng tham s\u1ed1 cho class \u0111\u00f3.","title":"Default constructors"},{"location":"dart/dart_core/#constructors-arent-inherited","text":"M\u1ed9t \u0111i\u1ec1u \u0111\u00e1ng l\u01b0u \u00fd l\u00e0 trong Dart th\u00ec subclasses kh\u00f4ng k\u1ebf th\u1eeba constructor t\u1eeb superclass","title":"Constructors aren\u2019t inherited"},{"location":"dart/dart_core/#named-constructors","text":"S\u1eed d\u1ee5ng named constructor \u0111\u1ec3 c\u00f3 th\u1ec3 implement nhi\u1ec1u constructors cho m\u1ed9t class: class Point { num x , y ; Point ( this . x , this . y ); // Named constructor Point . origin () { x = 0 ; y = 0 ; } }","title":"Named constructors"},{"location":"dart/dart_core/#invoking-a-non-default-superclass-constructor","text":"M\u1eb7c \u0111\u1ecbnh th\u00ec constructor c\u1ee7a subclass s\u1ebd g\u1ecdi t\u1edbi unnamed, no-argument constructor c\u1ee7a superclass. Constructor c\u1ee7a superclass s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi \u1edf \u0111i\u1ec3m b\u1eaft \u0111\u1ea7u c\u1ee7a constructor body. N\u1ebfu c\u00f3 m\u1ed9t initializer list \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng, n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi tr\u01b0\u1edbc khi g\u1ecdi t\u1edbi superclass. V\u1ec1 c\u01a1 b\u1ea3n th\u00ec th\u1ee9 t\u1ef1 th\u1ef1c thi constructor nh\u01b0 sau: initializer list superclass's no-arg constructor main class's no-arg constructor T\u01b0\u01a1ng t\u1ef1 ch\u00fang ta h\u00e3y th\u1eed xem c\u00e1c case sau: Superclass kh\u00f4ng khai b\u00e1o constructor: class Person { String firstName ; } class Employee extends Person { Employee ( Map data ) { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } in Employee Th\u1ebf l\u00e0 subclass kh\u00f4ng g\u1ecdi c\u00e1i default constructor, code v\u1eabn ch\u1ea1y v\u00f4 t\u01b0 Superclass khai b\u00e1o unnamed, no-agrument constructor, v\u00e0 subclass g\u1ecdi constructor \u0111\u00f3 (tr\u01b0\u1eddng h\u1ee3p kh\u00f4ng g\u1ecdi c\u0169ng th\u1ebf) class Person { String firstName ; Person () { print ( 'in Person' ); } } class Employee extends Person { Employee ( Map data ) : super () { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } in Person in Employee Ok, m\u1eb7c cho tham s\u1ed1 gi\u1eefa constructor c\u1ee7a super v\u00e0 subclass kh\u00e1c nhau, code v\u1eabn \u1ed5n Superclass khai b\u00e1o unamed constructor (constructor n\u00e0y c\u00f3 argument) v\u00e0 subclass kh\u00f4ng g\u1ecdi constructor \u0111\u00f3: class Person { String firstName ; Person ( num x ) { print ( 'in Person' ); } } class Employee extends Person { Employee ( Map data ) { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } Error: The unnamed constructor in 'Person' requires arguments. NG, ko g\u1ecdi ko \u0111\u01b0\u1ee3c Superclass khai b\u00e1o named constructor v\u00e0 subclass kh\u00f4ng g\u1ecdi constructor \u0111\u00f3 class Person { String firstName ; Person . fromJson () { print ( 'in Person' ); } } class Employee extends Person { Employee ( Map data ) { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } Error: 'Person' doesn't have an unnamed constructor. Tr\u01b0\u1eddng h\u1ee3p n\u00e0y cho ch\u00fang ta th\u1ea5y ngay m\u1ed9t \u0111i\u1ec1u l\u00e0 n\u1ebfu superclass c\u00f3 m\u1ed9t named constructor, \u0111\u1ed3ng ngh\u0129a v\u1edbi vi\u1ec7c c\u00e1c subclass c\u0169ng ph\u1ea3i t\u1ea1o ra constructor v\u00e0 g\u1ecdi l\u1ea1i construcor c\u1ee7a superclass \u0111\u00f3. Th\u1eed s\u1eeda l\u1ea1i code c\u1ee7a Employee , ta c\u00f3 k\u1ebft qu\u1ea3 sau: class Employee extends Person { Employee ( Map data ) : super . fromJson () { print ( 'in Employee' ); } } in Person in Employee Superclass khai b\u00e1o c\u1ea3 named & unnamed constructor th\u00ec sao ??? class Person { String firstName ; Person () { print ( 'in unnamed Person' ); } Person . fromJson ( Map data ) { print ( 'in fromJson Person' ); } } class Employee extends Person { Employee ( Map data ) : super () { // :super.fromJson(data) print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } in unnamed Person // in fromJson Person in Employee R\u00f5 r\u00e0ng \u1edf tr\u01b0\u1eddng h\u1ee3p superclass c\u00f3 m\u1ed9t unnamed, no-argument constructor th\u00ec g\u1ecdi hay ko g\u1ecdi c\u0169ng ko th\u00e0nh v\u1ea5n \u0111\u1ec1. V\u00e0 g\u1ecdi c\u00e1i n\u00e0o c\u0169ng \u0111c. Ch\u00fang ta c\u0169ng c\u00f3 th\u1ec3 truy\u1ec1n tham s\u1ed1 v\u00e0o superclass constructor th\u00f4ng qua k\u1ebft qu\u1ea3 t\u00ednh to\u00e1n c\u1ee7a m\u1ed9t method , tuy nhi\u00ean tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n n\u00e0y (hay n\u1ed9i t\u1ea1i trong method ) kh\u00f4ng \u0111\u01b0\u1ee3c access t\u1edbi this class Employee extends Person { Employee () : super . fromJson ( getDefaultData ()); // \u00b7\u00b7\u00b7 }","title":"Invoking a non-default superclass constructor"},{"location":"dart/dart_core/#initializer-list","text":"// Initializer list sets instance variables before // the constructor body runs. Point . fromJson ( Map < String , num > json ) : x = json [ 'x' ], y = json [ 'y' ] { print ( 'In Point.fromJson(): ( $ x , $ y )' ); } L\u01b0u \u00fd: Khi kh\u1edfi t\u1ea1o (\u1ede code tr\u00ean th\u00ec initializer l\u00e0 code block sau d\u1ea5u :) kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p truy c\u1eadp t\u1edbi bi\u1ebfn this . Trong qu\u00e1 tr\u00ecnh development, b\u1ea1n c\u00f3 th\u1ec3 validate inputs b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng assert trong initializer list. Point . withAssert ( this . x , this . y ) : assert ( x >= 0 ) { print ( 'In Point.withAssert(): ( $ x , $ y )' ); }","title":"Initializer list"},{"location":"dart/dart_core/#redirecting-constructors","text":"\u0110\u00f4i l\u00fac nhi\u1ec7m v\u1ee5 duy nh\u1ea5t c\u1ee7a m\u1ed9t constructor ch\u1ec9 l\u00e0 chuy\u1ec3n h\u01b0\u1edbng sang m\u1ed9t constructor kh\u00e1c trong c\u00f9ng m\u1ed9t class. Redirecting constructor lu\u00f4n c\u00f3 body l\u00e0 r\u1ed7ng, v\u00e0 ch\u1ec9 sinh ra \u0111\u1ec3 g\u1ecdi t\u1edbi m\u1ed9t constructor kh\u00e1c sau d\u1ea5u : . class Point { num x , y ; // The main constructor for this class. Point ( this . x , this . y ) { print ( 'This coordinate: x= $ x y= $ y ' ); } // Delegates to the main constructor. Point . alongXAxis ( num x ) : this ( x , 0 ); } var p = Point . alongXAxis ( 1 ); This coordinate: x=1 y=0 Trong v\u00ed d\u1ee5 tr\u00ean th\u00ec Point1.alongXAxis ch\u00ednh l\u00e0 redirecting constructor .","title":"Redirecting constructors"},{"location":"dart/dart_core/#constant-constructors","text":"N\u1ebfu nh\u01b0 b\u1ea1n mu\u1ed1n t\u1ea1o ra m\u1ed9t object kh\u00f4ng \u0111\u1ed5i, h\u00e3y t\u1ea1o ra m\u1ed9t const constructor, v\u00e0 \u0111\u1ea3m b\u1ea3o r\u1eb1ng c\u00e1c variable l\u00e0 final: class ImmutablePoint { static final ImmutablePoint origin = const ImmutablePoint ( 0 , 0 ); final num x , y ; const ImmutablePoint ( this . x , this . y ); }","title":"Constant constructors"},{"location":"dart/dart_core/#factory-constructors","text":"Ch\u00fang ta s\u1eed d\u1ee5ng factory khi mu\u1ed1n implement constructor kh\u00f4ng ch\u1ec9 \u0111\u1ec3 t\u1ea1o ra m\u1ed9t instance m\u1edbi c\u1ee7a class m\u00e0 c\u00f2n c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t instance t\u1eeb cache, ho\u1eb7c m\u1ed9t subtype instance. V\u00ed d\u1ee5 sau implement Logger class l\u00e0m nhi\u1ec7m v\u1ee5 class Logger { final String name ; bool mute = false ; // _cache is library-private, thanks to // the _ in front of its name. static final Map < String , Logger > _cache = < String , Logger > {}; factory Logger ( String name ) { print ( 'Logger \\' s name: $ name ' ); print ( 'Logger \\' s cache: $ _cache ' ); if ( _cache . containsKey ( name )) { return _cache [ name ]; } else { final logger = Logger . _internal ( name ); _cache [ name ] = logger ; return logger ; } } Logger . _internal ( this . name ); void log ( String msg ) { if ( ! mute ) print ( 'Log message: $ msg ' ); } } main () { var loggerOne = Logger ( 'UI' ); loggerOne . log ( 'Button clicked' ); print ( '**************' ); var loggerTwo = Logger ( 'UI' ); loggerTwo . log ( 'Icon clicked' ); } Logger's name: UI Logger's cache: {} Log message: Button clicked ************** Logger's name: UI Logger's cache: {UI: Instance of 'Logger'} Log message: Icon clicked L\u01b0u \u00fd r\u1eb1ng Factory constructor kh\u00f4ng th\u1ec3 truy c\u1eadp v\u00e0o this .","title":"Factory constructors"},{"location":"dart/dart_core/#methods","text":"","title":"Methods"},{"location":"dart/dart_core/#instance-methods","text":"Ko c\u00f3 g\u00ec \u0111\u1eb7c s\u1eafc ngo\u00e0i vi\u1ec7c truy xu\u1ea5t t\u1edbi instance variables m\u00e0 ko c\u1ea7n this . import 'dart:math' ; class Point { num x , y ; Point ( this . x , this . y ); num distanceTo ( Point other ) { var dx = x - other . x ; var dy = y - other . y ; return sqrt ( dx * dx + dy * dy ); } }","title":"Instance methods"},{"location":"dart/dart_core/#getters-and-setters","text":"N\u1ebfu b\u1ea1n \u0111\u00e3 t\u1eebng code Typescript th\u00ec th\u1ea5y kh\u00f4ng kh\u00e1c m\u1ea5y class Rectangle { num left , top , width , height ; Rectangle ( this . left , this . top , this . width , this . height ); // Define two calculated properties: right and bottom. num get right => left + width ; set right ( num value ) => left = value - width ; num get bottom => top + height ; set bottom ( num value ) => top = value - height ; } void main () { var rect = Rectangle ( 3 , 4 , 20 , 15 ); assert ( rect . left == 3 ); rect . right = 12 ; assert ( rect . left == - 8 ); }","title":"Getters and setters"},{"location":"dart/dart_core/#abstract-methods","text":"Abstract methods ch\u1ec9 t\u1ed3n t\u1ea1i b\u00ean trong abstract classes . abstract class Doer { // Define instance variables and methods... void doSomething (); // Define an abstract method. } class EffectiveDoer extends Doer { void doSomething () { // Provide an implementation, so the method is not abstract here... } }","title":"Abstract methods"},{"location":"dart/dart_core/#overridable-operators","text":"Ph\u1ea7n n\u00e0y m\u00f4 t\u1ea3 c\u00e1ch implement ho\u1ea1t \u0111\u1ed9ng c\u1ee7a c\u00e1c to\u00e1n t\u1eed v\u1edbi 1 object. V\u00ed d\u1ee5 b\u1ea1n c\u00f3 Vector class, v\u00e0 b\u1ea1n c\u1ea7n \u0111\u1ecbnh ngh\u0129a th\u00eam ph\u00e9p + 2 vectors ch\u1eb3ng h\u1ea1n. . . . . < + | [] > / ^ []= <= ~/ & ~ >= * << == \u2013 % >> class Vector { final int x , y ; const Vector ( this . x , this . y ); /// Overrides + (a + b). Vector operator + ( Vector v ) { return Vector ( x + v . x , y + v . y ); } /// Overrides - (a - b). Vector operator - ( Vector v ) { return Vector ( x - v . x , y - v . y ); } } void main () { final v = Vector ( 2 , 3 ); final w = Vector ( 2 , 2 ); // v == (2, 3) assert ( v . x == 2 && v . y == 3 ); // v + w == (4, 5) assert (( v + w ). x == 4 && ( v + w ). y == 5 ); // v - w == (0, 1) assert (( v - w ). x == 0 && ( v - w ). y == 1 ); }","title":"Overridable operators"},{"location":"dart/dart_core/#abstract-classes","text":"S\u1eed d\u1ee5ng abstract modifier \u0111\u1ec3 khai b\u00e1o m\u1ed9t abstract class \u2014M\u1ed9t class kh\u00f4ng th\u1ec3 t\u1ea1o instance. Abstract classes th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a interfaces . Tuy nhi\u00ean n\u1ebfu b\u1ea1n mu\u1ed1n t\u1ea1o instance t\u1eebIf you want your abstract class to appear to be instantiable, define a factory constructor. // This class is declared abstract and thus // can't be instantiated. abstract class AbstractContainer { // Define constructors, fields, methods... void updateChildren (); // Abstract method. }","title":"Abstract classes"},{"location":"dart/dart_core/#implicit-interfaces","text":"M\u1ed7i class trong Dart ng\u1ea7m \u0111\u1ecbnh ngh\u0129a m\u1ed9t interface ch\u1ee9a to\u00e0n b\u1ed9 c\u00e1c instance member c\u1ee7a class \u0111\u00f3. D\u1ecb vl, abstract th\u00ec c\u00f3 keyword c\u00f2n interface th\u00ec m\u00e9o ko // A person. The implicit interface contains greet(). // A person. The implicit interface contains greet(). class Person { // In the interface, but visible only in this library. final _name ; // Not in the interface, since this is a constructor. Person ( this . _name ); // In the interface. String greet ( String who ) => 'Hello, $ who . I am $ _name .' ; } // An implementation of the Person interface. class Impostor implements Person { get _name => '' ; String greet ( String who ) => 'Hi $ who . Do you know who I am?' ; } String greetBob ( Person person ) => person . greet ( 'Bob' ); void main () { print ( greetBob ( Person ( 'Kathy' ))); print ( greetBob ( Impostor ())); } N\u1ebfu nh\u01b0 class Impostor kh\u00f4ng khai b\u00e1o method greet th\u00ec ch\u00fang ta s\u1ebd nh\u1eadn qu\u1ea3 \u0111\u1eafng sau Error: The non-abstract class 'Impostor' is missing implementations for these members: 'greet'. Dart h\u1ed7 tr\u1ee3 \u0111a k\u1ebf th\u1eeba class Point implements Comparable , Location {...}","title":"Implicit interfaces"},{"location":"dart/dart_core/#extending-a-class","text":"S\u1eed d\u1ee5ng extends \u0111\u1ec3 t\u1ea1o ra subclass, v\u00e0 super \u0111\u1ec3 tr\u1ecf t\u1edbi superclass: class Television { void turnOn () { _illuminateDisplay (); _activateIrSensor (); } // \u00b7\u00b7\u00b7 } class SmartTelevision extends Television { void turnOn () { super . turnOn (); _bootNetworkInterface (); _initializeMemory (); _upgradeApps (); } // \u00b7\u00b7\u00b7 }","title":"Extending a class"},{"location":"dart/dart_core/#overriding-members","text":"Subclasses c\u00f3 th\u1ec3 override (ghi \u0111\u00e8) instance methods, getters, v\u00e0 setters. Ch\u00fang ta s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 @override \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh methods, ... b\u1ecb ghi \u0111\u00e8: class SmartTelevision extends Television { @ override void turnOn () {...} // \u00b7\u00b7\u00b7 } \u0110\u1ec3 thu h\u1eb9p (si\u1ebft ch\u1eb7t) ki\u1ec3u c\u1ee7a method parameter ho\u1eb7c instance variable hay c\u00f2n g\u1ecdi l\u00e0 type safe , b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 covariant : class Animal { String name ; Animal ( this . name ); void chase ( Animal x ) { print ( ' $ name chase ${ x . name } ' ); } } class Dog extends Animal { Dog () : super ( 'Dog' ); } class Mouse extends Animal { Mouse () : super ( 'Mouse' ); } class Cat extends Animal { Cat () : super ( 'Cat' ); void chase ( covariant Mouse x ) { super . chase ( x ); } } void main () { Cat c = new Cat (); Dog d = new Dog (); Mouse m = new Mouse (); d . chase ( m ); // Dog chase Mouse c . chase ( m ); // Cat chase Mouse c . chase ( d ); // Error: A value of type '#lib1::Dog' can't be assigned to a variable of type '#lib1::Mouse'. }","title":"Overriding members"},{"location":"dart/dart_core/#nosuchmethod","text":"H\u00e3y ghi \u0111\u00e8 ph\u01b0\u01a1ng th\u1ee9c noSuchMethod() trong tr\u01b0\u1eddng h\u1ee3p b\u1ea1n mu\u1ed1n b\u1eaft c\u00e1c tr\u01b0\u1eddng h\u1ee3p ng\u01b0\u1eddi d\u00f9ng truy c\u1eadp method ho\u1eb7c variable kh\u00f4ng t\u1ed3n t\u1ea1i class A { // Unless you override noSuchMethod, using a // non-existent member results in a NoSuchMethodError. @ override void noSuchMethod ( Invocation invocation ) { print ( 'You tried to use a non-existent member: ' + ' ${ invocation . memberName } ' ); } }","title":"noSuchMethod()"},{"location":"dart/dart_core/#enumerated-types","text":"","title":"Enumerated types"},{"location":"dart/dart_core/#using-enums","text":"\u0110\u1ec3 khai b\u00e1o m\u1ed9t ki\u1ec3u enumerations , ta s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 enum : enum Color { red , green , blue } M\u1ed7i gi\u00e1 tr\u1ecb b\u00ean trong enum \u0111\u1ec1u c\u00f3 method index getter, tr\u1ea3 v\u1ec1 v\u1ecb tr\u00ed c\u1ee7a ch\u00fang (0-based array): assert ( Color . red . index == 0 ); assert ( Color . green . index == 1 ); assert ( Color . blue . index == 2 ); \u0110\u1ec3 l\u1ea5y ra to\u00e0n b\u1ed9 c\u00e1c gi\u00e1 tr\u1ecb trong enum, ch\u00fang ta s\u1eed d\u1ee5ng enum\u2019s values constant. List < Color > colors = Color . values ; assert ( colors [ 2 ] == Color . blue );","title":"Using enums"},{"location":"dart/dart_core/#adding-features-to-a-class-mixins","text":"Mixin l\u00e0 m\u1ed9t t\u00ednh n\u0103ng t\u01b0\u01a1ng t\u1ef1 v\u1edbi trait trong php, ta s\u1eed d\u1ee5ng withth keywords v\u00e0 theo sau n\u00f3 l\u00e0 m\u1ed9t ho\u1eb7c nhi\u1ec1u mixin names. class Musician extends Performer with Musical { // \u00b7\u00b7\u00b7 } class Maestro extends Person with Musical , Aggressive , Demented { Maestro ( String maestroName ) { name = maestroName ; canConduct = true ; } } \u0110\u1ec3 implement mixin c\u1ea7n t\u1ea1o m\u1ed9t class k\u1ebf th\u1eeba Object, kh\u00f4ng c\u00f3 constructor v\u00e0 kh\u00f4ng g\u1ecdi t\u1edbi super : abstract class Musical { bool canPlayPiano = false ; bool canCompose = false ; bool canConduct = false ; void entertainMe () { if ( canPlayPiano ) { print ( 'Playing piano' ); } else if ( canConduct ) { print ( 'Waving hands' ); } else { print ( 'Humming to self' ); } } }","title":"Adding features to a class: mixins"},{"location":"dart/dart_core/#class-variables-and-methods","text":"S\u1eed d\u1ee5ng static keyword \u0111\u1ec3 implement class-wide variables v\u00e0 methods.","title":"Class variables and methods"},{"location":"dart/dart_core/#static-variables","text":"class Queue { static const initialCapacity = 16 ; // \u00b7\u00b7\u00b7 } void main () { assert ( Queue . initialCapacity == 16 ); } Bi\u1ebfn static s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o cho t\u1edbi khi n\u00f3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng.","title":"Static variables"},{"location":"dart/dart_core/#static-methods","text":"import 'dart:math' ; class Point { num x , y ; Point ( this . x , this . y ); static num distanceBetween ( Point a , Point b ) { var dx = a . x - b . x ; var dy = a . y - b . y ; return sqrt ( dx * dx + dy * dy ); } } void main () { var a = Point ( 2 , 2 ); var b = Point ( 4 , 4 ); var distance = Point . distanceBetween ( a , b ); assert ( 2.8 < distance && distance < 2.9 ); print ( distance ); } B\u00ean trong static method kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p s\u1eed d\u1ee5ng this .","title":"Static methods"},{"location":"dart/dart_core/#generics","text":"N\u1ebfu \u0111\u00e3 \u0111\u1ecdc c\u00e1c ghi ch\u00fa ph\u00eda tr\u00ean th\u00ec \u1eaft h\u1eb3n b\u1ea1n \u0111\u00e3 bi\u1ebft t\u1edbi List<E> v\u1edbi E l\u00e0 m\u1ed9t ki\u1ec3u (v\u00ed d\u1ee5: int ). V\u1ec1 m\u1eb7t quy \u01b0\u1edbc <\u2026> \u0111\u00e1nh d\u1ea5u List l\u00e0 m\u1ed9t ki\u1ec3u generic (ho\u1eb7c parameterized ).","title":"Generics"},{"location":"dart/dart_core/#why-use-generics","text":"L\u1ee3i \u00edch: Code sinh ra t\u1ed1t h\u01a1n n\u1ebfu \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh \u0111\u00fang ki\u1ec3u c\u1ee7a k\u1ebft qu\u1ea3. var names = List < String > (); names . addAll ([ 'Seth' , 'Kathy' , 'Lars' ]); names . add ( 42 ); // Error S\u1eed d\u1ee5ng generic gi\u00fap gi\u1ea3m code duplication. abstract class ObjectCache { Object getByKey ( String key ); void setByKey ( String key , Object value ); } abstract class StringCache { String getByKey ( String key ); void setByKey ( String key , String value ); } 2 class tr\u00ean c\u00f3 th\u1ec3 thay b\u1eb1ng m\u1ed9t class t\u01b0\u01a1ng \u0111\u01b0\u01a1ng abstract class Cache < T > { T getByKey ( String key ); void setByKey ( String key , T value ); } Theo quy \u01b0\u1edbc, ki\u1ec3u b\u00ean trong <\u2026> l\u00e0 nh\u1eefng ch\u1eef c\u00e1i nh\u01b0: E, T, S, K, hay V.","title":"Why use generics?"},{"location":"dart/dart_core/#using-collection-literals","text":"List v\u00e0 map \u0111\u1ec1u c\u00f3 th\u1ec3 parameterized. <type> (cho lists) v\u00e0 <keyType, valueType> (cho maps). var names = < String > [ 'Seth' , 'Kathy' , 'Lars' ]; var pages = < String , String > { 'index.html' : 'Homepage' , 'robots.txt' : 'Hints for web robots' , 'humans.txt' : 'We are people, not machines' };","title":"Using collection literals"},{"location":"dart/dart_core/#using-parameterized-types-with-constructors","text":"Dart h\u1ed7 tr\u1ee3 l\u1eadp tr\u00ecnh vi\u00ean ch\u1ec9 \u0111\u1ecbnh r\u00f5 m\u1ed9t ho\u1eb7c nhi\u1ec1u ki\u1ec3u khi s\u1eed d\u1ee5ng constructor: var names = List < String > (); names . addAll ([ 'Seth' , 'Kathy' , 'Lars' ]); var nameSet = Set < String > . from ( names ); class View { int x ; View ( this . x ); } var views = Map < int , View > (); views [ 0 ] = View ( 0 );","title":"Using parameterized types with constructors"},{"location":"dart/dart_core/#generic-collections-and-the-types-they-contain","text":"var names = List < String > (); names . addAll ([ 'Seth' , 'Kathy' , 'Lars' ]); print ( names is List < String > ); // true M\u1ecdi ki\u1ec3u generic trong Dart \u0111\u1ec1u \u0111\u01b0\u1ee3c reified (c\u1ee5 th\u1ec3 ho\u00e1), \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 th\u00f4ng tin v\u1ec1 ki\u1ec3u d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c mang \u0111i ngay c\u1ea3 khi runtime . Ng\u01b0\u1ee3c l\u1ea1i, generic trong Java s\u1eed d\u1ee5ng erasure (xo\u00e1 b\u1ecf), \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 b\u1ea1n c\u00f3 th\u1ec3 ki\u1ec3m tra \u0111\u01b0\u1ee3c object l\u00e0 m\u1ed9t List, nh\u01b0ng b\u1ea1n kh\u00f4ng th\u1ec3 ki\u1ec3m tra chi ti\u1ebft t\u1edbi m\u1ee9c List<String> .","title":"Generic collections and the types they contain"},{"location":"dart/dart_core/#restricting-the-parameterized-type","text":"Khi code m\u1ed9t generic type, b\u1ea1n c\u00f3 th\u1ec3 mu\u1ed1n gi\u1edbi h\u1ea1n c\u00e1c ki\u1ec3u parameters c\u1ee7a n\u00f3. Khi \u0111\u00f3 h\u00e3y s\u1eed d\u1ee5ng extends . class Foo < T extends SomeBaseClass > { // Implementation goes here... String toString () => \"Instance of 'Foo< $ T >'\" ; } class Extender extends SomeBaseClass {...} Ho\u00e0n to\u00e0n OK n\u1ebfu b\u1ea1n s\u1eed d\u1ee5ng SomeBaseClass ho\u1eb7c b\u1ea5t k\u1ef3 subclasses n\u00e0o c\u1ee7a n\u00f3: var someBaseClassFoo = Foo < SomeBaseClass > (); var extenderFoo = Foo < Extender > (); ho\u1eb7c kh\u00f4ng m\u1ed9t ki\u1ec3u n\u00e0o c\u1ea3: var foo = Foo (); print ( foo ); // Instance of 'Foo<SomeBaseClass>' N\u1ebfu b\u1ea1n ch\u1ec9 \u0111\u1ecbnh m\u1ed9t ki\u1ec3u non- SomeBaseClass s\u1ebd c\u00f3 l\u1ed7i: var foo = Foo < Object > ();","title":"Restricting the parameterized type"},{"location":"dart/dart_core/#using-generic-methods","text":"V\u00e0o l\u00fac kh\u1edfi t\u1ea1o, Dart\u2019s generic gi\u1edbi h\u1ea1n trong classes. T first < T > ( List < T > ts ) { // Do some initial work or error checking, then... T tmp = ts [ 0 ]; // Do some additional checking or processing... return tmp ; } Ki\u1ec3u generic parameter trong first (<T>) cho ph\u00e9p b\u1ea1n s\u1eed ki\u1ec3u argument T \u1edf m\u1ed9t v\u00e0i n\u01a1i: Trong function\u2019s tr\u1ea3 v\u1ec1 ki\u1ec3u ( T ). Trong ki\u1ec3u c\u1ee7a tham s\u1ed1 ( List<T> ). Trong ki\u1ec3u c\u1ee7a bi\u1ebfn \u0111\u1ecba ph\u01b0\u01a1ng ( T tmp ). Chi ti\u1ebft h\u01a1n \u0111\u1ec3 khai b\u00e1o m\u1ed9t generic methods Ki\u1ec3u parameter c\u1ee7a generic methods \u0111\u01b0\u1ee3c li\u1ec7t k\u00ea ngay sau t\u00ean c\u1ee7a method/function v\u00e0 b\u00ean trong <> /// 2 ki\u1ec3u c\u1ee7a parameters, [K] v\u00e0 [V]. Map < K , V > singletonMap < K , V > ( K key , V value ) { return < K , V > { key , value }; } Trong tr\u01b0\u1eddng h\u1ee3p ki\u1ec3u l\u00e0 class, b\u1ea1n c\u00f3 th\u1ec3 th\u00eam gi\u1edbi h\u1ea1n cho n\u00f3 /// Danh s\u00e1ch 2 s\u1ed1 ki\u1ec3u [T] d\u1eabn xu\u1ea5t t\u1eeb ki\u1ec3u num. T sumPair < T extends num > ( List < T > items ) { return items [ 0 ] + items [ 1 ]; } Class methods ( instance v\u00e0 static ) c\u00f3 th\u1ec3 khai b\u00e1o generic parameters theo c\u00e1ch t\u01b0\u01a1ng t\u1ef1: class C { static int f < S , T > ( int x ) => 3 ; int m < S , T > ( int x ) => 3 ; } Generic method v\u1edbi t\u01b0 c\u00e1ch l\u00e0 function-typed parameters, local functions, v\u00e0 function expressions: /// Truy\u1ec1n v\u00e0o generic method l\u00e0 m\u1ed9t [callback] parameter. void functionTypedParameter ( T callback < T > ( T thing )) {} // Khai b\u00e1o local generic function `itself`. void localFunction () { T itself < T > ( T thing ) => thing ; } // G\u00e1n m\u1ed9t generic function expression cho m\u1ed9t local variable. void functionExpression () { var lambda = < T > ( T thing ) => thing ; } Chi ti\u1ebft h\u01a1n v\u1ec1 Generic method, c\u00e1c b\u1ea1n xem th\u00eam t\u1ea1i \u0111\u00e2y .","title":"Using generic methods"},{"location":"dart/dart_core/#libraries-and-visibility","text":"\u0110\u1ec3 t\u1ea1o ra c\u00e1c shareable code base, ch\u00fang ta s\u1eed d\u1ee5ng 2 directives l\u00e0 import v\u00e0 library . Libraries ko ch\u1ec9 cung c\u1ea5p c\u00e1c APIs m\u00e0 c\u00f2n \u1ea9n ch\u1ee9a c\u00e1c member ch\u1ec9 t\u1ed3n t\u1ea1i v\u00e0 truy xu\u1ea5t \u0111\u01b0\u1ee3c (visible) b\u00ean trong ch\u00fang. V\u00ed d\u1ee5 c\u00e1c identifiers b\u1eaft \u0111\u1ea7u b\u1eb1ng d\u1ea5u g\u1ea1ch d\u01b0\u1edbi (_). M\u1ecdi \u1ee9ng d\u1ee5ng Dart \u0111\u1ec1u l\u00e0 c\u00e1c library ngay c\u1ea3 khi n\u00f3 kh\u00f4ng s\u1eed d\u1ee5ng library directive. Libraries c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i v\u00e0 s\u1eed d\u1ee5ng th\u00f4ng qua c\u00f4ng c\u1ee5 pub .","title":"Libraries and visibility"},{"location":"dart/dart_core/#using-libraries","text":"S\u1eed d\u1ee5ng t\u1eeb kho\u00e1 import \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh ph\u1ea1m vi namespace s\u1ebd s\u1eed d\u1ee5ng c\u1ee7a m\u1ed9t library import 'dart:html' ; V\u1edbi c\u00e1c th\u01b0 vi\u1ec7n built-in th\u00ec URI c\u00f3 scheme dart: , c\u00f2n v\u1edbi c\u00e1c th\u01b0 vi\u1ec7n kh\u00e1c ta s\u1eed d\u1ee5ng system path ho\u1eb7c scheme package: import 'package:test/test.dart' ;","title":"Using libraries"},{"location":"dart/dart_core/#specifying-a-library-prefix","text":"\u0110\u1ec3 tr\u00e1nh conflict khi import, ta d\u00f9ng alias: If you import two libraries that have conflicting identifiers , then you can specify a prefix for one or both libraries . For example , if library1 and library2 both have an Element class , then you might have code like this : import 'package:lib1/lib1.dart' ; import 'package:lib2/lib2.dart' as lib2 ; // Uses Element from lib1. Element element1 = Element (); // Uses Element from lib2. lib2 . Element element2 = lib2 . Element ();","title":"Specifying a library prefix"},{"location":"dart/dart_core/#importing-only-part-of-a-library","text":"Import m\u1ed9t ph\u1ea7n c\u1ee7a library: // Import only foo. import 'package:lib1/lib1.dart' show foo ; // Import all names EXCEPT foo. import 'package:lib2/lib2.dart' hide foo ;","title":"Importing only part of a library"},{"location":"dart/dart_core/#lazily-loading-a-library","text":"Deferred loading (hay c\u00f2n g\u1ecdi l\u00e0 lazy loading ) cho ph\u00e9p \u1ee9ng d\u1ee5ng load c\u00e1c library theo nhu c\u1ea7u (on demand) n\u1ebfu c\u1ea7n. M\u1ed9t v\u00e0i tr\u01b0\u1eddng h\u1ee3p sau c\u00f3 th\u1ec3 b\u1ea1n s\u1ebd mu\u1ed1n d\u00f9ng deferred loading: Gi\u1ea3m th\u1eddi gi\u1ea3n b\u1eaft \u0111\u1ea7u kh\u1edfi t\u1ea1o app. Th\u1ef1c hi\u1ec7n A/B testing. \u0110\u1ec3 load ch\u1ee9c n\u0103ng \u00edt s\u1eed d\u1ee5ng nh\u01b0 h\u1ed9p tho\u1ea1i dialog ho\u1eb7c m\u00e0n h\u00ecnh tu\u1ef3 ch\u1ecdn. \u0110\u1ec3 lazily load m\u1ed9t library, b\u1ea1n c\u1ea7n import ch\u00fang b\u1eb1ng c\u00fa ph\u00e1p deferred as . import 'package:greetings/hello.dart' deferred as hello ; Khi b\u1ea1n c\u1ea7n s\u1eed d\u1ee5ng library, g\u1ecdi h\u00e0m loadLibrary() qua \u0111\u1ecbnh danh c\u1ee7a ch\u00fang: Future greet () async { await hello . loadLibrary (); hello . printGreeting (); } Trong \u0111o\u1ea1n code tr\u00ean, await keyword d\u1eebng ch\u01b0\u01a1ng tr\u00ecnh l\u1ea1i cho t\u1edbi khi th\u01b0 vi\u1ec7n \u0111\u01b0\u1ee3c load xong. B\u1ea1n c\u00f3 th\u1ec3 g\u1ecdi loadLibrary() nhi\u1ec1u l\u1ea7n trong m\u1ed9t th\u01b0 vi\u1ec7n m\u00e0 kh\u00f4ng g\u1eb7p b\u1ea5t c\u1ee9 v\u1ea5n \u0111\u1ec1 g\u00ec, v\u00ec th\u01b0 vi\u1ec7n ch\u1ec9 load m\u1ed9t l\u1ea7n duy nh\u1ea5t. Lu\u00f4n ghi nh\u1edb r\u1eb1ng - C\u00e1c constant c\u1ee7a library kh\u00f4ng \u0111\u01b0\u1ee3c coi l\u00e0 constant trong file import. N\u00ean nh\u1edb r\u1eb1ng, constant kh\u00f4ng t\u00f4ng t\u1ea1i cho t\u1edbi khi library \u0111\u01b0\u1ee3c load. - B\u1ea1n ko th\u1ec3 s\u1eed d\u1ee5ng ki\u1ec3u t\u1eeb deferred library trong file import. Thay v\u00e0o \u0111\u00f3, h\u00e3y suy x\u00e9t c\u00e1c di chuy\u1ec3n n\u00f3 sang interface types \u0111\u1ec3 c\u00f3 th\u1ec3 import b\u1eb1ng c\u1ea3 deferred library v\u00e0 importing file. - Dart ng\u1ea7m th\u00eam loadLibrary() v\u00e0o namespace m\u00e0 b\u1ea1n khai b\u00e1o s\u1eed d\u1ee5ng deferred. loadLibrary() function tr\u1ea3 v\u1ec1 Future .","title":"Lazily loading a library"},{"location":"dart/dart_core/#implementing-libraries","text":"Tham kh\u1ea3o Create Library Packages n\u1ebfu b\u1ea1n mu\u1ed1n vi\u1ebft th\u01b0 vi\u1ec7n cho Dart.","title":"Implementing libraries"},{"location":"dart/dart_core/#asynchrony-support","text":"Dart libraries l\u00e0 m\u1ed9t b\u1ed9 si\u00eau \u0111\u1ea7y \u0111\u1ee7 c\u00e1c functions tr\u1ea3 v\u1ec3 Future ho\u1eb7c Stream objects. Nh\u1eefng function n\u00e0y l\u00e0 b\u1ea5t \u0111\u1ed3ng b\u1ed9 ( asynchronous ), t\u01b0\u01a1ng t\u1ef1 Javascript ch\u00fang ta c\u00f3 1 c\u1eb7p t\u1eeb kho\u00e1 async v\u00e0 await .","title":"Asynchrony support"},{"location":"dart/dart_core/#handling-futures","text":"Khi b\u1ea1n mu\u1ed1n k\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c ho\u00e0n th\u00e0nh trong t\u01b0\u01a1ng lai (Future), b\u1ea1n c\u00f3 2 c\u00e1ch sau: - S\u1eed d\u1ee5ng async v\u00e0 await . - S\u1eed d\u1ee5ng Future API. Code s\u1eed d\u1ee5ng async v\u00e0 await l\u00e0 b\u1ea5t \u0111\u1ed3ng b\u1ed9, nh\u01b0ng h\u1ea7u nh\u01b0 ch\u00fang gi\u1ed1ng nh\u01b0 c\u00e1c \u0111o\u1ea1n code x\u1eed l\u00fd \u0111\u1ed3ng b\u1ed9. V\u00ed d\u1ee5, \u0111o\u1ea1n code sau s\u1eed d\u1ee5ng await \u0111\u1ec3 ch\u1edd k\u1ebft qu\u1ea3 c\u1ee7a x\u1eed l\u00fd t\u1eeb function b\u1ea5t \u0111\u1ed3ng b\u1ed9: await lookUpVersion (); \u0110\u1ec3 d\u00f9ng await th\u00ec code b\u1eaft bu\u1ed9c ph\u1ea3i n\u1eb1m trong async function Future checkVersion () async { var version = await lookUpVersion (); // Do something with version } S\u1eed d\u1ee5ng try , catch , v\u00e0 finally \u0111\u1ec3 x\u1eed l\u00fd errors & cleanup trong code c\u00f3 s\u1eed d\u1ee5ng await : try { version = await lookUpVersion (); } catch ( e ) { // React to inability to look up the version } L\u01b0u \u00fd : async function tr\u1ea3 v\u1ec1 Future object. Trong await expression , gi\u00e1 tr\u1ecb c\u1ee7a expression th\u01b0\u1eddng l\u00e0 Future ; v\u00e0 n\u1ebfu kh\u00f4ng ph\u1ea3i th\u00ec gi\u00e1 tr\u1ecb \u0111\u00f3 c\u0169ng s\u1ebd t\u1ef1 \u0111\u1ed9ng \u0111\u01b0\u1ee3c wrapp v\u00e0o trong Future object. Future object d\u1eabn t\u1edbi m\u1ed9t promise tr\u1ea3 v\u1ec1 object. Sau c\u00f9ng, gi\u00e1 tr\u1ecb c\u1ee7a await expression s\u1ebd tr\u1ea3 v\u1ec1 object \u0111\u00f3. await expression s\u1ebd d\u1eebng vi\u1ec7c th\u1ef1c thi l\u1ea1i cho t\u1edbi khi object s\u1eb5n s\u00e0ng. N\u1ebfu b\u1ea1n g\u1eb7p l\u1ed7i compile-time khi s\u1eed d\u1ee5ng await , h\u00e3y \u0111\u1ea3m b\u1ea3o r\u0103ng b\u1ea1n \u0111ang s\u1eed d\u1ee5ng await b\u00ean trong async function. V\u00ed d\u1ee5 sau s\u1eed d\u1ee5ng await trong app\u2019s main() function, body c\u1ee7a main() ph\u1ea3i \u0111i k\u00e8m v\u1edbi keyword async : Future main () async { checkVersion (); print ( 'In main: version is ${ await lookUpVersion () } ' ); }","title":"Handling Futures"},{"location":"dart/dart_core/#declaring-async-functions","text":"V\u00ed d\u1ee5 chuy\u1ec3n t\u1eeb function \u0111\u1ed3ng b\u1ed9 sang function b\u1ea5t \u0111\u1ed3ng b\u1ed9: String lookUpVersion () => '1.0.0' ; Future < String > lookUpVersion () async => '1.0.0' ;","title":"Declaring async functions"},{"location":"dart/dart_core/#handling-streams","text":"Khi b\u1ea1n c\u1ea7n l\u1ea5y gi\u00e1 tr\u1ecb t\u1eeb m\u1ed9t Stream, b\u1ea1n c\u00f3 2 l\u1ef1a ch\u1ecdn - S\u1eed d\u1ee5ng async v\u00e0 asynchronous for loop ( await for ). - S\u1eed d\u1ee5ng Stream API. await for ( varOrType identifier in expression ) { // Executes each time the stream emits a value. } Gi\u00e1 tr\u1ecb c\u1ee7a expression ph\u1ea3i c\u00f3 ki\u1ec3u Stream . Qu\u00e1 tr\u00ecnh ch\u1ea1y nh\u01b0 sau: \u0110\u1ee3i cho t\u1edbi khi stream \u0111\u01b0a ra gi\u00e1 tr\u1ecb. Th\u1ef1c thi code b\u00ean trong for loop . L\u1eb7p l\u1ea1i 1 v\u00e0 2 cho t\u1edbi khi stream b\u1ecb close. \u0110\u1ec3 d\u1eebng vi\u1ec7c l\u1eafng nghe stream, b\u1ea1n c\u00f3 th\u1ec3 break ho\u1eb7c return , which breaks out of the for loop and unsubscribes from the stream.","title":"Handling Streams"},{"location":"dart/dart_core/#generators","text":"Dart h\u1ed7 tr\u1ee3 2 lo\u1ea1i built-in generator functions: - Synchronous generator: Tr\u1ea3 v\u1ec1 Iterable object. Iterable < int > naturalsTo ( int n ) sync * { int k = 0 ; while ( k < n ) yield k ++ ; } - Asynchronous generator: Tr\u1ea3 v\u1ec1 Stream object. Stream < int > asynchronousNaturalsTo ( int n ) async * { int k = 0 ; while ( k < n ) yield k ++ ; }","title":"Generators"},{"location":"dart/dart_core/#callable-classes","text":"\u0110\u1ec3 c\u00f3 th\u1ec3 g\u1ecdi Dart class nh\u01b0 function, ta implement ph\u01b0\u01a1ng th\u1ee9c call(). class WannabeFunction { call ( String a , String b , String c ) => ' $ a $ b $ c !' ; } main () { var wf = new WannabeFunction (); var out = wf ( \"Hi\" , \"there,\" , \"gang\" ); print ( ' $ out ' ); } Hi there, gang!","title":"Callable classes"},{"location":"dart/dart_core/#isolates","text":"H\u1ea7u h\u1ebft computers, ho\u1eb7c mobile platforms \u0111\u01b0\u1ee3c trang b\u1ecb multi-core CPUs. \u0110\u1ec3 t\u1eadn d\u1ee5ng t\u1ed1i \u0111a l\u1ee3i th\u1ebf \u0111\u00f3, th\u00f4ng developer c\u00f3 th\u1ec3 ch\u1ea1y \u0111\u1ed3ng th\u1eddi c\u00e1c shared-memory threads. Tuy nhi\u00ean, vi\u1ec7c chia s\u1ebb tr\u1ea1ng th\u00e1i (shared-state) c\u1ee7a c\u00e1c concurrency r\u1ea5t d\u1ec5 d\u1eabn t\u1edbi l\u1ed7i c\u0169ng nh\u01b0 l\u00e0m code tr\u1edf n\u00ean ph\u1ee9c t\u1ea1p. Thay v\u00ec s\u1ee7 d\u1ee5ng threads, t\u1ea5t c\u1ea3 Dart code \u0111\u01b0\u1ee3c th\u1ef1c thi \u1edf b\u00ean trong 1 v\u00f9ng c\u00f4 l\u1eadp. M\u1ed7i v\u00f9ng v\u00f4 l\u1eadp c\u00f3 memory heap ri\u00eang, \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng state c\u1ee7a v\u00f9ng isolate n\u00e0y kh\u00f4ng b\u1ecb truy c\u1eadp b\u1edfi v\u00f9ng isolate kh\u00e1c. Chi ti\u1ebft tham kh\u1ea3o dart:isolate .","title":"Isolates"},{"location":"dart/dart_core/#typedefs","text":"Trong Dart, m\u1ecdi th\u1ee9 \u0111\u1ec1u l\u00e0 object. typedef , ho\u1eb7c function-type alias, \u0111\u1eb7t t\u00ean cho function m\u00e0 b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a c\u00e1c fields v\u00e0 tr\u1ea3 v\u1ec1 types. \u0110o\u1ea1n code sau kh\u00f4ng s\u1eed d\u1ee5ng typedef, v\u00e0 th\u00f4ng tin v\u1ec1 ki\u1ec3u s\u1ebd bi\u1ebfn m\u1ea5t khi b\u1ea1n g\u00e1n compare = f , trong khi ki\u1ec3u c\u1ee7a f l\u00e0 (Object, Object) \u2192 int . class SortedCollection { Function compare ; SortedCollection ( int f ( Object a , Object b )) { compare = f ; } } // Initial, broken implementation. int sort ( Object a , Object b ) => 0 ; void main () { SortedCollection coll = SortedCollection ( sort ); // All we know is that compare is a function, // but what type of function? assert ( coll . compare is Function ); } Hot fix s\u1eed d\u1ee5ng typedef typedef Compare = int Function ( Object a , Object b ); class SortedCollection { Compare compare ; SortedCollection ( this . compare ); } // Initial, broken implementation. int sort ( Object a , Object b ) => 0 ; void main () { SortedCollection coll = SortedCollection ( sort ); assert ( coll . compare is Function ); assert ( coll . compare is Compare ); } V\u1edbi phi\u00ean b\u1ea3n Dart 2 hi\u1ec7n t\u1ea1i th\u00ec typedefs ch\u1ec9 gi\u1edbi h\u1ea1n s\u1eed d\u1ee5ng v\u1edbi function . typedef c\u0169ng ch\u1ec9 \u0111\u01a1n gi\u1ea3n l\u00e0 m\u1ed9t alias, gi\u00fap ch\u00fang ta check ki\u1ec3u c\u1ee7a m\u1ed7i function: typedef Compare < T > = int Function ( T a , T b ); int sort ( int a , int b ) => a - b ; void main () { assert ( sort is Compare < int > ); // True! }","title":"Typedefs"},{"location":"dart/dart_core/#driving-deep","text":"\u0110\u1ec3 hi\u1ec3u s\u00e2u h\u01a1n v\u1ec1 Dart th\u00ec kh\u00f4ng c\u00f2n c\u00e1ch n\u00e0o kh\u00e1c ngo\u00e0i m\u1ea7n v\u00e0o core c\u1ee7a Dart. B\u1ea1n c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u s\u00e2u v\u1ec1 c\u01a1 ch\u1ebf ho\u1ea1t \u0111\u1ed9c v\u00e0 c\u00e1ch s\u1eed d\u1ee5ng c\u1ee7a Dart libraries t\u1ea1i A Tour of the Dart Libraries . V\u00e0 l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 code trong s\u00e1ng, convention chu\u1ea9n, hi\u1ec3u nh\u1eefng \u0111i\u1ec1u n\u00ean v\u00e0 kh\u00f4ng n\u00ean khi code Dart, th\u00ec b\u1ea1n n\u00ean \u0111\u1ecdc th\u00eam Effective Dart .","title":"Driving Deep"},{"location":"dart/dart_core/#references","text":"Dart Home Page A Tour of the Dart Language","title":"References"},{"location":"dart/dart_environment_settings/","text":"C\u00e1ch \u0111\u00e2y 4 n\u0103m m\u00ecnh \u0111\u00e3 t\u1eebng code th\u1eed Dart , v\u00e0 th\u1ef1c s\u1ef1 th\u1ea5y n\u00f3 ch\u1eb3ng c\u00f3 g\u00ec n\u1ed5i tr\u1ed9i, n\u00ean quy\u1ebft \u0111\u1ecbnh t\u1eeb b\u1ecf v\u00e0 ko h\u1ecdc. M\u1ed9t th\u1eddi gian b\u1eb5ng \u0111i, sau s\u1ef1 ki\u1ec7n Google I/O di\u1ec5n ra v\u00e0o th\u00e1ng 6 n\u0103m 2018, khi Google ch\u00ednh th\u1ee9c release b\u1ea3n beta#3 c\u1ee7a Flutter th\u00ec Dart \u0111\u00e3 quay tr\u1edf l\u1ea1i v\u00e0 \u0103n h\u1ea1i g\u1ea5p \u0111\u00f4i Th\u1eddi th\u1ebf thay \u0111\u1ed5i, m\u00e0 d\u00f9 ng\u00f4n ng\u1eef ch\u1ec9 l\u00e0 c\u00f4ng c\u1ee5 nh\u01b0ng kh\u00f4ng h\u1ecdc th\u00ec kh\u00f4ng bi\u1ebft n\u00ean quy\u1ebft \u0111\u1ecbnh \u0111\u1ea7u t\u01b0 th\u1eddi gian h\u1ecdc Dart v\u1edbi hi v\u1ecdng m\u1ed9t ng\u00e0y kh\u00f4ng xa s\u1ebd build \u0111\u01b0\u1ee3c app cho Android/iOS tr\u00ean Flutter . Trong b\u00e0i vi\u1ebft n\u00e0y m\u00ecnh note l\u1ea1i nh\u1eefng \u0111i\u1ec1u quan tr\u1ecdng t\u1eeb l\u00fac c\u00e0i \u0111\u1eb7t m\u00f4i tr\u01b0\u1eddng t\u1edbi l\u00fac b\u1eaft tay v\u00e0o code nh\u1eefng d\u00f2ng Dart-lang \u0111\u1ea7u ti\u00ean . Chu\u1ea9n b\u1ecb \u00b6 M\u00ecnh \u0111ang s\u1eed d\u1ee5ng Macbook n\u00ean s\u1ebd ch\u1ec9 m\u00f4 t\u1ea3 c\u00e1ch c\u00e0i \u0111\u1eb7t tr\u00ean Mac, n\u1ebfu b\u1ea1n d\u00f9ng Linux ho\u1eb7c Windows th\u00ec ch\u1ecbu kh\u00f3 t\u00ecm c\u00e1ch c\u00e0i \u0111\u1eb7t t\u01b0\u01a1ng \u1ee9ng tr\u00ean OS \u0111\u00f3 nh\u00e9. Install IDE: IntelliJ IDEA Community . Sau khi c\u00e0i \u0111\u1eb7t, c\u00e1c b\u1ea1n m\u1edf IntelliJ IDEA > Configure > Preferences > Plugins v\u00e0 c\u00e0i th\u00eam Dart & Flutter v\u00e0o nh\u00e9. Install Dart SDK: L\u00e0m theo c\u00e1c b\u01b0\u1edbc sau \u0111\u1ec3 s\u1eed d\u1ee5ng Dart phi\u00ean b\u1ea3n 2 (V\u00ec c\u00f2n trong giai \u0111o\u1ea1n dev, n\u00ean n\u1ebfu ch\u1ec9 c\u00e0i \u0111\u1eb7t theo c\u00e1ch th\u00f4ng th\u01b0\u1eddng s\u1ebd c\u00e0i phi\u00ean b\u1ea3n 1 - stable) Important: The Dart 2 SDK is available from the dev channel only. $ brew tap dart-lang/dart $ brew install dart $ brew upgrade dart --devel --force $ brew switch dart 2.0.0-dev.65.0 - Install Flutter SDK: (N\u1ebfu b\u1ea1n kh\u00f4ng code Flutter th\u00ec c\u00f3 th\u1ec3 b\u1ecf qua) - T\u1ea3i phi\u00ean b\u1ea3n SDK m\u1edbi nh\u1ea5t t\u1ea1i SDK Archive - Gi\u1ea3i n\u00e9n v\u00e0o th\u01b0 m\u1ee5c xyz n\u00e0o \u0111\u00f3 tr\u00ean m\u00e1y b\u1ea1n. (D\u00f9ng l\u1ec7nh unzip ho\u1eb7c thao t\u00e1c tr\u1ef1c ti\u1ebfp b\u1eb1ng tay ). V\u00ed d\u1ee5 \u1edf \u0111\u00e2y m\u00ecnh gi\u1ea3i n\u00e9n v\u00e0o th\u01b0 m\u1ee5c Mobile : $ pwd /Users/euclid/Data/Mobile $ ls -la total 16 drwxr-xr-x 4 euclid staff 136 Jun 27 09:54 . drwxr-xr-x@ 13 euclid staff 442 Jun 27 09:54 .. -rw-r--r--@ 1 euclid staff 6148 Jun 27 09:54 .DS_Store drwxr-xr-x@ 25 euclid staff 850 Jun 19 09:31 flutter - Th\u00eam flutter v\u00e0o system path. M\u00ecnh d\u00f9ng \u201cOh My ZSH!\u201d n\u00ean s\u1ebd s\u1eed file .zshrc , n\u1ebfu c\u00e1c b\u1ea1n kh\u00f4ng d\u00f9ng th\u00ec s\u1eeda file .bashrc . $ vim ~/.zshrc export FLUTTER = /Volumes/MACOS/Users/euclid/Data/Mobile/flutter/bin export PATH = $FLUTTER : $PATH - Kh\u1edfi \u0111\u1ed9ng l\u1ea1i Terminal v\u00e0 ki\u1ec3m tra th\u00f4ng tin: $ flutter doctor - Platform setup: (N\u1ebfu b\u1ea1n kh\u00f4ng code Flutter th\u00ec c\u00f3 th\u1ec3 b\u1ecf qua) - Android Setup 1. N\u1ebfu b\u1ea1n \u0111\u00e3 c\u00e0i Android Studio, th\u00ec r\u1ea5t c\u00f3 th\u1ec3 b\u1ea1n s\u1ebd kh\u00f4ng ph\u1ea3i l\u00e0m b\u01b0\u1edbc n\u00e0y. 1. N\u1ebfu Intellij IDEA kh\u00f4ng t\u1ef1 nh\u1eadn Android SDK th\u00ec b\u1ea1n ph\u1ea3i t\u1ef1 c\u1ea5u h\u00ecnh SDK theo c\u00e1c b\u01b0\u1edbc trong \u1ea3nh nh\u01b0 sau: \u1ede 2 b\u01b0\u1edbc tr\u00ean, ch\u00fang ta hi\u1ec7n th\u01b0 m\u1ee5c Library tr\u00ean m\u00e1y l\u00ean, do SDK m\u1eb7c \u0111\u1ecbnh c\u00e0i b\u1edfi Android Studio s\u1ebd \u1edf th\u01b0 m\u1ee5c /Users/<name>/Library/Android/sdk . Ti\u1ebfp \u0111\u00f3 ta s\u1ebd c\u1ea5u h\u00ecnh SDK nh\u01b0 sau: 1. Sau khi c\u1ea5u h\u00ecnh xong SDK c\u00e1c b\u1ea1n v\u00e0o AVD Manager v\u00e0 t\u1ea1o Virtual Device nh\u1eb1m debug tr\u00ean m\u00e1y \u1ea3o Android nh\u00e9 1. N\u1ebfu sau khi c\u00e0i \u0111\u1eb7t m\u00e0 kh\u00f4ng c\u00f3 [Flutter Device Selection] nh\u01b0 h\u00ecnh b\u00ean d\u01b0\u1edbi trong c\u00e1c Flutter Project: Th\u00ec c\u00f3 th\u1ec3 ph\u1ea3i update l\u1ea1i SDK & Kh\u1edfi \u0111\u1ed9ng l\u1ea1i m\u00e1y t\u00ednh sdkmanager --update Xem th\u00eam gi\u1ea3i ph\u00e1p t\u1ea1i [1] [2] . - iOS Setup 1. C\u00e0i \u0111\u1eb7t Xcode 9.0 ho\u1eb7c b\u1ea3n m\u1edbi h\u01a1n ( web download ho\u1eb7c Mac App Store ) 1. C\u1ea5u h\u00ecnh l\u1ea1i Xcode command-line tools: $ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer C\u00f3 th\u1ec3 \u0111\u1ed5i l\u1ea1i \u0111\u01b0\u1eddng d\u1eabn t\u1edbi Xcode tr\u00ean m\u00e1y b\u1ea1n cho ph\u00f9 h\u1ee3p. Confirm l\u1ea1i ho\u1ea1t \u0111\u1ed9ng ta ch\u1ea1y c\u00e2u l\u1ec7nh sau: $ sudo xcodebuild -license 1. C\u1ea5u h\u00ecnh iOS simulator: $ open -a Simulator Hardware > Device v\u00e0 Window > Scale . 1. Deploy to iOS devices - C\u00e0i \u0111\u1eb7t Homebrew . - Ch\u1ea1y c\u00e1c c\u00e2u l\u1ec7nh sau: $ brew update $ brew install --HEAD libimobiledevice $ brew install ideviceinstaller ios-deploy cocoapods $ pod setup Trong qu\u00e1 tr\u00ecnh c\u00e0i libimobiledevice n\u1ebfu b\u1ea1n g\u1eb7p l\u1ed7i: ./configure: line 15993: syntax error near unexpected token \\`libusbmuxd,' ./configure: line 15993: `PKG_CHECK_MODULES(libusbmuxd, libusbmuxd >= $LIBUSBMUXD_VERSION)' H\u00e3y ch\u1ea1y c\u00e1c l\u1ec7nh sau: $ sudo chmod 777 /usr/local/share/aclocal $ brew install pkg-config $ brew link pkg-config r\u1ed3i ti\u1ebfp t\u1ee5c c\u00e0i l\u1ea1i xem sao nh\u00e9 C\u00e0i \u0111\u1eb7t pod m\u1ea5t c\u1ee1 ~ 500mb n\u00ean h\u00e3y check l\u1ea1i dung l\u01b0\u1ee3ng \u1ed5 SSD tr\u01b0\u1edbc nh\u00e9. M\u00e1y m\u00ecnh ch\u1ec9 c\u00f3 128Gb th\u00f4i - Install Webdev $ pub global activate webdev Th\u00eam pub executables v\u00e0o system path: $ vim ~/.zshrc export PUB=/Volumes/MACOS/Users/euclid/.pub-cache/bin export PATH=$PUB:$PATH Angular Dart project \u00b6 N\u1ebfu b\u1ea1n mu\u1ed1n b\u1eaft tay t\u1ea1o \u1ee9ng d\u1ee5ng web v\u1edbi AngularDart th\u00ec h\u00e3y l\u00e0m c\u00e1c b\u01b0\u1edbc sau. M\u1edf IntelliJ IDEA l\u00ean v\u00e0 b\u1eaft \u0111\u1ea7u t\u1ea1o 1 project m\u1edbi s\u1eed d\u1ee5ng Dart th\u00f4i > Create New Project Kh\u1edfi \u0111\u1ed9ng web server tr\u00ean Terminal $ cd <path_to_angular_dart_project> $ webdev serve [INFO] Setting up file watchers completed, took 54ms [INFO] Waiting for all file watchers to be ready completed, took 338ms [INFO] Reading cached asset graph completed, took 1.0s [INFO] Checking for updates since last build completed, took 847ms [WARNING] No actions completed for 17.4s, waiting on: - build_modules|modules on package:test/$lib$ - build_modules|modules on package:test/bootstrap/browser.dart - angular on package:angular_test/src/frontend.dart - angular on package:angular_test/angular_test.dart - build_modules|modules on package:angular_test/$lib$ .. and 5 more [INFO] Running build completed, took 2m 26s [INFO] Caching finalized dependency graph completed, took 561ms [INFO] Succeeded after 2m 27s with 2230 outputs (6459 actions) Serving `web` on http://localhost:8080 Serving `test` on http://localhost:8081 Ho\u1eb7c right-click v\u00e0o HTML file v\u00e0 ch\u1ecdn Open in Browser N\u1ebfu c\u00f3 l\u1ed7i /usr/local/opt/dart/libexec/bin/pub global run webdev serve web:50858 webdev could not run for this project. No pubspec.lock file found, please run \"pub get\" first. Dart Dev Server terminated H\u00e3y ch\u1ea1y l\u1ec7nh $ pub get (Ho\u1eb7c right-click v\u00e0o pubspec.yaml v\u00e0 ch\u1ecdn Pub: Get Dependencies ). Sau \u0111\u00f3 Open in Browser l\u1ea1i file index.html v\u00e0 ch\u1edd Dart Dev Server ch\u1ea1y xong tr\u00ean c\u1eeda s\u1ed5 Log. Truy c\u1eadp \u0111\u1ecba ch\u1ec9 http://localhost:8080 \u0111\u1ec3 xem k\u1ebft qu\u1ea3: DONE ! Note: T\u1eeb Dart 1.x \u0111\u1ebfn Dart 2 m\u1ecdi th\u1ee9 \u0111\u00e3 thay \u0111\u1ed5i: | Dart 1.x | Dart 2 | | Dartium, content shell | Chrome and dartdevc | | pub build | webdev build | | pub serve | webdev serve | | pub run angular_test | pub run build_runner test -- -p chrome . See: Running tests | | pub transformers | build package transformers. See: Transforming code | Console dart project \u00b6 \u0110\u1ec3 b\u1eaft \u0111\u1ea7u h\u1ecdc Dart , m\u00ecnh khuy\u00ean c\u00e1c b\u1ea1n n\u00ean t\u1ea1o Command-line application , v\u1eeba nh\u1eb9 nh\u00e0ng l\u1ea1i t\u0103ng m\u1ee9c \u0111\u1ed9 t\u1eadp trung v\u00e0o ng\u00f4n ng\u1eef h\u01a1n. Ch\u1ec9 c\u1ea7n ch\u00fa \u00fd khi t\u1ea1o Project nh\u1edb l\u1ea1i ki\u1ec3u d\u1ef1 \u00e1n l\u00e0 \u0111\u01b0\u1ee3c: Learn dart 2 \u00b6 N\u1ebfu b\u1ea1n \u0111\u00e3 c\u00f3 ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh th\u00ec vi\u1ec7c h\u1ecdc Dart 2 kh\u00f4ng h\u1ec1 kh\u00f3. Dart v\u00e0 Java theo m\u00ecnh ch\u1eafc ph\u1ea3i gi\u1ed1ng nhau t\u1edbi 99,99% m\u1ea5t tuy nhi\u00ean 0,01% \u0111\u00f3 c\u0169ng r\u1ea5t nhi\u1ec1u th\u1ee9c c\u1ea7n h\u1ecdc. \u0110\u1ecdc b\u00e0i vi\u1ebft n\u00e0y n\u1ebfu b\u1ea1n mu\u1ed1n c\u00f3 c\u00e1i nh\u00ecn to\u00e0n c\u1ea3nh v\u1ec1 Dart 2 nh\u00e9. References \u00b6 Dart Home Page IntelliJ IDEA supports developing, running, and debugging Dart Dart 2 Migration Guide for Web Apps","title":"Dart C\u00e0i \u0111\u1eb7t m\u00f4i tr\u01b0\u1eddng"},{"location":"dart/dart_environment_settings/#chuan-bi","text":"M\u00ecnh \u0111ang s\u1eed d\u1ee5ng Macbook n\u00ean s\u1ebd ch\u1ec9 m\u00f4 t\u1ea3 c\u00e1ch c\u00e0i \u0111\u1eb7t tr\u00ean Mac, n\u1ebfu b\u1ea1n d\u00f9ng Linux ho\u1eb7c Windows th\u00ec ch\u1ecbu kh\u00f3 t\u00ecm c\u00e1ch c\u00e0i \u0111\u1eb7t t\u01b0\u01a1ng \u1ee9ng tr\u00ean OS \u0111\u00f3 nh\u00e9. Install IDE: IntelliJ IDEA Community . Sau khi c\u00e0i \u0111\u1eb7t, c\u00e1c b\u1ea1n m\u1edf IntelliJ IDEA > Configure > Preferences > Plugins v\u00e0 c\u00e0i th\u00eam Dart & Flutter v\u00e0o nh\u00e9. Install Dart SDK: L\u00e0m theo c\u00e1c b\u01b0\u1edbc sau \u0111\u1ec3 s\u1eed d\u1ee5ng Dart phi\u00ean b\u1ea3n 2 (V\u00ec c\u00f2n trong giai \u0111o\u1ea1n dev, n\u00ean n\u1ebfu ch\u1ec9 c\u00e0i \u0111\u1eb7t theo c\u00e1ch th\u00f4ng th\u01b0\u1eddng s\u1ebd c\u00e0i phi\u00ean b\u1ea3n 1 - stable) Important: The Dart 2 SDK is available from the dev channel only. $ brew tap dart-lang/dart $ brew install dart $ brew upgrade dart --devel --force $ brew switch dart 2.0.0-dev.65.0 - Install Flutter SDK: (N\u1ebfu b\u1ea1n kh\u00f4ng code Flutter th\u00ec c\u00f3 th\u1ec3 b\u1ecf qua) - T\u1ea3i phi\u00ean b\u1ea3n SDK m\u1edbi nh\u1ea5t t\u1ea1i SDK Archive - Gi\u1ea3i n\u00e9n v\u00e0o th\u01b0 m\u1ee5c xyz n\u00e0o \u0111\u00f3 tr\u00ean m\u00e1y b\u1ea1n. (D\u00f9ng l\u1ec7nh unzip ho\u1eb7c thao t\u00e1c tr\u1ef1c ti\u1ebfp b\u1eb1ng tay ). V\u00ed d\u1ee5 \u1edf \u0111\u00e2y m\u00ecnh gi\u1ea3i n\u00e9n v\u00e0o th\u01b0 m\u1ee5c Mobile : $ pwd /Users/euclid/Data/Mobile $ ls -la total 16 drwxr-xr-x 4 euclid staff 136 Jun 27 09:54 . drwxr-xr-x@ 13 euclid staff 442 Jun 27 09:54 .. -rw-r--r--@ 1 euclid staff 6148 Jun 27 09:54 .DS_Store drwxr-xr-x@ 25 euclid staff 850 Jun 19 09:31 flutter - Th\u00eam flutter v\u00e0o system path. M\u00ecnh d\u00f9ng \u201cOh My ZSH!\u201d n\u00ean s\u1ebd s\u1eed file .zshrc , n\u1ebfu c\u00e1c b\u1ea1n kh\u00f4ng d\u00f9ng th\u00ec s\u1eeda file .bashrc . $ vim ~/.zshrc export FLUTTER = /Volumes/MACOS/Users/euclid/Data/Mobile/flutter/bin export PATH = $FLUTTER : $PATH - Kh\u1edfi \u0111\u1ed9ng l\u1ea1i Terminal v\u00e0 ki\u1ec3m tra th\u00f4ng tin: $ flutter doctor - Platform setup: (N\u1ebfu b\u1ea1n kh\u00f4ng code Flutter th\u00ec c\u00f3 th\u1ec3 b\u1ecf qua) - Android Setup 1. N\u1ebfu b\u1ea1n \u0111\u00e3 c\u00e0i Android Studio, th\u00ec r\u1ea5t c\u00f3 th\u1ec3 b\u1ea1n s\u1ebd kh\u00f4ng ph\u1ea3i l\u00e0m b\u01b0\u1edbc n\u00e0y. 1. N\u1ebfu Intellij IDEA kh\u00f4ng t\u1ef1 nh\u1eadn Android SDK th\u00ec b\u1ea1n ph\u1ea3i t\u1ef1 c\u1ea5u h\u00ecnh SDK theo c\u00e1c b\u01b0\u1edbc trong \u1ea3nh nh\u01b0 sau: \u1ede 2 b\u01b0\u1edbc tr\u00ean, ch\u00fang ta hi\u1ec7n th\u01b0 m\u1ee5c Library tr\u00ean m\u00e1y l\u00ean, do SDK m\u1eb7c \u0111\u1ecbnh c\u00e0i b\u1edfi Android Studio s\u1ebd \u1edf th\u01b0 m\u1ee5c /Users/<name>/Library/Android/sdk . Ti\u1ebfp \u0111\u00f3 ta s\u1ebd c\u1ea5u h\u00ecnh SDK nh\u01b0 sau: 1. Sau khi c\u1ea5u h\u00ecnh xong SDK c\u00e1c b\u1ea1n v\u00e0o AVD Manager v\u00e0 t\u1ea1o Virtual Device nh\u1eb1m debug tr\u00ean m\u00e1y \u1ea3o Android nh\u00e9 1. N\u1ebfu sau khi c\u00e0i \u0111\u1eb7t m\u00e0 kh\u00f4ng c\u00f3 [Flutter Device Selection] nh\u01b0 h\u00ecnh b\u00ean d\u01b0\u1edbi trong c\u00e1c Flutter Project: Th\u00ec c\u00f3 th\u1ec3 ph\u1ea3i update l\u1ea1i SDK & Kh\u1edfi \u0111\u1ed9ng l\u1ea1i m\u00e1y t\u00ednh sdkmanager --update Xem th\u00eam gi\u1ea3i ph\u00e1p t\u1ea1i [1] [2] . - iOS Setup 1. C\u00e0i \u0111\u1eb7t Xcode 9.0 ho\u1eb7c b\u1ea3n m\u1edbi h\u01a1n ( web download ho\u1eb7c Mac App Store ) 1. C\u1ea5u h\u00ecnh l\u1ea1i Xcode command-line tools: $ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer C\u00f3 th\u1ec3 \u0111\u1ed5i l\u1ea1i \u0111\u01b0\u1eddng d\u1eabn t\u1edbi Xcode tr\u00ean m\u00e1y b\u1ea1n cho ph\u00f9 h\u1ee3p. Confirm l\u1ea1i ho\u1ea1t \u0111\u1ed9ng ta ch\u1ea1y c\u00e2u l\u1ec7nh sau: $ sudo xcodebuild -license 1. C\u1ea5u h\u00ecnh iOS simulator: $ open -a Simulator Hardware > Device v\u00e0 Window > Scale . 1. Deploy to iOS devices - C\u00e0i \u0111\u1eb7t Homebrew . - Ch\u1ea1y c\u00e1c c\u00e2u l\u1ec7nh sau: $ brew update $ brew install --HEAD libimobiledevice $ brew install ideviceinstaller ios-deploy cocoapods $ pod setup Trong qu\u00e1 tr\u00ecnh c\u00e0i libimobiledevice n\u1ebfu b\u1ea1n g\u1eb7p l\u1ed7i: ./configure: line 15993: syntax error near unexpected token \\`libusbmuxd,' ./configure: line 15993: `PKG_CHECK_MODULES(libusbmuxd, libusbmuxd >= $LIBUSBMUXD_VERSION)' H\u00e3y ch\u1ea1y c\u00e1c l\u1ec7nh sau: $ sudo chmod 777 /usr/local/share/aclocal $ brew install pkg-config $ brew link pkg-config r\u1ed3i ti\u1ebfp t\u1ee5c c\u00e0i l\u1ea1i xem sao nh\u00e9 C\u00e0i \u0111\u1eb7t pod m\u1ea5t c\u1ee1 ~ 500mb n\u00ean h\u00e3y check l\u1ea1i dung l\u01b0\u1ee3ng \u1ed5 SSD tr\u01b0\u1edbc nh\u00e9. M\u00e1y m\u00ecnh ch\u1ec9 c\u00f3 128Gb th\u00f4i - Install Webdev $ pub global activate webdev Th\u00eam pub executables v\u00e0o system path: $ vim ~/.zshrc export PUB=/Volumes/MACOS/Users/euclid/.pub-cache/bin export PATH=$PUB:$PATH","title":"Chu\u1ea9n b\u1ecb"},{"location":"dart/dart_environment_settings/#angular-dart-project","text":"N\u1ebfu b\u1ea1n mu\u1ed1n b\u1eaft tay t\u1ea1o \u1ee9ng d\u1ee5ng web v\u1edbi AngularDart th\u00ec h\u00e3y l\u00e0m c\u00e1c b\u01b0\u1edbc sau. M\u1edf IntelliJ IDEA l\u00ean v\u00e0 b\u1eaft \u0111\u1ea7u t\u1ea1o 1 project m\u1edbi s\u1eed d\u1ee5ng Dart th\u00f4i > Create New Project Kh\u1edfi \u0111\u1ed9ng web server tr\u00ean Terminal $ cd <path_to_angular_dart_project> $ webdev serve [INFO] Setting up file watchers completed, took 54ms [INFO] Waiting for all file watchers to be ready completed, took 338ms [INFO] Reading cached asset graph completed, took 1.0s [INFO] Checking for updates since last build completed, took 847ms [WARNING] No actions completed for 17.4s, waiting on: - build_modules|modules on package:test/$lib$ - build_modules|modules on package:test/bootstrap/browser.dart - angular on package:angular_test/src/frontend.dart - angular on package:angular_test/angular_test.dart - build_modules|modules on package:angular_test/$lib$ .. and 5 more [INFO] Running build completed, took 2m 26s [INFO] Caching finalized dependency graph completed, took 561ms [INFO] Succeeded after 2m 27s with 2230 outputs (6459 actions) Serving `web` on http://localhost:8080 Serving `test` on http://localhost:8081 Ho\u1eb7c right-click v\u00e0o HTML file v\u00e0 ch\u1ecdn Open in Browser N\u1ebfu c\u00f3 l\u1ed7i /usr/local/opt/dart/libexec/bin/pub global run webdev serve web:50858 webdev could not run for this project. No pubspec.lock file found, please run \"pub get\" first. Dart Dev Server terminated H\u00e3y ch\u1ea1y l\u1ec7nh $ pub get (Ho\u1eb7c right-click v\u00e0o pubspec.yaml v\u00e0 ch\u1ecdn Pub: Get Dependencies ). Sau \u0111\u00f3 Open in Browser l\u1ea1i file index.html v\u00e0 ch\u1edd Dart Dev Server ch\u1ea1y xong tr\u00ean c\u1eeda s\u1ed5 Log. Truy c\u1eadp \u0111\u1ecba ch\u1ec9 http://localhost:8080 \u0111\u1ec3 xem k\u1ebft qu\u1ea3: DONE ! Note: T\u1eeb Dart 1.x \u0111\u1ebfn Dart 2 m\u1ecdi th\u1ee9 \u0111\u00e3 thay \u0111\u1ed5i: | Dart 1.x | Dart 2 | | Dartium, content shell | Chrome and dartdevc | | pub build | webdev build | | pub serve | webdev serve | | pub run angular_test | pub run build_runner test -- -p chrome . See: Running tests | | pub transformers | build package transformers. See: Transforming code |","title":"Angular Dart project"},{"location":"dart/dart_environment_settings/#console-dart-project","text":"\u0110\u1ec3 b\u1eaft \u0111\u1ea7u h\u1ecdc Dart , m\u00ecnh khuy\u00ean c\u00e1c b\u1ea1n n\u00ean t\u1ea1o Command-line application , v\u1eeba nh\u1eb9 nh\u00e0ng l\u1ea1i t\u0103ng m\u1ee9c \u0111\u1ed9 t\u1eadp trung v\u00e0o ng\u00f4n ng\u1eef h\u01a1n. Ch\u1ec9 c\u1ea7n ch\u00fa \u00fd khi t\u1ea1o Project nh\u1edb l\u1ea1i ki\u1ec3u d\u1ef1 \u00e1n l\u00e0 \u0111\u01b0\u1ee3c:","title":"Console dart project"},{"location":"dart/dart_environment_settings/#learn-dart-2","text":"N\u1ebfu b\u1ea1n \u0111\u00e3 c\u00f3 ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh th\u00ec vi\u1ec7c h\u1ecdc Dart 2 kh\u00f4ng h\u1ec1 kh\u00f3. Dart v\u00e0 Java theo m\u00ecnh ch\u1eafc ph\u1ea3i gi\u1ed1ng nhau t\u1edbi 99,99% m\u1ea5t tuy nhi\u00ean 0,01% \u0111\u00f3 c\u0169ng r\u1ea5t nhi\u1ec1u th\u1ee9c c\u1ea7n h\u1ecdc. \u0110\u1ecdc b\u00e0i vi\u1ebft n\u00e0y n\u1ebfu b\u1ea1n mu\u1ed1n c\u00f3 c\u00e1i nh\u00ecn to\u00e0n c\u1ea3nh v\u1ec1 Dart 2 nh\u00e9.","title":"Learn dart 2"},{"location":"dart/dart_environment_settings/#references","text":"Dart Home Page IntelliJ IDEA supports developing, running, and debugging Dart Dart 2 Migration Guide for Web Apps","title":"References"},{"location":"flutter/flutter_introduction/","text":"Trong s\u1ed1 nhi\u1ec1u tin t\u1ee9c n\u1ed5i l\u00ean trong n\u0103m 2018 nh\u01b0 Ph\u00e1p gi\u00e0nh c\u00fap th\u1ebf gi\u1edbi FIFA hay c\u00e1i ch\u1ebft c\u1ee7a Stephen Hawkins, m\u1ed9t tin t\u1ee9c kh\u00e1c c\u0169ng kh\u00e1 n\u1ed5i b\u1eadt l\u00e0 Google \u0111\u00e3 ra m\u1eaft Flutter 1.0 nh\u01b0 m\u1ed9t n\u1ec1n t\u1ea3ng ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng m\u1edf. \u0110\u00f3 l\u00e0 m\u1ed9t m\u00f3n qu\u00e0 cho t\u1ea5t c\u1ea3 c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng tr\u01b0\u1edbc \u0111\u00e2y \u0111\u00e3 t\u1eebng vi\u1ebft code cho c\u1ea3 \u1ee9ng d\u1ee5ng Android v\u00e0 \u1ee9ng d\u1ee5ng iOS. Ngo\u00e0i ra, n\u00f3 c\u0169ng h\u1ed7 tr\u1ee3 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng high-performing, v\u00f4 s\u1ed1 c\u00e1c widget,m\u1ed9t lo\u1ea1t c\u00e1c animation m\u01b0\u1ee3t m\u00e0, v.v. Ch\u00fang ta h\u00e3y gi\u1edbi thi\u1ec7u ng\u1eafn g\u1ecdn v\u1ec1 Flutter! \u00b6 Flutter n\u00f3i chung l\u00e0 m\u1ed9t b\u1ed9 c\u00f4ng c\u1ee5 ph\u00e1t tri\u1ec3n ph\u1ea7n m\u1ec1m (SDK) \u0111\u1ec3 x\u00e2y d\u1ef1ng c\u00e1c \u1ee9ng d\u1ee5ng hi\u1ec7n \u0111\u1ea1i. N\u00f3 cung c\u1ea5p high-performance v\u00e0 high-fidelity cho c\u1ea3 Android v\u00e0 iOS. Jamie Notter cho bi\u1ebft, c\u1ea3i ti\u1ebfn c\u1ee7a c\u1ea3i ti\u1ebfn \u0111ang thay \u0111\u1ed5i v\u00e0 m\u1edf ra gi\u00e1 tr\u1ecb m\u1edbi . T\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1eady, m\u1ed7i c\u00f4ng ngh\u1ec7 m\u1edbi \u0111\u1ec1u c\u00f3 nh\u1eefng l\u1ee3i th\u1ebf ri\u00eang gi\u00fap ch\u00fang ta b\u1eb1ng c\u00e1ch n\u00e0y hay c\u00e1ch kh\u00e1c. Ch\u00fang ta h\u00e3y xem x\u00e9t m\u1ed9t s\u1ed1 \u01b0u \u0111i\u1ec3m c\u1ee7a Flutter \u0111\u1ec3 bi\u1ebfn n\u00f3 th\u00e0nh SDK th\u00e2n thi\u1ec7n v\u1edbi nh\u00e0 ph\u00e1t tri\u1ec3n. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 9 l\u00fd do t\u1ea1i sao Flutter c\u00f3 th\u1ec3 t\u1ea1o s\u1ef1 kh\u00e1c bi\u1ec7t \u00b6 1. Open-source Project \u00b6 N\u00f3 \u0111\u01b0\u1ee3c Google t\u1ea1o ra v\u00e0 ra m\u1eaft d\u01b0\u1edbi d\u1ea1ng SDK m\u00e3 ngu\u1ed3n m\u1edf \u0111\u1ec3 ph\u00e1t tri\u1ec3n c\u00e1c \u1ee9ng d\u1ee5ng d\u1ef1a tr\u00ean thi\u1ebft b\u1ecb di \u0111\u1ed9ng. N\u00f3 ho\u00e0n to\u00e0n mi\u1ec5n ph\u00ed v\u00e0 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho b\u1ea5t k\u1ef3 m\u1ee5c \u0111\u00edch nh\u1ea5t \u0111\u1ecbnh n\u00e0o \u0111\u1ec3 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng. N\u00f3 kh\u00f4ng ch\u1ec9 cung c\u1ea5p cho b\u1ea1n m\u1ed9t t\u00f9y ch\u1ecdn mi\u1ec5n ph\u00ed \u0111\u1ec3 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng m\u00e0 c\u00f2n cung c\u1ea5p cho b\u1ea1n v\u00f4 s\u1ed1 t\u00f9y ch\u1ecdn mi\u1ec5n ph\u00ed, kh\u00f4ng gi\u1ed1ng nh\u01b0 c\u00e1c c\u00f4ng ty kh\u00e1c. 2. M\u1ed9t codebase cho Android v\u00e0 iOS \u00b6 Flutter d\u1ef1a tr\u00ean codebase duy nh\u1ea5t \u0111\u1ec3 ph\u00e1t tri\u1ec3n c\u00e1c \u1ee9ng d\u1ee5ng h\u1ed7 tr\u1ee3 c\u1ea3 hai n\u1ec1n t\u1ea3ng Android v\u00e0 IOS. N\u00f3 c\u00f3 c\u00e1c widgets nh\u01b0 l\u00e0 Material design cho Android v\u00e0 Cupertino cho iOS theo h\u01b0\u1edbng d\u1eabn c\u1ee7a c\u1ea3 hai n\u1ec1n t\u1ea3ng. \u0110i\u1ec1u n\u00e0y l\u00e0m cho nhi\u1ec7m v\u1ee5 d\u1ec5 d\u00e0ng h\u01a1n r\u1ea5t nhi\u1ec1u cho c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n v\u00ec gi\u1edd \u0111\u00e2y h\u1ecd c\u00f3 th\u1ec3 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng tr\u00ean c\u1ea3 Android v\u00e0 iOS. N\u00f3 c\u0169ng tr\u00e1nh \u0111\u01b0\u1ee3c nh\u1eefng r\u1eafc r\u1ed1i c\u1ee7a vi\u1ec7c chuy\u1ec3n \u0111\u1ed5i.Flutter c\u0169ng h\u1ed7 tr\u1ee3 n\u1ec1n t\u1ea3ng Fuchsia \u0111\u01b0\u1ee3c nhi\u1ec1u ng\u01b0\u1eddi tin l\u00e0 s\u1ebd thay th\u1ebf Android trong t\u01b0\u01a1ng lai g\u1ea7n. 3. Dart \u00b6 To\u00e0n b\u1ed9 khu\u00f4n kh\u1ed5 c\u1ee7a Flutter d\u1ef1a tr\u00ean Dart. N\u00f3 l\u00e0 ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n b\u1edfi Google v\u00e0 h\u1ed7 tr\u1ee3 t\u1ea5t c\u1ea3 c\u00e1c OS. Dart r\u1ea5t d\u1ec5 h\u1ecdc, \u1ed5n \u0111\u1ecbnh, c\u00f3 kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng cao v\u00e0 deployable. N\u00f3 c\u00f3 h\u1ed7 tr\u1ee3 v\u1edbi m\u1ed9t s\u1ed1 libraries v\u00e0 tools t\u1ed1t nh\u1ea5t hi\u1ec7n nay. Vi\u1ec7c s\u1eed d\u1ee5ng Dart cho Flutter gi\u00fap b\u1ea1n s\u1eed d\u1ee5ng compiler Just-in-Time \u0111\u1ec3 c\u1ea3i thi\u1ec7n quy tr\u00ecnh ph\u00e1t tri\u1ec3n. Dart trong Flutter cung c\u1ea5p cho b\u1ea1n m\u1ed9t native performance cho c\u00e1c n\u1ec1n t\u1ea3ng kh\u00e1c nhau, chuy\u1ec3n ti\u1ebfp m\u01b0\u1ee3t m\u00e0 v\u00e0 animations \u1edf 60 FPS. B\u1ea1n c\u0169ng c\u00f3 th\u1ec3 c\u00f3 quy\u1ec1n truy c\u1eadp v\u00e0o b\u1ed9 s\u01b0u t\u1eadp ng\u00e0y c\u00e0ng t\u0103ng c\u1ee7a Dart libraries v\u00e0 tools. 4. Hot Reload \u00b6 Flutter \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 t\u00ednh n\u0103ng Hot Reload. \u0110i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 n\u1ebfu b\u1ea1n th\u1ef1c hi\u1ec7n b\u1ea5t k\u1ef3 thay \u0111\u1ed5i n\u00e0o trong m\u00e3 th\u00ec b\u1ea1n c\u00f3 th\u1ec3 th\u1ea5y ch\u00fang ngay l\u1eadp t\u1ee9c m\u00e0 kh\u00f4ng c\u1ea7n ch\u1edd \u0111\u1ee3i ho\u1eb7c kh\u1edfi \u0111\u1ed9ng l\u1ea1i \u1ee9ng d\u1ee5ng. Th\u00f4ng th\u01b0\u1eddng, ph\u1ea3i m\u1ea5t v\u00e0i gi\u00e2y \u0111\u1ec3 ki\u1ec3m tra c\u00e1c thay \u0111\u1ed5i. \u0110i\u1ec1u n\u00e0y gi\u00fap c\u00e1c nh\u00e0 thi\u1ebft k\u1ebf th\u00eam c\u00e1c t\u00ednh n\u0103ng m\u1edbi, s\u1eeda l\u1ed7i v\u00e0 th\u1eed nghi\u1ec7m \u1ee9ng d\u1ee5ng hi\u1ec7u qu\u1ea3 h\u01a1n. M\u1eb7c d\u00f9 n\u00f3 c\u00f3 m\u1ed9t v\u00e0i h\u1ea1n ch\u1ebf khi so s\u00e1nh v\u1edbi ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng native nh\u01b0ng n\u00f3 r\u1ea5t ti\u00ean ti\u1ebfn. Trong khi ph\u00e1t tri\u1ec1n \u1ee9ng d\u1ee5ng native, c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n ph\u1ea3i ch\u1edd v\u00e0i ph\u00fat \u0111\u1ec3 ki\u1ec3m tra nh\u1eefng thay \u0111\u1ed5i h\u1ecd \u0111\u00e3 th\u1ef1c hi\u1ec7n. 5. Widgets \u00b6 Widgets l\u00e0 th\u00e0nh ph\u1ea7n thi\u1ebft y\u1ebfu c\u1ee7a b\u1ea5t k\u1ef3 \u1ee9ng d\u1ee5ng n\u00e0o. M\u1ed9t widget c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t button, menu, font v\u00e0 nhi\u1ec1u th\u1ee9 kh\u00e1c. Nh\u1eefng th\u1ee9 n\u00e0y \u0111\u00f2i h\u1ecfi c\u1ea7n ph\u1ea3i nhanh, m\u1edf r\u1ed9ng v\u00e0 ho\u00e0n to\u00e0n t\u00f9y bi\u1ebfn \u0111\u01b0\u1ee3c. B\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng Flutter, b\u1ea1n s\u1ebd c\u00f3 \u0111\u01b0\u1ee3c m\u1ed9t b\u1ed9 th\u01b0 vi\u1ec7n widget v\u1edbi nhi\u1ec1u lo\u1ea1i widget \u0111\u1ec3 s\u1eed d\u1ee5ng trong khi x\u00e2y d\u1ef1ng \u1ee9ng d\u1ee5ng c\u1ee7a m\u00ecnh. Ch\u00fang nhanh, tr\u00f4ng t\u1ef1 nhi\u00ean v\u00e0 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u00f9y ch\u1ec9nh d\u1ec5 d\u00e0ng. 6. MVP \u00b6 MVP ho\u1eb7c minimum viable product l\u00e0 m\u1ed9t s\u1ea3n ph\u1ea9m \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf v\u1edbi c\u00e1c t\u00ednh n\u0103ng t\u1ed1i thi\u1ec3u \u0111\u1ec3 c\u00f3 th\u1ec3 l\u00e0m h\u00e0i l\u00f2ng kh\u00e1ch h\u00e0ng \u1edf giai \u0111o\u1ea1n \u0111\u1ea7u. N\u00f3 c\u0169ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 l\u1ea5y feedback cho nh\u1eefng c\u1ea3i ti\u1ebfn trong t\u01b0\u01a1ng lai. V\u00ec v\u1eady, n\u1ebfu b\u1ea1n l\u00e0 m\u1ed9t trong nh\u1eefng nh\u00e0 ph\u00e1t tri\u1ec3n, nh\u1eefng ng\u01b0\u1eddi c\u1ea7n MVP c\u1ee7a \u1ee9ng d\u1ee5ng cho kh\u00e1ch h\u00e0ng th\u00ec Flutter s\u1ebd l\u00e0 m\u1ed9t l\u1ef1a ch\u1ecdn tuy\u1ec7t v\u1eddi. N\u00f3 \u0111\u1eb7c bi\u1ec7t h\u1eefu \u00edch n\u1ebfu b\u1ea1n c\u00f3 \u00edt th\u1eddi gian h\u01a1n v\u00e0 b\u1ea1n mu\u1ed1n \u0111\u01b0a ra \u00fd t\u01b0\u1edfng r\u00f5 r\u00e0ng v\u1ec1 \u1ee9ng d\u1ee5ng cho kh\u00e1ch h\u00e0ng c\u1ee7a m\u00ecnh. 7. Nhanh v\u00e0 nhanh \u00b6 N\u00f3 \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng nhanh h\u01a1n c\u00e1c n\u1ec1n t\u1ea3ng c\u00f3 s\u1eb5n kh\u00e1c. Do nhi\u1ec1u t\u00ednh n\u0103ng c\u1ee7a n\u00f3, n\u00f3 cho ph\u00e9p c\u00e1c developers code nhanh h\u01a1n v\u00e0 hi\u1ec7u qu\u1ea3. Nh\u01b0 \u0111\u00e3 th\u1ea3o lu\u1eadn \u1edf tr\u00ean, t\u00ednh n\u0103ng Hot Reload c\u1ee7a n\u00f3 l\u00e0m cho to\u00e0n b\u1ed9 qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng nhanh h\u01a1n v\u00e0 \u0111\u01a1n gi\u1ea3n h\u01a1n. Ngo\u00e0i ra, n\u00f3 \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf d\u01b0\u1edbi d\u1ea1ng m\u1ed9t codebase h\u1ed7 tr\u1ee3 c\u1ea3 Android v\u00e0 iOS m\u00e0 ch\u00fang ta s\u1ebd th\u1ea3o lu\u1eadn sau. \u0110i\u1ec1u n\u00e0y gi\u00fap gi\u1ea3m th\u1eddi gian th\u1eed nghi\u1ec7m v\u00ec hi\u1ec7n t\u1ea1i b\u1ea1n kh\u00f4ng b\u1eaft bu\u1ed9c ph\u1ea3i th\u1eed nghi\u1ec7m \u1ee9ng d\u1ee5ng c\u1ee7a m\u00ecnh cho 2 n\u1ec1n t\u1ea3ng kh\u00e1c nhau. T\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1eady, N\u00f3 c\u0169ng t\u0103ng c\u01b0\u1eddng qu\u00e1 tr\u00ecnh QA b\u1eb1ng c\u00e1ch l\u00e0m cho n\u00f3 nhanh h\u01a1n v\u00e0 ho\u00e0n h\u1ea3o h\u01a1n. H\u01a1n n\u1eefa, b\u1ea1n c\u0169ng c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng Flutter tr\u00ean c\u00e1c low-end devices. Th\u1eadt d\u1ec5 d\u00e0ng \u0111\u1ec3 thi\u1ebft l\u1eadp v\u00e0 b\u1eaft \u0111\u1ea7u vi\u1ebft code cho m\u1ed9t \u1ee9ng d\u1ee5ng. N\u00f3 b\u1ecf qua y\u00eau c\u1ea7u c\u1ee7a b\u1ea5t k\u1ef3 powerful devices n\u00e0o v\u1edbi high specs. 8. Native Features \u00b6 Flutter cung c\u1ea5p cho b\u1ea1n quy\u1ec1n truy c\u1eadp c\u00e1c t\u00ednh n\u0103ng g\u1ed1c c\u1ee7a thi\u1ebft b\u1ecb c\u1ee7a b\u1ea1n nh\u01b0 m\u00e1y \u1ea3nh, \u0111\u1ecbnh v\u1ecb \u0111\u1ecba l\u00fd v\u00e0 c\u00e1c \u1ee9ng d\u1ee5ng kh\u00e1c gi\u1ed1ng nh\u01b0 b\u1ea5t k\u1ef3 \u1ee9ng d\u1ee5ng native n\u00e0o kh\u00e1c. Tuy nhi\u00ean, c\u00e1c ch\u1ee9c n\u0103ng n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c k\u1ebft h\u1ee3p b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng ng\u00f4n ng\u1eef native. 9. H\u1ed7 tr\u1ee3 ch\u00ednh th\u1ee9c \u00b6 V\u00ec Flutter \u0111\u01b0\u1ee3c t\u1ea1o v\u00e0 ra m\u1eaft b\u1edfi Google, kh\u00f4ng c\u00f3 g\u00ec ph\u1ea3i b\u00e0n v\u1ec1 c\u1ed9ng \u0111\u1ed3ng h\u1ed7 tr\u1ee3 c\u1ee7a n\u00f3. N\u00f3 \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 b\u1edfi m\u1ed9t team m\u1ea1nh v\u00e0 c\u00f3 m\u1ed9t c\u1ed9ng \u0111\u1ed3ng v\u1edbi h\u01a1n 1000 nh\u00e0 ph\u00e1t tri\u1ec3n lu\u00f4n s\u1eb5n s\u00e0ng gi\u00fap \u0111\u1ee1 v\u00e0 l\u00e0m cho Flutter tr\u1edf n\u00ean t\u1ed1t h\u01a1n. T\u00f3m l\u1ea1i! \u00b6 \u0110\u1ec3 t\u00f3m t\u1eaft t\u1ea5t c\u1ea3, ch\u00fang ta c\u00f3 th\u1ec3 n\u00f3i r\u1eb1ng \u0111\u00f3 l\u00e0 m\u1ed9t cross-platform \u0111ang tr\u1edf n\u00ean ph\u1ed5 bi\u1ebfn m\u1ed7i ng\u00e0y. Flutter r\u1ea5t d\u1ec5 d\u00e0ng, \u0111\u01a1n gi\u1ea3n v\u00e0 c\u0169ng c\u00f3 ti\u1ec1m n\u0103ng l\u1edbn \u0111\u1ec3 ph\u00e1t tri\u1ec3n m\u1ed9t \u1ee9ng d\u1ee5ng m\u1ed9t c\u00e1ch d\u1ec5 d\u00e0ng. R\u00f5 r\u00e0ng, m\u1ea5t \u00edt th\u1eddi gian h\u01a1n nhi\u1ec1u so v\u1edbi vi\u1ec7c t\u1ea1o 2 \u1ee9ng d\u1ee5ng t\u01b0\u01a1ng t\u1ef1 tr\u00ean c\u00e1c n\u1ec1n t\u1ea3ng kh\u00e1c nhau. Hy v\u1ecdng b\u00e0i vi\u1ebft n\u00e0y s\u1ebd gi\u00fap b\u1ea1n hi\u1ec3u h\u01a1n flutter. C\u1ea3m \u01a1n b\u1ea1n","title":"9 l\u00fd do t\u1ea1i sao n\u00ean ch\u1ecdn Flutter"},{"location":"flutter/flutter_introduction/#chung-ta-hay-gioi-thieu-ngan-gon-ve-flutter","text":"Flutter n\u00f3i chung l\u00e0 m\u1ed9t b\u1ed9 c\u00f4ng c\u1ee5 ph\u00e1t tri\u1ec3n ph\u1ea7n m\u1ec1m (SDK) \u0111\u1ec3 x\u00e2y d\u1ef1ng c\u00e1c \u1ee9ng d\u1ee5ng hi\u1ec7n \u0111\u1ea1i. N\u00f3 cung c\u1ea5p high-performance v\u00e0 high-fidelity cho c\u1ea3 Android v\u00e0 iOS. Jamie Notter cho bi\u1ebft, c\u1ea3i ti\u1ebfn c\u1ee7a c\u1ea3i ti\u1ebfn \u0111ang thay \u0111\u1ed5i v\u00e0 m\u1edf ra gi\u00e1 tr\u1ecb m\u1edbi . T\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1eady, m\u1ed7i c\u00f4ng ngh\u1ec7 m\u1edbi \u0111\u1ec1u c\u00f3 nh\u1eefng l\u1ee3i th\u1ebf ri\u00eang gi\u00fap ch\u00fang ta b\u1eb1ng c\u00e1ch n\u00e0y hay c\u00e1ch kh\u00e1c. Ch\u00fang ta h\u00e3y xem x\u00e9t m\u1ed9t s\u1ed1 \u01b0u \u0111i\u1ec3m c\u1ee7a Flutter \u0111\u1ec3 bi\u1ebfn n\u00f3 th\u00e0nh SDK th\u00e2n thi\u1ec7n v\u1edbi nh\u00e0 ph\u00e1t tri\u1ec3n.","title":"Ch\u00fang ta h\u00e3y gi\u1edbi thi\u1ec7u ng\u1eafn g\u1ecdn v\u1ec1 Flutter!"},{"location":"flutter/flutter_introduction/#duoi-ay-la-9-ly-do-tai-sao-flutter-co-the-tao-su-khac-biet","text":"","title":"D\u01b0\u1edbi \u0111\u00e2y l\u00e0 9 l\u00fd do t\u1ea1i sao Flutter c\u00f3 th\u1ec3 t\u1ea1o s\u1ef1 kh\u00e1c bi\u1ec7t"},{"location":"flutter/flutter_introduction/#1-open-source-project","text":"N\u00f3 \u0111\u01b0\u1ee3c Google t\u1ea1o ra v\u00e0 ra m\u1eaft d\u01b0\u1edbi d\u1ea1ng SDK m\u00e3 ngu\u1ed3n m\u1edf \u0111\u1ec3 ph\u00e1t tri\u1ec3n c\u00e1c \u1ee9ng d\u1ee5ng d\u1ef1a tr\u00ean thi\u1ebft b\u1ecb di \u0111\u1ed9ng. N\u00f3 ho\u00e0n to\u00e0n mi\u1ec5n ph\u00ed v\u00e0 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho b\u1ea5t k\u1ef3 m\u1ee5c \u0111\u00edch nh\u1ea5t \u0111\u1ecbnh n\u00e0o \u0111\u1ec3 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng. N\u00f3 kh\u00f4ng ch\u1ec9 cung c\u1ea5p cho b\u1ea1n m\u1ed9t t\u00f9y ch\u1ecdn mi\u1ec5n ph\u00ed \u0111\u1ec3 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng m\u00e0 c\u00f2n cung c\u1ea5p cho b\u1ea1n v\u00f4 s\u1ed1 t\u00f9y ch\u1ecdn mi\u1ec5n ph\u00ed, kh\u00f4ng gi\u1ed1ng nh\u01b0 c\u00e1c c\u00f4ng ty kh\u00e1c.","title":"1. Open-source Project"},{"location":"flutter/flutter_introduction/#2-mot-codebase-cho-android-va-ios","text":"Flutter d\u1ef1a tr\u00ean codebase duy nh\u1ea5t \u0111\u1ec3 ph\u00e1t tri\u1ec3n c\u00e1c \u1ee9ng d\u1ee5ng h\u1ed7 tr\u1ee3 c\u1ea3 hai n\u1ec1n t\u1ea3ng Android v\u00e0 IOS. N\u00f3 c\u00f3 c\u00e1c widgets nh\u01b0 l\u00e0 Material design cho Android v\u00e0 Cupertino cho iOS theo h\u01b0\u1edbng d\u1eabn c\u1ee7a c\u1ea3 hai n\u1ec1n t\u1ea3ng. \u0110i\u1ec1u n\u00e0y l\u00e0m cho nhi\u1ec7m v\u1ee5 d\u1ec5 d\u00e0ng h\u01a1n r\u1ea5t nhi\u1ec1u cho c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n v\u00ec gi\u1edd \u0111\u00e2y h\u1ecd c\u00f3 th\u1ec3 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng tr\u00ean c\u1ea3 Android v\u00e0 iOS. N\u00f3 c\u0169ng tr\u00e1nh \u0111\u01b0\u1ee3c nh\u1eefng r\u1eafc r\u1ed1i c\u1ee7a vi\u1ec7c chuy\u1ec3n \u0111\u1ed5i.Flutter c\u0169ng h\u1ed7 tr\u1ee3 n\u1ec1n t\u1ea3ng Fuchsia \u0111\u01b0\u1ee3c nhi\u1ec1u ng\u01b0\u1eddi tin l\u00e0 s\u1ebd thay th\u1ebf Android trong t\u01b0\u01a1ng lai g\u1ea7n.","title":"2. M\u1ed9t codebase cho Android v\u00e0 iOS"},{"location":"flutter/flutter_introduction/#3-dart","text":"To\u00e0n b\u1ed9 khu\u00f4n kh\u1ed5 c\u1ee7a Flutter d\u1ef1a tr\u00ean Dart. N\u00f3 l\u00e0 ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n b\u1edfi Google v\u00e0 h\u1ed7 tr\u1ee3 t\u1ea5t c\u1ea3 c\u00e1c OS. Dart r\u1ea5t d\u1ec5 h\u1ecdc, \u1ed5n \u0111\u1ecbnh, c\u00f3 kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng cao v\u00e0 deployable. N\u00f3 c\u00f3 h\u1ed7 tr\u1ee3 v\u1edbi m\u1ed9t s\u1ed1 libraries v\u00e0 tools t\u1ed1t nh\u1ea5t hi\u1ec7n nay. Vi\u1ec7c s\u1eed d\u1ee5ng Dart cho Flutter gi\u00fap b\u1ea1n s\u1eed d\u1ee5ng compiler Just-in-Time \u0111\u1ec3 c\u1ea3i thi\u1ec7n quy tr\u00ecnh ph\u00e1t tri\u1ec3n. Dart trong Flutter cung c\u1ea5p cho b\u1ea1n m\u1ed9t native performance cho c\u00e1c n\u1ec1n t\u1ea3ng kh\u00e1c nhau, chuy\u1ec3n ti\u1ebfp m\u01b0\u1ee3t m\u00e0 v\u00e0 animations \u1edf 60 FPS. B\u1ea1n c\u0169ng c\u00f3 th\u1ec3 c\u00f3 quy\u1ec1n truy c\u1eadp v\u00e0o b\u1ed9 s\u01b0u t\u1eadp ng\u00e0y c\u00e0ng t\u0103ng c\u1ee7a Dart libraries v\u00e0 tools.","title":"3. Dart"},{"location":"flutter/flutter_introduction/#4-hot-reload","text":"Flutter \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 t\u00ednh n\u0103ng Hot Reload. \u0110i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 n\u1ebfu b\u1ea1n th\u1ef1c hi\u1ec7n b\u1ea5t k\u1ef3 thay \u0111\u1ed5i n\u00e0o trong m\u00e3 th\u00ec b\u1ea1n c\u00f3 th\u1ec3 th\u1ea5y ch\u00fang ngay l\u1eadp t\u1ee9c m\u00e0 kh\u00f4ng c\u1ea7n ch\u1edd \u0111\u1ee3i ho\u1eb7c kh\u1edfi \u0111\u1ed9ng l\u1ea1i \u1ee9ng d\u1ee5ng. Th\u00f4ng th\u01b0\u1eddng, ph\u1ea3i m\u1ea5t v\u00e0i gi\u00e2y \u0111\u1ec3 ki\u1ec3m tra c\u00e1c thay \u0111\u1ed5i. \u0110i\u1ec1u n\u00e0y gi\u00fap c\u00e1c nh\u00e0 thi\u1ebft k\u1ebf th\u00eam c\u00e1c t\u00ednh n\u0103ng m\u1edbi, s\u1eeda l\u1ed7i v\u00e0 th\u1eed nghi\u1ec7m \u1ee9ng d\u1ee5ng hi\u1ec7u qu\u1ea3 h\u01a1n. M\u1eb7c d\u00f9 n\u00f3 c\u00f3 m\u1ed9t v\u00e0i h\u1ea1n ch\u1ebf khi so s\u00e1nh v\u1edbi ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng native nh\u01b0ng n\u00f3 r\u1ea5t ti\u00ean ti\u1ebfn. Trong khi ph\u00e1t tri\u1ec1n \u1ee9ng d\u1ee5ng native, c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n ph\u1ea3i ch\u1edd v\u00e0i ph\u00fat \u0111\u1ec3 ki\u1ec3m tra nh\u1eefng thay \u0111\u1ed5i h\u1ecd \u0111\u00e3 th\u1ef1c hi\u1ec7n.","title":"4. Hot Reload"},{"location":"flutter/flutter_introduction/#5-widgets","text":"Widgets l\u00e0 th\u00e0nh ph\u1ea7n thi\u1ebft y\u1ebfu c\u1ee7a b\u1ea5t k\u1ef3 \u1ee9ng d\u1ee5ng n\u00e0o. M\u1ed9t widget c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t button, menu, font v\u00e0 nhi\u1ec1u th\u1ee9 kh\u00e1c. Nh\u1eefng th\u1ee9 n\u00e0y \u0111\u00f2i h\u1ecfi c\u1ea7n ph\u1ea3i nhanh, m\u1edf r\u1ed9ng v\u00e0 ho\u00e0n to\u00e0n t\u00f9y bi\u1ebfn \u0111\u01b0\u1ee3c. B\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng Flutter, b\u1ea1n s\u1ebd c\u00f3 \u0111\u01b0\u1ee3c m\u1ed9t b\u1ed9 th\u01b0 vi\u1ec7n widget v\u1edbi nhi\u1ec1u lo\u1ea1i widget \u0111\u1ec3 s\u1eed d\u1ee5ng trong khi x\u00e2y d\u1ef1ng \u1ee9ng d\u1ee5ng c\u1ee7a m\u00ecnh. Ch\u00fang nhanh, tr\u00f4ng t\u1ef1 nhi\u00ean v\u00e0 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u00f9y ch\u1ec9nh d\u1ec5 d\u00e0ng.","title":"5. Widgets"},{"location":"flutter/flutter_introduction/#6-mvp","text":"MVP ho\u1eb7c minimum viable product l\u00e0 m\u1ed9t s\u1ea3n ph\u1ea9m \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf v\u1edbi c\u00e1c t\u00ednh n\u0103ng t\u1ed1i thi\u1ec3u \u0111\u1ec3 c\u00f3 th\u1ec3 l\u00e0m h\u00e0i l\u00f2ng kh\u00e1ch h\u00e0ng \u1edf giai \u0111o\u1ea1n \u0111\u1ea7u. N\u00f3 c\u0169ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 l\u1ea5y feedback cho nh\u1eefng c\u1ea3i ti\u1ebfn trong t\u01b0\u01a1ng lai. V\u00ec v\u1eady, n\u1ebfu b\u1ea1n l\u00e0 m\u1ed9t trong nh\u1eefng nh\u00e0 ph\u00e1t tri\u1ec3n, nh\u1eefng ng\u01b0\u1eddi c\u1ea7n MVP c\u1ee7a \u1ee9ng d\u1ee5ng cho kh\u00e1ch h\u00e0ng th\u00ec Flutter s\u1ebd l\u00e0 m\u1ed9t l\u1ef1a ch\u1ecdn tuy\u1ec7t v\u1eddi. N\u00f3 \u0111\u1eb7c bi\u1ec7t h\u1eefu \u00edch n\u1ebfu b\u1ea1n c\u00f3 \u00edt th\u1eddi gian h\u01a1n v\u00e0 b\u1ea1n mu\u1ed1n \u0111\u01b0a ra \u00fd t\u01b0\u1edfng r\u00f5 r\u00e0ng v\u1ec1 \u1ee9ng d\u1ee5ng cho kh\u00e1ch h\u00e0ng c\u1ee7a m\u00ecnh.","title":"6. MVP"},{"location":"flutter/flutter_introduction/#7-nhanh-va-nhanh","text":"N\u00f3 \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng nhanh h\u01a1n c\u00e1c n\u1ec1n t\u1ea3ng c\u00f3 s\u1eb5n kh\u00e1c. Do nhi\u1ec1u t\u00ednh n\u0103ng c\u1ee7a n\u00f3, n\u00f3 cho ph\u00e9p c\u00e1c developers code nhanh h\u01a1n v\u00e0 hi\u1ec7u qu\u1ea3. Nh\u01b0 \u0111\u00e3 th\u1ea3o lu\u1eadn \u1edf tr\u00ean, t\u00ednh n\u0103ng Hot Reload c\u1ee7a n\u00f3 l\u00e0m cho to\u00e0n b\u1ed9 qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng nhanh h\u01a1n v\u00e0 \u0111\u01a1n gi\u1ea3n h\u01a1n. Ngo\u00e0i ra, n\u00f3 \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf d\u01b0\u1edbi d\u1ea1ng m\u1ed9t codebase h\u1ed7 tr\u1ee3 c\u1ea3 Android v\u00e0 iOS m\u00e0 ch\u00fang ta s\u1ebd th\u1ea3o lu\u1eadn sau. \u0110i\u1ec1u n\u00e0y gi\u00fap gi\u1ea3m th\u1eddi gian th\u1eed nghi\u1ec7m v\u00ec hi\u1ec7n t\u1ea1i b\u1ea1n kh\u00f4ng b\u1eaft bu\u1ed9c ph\u1ea3i th\u1eed nghi\u1ec7m \u1ee9ng d\u1ee5ng c\u1ee7a m\u00ecnh cho 2 n\u1ec1n t\u1ea3ng kh\u00e1c nhau. T\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1eady, N\u00f3 c\u0169ng t\u0103ng c\u01b0\u1eddng qu\u00e1 tr\u00ecnh QA b\u1eb1ng c\u00e1ch l\u00e0m cho n\u00f3 nhanh h\u01a1n v\u00e0 ho\u00e0n h\u1ea3o h\u01a1n. H\u01a1n n\u1eefa, b\u1ea1n c\u0169ng c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng Flutter tr\u00ean c\u00e1c low-end devices. Th\u1eadt d\u1ec5 d\u00e0ng \u0111\u1ec3 thi\u1ebft l\u1eadp v\u00e0 b\u1eaft \u0111\u1ea7u vi\u1ebft code cho m\u1ed9t \u1ee9ng d\u1ee5ng. N\u00f3 b\u1ecf qua y\u00eau c\u1ea7u c\u1ee7a b\u1ea5t k\u1ef3 powerful devices n\u00e0o v\u1edbi high specs.","title":"7. Nhanh v\u00e0 nhanh"},{"location":"flutter/flutter_introduction/#8-native-features","text":"Flutter cung c\u1ea5p cho b\u1ea1n quy\u1ec1n truy c\u1eadp c\u00e1c t\u00ednh n\u0103ng g\u1ed1c c\u1ee7a thi\u1ebft b\u1ecb c\u1ee7a b\u1ea1n nh\u01b0 m\u00e1y \u1ea3nh, \u0111\u1ecbnh v\u1ecb \u0111\u1ecba l\u00fd v\u00e0 c\u00e1c \u1ee9ng d\u1ee5ng kh\u00e1c gi\u1ed1ng nh\u01b0 b\u1ea5t k\u1ef3 \u1ee9ng d\u1ee5ng native n\u00e0o kh\u00e1c. Tuy nhi\u00ean, c\u00e1c ch\u1ee9c n\u0103ng n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c k\u1ebft h\u1ee3p b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng ng\u00f4n ng\u1eef native.","title":"8. Native Features"},{"location":"flutter/flutter_introduction/#9-ho-tro-chinh-thuc","text":"V\u00ec Flutter \u0111\u01b0\u1ee3c t\u1ea1o v\u00e0 ra m\u1eaft b\u1edfi Google, kh\u00f4ng c\u00f3 g\u00ec ph\u1ea3i b\u00e0n v\u1ec1 c\u1ed9ng \u0111\u1ed3ng h\u1ed7 tr\u1ee3 c\u1ee7a n\u00f3. N\u00f3 \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 b\u1edfi m\u1ed9t team m\u1ea1nh v\u00e0 c\u00f3 m\u1ed9t c\u1ed9ng \u0111\u1ed3ng v\u1edbi h\u01a1n 1000 nh\u00e0 ph\u00e1t tri\u1ec3n lu\u00f4n s\u1eb5n s\u00e0ng gi\u00fap \u0111\u1ee1 v\u00e0 l\u00e0m cho Flutter tr\u1edf n\u00ean t\u1ed1t h\u01a1n.","title":"9. H\u1ed7 tr\u1ee3 ch\u00ednh th\u1ee9c"},{"location":"flutter/flutter_introduction/#tom-lai","text":"\u0110\u1ec3 t\u00f3m t\u1eaft t\u1ea5t c\u1ea3, ch\u00fang ta c\u00f3 th\u1ec3 n\u00f3i r\u1eb1ng \u0111\u00f3 l\u00e0 m\u1ed9t cross-platform \u0111ang tr\u1edf n\u00ean ph\u1ed5 bi\u1ebfn m\u1ed7i ng\u00e0y. Flutter r\u1ea5t d\u1ec5 d\u00e0ng, \u0111\u01a1n gi\u1ea3n v\u00e0 c\u0169ng c\u00f3 ti\u1ec1m n\u0103ng l\u1edbn \u0111\u1ec3 ph\u00e1t tri\u1ec3n m\u1ed9t \u1ee9ng d\u1ee5ng m\u1ed9t c\u00e1ch d\u1ec5 d\u00e0ng. R\u00f5 r\u00e0ng, m\u1ea5t \u00edt th\u1eddi gian h\u01a1n nhi\u1ec1u so v\u1edbi vi\u1ec7c t\u1ea1o 2 \u1ee9ng d\u1ee5ng t\u01b0\u01a1ng t\u1ef1 tr\u00ean c\u00e1c n\u1ec1n t\u1ea3ng kh\u00e1c nhau. Hy v\u1ecdng b\u00e0i vi\u1ebft n\u00e0y s\u1ebd gi\u00fap b\u1ea1n hi\u1ec3u h\u01a1n flutter. C\u1ea3m \u01a1n b\u1ea1n","title":"T\u00f3m l\u1ea1i!"},{"location":"flutter/flutter_screenutil/","text":"ScreenUtil l\u00e0 1 plugin cho ph\u00e9p t\u00edch h\u1ee3p, t\u00f9y bi\u1ebfn k\u00edch c\u1ee1 m\u00e0n h\u00ecnh v\u00e0 font ch\u1eef. Gi\u00fap cho giao di\u1ec7n ng\u01b0\u1eddi d\u00f9ng hi\u1ec3n th\u1ecb b\u1ed1 c\u1ee5c h\u1ee3p l\u00fd tr\u00ean c\u00e1c m\u00e0n h\u00ecnh c\u00f3 k\u00edch th\u01b0\u1edbc kh\u00e1c nhau. Chu\u1ea9n b\u1ecb \u00b6 1. Dependency \u00b6 dependencies : flutter : sdk : flutter # add flutter_ScreenUtil flutter_screenutil : ^ 0.5 . 2 2. Import \u00b6 import 'package:flutter_screenutil/flutter_screenutil.dart' ; 3. Thu\u1ed9c t\u00ednh \u00b6 Property Type Default Value Description width double 1080px The width of the device in the design draft, in px height double 1920px The height of the device in the design draft, in px allowFontScaling bool false Sets whether the font size is scaled according to the system's \"font size\" assist option 4. Kh\u1edfi t\u1ea1o v\u00e0 c\u00e0i \u0111\u1eb7t \u00b6 Kh\u1edfi t\u1ea1o v\u00e0 c\u00e0i \u0111\u1eb7t fit size v\u00e0 font size theo t\u1ec9 l\u1ec7 scale font size c\u1ee7a h\u1ec7 th\u1ed1ng. B\u1ea1n c\u1ea7n set width v\u00e0 height c\u1ee7a b\u1ea3n thi\u1ebft k\u1ebf tr\u01b0\u1edbc khi s\u1eed d\u1ee5ng( v\u1edbi width, height \u0111\u01a1n v\u1ecb t\u00ednh b\u1eb1ng px). V\u00e0 ch\u1eafc ch\u1eafn \u0111\u1eb7t page b\u00ean trong MaterialApp \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o fit size \u0111\u01b0\u1ee3c set tr\u01b0\u1edbc khi s\u1eed d\u1ee5ng. M\u1ed9t s\u1ed1 c\u00e1ch kh\u1edfi t\u1ea1o instance c\u1ee7a ScreenUtil: //fill in the screen size of the device in the design //default value : width : 1080px , height:1920px , allowFontScaling:false ScreenUtil . instance = ScreenUtil . getInstance ().. init ( context ); //If the design is based on the size of the iPhone6 \u200b\u200b(iPhone6 \u200b\u200b750*1334) ScreenUtil . instance = ScreenUtil ( width: 750 , height: 1334 ).. init ( context ); //If you wang to set the font size is scaled according to the system's \"font size\" assist option ScreenUtil . instance = ScreenUtil ( width: 750 , height: 1334 , allowFontScaling: true ).. init ( context ); S\u1eed d\u1ee5ng \u00b6 1. Adapt screen size \u00b6 Kh\u1edfi t\u1ea1o t\u01b0\u01a1ng \u1ee9ng: Kh\u1edfi t\u1ea1o px size cho component: S\u1eeda \u0111\u1ed5i screen width: ScreenUtil.getInstance().setWidth(540), S\u1eeda \u0111\u1ed5i screen height: ScreenUtil.getInstance().setHeight(200), B\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng ScreenUtil() thay cho ScreenUtil.getInstance(), v\u00ed d\u1ee5: ScreenUtil().setHeight(200) Ch\u00fa \u00fd Height c\u0169ng c\u00f3 th\u1ec3 set t\u01b0\u01a1ng \u1ee9ng v\u1edbi setWidth khi b\u1ea1n mu\u1ed1n hi\u1ec3n th\u1ecb h\u00ecnh vu\u00f4ng. V\u00ed d\u1ee5: //for example: //rectangle Container ( width: ScreenUtil . getInstance (). setWidth ( 375 ), height: ScreenUtil . getInstance (). setHeight ( 200 ), ... ), ////If you want to display a square: Container ( width: ScreenUtil . getInstance (). setWidth ( 300 ), height: ScreenUtil . getInstance (). setWidth ( 300 ), ), V\u1edbi c\u00e1c gi\u00e1 tr\u1ecb width, height \u1edf tr\u00ean, b\u1ea1n kh\u00f4ng th\u1ec3 set 1 g\u00eda tr\u1ecb l\u1edbn h\u01a1n gi\u00e1 tr\u1ecb b\u1ea1n kh\u1edfi t\u1ea1o cho instance c\u1ee7a ScreenUtil ban \u0111\u1ea7u. 2. Adapter font \u00b6 M\u1ed9t \u0111i\u1ec3m c\u1ea7n l\u01b0u \u00fd khi set font \u0111\u00f3 l\u00e0 thu\u1ed9c t\u00ednh allowFontScaling , thu\u1ed9c t\u00ednh n\u00e0y th\u1ec3 hi\u1ec7n font c\u00f3 ph\u1ee5 thu\u1ed9c v\u00e0o font c\u1ee7a h\u1ec7 th\u1ed1ng hay kh\u00f4ng. //Incoming font size\uff0cthe unit is pixel, fonts will not scale to respect Text Size accessibility settings //(AllowallowFontScaling when initializing ScreenUtil) ScreenUtil . getInstance (). setSp ( 28 ) //Incoming font size\uff0cthe unit is pixel\uff0cfonts will scale to respect Text Size accessibility settings //(If somewhere does not follow the global allowFontScaling setting) ScreenUtil ( allowFontScaling: true ). setSp ( 28 ) //for example: Column ( crossAxisAlignment: CrossAxisAlignment . start , children: < Widget > [ Text ( 'My font size is 24px on the design draft and will not change with the system.' , style: TextStyle ( color: Colors . black , fontSize: ScreenUtil . getInstance (). setSp ( 24 ), )), Text ( 'My font size is 24px on the design draft and will change with the system.' , style: TextStyle ( color: Colors . black , fontSize: ScreenUtil ( allowFontScaling: true ). setSp ( 24 ), )), ], ) M\u1ed9t s\u1ed1 api kh\u00e1c \u00b6 ScreenUtil . pixelRatio //Device pixel density ScreenUtil . screenWidth //Device width ScreenUtil . screenHeight //Device height ScreenUtil . bottomBarHeight //Bottom safe zone distance, suitable for buttons with full screen ScreenUtil . statusBarHeight //Status bar height , Notch will be higher Unit px ScreenUtil . textScaleFactory //System font scaling factor ScreenUtil . getInstance (). scaleWidth //Ratio of actual width dp to design draft px ScreenUtil . getInstance (). scaleHeight //Ratio of actual height dp to design draft px V\u00ed d\u1ee5 t\u1ed5ng quan \u00b6 //import import 'package:flutter_screenutil/flutter_screenutil.dart' ; @ override Widget build ( BuildContext context ) { ///Set the fit size (fill in the screen size of the device in the design) If the design is based on the size of the iPhone6 \u200b\u200b(iPhone6 \u200b\u200b750*1334) ScreenUtil . instance = ScreenUtil ( width: 750 , height: 1334 ).. init ( context ); print ( 'Device width: ${ ScreenUtil . screenWidth } ' ); //Device width print ( 'Device height: ${ ScreenUtil . screenHeight } ' ); //Device height print ( 'Device pixel density: ${ ScreenUtil . pixelRatio } ' ); //Device pixel density print ( 'Bottom safe zone distance: ${ ScreenUtil . bottomBarHeight } ' ); //Bottom safe zone distance\uff0csuitable for buttons with full screen print ( 'Status bar height: ${ ScreenUtil . statusBarHeight } px' ); //Status bar height , Notch will be higher Unit px print ( 'Ratio of actual width dp to design draft px: ${ ScreenUtil . getInstance (). scaleWidth } ' ); print ( 'Ratio of actual height dp to design draft px: ${ ScreenUtil . getInstance (). scaleHeight } ' ); print ( 'The ratio of font and width to the size of the design: ${ ScreenUtil . getInstance (). scaleWidth * ScreenUtil . pixelRatio } ' ); print ( 'The ratio of height width to the size of the design: ${ ScreenUtil . getInstance (). scaleHeight * ScreenUtil . pixelRatio } ' ); return new Scaffold ( appBar: new AppBar ( title: new Text ( widget . title ), ), body: new Center ( child: Column ( crossAxisAlignment: CrossAxisAlignment . center , children: < Widget > [ Row ( children: < Widget > [ Container ( width: ScreenUtil . getInstance (). setWidth ( 375 ), height: ScreenUtil . getInstance (). setHeight ( 200 ), color: Colors . red , child: Text ( 'My width: ${ ScreenUtil . getInstance (). setWidth ( 375 ) } dp' , style: TextStyle ( color: Colors . white , fontSize: ScreenUtil . getInstance (). setSp ( 12 )), ), ), Container ( width: ScreenUtil . getInstance (). setWidth ( 375 ), height: ScreenUtil . getInstance (). setHeight ( 200 ), color: Colors . blue , child: Text ( 'My width: ${ ScreenUtil . getInstance (). setWidth ( 375 ) } dp' , style: TextStyle ( color: Colors . white , fontSize: ScreenUtil . getInstance (). setSp ( 12 ))), ), ], ), Text ( 'Device width: ${ ScreenUtil . screenWidth } px' ), Text ( 'Device height: ${ ScreenUtil . screenHeight } px' ), Text ( 'Device pixel density: ${ ScreenUtil . pixelRatio } ' ), Text ( 'Bottom safe zone distance: ${ ScreenUtil . bottomBarHeight } px' ), Text ( 'Status bar height: ${ ScreenUtil . statusBarHeight } px' ), Text ( 'Ratio of actual width dp to design draft px: ${ ScreenUtil . getInstance (). scaleWidth } ' , textAlign: TextAlign . center , ), Text ( 'Ratio of actual height dp to design draft px: ${ ScreenUtil . getInstance (). scaleHeight } ' , textAlign: TextAlign . center , ), Text ( 'The ratio of font and width to the size of the design: ${ ScreenUtil . getInstance (). scaleWidth * ScreenUtil . pixelRatio } ' , textAlign: TextAlign . center , ), Text ( 'The ratio of height width to the size of the design: ${ ScreenUtil . getInstance (). scaleHeight * ScreenUtil . pixelRatio } ' , textAlign: TextAlign . center , ), SizedBox ( height: ScreenUtil . getInstance (). setHeight ( 100 ), ), Text ( 'System font scaling factor: ${ ScreenUtil . textScaleFactory } ' ), Column ( crossAxisAlignment: CrossAxisAlignment . start , children: < Widget > [ Text ( 'My font size is 14px on the design draft and will not change with the system.' , style: TextStyle ( color: Colors . black , fontSize: ScreenUtil . getInstance (). setSp ( 14 ), )), Text ( 'My font size is 14px on the design draft and will change with the system.' , style: TextStyle ( color: Colors . black , fontSize: ScreenUtil ( allowFontScaling: true ). setSp ( 24 ), )), ], ) ], ), ), ); } K\u1ebft qu\u1ea3:","title":"Flutter ScreenUtil"},{"location":"flutter/flutter_screenutil/#chuan-bi","text":"","title":"Chu\u1ea9n b\u1ecb"},{"location":"flutter/flutter_screenutil/#1-dependency","text":"dependencies : flutter : sdk : flutter # add flutter_ScreenUtil flutter_screenutil : ^ 0.5 . 2","title":"1. Dependency"},{"location":"flutter/flutter_screenutil/#2-import","text":"import 'package:flutter_screenutil/flutter_screenutil.dart' ;","title":"2. Import"},{"location":"flutter/flutter_screenutil/#3-thuoc-tinh","text":"Property Type Default Value Description width double 1080px The width of the device in the design draft, in px height double 1920px The height of the device in the design draft, in px allowFontScaling bool false Sets whether the font size is scaled according to the system's \"font size\" assist option","title":"3. Thu\u1ed9c t\u00ednh"},{"location":"flutter/flutter_screenutil/#4-khoi-tao-va-cai-at","text":"Kh\u1edfi t\u1ea1o v\u00e0 c\u00e0i \u0111\u1eb7t fit size v\u00e0 font size theo t\u1ec9 l\u1ec7 scale font size c\u1ee7a h\u1ec7 th\u1ed1ng. B\u1ea1n c\u1ea7n set width v\u00e0 height c\u1ee7a b\u1ea3n thi\u1ebft k\u1ebf tr\u01b0\u1edbc khi s\u1eed d\u1ee5ng( v\u1edbi width, height \u0111\u01a1n v\u1ecb t\u00ednh b\u1eb1ng px). V\u00e0 ch\u1eafc ch\u1eafn \u0111\u1eb7t page b\u00ean trong MaterialApp \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o fit size \u0111\u01b0\u1ee3c set tr\u01b0\u1edbc khi s\u1eed d\u1ee5ng. M\u1ed9t s\u1ed1 c\u00e1ch kh\u1edfi t\u1ea1o instance c\u1ee7a ScreenUtil: //fill in the screen size of the device in the design //default value : width : 1080px , height:1920px , allowFontScaling:false ScreenUtil . instance = ScreenUtil . getInstance ().. init ( context ); //If the design is based on the size of the iPhone6 \u200b\u200b(iPhone6 \u200b\u200b750*1334) ScreenUtil . instance = ScreenUtil ( width: 750 , height: 1334 ).. init ( context ); //If you wang to set the font size is scaled according to the system's \"font size\" assist option ScreenUtil . instance = ScreenUtil ( width: 750 , height: 1334 , allowFontScaling: true ).. init ( context );","title":"4. Kh\u1edfi t\u1ea1o v\u00e0 c\u00e0i \u0111\u1eb7t"},{"location":"flutter/flutter_screenutil/#su-dung","text":"","title":"S\u1eed d\u1ee5ng"},{"location":"flutter/flutter_screenutil/#1-adapt-screen-size","text":"Kh\u1edfi t\u1ea1o t\u01b0\u01a1ng \u1ee9ng: Kh\u1edfi t\u1ea1o px size cho component: S\u1eeda \u0111\u1ed5i screen width: ScreenUtil.getInstance().setWidth(540), S\u1eeda \u0111\u1ed5i screen height: ScreenUtil.getInstance().setHeight(200), B\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng ScreenUtil() thay cho ScreenUtil.getInstance(), v\u00ed d\u1ee5: ScreenUtil().setHeight(200) Ch\u00fa \u00fd Height c\u0169ng c\u00f3 th\u1ec3 set t\u01b0\u01a1ng \u1ee9ng v\u1edbi setWidth khi b\u1ea1n mu\u1ed1n hi\u1ec3n th\u1ecb h\u00ecnh vu\u00f4ng. V\u00ed d\u1ee5: //for example: //rectangle Container ( width: ScreenUtil . getInstance (). setWidth ( 375 ), height: ScreenUtil . getInstance (). setHeight ( 200 ), ... ), ////If you want to display a square: Container ( width: ScreenUtil . getInstance (). setWidth ( 300 ), height: ScreenUtil . getInstance (). setWidth ( 300 ), ), V\u1edbi c\u00e1c gi\u00e1 tr\u1ecb width, height \u1edf tr\u00ean, b\u1ea1n kh\u00f4ng th\u1ec3 set 1 g\u00eda tr\u1ecb l\u1edbn h\u01a1n gi\u00e1 tr\u1ecb b\u1ea1n kh\u1edfi t\u1ea1o cho instance c\u1ee7a ScreenUtil ban \u0111\u1ea7u.","title":"1. Adapt screen size"},{"location":"flutter/flutter_screenutil/#2-adapter-font","text":"M\u1ed9t \u0111i\u1ec3m c\u1ea7n l\u01b0u \u00fd khi set font \u0111\u00f3 l\u00e0 thu\u1ed9c t\u00ednh allowFontScaling , thu\u1ed9c t\u00ednh n\u00e0y th\u1ec3 hi\u1ec7n font c\u00f3 ph\u1ee5 thu\u1ed9c v\u00e0o font c\u1ee7a h\u1ec7 th\u1ed1ng hay kh\u00f4ng. //Incoming font size\uff0cthe unit is pixel, fonts will not scale to respect Text Size accessibility settings //(AllowallowFontScaling when initializing ScreenUtil) ScreenUtil . getInstance (). setSp ( 28 ) //Incoming font size\uff0cthe unit is pixel\uff0cfonts will scale to respect Text Size accessibility settings //(If somewhere does not follow the global allowFontScaling setting) ScreenUtil ( allowFontScaling: true ). setSp ( 28 ) //for example: Column ( crossAxisAlignment: CrossAxisAlignment . start , children: < Widget > [ Text ( 'My font size is 24px on the design draft and will not change with the system.' , style: TextStyle ( color: Colors . black , fontSize: ScreenUtil . getInstance (). setSp ( 24 ), )), Text ( 'My font size is 24px on the design draft and will change with the system.' , style: TextStyle ( color: Colors . black , fontSize: ScreenUtil ( allowFontScaling: true ). setSp ( 24 ), )), ], )","title":"2. Adapter font"},{"location":"flutter/flutter_screenutil/#mot-so-api-khac","text":"ScreenUtil . pixelRatio //Device pixel density ScreenUtil . screenWidth //Device width ScreenUtil . screenHeight //Device height ScreenUtil . bottomBarHeight //Bottom safe zone distance, suitable for buttons with full screen ScreenUtil . statusBarHeight //Status bar height , Notch will be higher Unit px ScreenUtil . textScaleFactory //System font scaling factor ScreenUtil . getInstance (). scaleWidth //Ratio of actual width dp to design draft px ScreenUtil . getInstance (). scaleHeight //Ratio of actual height dp to design draft px","title":"M\u1ed9t s\u1ed1 api kh\u00e1c"},{"location":"flutter/flutter_screenutil/#vi-du-tong-quan","text":"//import import 'package:flutter_screenutil/flutter_screenutil.dart' ; @ override Widget build ( BuildContext context ) { ///Set the fit size (fill in the screen size of the device in the design) If the design is based on the size of the iPhone6 \u200b\u200b(iPhone6 \u200b\u200b750*1334) ScreenUtil . instance = ScreenUtil ( width: 750 , height: 1334 ).. init ( context ); print ( 'Device width: ${ ScreenUtil . screenWidth } ' ); //Device width print ( 'Device height: ${ ScreenUtil . screenHeight } ' ); //Device height print ( 'Device pixel density: ${ ScreenUtil . pixelRatio } ' ); //Device pixel density print ( 'Bottom safe zone distance: ${ ScreenUtil . bottomBarHeight } ' ); //Bottom safe zone distance\uff0csuitable for buttons with full screen print ( 'Status bar height: ${ ScreenUtil . statusBarHeight } px' ); //Status bar height , Notch will be higher Unit px print ( 'Ratio of actual width dp to design draft px: ${ ScreenUtil . getInstance (). scaleWidth } ' ); print ( 'Ratio of actual height dp to design draft px: ${ ScreenUtil . getInstance (). scaleHeight } ' ); print ( 'The ratio of font and width to the size of the design: ${ ScreenUtil . getInstance (). scaleWidth * ScreenUtil . pixelRatio } ' ); print ( 'The ratio of height width to the size of the design: ${ ScreenUtil . getInstance (). scaleHeight * ScreenUtil . pixelRatio } ' ); return new Scaffold ( appBar: new AppBar ( title: new Text ( widget . title ), ), body: new Center ( child: Column ( crossAxisAlignment: CrossAxisAlignment . center , children: < Widget > [ Row ( children: < Widget > [ Container ( width: ScreenUtil . getInstance (). setWidth ( 375 ), height: ScreenUtil . getInstance (). setHeight ( 200 ), color: Colors . red , child: Text ( 'My width: ${ ScreenUtil . getInstance (). setWidth ( 375 ) } dp' , style: TextStyle ( color: Colors . white , fontSize: ScreenUtil . getInstance (). setSp ( 12 )), ), ), Container ( width: ScreenUtil . getInstance (). setWidth ( 375 ), height: ScreenUtil . getInstance (). setHeight ( 200 ), color: Colors . blue , child: Text ( 'My width: ${ ScreenUtil . getInstance (). setWidth ( 375 ) } dp' , style: TextStyle ( color: Colors . white , fontSize: ScreenUtil . getInstance (). setSp ( 12 ))), ), ], ), Text ( 'Device width: ${ ScreenUtil . screenWidth } px' ), Text ( 'Device height: ${ ScreenUtil . screenHeight } px' ), Text ( 'Device pixel density: ${ ScreenUtil . pixelRatio } ' ), Text ( 'Bottom safe zone distance: ${ ScreenUtil . bottomBarHeight } px' ), Text ( 'Status bar height: ${ ScreenUtil . statusBarHeight } px' ), Text ( 'Ratio of actual width dp to design draft px: ${ ScreenUtil . getInstance (). scaleWidth } ' , textAlign: TextAlign . center , ), Text ( 'Ratio of actual height dp to design draft px: ${ ScreenUtil . getInstance (). scaleHeight } ' , textAlign: TextAlign . center , ), Text ( 'The ratio of font and width to the size of the design: ${ ScreenUtil . getInstance (). scaleWidth * ScreenUtil . pixelRatio } ' , textAlign: TextAlign . center , ), Text ( 'The ratio of height width to the size of the design: ${ ScreenUtil . getInstance (). scaleHeight * ScreenUtil . pixelRatio } ' , textAlign: TextAlign . center , ), SizedBox ( height: ScreenUtil . getInstance (). setHeight ( 100 ), ), Text ( 'System font scaling factor: ${ ScreenUtil . textScaleFactory } ' ), Column ( crossAxisAlignment: CrossAxisAlignment . start , children: < Widget > [ Text ( 'My font size is 14px on the design draft and will not change with the system.' , style: TextStyle ( color: Colors . black , fontSize: ScreenUtil . getInstance (). setSp ( 14 ), )), Text ( 'My font size is 14px on the design draft and will change with the system.' , style: TextStyle ( color: Colors . black , fontSize: ScreenUtil ( allowFontScaling: true ). setSp ( 24 ), )), ], ) ], ), ), ); } K\u1ebft qu\u1ea3:","title":"V\u00ed d\u1ee5 t\u1ed5ng quan"},{"location":"java/cac-tinh-chat-huong-doi-tuong-cua-java/","text":"C\u00e1c t\u00ednh ch\u1ea5t h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng c\u1ee7a Java ( OOP trong Java) L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 4 t\u00ednh ch\u1ea5t: t\u00ednh tr\u1eebu t\u01b0\u1ee3ng, t\u00ednh \u0111\u00f3ng g\u00f3i, t\u00ednh k\u1ebf th\u1eeba, t\u00ednh \u0111a h\u00ecnh. Java l\u00e0 m\u1ed9t ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng n\u00ean b\u1ea3n th\u00e2n n\u00f3 c\u0169ng mang 4 t\u00ednh ch\u1ea5t \u0111\u00f3. 1. T\u00ednh ch\u1ea5t tr\u1eebu t\u01b0\u1ee3ng (abstract) \u00b6 T\u00ednh tr\u1eebu t\u01b0\u1ee3ng trong l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng l\u00e0 t\u1eeb c\u00e1c m\u00f4 t\u1ea3, scenario, c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh t\u00ecm ra c\u00e1c \u0111\u1eb7c tr\u01b0ng, h\u00e0nh \u0111\u1ed9ng \u0111\u1ec3 tr\u1eebu t\u01b0\u1ee3ng h\u00f3a th\u00e0nh c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng c\u00e1c class. V\u00ed d\u1ee5 vi\u1ebft 1 ch\u01b0\u01a1ng tr\u00ecnh nh\u1eadp th\u00f4ng tin sinh vi\u00ean g\u1ed3m h\u1ecd t\u00ean, tu\u1ed5i, ng\u00e0y sinh, l\u1edbp.\\ T\u1eeb y\u00eau c\u1ea7u b\u00e0i to\u00e1n ta r\u00fat ra \u0111\u01b0\u1ee3c c\u00e1c danh t\u1eeb: \"sinh vi\u00ean\", \"h\u1ecd t\u00ean\", \"tu\u1ed5i\", \"ng\u00e0y sinh\", \"l\u1edbp\" \u2192 \"sinh vi\u00ean\" l\u00e0 1 \u0111\u1ed1i t\u01b0\u1ee3ng, \"h\u1ecd t\u00ean\", \"tu\u1ed5i\", \"ng\u00e0y sinh\", \"l\u1edbp\" l\u00e0 c\u00e1c thu\u1ed9c t\u00ednh, \u0111\u1eb7c tr\u01b0ng c\u1ee7a \"sinh vi\u00ean\" do \u0111\u00f3 ta tr\u1eebu t\u01b0\u1ee3ng h\u00f3a th\u00e0nh class: SinhVien 2. T\u00ednh ch\u1ea5t \u0111\u00f3ng g\u00f3i (encapsulation) \u00b6 \u0110\u00f3ng g\u00f3i \u1edf \u0111\u00e2y l\u00e0 \u0111\u00f3ng g\u00f3i c\u00e1c bi\u1ebfn, method th\u00e0nh c\u00e1c class; \u0111\u00f3ng g\u00f3i c\u00e1c class th\u00e0nh 1 package...\\ Vi\u1ec7c \u0111\u00f3ng g\u00f3i gi\u00fap che gi\u1ea5u th\u00f4ng tin, \u0111\u1ea3m b\u1ea3o s\u1ef1 to\u00e0n v\u1eb9n d\u1eef li\u1ec7u. V\u1eady n\u00f3 che gi\u1ea5u th\u00f4ng tin, \u0111\u1ea3m b\u1ea3o to\u00e0n v\u1eb9n d\u1eef li\u1ec7u nh\u01b0 n\u00e0o? V\u00ed d\u1ee5 t\u00ednh \u0111\u00f3ng g\u00f3i m\u00e0 ta hay d\u00f9ng nh\u1ea5t \u0111\u00f3 l\u00e0 qua ph\u1ea1m vi truy c\u1eadp (access modifier): public, private, protected, default Ta c\u00f3 1 class Person v\u1edbi c\u00e1c thu\u1ed9c t\u00ednh: name, age public class Person { private String name ; private int age ; public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public int getAge () { return age ; } public void setAge ( int age ) { if ( age < 0 ) { age = 0 ; } this . age = age ; } } C\u00e1c thu\u1ed9c t\u00ednh name, age \u0111\u1ec1u \u0111\u1ec3 private t\u1ee9c l\u00e0 kh\u00f4ng th\u1ec3 truy c\u1eadp, ch\u1ec9nh s\u1eeda d\u1eef li\u1ec7u name v\u00e0 age t\u1eeb class b\u00ean ngo\u00e0i, khi mu\u1ed1n thi\u1ebft l\u1eadp, l\u1ea5y th\u00f4ng tin name, age ta ph\u1ea3i th\u00f4ng qua c\u00e1c h\u00e0m get, set. c\u00e1c class b\u00ean ngo\u00e0i s\u1ebd kh\u00f4ng bi\u1ebft \u0111\u01b0\u1ee3c name v\u00e0 age trong class Person l\u01b0u tr\u1eef, l\u1ea5y ra nh\u01b0 n\u00e0o t\u1eeb \u0111\u00f3 \u0111\u1ea3m b\u1ea3o to\u00e0n v\u1eb9n d\u1eef li\u00eau -Gi\u1ea3 s\u1eed ng\u01b0\u1eddi d\u00f9ng thi\u1ebft l\u1eadp age = -1 r\u00f5 r\u00e0ng l\u00e0 sai v\u00ec age kh\u00f4ng th\u1ec3 l\u00e0 s\u1ed1 \u00e2m, khi qua method set n\u00f3 s\u1ebd ki\u1ec3m tra l\u1ea1i v\u00e0 g\u00e1n v\u1ec1 0. Ngo\u00e0i s\u1eed d\u1ee5ng access modifier c\u00f2n 1 s\u1ed1 th\u1ec3 hi\u1ec7n c\u1ee7a \u0111\u00f3ng g\u00f3i kh\u00e1c nh\u01b0: c\u00e1c class immutable, \u0111\u00f3ng g\u00f3i c\u00e1c method, c\u00e1c th\u01b0 vi\u1ec7n, package... 3. T\u00ednh ch\u1ea5t k\u1ebf th\u1eeba (inheritance) \u00b6 T\u00ednh ch\u1ea5t n\u00e0y th\u00ec \u0111\u01a1n gi\u1ea3n h\u01a1n, \u0111\u00f3 l\u00e0 s\u1eed d\u1ee5ng l\u1ea1i c\u00e1c thu\u1ed9c t\u00ednh, method s\u1eb5n c\u00f3 t\u1eeb c\u00e1c class kh\u00e1c m\u00e0 kh\u00f4ng ph\u1ea3i x\u00e2y d\u1ef1ng t\u1eeb \u0111\u1ea7u.\\ V\u00ed d\u1ee5: Ta c\u00f3 class Person v\u1edbi c\u00e1c thu\u1ed9c t\u00ednh sau: public class Person { private String name ; private int age ; public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public int getAge () { return age ; } public void setAge ( int age ) { if ( age < 0 ) { age = 0 ; } this . age = age ; } } B\u00e2y gi\u1edd ta mu\u1ed1n x\u00e2y d\u1ef1ng 1 class Student c\u0169ng c\u00f3 c\u00e1c thu\u1ed9c t\u00ednh gi\u1ed1ng c\u1ee7a Person v\u00e0 th\u00eam thu\u1ed9c t\u00ednh address th\u00ec ta ch\u1ec9 vi\u1ec7c th\u1eeba k\u1ebf l\u1ea1i class Person v\u00e0 th\u00eam thu\u1ed9c t\u00ednh address: public class Student extends Person { private String address ; public String getAddress () { return address ; } public void setAddress ( String address ) { this . address = address ; } } 4. T\u00ednh ch\u1ea5t \u0111a h\u00ecnh (polymorphism) \u00b6 T\u00ednh \u0111a h\u00ecnh \u1edf \u0111\u00e2y \u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 \u0111a h\u00ecnh th\u00e1i, v\u00ed d\u1ee5 c\u00f9ng 1 method nh\u01b0ng t\u00f9y v\u00e0o tham s\u1ed1 truy\u1ec1n v\u00e0o ho\u1eb7c c\u00e0i \u0111\u1eb7t \u1edf l\u1edbp con m\u00e0 n\u00f3 th\u1ef1c hi\u1ec7n c\u00e1c ph\u00e9p to\u00e1n kh\u00e1c nhau. \u0110\u1ec3 hi\u1ec3u r\u00f5 h\u01a1n t\u00ednh \u0111a h\u00ecnh ta c\u00f3 2 kh\u00e1i ni\u1ec7m Overriding v\u00e0 Overloading (ghi \u0111\u00e8 v\u00e0 n\u1ea1p ch\u1ed3ng) Overriding (ghi \u0111\u00e8) l\u00e0 vi\u1ebft l\u1ea1i, \u0111\u1ecbnh ngh\u0129a l\u1ea1i method m\u00e0 n\u00f3 th\u1eeba k\u1ebf t\u1eeb l\u1edbp cha V\u00ed d\u1ee5: public class Person { public void show () { System . out . println ( \"person show\" ); } } public class Student extends Person { @Override public void show () { System . out . println ( \"student show\" ); } } class Student th\u1eeba k\u1ebf class Person t\u1ee9c l\u00e0 n\u00f3 c\u0169ng \u0111\u1ed3ng th\u1eddi th\u1eeba k\u1ebf method show nh\u01b0ng method show() \u1edf Student l\u1ea1i kh\u00e1c method show() \u1edf Person -- ta g\u1ecdi \u0111\u00f3 l\u00e0 ghi \u0111\u00e8 (overriding) Overloading (n\u1ea1p ch\u1ed3ng): l\u00e0 s\u1eed d\u1ee5ng c\u00e1c method c\u00f3 t\u00ean gi\u1ed1ng nhau nh\u01b0ng tham s\u1ed1 \u0111\u1ea7u v\u00e0o kh\u00e1c nhau: V\u00ed d\u1ee5: public class Calc { // truy\u1ec1n v\u00e0o 3 s\u1ed1 nguy\u00ean th\u00ec tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 l\u00e0 t\u1ed5ng 3 s\u1ed1 nguy\u00ean public int sum ( int number1 , int number2 , int number3 ) { return number1 + number2 + number3 ; } // truy\u1ec1n v\u00e0o 2 s\u1ed1 nguy\u00ean th\u00ec tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 l\u00e0 t\u1ed5ng 2 s\u1ed1 nguy\u00ean public int sum ( int number1 , int number2 ) { return number1 + number2 ; } // truy\u1ec1n v\u00e0o 2 s\u1ed1 th\u1ef1c th\u00ec tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 l\u00e0 t\u1ed5ng 2 s\u1ed1 th\u1ef1c public float sum ( float number1 , float number2 ) { return number1 + number2 ; } } C\u00e1c t\u00ednh ch\u1ea5t h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng c\u1ee7a Java (OOP trong Java) \u00b6 References: https://docs.oracle.com/javase/tutorial/java/concepts/","title":"OOP Trong Java"},{"location":"java/cac-tinh-chat-huong-doi-tuong-cua-java/#146-tinh-chat-truu-tuong-abstract","text":"T\u00ednh tr\u1eebu t\u01b0\u1ee3ng trong l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng l\u00e0 t\u1eeb c\u00e1c m\u00f4 t\u1ea3, scenario, c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh t\u00ecm ra c\u00e1c \u0111\u1eb7c tr\u01b0ng, h\u00e0nh \u0111\u1ed9ng \u0111\u1ec3 tr\u1eebu t\u01b0\u1ee3ng h\u00f3a th\u00e0nh c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng c\u00e1c class. V\u00ed d\u1ee5 vi\u1ebft 1 ch\u01b0\u01a1ng tr\u00ecnh nh\u1eadp th\u00f4ng tin sinh vi\u00ean g\u1ed3m h\u1ecd t\u00ean, tu\u1ed5i, ng\u00e0y sinh, l\u1edbp.\\ T\u1eeb y\u00eau c\u1ea7u b\u00e0i to\u00e1n ta r\u00fat ra \u0111\u01b0\u1ee3c c\u00e1c danh t\u1eeb: \"sinh vi\u00ean\", \"h\u1ecd t\u00ean\", \"tu\u1ed5i\", \"ng\u00e0y sinh\", \"l\u1edbp\" \u2192 \"sinh vi\u00ean\" l\u00e0 1 \u0111\u1ed1i t\u01b0\u1ee3ng, \"h\u1ecd t\u00ean\", \"tu\u1ed5i\", \"ng\u00e0y sinh\", \"l\u1edbp\" l\u00e0 c\u00e1c thu\u1ed9c t\u00ednh, \u0111\u1eb7c tr\u01b0ng c\u1ee7a \"sinh vi\u00ean\" do \u0111\u00f3 ta tr\u1eebu t\u01b0\u1ee3ng h\u00f3a th\u00e0nh class: SinhVien","title":"1. T\u00ednh ch\u1ea5t tr\u1eebu t\u01b0\u1ee3ng (abstract)"},{"location":"java/cac-tinh-chat-huong-doi-tuong-cua-java/#246-tinh-chat-ong-goi-encapsulation","text":"\u0110\u00f3ng g\u00f3i \u1edf \u0111\u00e2y l\u00e0 \u0111\u00f3ng g\u00f3i c\u00e1c bi\u1ebfn, method th\u00e0nh c\u00e1c class; \u0111\u00f3ng g\u00f3i c\u00e1c class th\u00e0nh 1 package...\\ Vi\u1ec7c \u0111\u00f3ng g\u00f3i gi\u00fap che gi\u1ea5u th\u00f4ng tin, \u0111\u1ea3m b\u1ea3o s\u1ef1 to\u00e0n v\u1eb9n d\u1eef li\u1ec7u. V\u1eady n\u00f3 che gi\u1ea5u th\u00f4ng tin, \u0111\u1ea3m b\u1ea3o to\u00e0n v\u1eb9n d\u1eef li\u1ec7u nh\u01b0 n\u00e0o? V\u00ed d\u1ee5 t\u00ednh \u0111\u00f3ng g\u00f3i m\u00e0 ta hay d\u00f9ng nh\u1ea5t \u0111\u00f3 l\u00e0 qua ph\u1ea1m vi truy c\u1eadp (access modifier): public, private, protected, default Ta c\u00f3 1 class Person v\u1edbi c\u00e1c thu\u1ed9c t\u00ednh: name, age public class Person { private String name ; private int age ; public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public int getAge () { return age ; } public void setAge ( int age ) { if ( age < 0 ) { age = 0 ; } this . age = age ; } } C\u00e1c thu\u1ed9c t\u00ednh name, age \u0111\u1ec1u \u0111\u1ec3 private t\u1ee9c l\u00e0 kh\u00f4ng th\u1ec3 truy c\u1eadp, ch\u1ec9nh s\u1eeda d\u1eef li\u1ec7u name v\u00e0 age t\u1eeb class b\u00ean ngo\u00e0i, khi mu\u1ed1n thi\u1ebft l\u1eadp, l\u1ea5y th\u00f4ng tin name, age ta ph\u1ea3i th\u00f4ng qua c\u00e1c h\u00e0m get, set. c\u00e1c class b\u00ean ngo\u00e0i s\u1ebd kh\u00f4ng bi\u1ebft \u0111\u01b0\u1ee3c name v\u00e0 age trong class Person l\u01b0u tr\u1eef, l\u1ea5y ra nh\u01b0 n\u00e0o t\u1eeb \u0111\u00f3 \u0111\u1ea3m b\u1ea3o to\u00e0n v\u1eb9n d\u1eef li\u00eau -Gi\u1ea3 s\u1eed ng\u01b0\u1eddi d\u00f9ng thi\u1ebft l\u1eadp age = -1 r\u00f5 r\u00e0ng l\u00e0 sai v\u00ec age kh\u00f4ng th\u1ec3 l\u00e0 s\u1ed1 \u00e2m, khi qua method set n\u00f3 s\u1ebd ki\u1ec3m tra l\u1ea1i v\u00e0 g\u00e1n v\u1ec1 0. Ngo\u00e0i s\u1eed d\u1ee5ng access modifier c\u00f2n 1 s\u1ed1 th\u1ec3 hi\u1ec7n c\u1ee7a \u0111\u00f3ng g\u00f3i kh\u00e1c nh\u01b0: c\u00e1c class immutable, \u0111\u00f3ng g\u00f3i c\u00e1c method, c\u00e1c th\u01b0 vi\u1ec7n, package...","title":"2. T\u00ednh ch\u1ea5t \u0111\u00f3ng g\u00f3i (encapsulation)"},{"location":"java/cac-tinh-chat-huong-doi-tuong-cua-java/#346-tinh-chat-ke-thua-inheritance","text":"T\u00ednh ch\u1ea5t n\u00e0y th\u00ec \u0111\u01a1n gi\u1ea3n h\u01a1n, \u0111\u00f3 l\u00e0 s\u1eed d\u1ee5ng l\u1ea1i c\u00e1c thu\u1ed9c t\u00ednh, method s\u1eb5n c\u00f3 t\u1eeb c\u00e1c class kh\u00e1c m\u00e0 kh\u00f4ng ph\u1ea3i x\u00e2y d\u1ef1ng t\u1eeb \u0111\u1ea7u.\\ V\u00ed d\u1ee5: Ta c\u00f3 class Person v\u1edbi c\u00e1c thu\u1ed9c t\u00ednh sau: public class Person { private String name ; private int age ; public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public int getAge () { return age ; } public void setAge ( int age ) { if ( age < 0 ) { age = 0 ; } this . age = age ; } } B\u00e2y gi\u1edd ta mu\u1ed1n x\u00e2y d\u1ef1ng 1 class Student c\u0169ng c\u00f3 c\u00e1c thu\u1ed9c t\u00ednh gi\u1ed1ng c\u1ee7a Person v\u00e0 th\u00eam thu\u1ed9c t\u00ednh address th\u00ec ta ch\u1ec9 vi\u1ec7c th\u1eeba k\u1ebf l\u1ea1i class Person v\u00e0 th\u00eam thu\u1ed9c t\u00ednh address: public class Student extends Person { private String address ; public String getAddress () { return address ; } public void setAddress ( String address ) { this . address = address ; } }","title":"3. T\u00ednh ch\u1ea5t k\u1ebf th\u1eeba (inheritance)"},{"location":"java/cac-tinh-chat-huong-doi-tuong-cua-java/#446-tinh-chat-a-hinh-polymorphism","text":"T\u00ednh \u0111a h\u00ecnh \u1edf \u0111\u00e2y \u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 \u0111a h\u00ecnh th\u00e1i, v\u00ed d\u1ee5 c\u00f9ng 1 method nh\u01b0ng t\u00f9y v\u00e0o tham s\u1ed1 truy\u1ec1n v\u00e0o ho\u1eb7c c\u00e0i \u0111\u1eb7t \u1edf l\u1edbp con m\u00e0 n\u00f3 th\u1ef1c hi\u1ec7n c\u00e1c ph\u00e9p to\u00e1n kh\u00e1c nhau. \u0110\u1ec3 hi\u1ec3u r\u00f5 h\u01a1n t\u00ednh \u0111a h\u00ecnh ta c\u00f3 2 kh\u00e1i ni\u1ec7m Overriding v\u00e0 Overloading (ghi \u0111\u00e8 v\u00e0 n\u1ea1p ch\u1ed3ng) Overriding (ghi \u0111\u00e8) l\u00e0 vi\u1ebft l\u1ea1i, \u0111\u1ecbnh ngh\u0129a l\u1ea1i method m\u00e0 n\u00f3 th\u1eeba k\u1ebf t\u1eeb l\u1edbp cha V\u00ed d\u1ee5: public class Person { public void show () { System . out . println ( \"person show\" ); } } public class Student extends Person { @Override public void show () { System . out . println ( \"student show\" ); } } class Student th\u1eeba k\u1ebf class Person t\u1ee9c l\u00e0 n\u00f3 c\u0169ng \u0111\u1ed3ng th\u1eddi th\u1eeba k\u1ebf method show nh\u01b0ng method show() \u1edf Student l\u1ea1i kh\u00e1c method show() \u1edf Person -- ta g\u1ecdi \u0111\u00f3 l\u00e0 ghi \u0111\u00e8 (overriding) Overloading (n\u1ea1p ch\u1ed3ng): l\u00e0 s\u1eed d\u1ee5ng c\u00e1c method c\u00f3 t\u00ean gi\u1ed1ng nhau nh\u01b0ng tham s\u1ed1 \u0111\u1ea7u v\u00e0o kh\u00e1c nhau: V\u00ed d\u1ee5: public class Calc { // truy\u1ec1n v\u00e0o 3 s\u1ed1 nguy\u00ean th\u00ec tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 l\u00e0 t\u1ed5ng 3 s\u1ed1 nguy\u00ean public int sum ( int number1 , int number2 , int number3 ) { return number1 + number2 + number3 ; } // truy\u1ec1n v\u00e0o 2 s\u1ed1 nguy\u00ean th\u00ec tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 l\u00e0 t\u1ed5ng 2 s\u1ed1 nguy\u00ean public int sum ( int number1 , int number2 ) { return number1 + number2 ; } // truy\u1ec1n v\u00e0o 2 s\u1ed1 th\u1ef1c th\u00ec tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 l\u00e0 t\u1ed5ng 2 s\u1ed1 th\u1ef1c public float sum ( float number1 , float number2 ) { return number1 + number2 ; } }","title":"4. T\u00ednh ch\u1ea5t \u0111a h\u00ecnh (polymorphism)"},{"location":"java/cac-tinh-chat-huong-doi-tuong-cua-java/#cac-tinh-chat-huong-oi-tuong-cua-java-oop-trong-java","text":"References: https://docs.oracle.com/javase/tutorial/java/concepts/","title":"C\u00e1c t\u00ednh ch\u1ea5t h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng c\u1ee7a Java (OOP trong Java)"},{"location":"java/ngon-ngu-java-la-gi/","text":"Java l\u00e0 g\u00ec? \u00b6 Java l\u00e0 m\u1ed9t ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh v\u00e0 n\u1ec1n t\u1ea3ng t\u00ednh to\u00e1n \u0111\u01b0\u1ee3c ph\u00e2n ph\u1ed1i l\u1ea7n \u0111\u1ea7u ti\u00ean b\u1edfi Sun Microsystems v\u00e0o n\u0103m 1995. R\u1ea5t nhi\u1ec1u \u1ee9ng d\u1ee5ng, trang web \u0111\u1ec1u \u0111\u01b0\u1ee3c vi\u1ebft b\u1eb1ng Java. Java nhanh, b\u1ea3o m\u1eadt v\u00e0 \u0111\u00e1ng tin c\u1eady. Java l\u00e0 ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (OOP). V\u1ec1 t\u1ed1c \u0111\u1ed9: Tr\u01b0\u1edbc \u0111\u00e2y, Java ch\u1ea1y ch\u1eadm h\u01a1n nh\u1eefng ng\u00f4n ng\u1eef d\u1ecbch th\u1eb3ng ra m\u00e3 m\u00e1y nh\u01b0 C v\u00e0 C++, nh\u01b0ng sau n\u00e0y nh\u1edd c\u00f4ng ngh\u1ec7 \"bi\u00ean d\u1ecbch t\u1ea1i ch\u1ed7\" -- Just in time compilation, kho\u1ea3ng c\u00e1ch n\u00e0y \u0111\u00e3 \u0111\u01b0\u1ee3c thu h\u1eb9p, v\u00e0 trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p \u0111\u1eb7c bi\u1ec7t Java c\u00f3 th\u1ec3 ch\u1ea1y nhanh h\u01a1n. Java ch\u1ea1y nhanh h\u01a1n nh\u1eefng ng\u00f4n ng\u1eef th\u00f4ng d\u1ecbch nh\u01b0 Python, Perl, PHP g\u1ea5p nhi\u1ec1u l\u1ea7n. V\u1ec1 qu\u1ea3n l\u00fd b\u1ed9 nh\u1edb: Trong Java, hi\u1ec7n t\u01b0\u1ee3ng r\u00f2 r\u1ec9 b\u1ed9 nh\u1edb h\u1ea7u nh\u01b0 kh\u00f4ng x\u1ea3y ra do b\u1ed9 nh\u1edb \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd b\u1edfi Java Virtual Machine (JVM) b\u1eb1ng c\u00e1ch t\u1ef1 \u0111\u1ed9ng \"d\u1ecdn d\u1eb9p r\u00e1c\". Ng\u01b0\u1eddi l\u1eadp tr\u00ecnh kh\u00f4ng ph\u1ea3i quan t\u00e2m \u0111\u1ebfn vi\u1ec7c c\u1ea5p ph\u00e1t v\u00e0 x\u00f3a b\u1ed9 nh\u1edb nh\u01b0 C, C++. Tuy nhi\u00ean khi s\u1eed d\u1ee5ng nh\u1eefng t\u00e0i nguy\u00ean m\u1ea1ng, file IO, database (n\u1eb1m ngo\u00e0i ki\u1ec3m so\u00e1t c\u1ee7a JVM) m\u00e0 ng\u01b0\u1eddi l\u1eadp tr\u00ecnh kh\u00f4ng \u0111\u00f3ng c\u00e1c k\u1ebft n\u1ed1i th\u00ec r\u00f2 r\u1ec9 d\u1eef li\u1ec7u v\u1eabn c\u00f3 th\u1ec3 x\u1ea3y ra. V\u1ec1 c\u00fa ph\u00e1p: C\u00fa ph\u00e1p Java \u0111\u01b0\u1ee3c vay m\u01b0\u1ee3n nhi\u1ec1u t\u1eeb C & C++ nh\u01b0ng c\u00f3 c\u00fa ph\u00e1p h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u01a1n gi\u1ea3n h\u01a1n v\u00e0 \u00edt t\u00ednh n\u0103ng x\u1eed l\u00fd c\u1ea5p th\u1ea5p h\u01a1n. Do \u0111\u00f3 vi\u1ec7c vi\u1ebft m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh b\u1eb1ng Java d\u1ec5 h\u01a1n, \u0111\u01a1n gi\u1ea3n h\u01a1n, \u0111\u1ee1 t\u1ed1n c\u00f4ng s\u1eeda l\u1ed7i h\u01a1n. Ng\u00f4n ng\u1eef Java l\u00e0 g\u00ec? \u0110\u1eb7c tr\u01b0ng c\u1ee7a Java \u00b6 C\u00e1c \u0111\u1eb7c tr\u01b0ng c\u1ee7a Java \u00b6 H\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng M\u1ecdi th\u1ef1c th\u1ec3 trong ch\u01b0\u01a1ng tr\u00ecnh \u0111\u1ec1u l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng (1 class x\u00e1c \u0111\u1ecbnh) C\u00e1c bi\u1ebfn, h\u00e0m \u0111\u1ec1u n\u1eb1m trong m\u1ed9t class n\u00e0o \u0111\u00f3 \u0110\u01a1n gi\u1ea3n Lo\u1ea1i b\u1ecf con tr\u1ecf Lo\u1ea1i b\u1ecf l\u1ec7nh goto Kh\u00f4ng cho ph\u00e9p \u0111a k\u1ebf th\u1eeba (chuy\u1ec3n sang s\u1eed d\u1ee5ng interface) \u0110\u1ed9c l\u1eadp ph\u1ea7n c\u1ee9ng v\u00e0 h\u1ec7 \u0111i\u1ec1u h\u00e0nh Kh\u00e1c v\u1edbi ph\u1ea7n l\u1edbn ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh th\u00f4ng th\u01b0\u1eddng, thay v\u00ec bi\u00ean d\u1ecbch m\u00e3 ngu\u1ed3n th\u00e0nh m\u00e3 m\u00e1y ho\u1eb7c th\u00f4ng d\u1ecbch m\u00e3 ngu\u1ed3n khi ch\u1ea1y, Java \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 bi\u00ean d\u1ecbch m\u00e3 ngu\u1ed3n th\u00e0nh bytecode, bytecode sau \u0111\u00f3 s\u1ebd \u0111\u01b0\u1ee3c m\u00f4i tr\u01b0\u1eddng th\u1ef1c thi (runtime environment) ch\u1ea1y. Do \u0111\u00f3 m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh vi\u1ebft b\u1eb1ng Java c\u00f3 th\u1ec3 ch\u1ea1y tr\u00ean nhi\u1ec1u thi\u1ebft b\u1ecb, nhi\u1ec1u h\u1ec7 \u0111i\u1ec1u h\u00e0nh kh\u00e1c nhau. M\u1ea1nh m\u1ebd Qu\u00e1 tr\u00ecnh c\u1ea5p ph\u00e1t, gi\u1ea3i ph\u00f3ng b\u1ed9 nh\u1edb \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n t\u1ef1 \u0111\u1ed9ng. Y\u00eau c\u1ea7u ch\u1eb7t ch\u1ebd khi khai b\u00e1o d\u1eef li\u1ec7u, \u00e9p ki\u1ec3u d\u1eef li\u1ec7u. T\u1ef1 \u0111\u1ed9ng ph\u00e1t hi\u1ec7n l\u1ed7i l\u00fac bi\u00ean d\u1ecbch. Kh\u00f4ng s\u1eed d\u1ee5ng con tr\u1ecf ho\u1eb7c c\u00e1c ph\u00e9p to\u00e1n con tr\u1ecf. B\u1ea3o m\u1eadt Ph\u00e2n t\u00e1n Java h\u1ed7 tr\u1ee3 l\u1eadp tr\u00ecnh cho c\u00e1c h\u1ec7 th\u1ed1ng ph\u00e2n t\u00e1n nh\u01b0 client-server, RMI... b\u1eb1ng Java web, UDP, TCP... \u0110a lu\u1ed3ng Java h\u1ed7 tr\u1ee3 l\u1eadp tr\u00ecnh \u0111a lu\u1ed3ng (multithreading); vi\u1ec7c \u0111\u1ed3ng b\u1ed9 d\u1eef li\u1ec7u trong l\u1eadp tr\u00ecnh \u0111a lu\u1ed3ng c\u0169ng kh\u00e1 \u0111\u01a1n gi\u1ea3n.","title":"Ng\u00f4n ng\u1eef Java l\u00e0 g\u00ec"},{"location":"java/ngon-ngu-java-la-gi/#java-la-gi","text":"Java l\u00e0 m\u1ed9t ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh v\u00e0 n\u1ec1n t\u1ea3ng t\u00ednh to\u00e1n \u0111\u01b0\u1ee3c ph\u00e2n ph\u1ed1i l\u1ea7n \u0111\u1ea7u ti\u00ean b\u1edfi Sun Microsystems v\u00e0o n\u0103m 1995. R\u1ea5t nhi\u1ec1u \u1ee9ng d\u1ee5ng, trang web \u0111\u1ec1u \u0111\u01b0\u1ee3c vi\u1ebft b\u1eb1ng Java. Java nhanh, b\u1ea3o m\u1eadt v\u00e0 \u0111\u00e1ng tin c\u1eady. Java l\u00e0 ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (OOP). V\u1ec1 t\u1ed1c \u0111\u1ed9: Tr\u01b0\u1edbc \u0111\u00e2y, Java ch\u1ea1y ch\u1eadm h\u01a1n nh\u1eefng ng\u00f4n ng\u1eef d\u1ecbch th\u1eb3ng ra m\u00e3 m\u00e1y nh\u01b0 C v\u00e0 C++, nh\u01b0ng sau n\u00e0y nh\u1edd c\u00f4ng ngh\u1ec7 \"bi\u00ean d\u1ecbch t\u1ea1i ch\u1ed7\" -- Just in time compilation, kho\u1ea3ng c\u00e1ch n\u00e0y \u0111\u00e3 \u0111\u01b0\u1ee3c thu h\u1eb9p, v\u00e0 trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p \u0111\u1eb7c bi\u1ec7t Java c\u00f3 th\u1ec3 ch\u1ea1y nhanh h\u01a1n. Java ch\u1ea1y nhanh h\u01a1n nh\u1eefng ng\u00f4n ng\u1eef th\u00f4ng d\u1ecbch nh\u01b0 Python, Perl, PHP g\u1ea5p nhi\u1ec1u l\u1ea7n. V\u1ec1 qu\u1ea3n l\u00fd b\u1ed9 nh\u1edb: Trong Java, hi\u1ec7n t\u01b0\u1ee3ng r\u00f2 r\u1ec9 b\u1ed9 nh\u1edb h\u1ea7u nh\u01b0 kh\u00f4ng x\u1ea3y ra do b\u1ed9 nh\u1edb \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd b\u1edfi Java Virtual Machine (JVM) b\u1eb1ng c\u00e1ch t\u1ef1 \u0111\u1ed9ng \"d\u1ecdn d\u1eb9p r\u00e1c\". Ng\u01b0\u1eddi l\u1eadp tr\u00ecnh kh\u00f4ng ph\u1ea3i quan t\u00e2m \u0111\u1ebfn vi\u1ec7c c\u1ea5p ph\u00e1t v\u00e0 x\u00f3a b\u1ed9 nh\u1edb nh\u01b0 C, C++. Tuy nhi\u00ean khi s\u1eed d\u1ee5ng nh\u1eefng t\u00e0i nguy\u00ean m\u1ea1ng, file IO, database (n\u1eb1m ngo\u00e0i ki\u1ec3m so\u00e1t c\u1ee7a JVM) m\u00e0 ng\u01b0\u1eddi l\u1eadp tr\u00ecnh kh\u00f4ng \u0111\u00f3ng c\u00e1c k\u1ebft n\u1ed1i th\u00ec r\u00f2 r\u1ec9 d\u1eef li\u1ec7u v\u1eabn c\u00f3 th\u1ec3 x\u1ea3y ra. V\u1ec1 c\u00fa ph\u00e1p: C\u00fa ph\u00e1p Java \u0111\u01b0\u1ee3c vay m\u01b0\u1ee3n nhi\u1ec1u t\u1eeb C & C++ nh\u01b0ng c\u00f3 c\u00fa ph\u00e1p h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u01a1n gi\u1ea3n h\u01a1n v\u00e0 \u00edt t\u00ednh n\u0103ng x\u1eed l\u00fd c\u1ea5p th\u1ea5p h\u01a1n. Do \u0111\u00f3 vi\u1ec7c vi\u1ebft m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh b\u1eb1ng Java d\u1ec5 h\u01a1n, \u0111\u01a1n gi\u1ea3n h\u01a1n, \u0111\u1ee1 t\u1ed1n c\u00f4ng s\u1eeda l\u1ed7i h\u01a1n.","title":"Java l\u00e0 g\u00ec?"},{"location":"java/ngon-ngu-java-la-gi/#ngon-ngu-java-la-gi-ac-trung-cua-java","text":"","title":"Ng\u00f4n ng\u1eef Java l\u00e0 g\u00ec? \u0110\u1eb7c tr\u01b0ng c\u1ee7a Java"},{"location":"java/ngon-ngu-java-la-gi/#cac-ac-trung-cua-java","text":"H\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng M\u1ecdi th\u1ef1c th\u1ec3 trong ch\u01b0\u01a1ng tr\u00ecnh \u0111\u1ec1u l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng (1 class x\u00e1c \u0111\u1ecbnh) C\u00e1c bi\u1ebfn, h\u00e0m \u0111\u1ec1u n\u1eb1m trong m\u1ed9t class n\u00e0o \u0111\u00f3 \u0110\u01a1n gi\u1ea3n Lo\u1ea1i b\u1ecf con tr\u1ecf Lo\u1ea1i b\u1ecf l\u1ec7nh goto Kh\u00f4ng cho ph\u00e9p \u0111a k\u1ebf th\u1eeba (chuy\u1ec3n sang s\u1eed d\u1ee5ng interface) \u0110\u1ed9c l\u1eadp ph\u1ea7n c\u1ee9ng v\u00e0 h\u1ec7 \u0111i\u1ec1u h\u00e0nh Kh\u00e1c v\u1edbi ph\u1ea7n l\u1edbn ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh th\u00f4ng th\u01b0\u1eddng, thay v\u00ec bi\u00ean d\u1ecbch m\u00e3 ngu\u1ed3n th\u00e0nh m\u00e3 m\u00e1y ho\u1eb7c th\u00f4ng d\u1ecbch m\u00e3 ngu\u1ed3n khi ch\u1ea1y, Java \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 bi\u00ean d\u1ecbch m\u00e3 ngu\u1ed3n th\u00e0nh bytecode, bytecode sau \u0111\u00f3 s\u1ebd \u0111\u01b0\u1ee3c m\u00f4i tr\u01b0\u1eddng th\u1ef1c thi (runtime environment) ch\u1ea1y. Do \u0111\u00f3 m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh vi\u1ebft b\u1eb1ng Java c\u00f3 th\u1ec3 ch\u1ea1y tr\u00ean nhi\u1ec1u thi\u1ebft b\u1ecb, nhi\u1ec1u h\u1ec7 \u0111i\u1ec1u h\u00e0nh kh\u00e1c nhau. M\u1ea1nh m\u1ebd Qu\u00e1 tr\u00ecnh c\u1ea5p ph\u00e1t, gi\u1ea3i ph\u00f3ng b\u1ed9 nh\u1edb \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n t\u1ef1 \u0111\u1ed9ng. Y\u00eau c\u1ea7u ch\u1eb7t ch\u1ebd khi khai b\u00e1o d\u1eef li\u1ec7u, \u00e9p ki\u1ec3u d\u1eef li\u1ec7u. T\u1ef1 \u0111\u1ed9ng ph\u00e1t hi\u1ec7n l\u1ed7i l\u00fac bi\u00ean d\u1ecbch. Kh\u00f4ng s\u1eed d\u1ee5ng con tr\u1ecf ho\u1eb7c c\u00e1c ph\u00e9p to\u00e1n con tr\u1ecf. B\u1ea3o m\u1eadt Ph\u00e2n t\u00e1n Java h\u1ed7 tr\u1ee3 l\u1eadp tr\u00ecnh cho c\u00e1c h\u1ec7 th\u1ed1ng ph\u00e2n t\u00e1n nh\u01b0 client-server, RMI... b\u1eb1ng Java web, UDP, TCP... \u0110a lu\u1ed3ng Java h\u1ed7 tr\u1ee3 l\u1eadp tr\u00ecnh \u0111a lu\u1ed3ng (multithreading); vi\u1ec7c \u0111\u1ed3ng b\u1ed9 d\u1eef li\u1ec7u trong l\u1eadp tr\u00ecnh \u0111a lu\u1ed3ng c\u0169ng kh\u00e1 \u0111\u01a1n gi\u1ea3n.","title":"C\u00e1c \u0111\u1eb7c tr\u01b0ng c\u1ee7a Java"},{"location":"junit/assertions-la-gi-code-vi-du-junit-voi-assertions/","text":"Assertions JUnit \u1ede v\u00ed d\u1ee5 \u0111\u1ea7u ti\u00ean (JUnit l\u00e0 g\u00ec? V\u00ed d\u1ee5 JUnit v\u1edbi Eclipse) ch\u00fang ta d\u00f9ng assertFalse , assertTrue \u0111\u1ec3 ki\u1ec3m tra k\u1ebft qu\u1ea3 cho t\u1eebng tr\u01b0\u1eddng h\u1ee3p v\u1edbi mong mu\u1ed1n k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 l\u00e0 false, ho\u1eb7c true. V\u1eady v\u1edbi nh\u1eefng tr\u01b0\u1eddng h\u1ee3p k\u1ebft qu\u1ea3 mong mu\u1ed1n kh\u00f4ng ph\u1ea3i l\u00e0 boolean (true, false) m\u00e0 l\u00e0 String, byte, Object\u2026 th\u00ec ta s\u1ebd d\u00f9ng assertEquals , assertArrayEquals\u2026 \u0110\u00f3 ch\u00ednh l\u00e0 assertions trong JUnit, assertions ch\u00ednh l\u00e0 nh\u1eefng method d\u00f9ng \u0111\u1ec3 ki\u1ec3m tra k\u1ebft qu\u1ea3 c\u1ee7a \u0111\u01a1n v\u1ecb c\u1ea7n test c\u00f3 \u0111\u00fang v\u1edbi mong \u0111\u1ee3i kh\u00f4ng. V\u1edbi m\u1ed7i lo\u1ea1i k\u1ebft qu\u1ea3 \u0111\u1ea7u ra ta c\u00f3 m\u1ed9t method assert t\u01b0\u01a1ng \u1ee9ng.Nh\u01b0 so s\u00e1nh \u0111\u1ed1i t\u01b0\u1ee3ng, so s\u00e1nh m\u1ea3ng, ki\u1ec3m tra null\u2026 Code v\u00ed d\u1ee5 assertions JUnit \u0110\u1ecbnh d\u1ea1ng c\u1ee7a c\u00e1c method assert s\u1ebd l\u00e0 assert[ki\u1ec3u so s\u00e1nh](expecteds_value, actuals_value) ho\u1eb7c assert[ki\u1ec3u so s\u00e1nh](message, expecteds_value, actuals_value) v\u1edbi message l\u00e0 d\u1eef li\u1ec7u in ra n\u1ebfu assert th\u1ea5t b\u1ea1i import static org.hamcrest.CoreMatchers.allOf ; import static org.hamcrest.CoreMatchers.anyOf ; import static org.hamcrest.CoreMatchers.both ; import static org.hamcrest.CoreMatchers.containsString ; import static org.hamcrest.CoreMatchers.equalTo ; import static org.hamcrest.CoreMatchers.everyItem ; import static org.hamcrest.CoreMatchers.hasItems ; import static org.hamcrest.CoreMatchers.not ; import static org.hamcrest.CoreMatchers.sameInstance ; import static org.hamcrest.CoreMatchers.startsWith ; import static org.junit.Assert.assertArrayEquals ; import static org.junit.Assert.assertEquals ; import static org.junit.Assert.assertFalse ; import static org.junit.Assert.assertNotNull ; import static org.junit.Assert.assertNotSame ; import static org.junit.Assert.assertNull ; import static org.junit.Assert.assertSame ; import static org.junit.Assert.assertThat ; import static org.junit.Assert.assertTrue ; import java.util.Arrays ; import org.hamcrest.core.CombinableMatcher ; import org.junit.Test ; public class AssertTests { @Test public void testAssertArrayEquals () { byte [] expected = \"trial\" . getBytes (); byte [] actual = \"trial\" . getBytes (); assertArrayEquals ( \"failure - byte arrays not same\" , expected , actual ); } @Test public void testAssertEquals () { assertEquals ( \"failure - strings are not equal\" , \"text\" , \"text\" ); } @Test public void testAssertFalse () { assertFalse ( \"failure - should be false\" , false ); } @Test public void testAssertNotNull () { assertNotNull ( \"should not be null\" , new Object ()); } @Test public void testAssertNotSame () { assertNotSame ( \"should not be same Object\" , new Object (), new Object ()); } @Test public void testAssertNull () { assertNull ( \"should be null\" , null ); } @Test public void testAssertSame () { Integer aNumber = Integer . valueOf ( 768 ); assertSame ( \"should be same\" , aNumber , aNumber ); } // JUnit Matchers assertThat @Test public void testAssertThatBothContainsString () { assertThat ( \"albumen\" , both ( containsString ( \"a\" )). and ( containsString ( \"b\" ))); } @Test public void testAssertThatHasItems () { assertThat ( Arrays . asList ( \"one\" , \"two\" , \"three\" ), hasItems ( \"one\" , \"three\" )); } @Test public void testAssertThatEveryItemContainsString () { assertThat ( Arrays . asList ( new String [] { \"fun\" , \"ban\" , \"net\" }), everyItem ( containsString ( \"n\" ))); } // Core Hamcrest Matchers with assertThat @Test public void testAssertThatHamcrestCoreMatchers () { assertThat ( \"good\" , allOf ( equalTo ( \"good\" ), startsWith ( \"good\" ))); assertThat ( \"good\" , not ( allOf ( equalTo ( \"bad\" ), equalTo ( \"good\" )))); assertThat ( \"good\" , anyOf ( equalTo ( \"bad\" ), equalTo ( \"good\" ))); assertThat ( 7 , not ( CombinableMatcher .< Integer > either ( equalTo ( 3 )). or ( equalTo ( 4 )))); assertThat ( new Object (), not ( sameInstance ( new Object ()))); } @Test public void testAssertTrue () { assertTrue ( \"failure - should be true\" , true ); } } K\u1ebft qu\u1ea3: Okay, Done! Assertions l\u00e0 g\u00ec? Code v\u00ed d\u1ee5 JUnit v\u1edbi Assertions stackjava.com References: https://github.com/junit-team/junit4/wiki","title":"Assertions l\u00e0 g\u00ec"},{"location":"junit/junit-expected-exceptions-code-vi-du-test-exception-voi-junit/","text":"JUnit Expected Exceptions \u00b6 \u1ede nh\u1eefng b\u00e0i tr\u01b0\u1edbc ch\u00fang ta \u0111\u00e3 t\u00ecm hi\u1ec3u c\u00e1ch test method b\u1eb1ng vi\u1ec7c so s\u00e1nh c\u00e1c gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 c\u1ee7a test case. V\u1eady v\u1edbi nh\u1eefng tr\u01b0\u1eddng h\u1ee3p method kh\u00f4ng tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb ho\u1eb7c x\u1ea3y ra exception th\u00ec ch\u00fang ta th\u1ef1c hi\u1ec7n unit test nh\u01b0 n\u00e0o? S\u1eed d\u1ee5ng expect exception \u00b6 V\u1edbi nh\u1eefng test case cho unit (method, \u0111o\u1ea1n code) \u1ee9ng v\u1edbi tr\u01b0\u1eddng h\u1ee3p x\u1ea3y ra exception th\u00ec ch\u00fang ta expect k\u1ebft qu\u1ea3 l\u00e0 test case \u0111\u00f3 s\u1ebd tr\u1ea3 v\u1ec1 / x\u1ea3y ra exception ch\u1ee9 kh\u00f4ng ph\u1ea3i m\u1ed9t gi\u00e1 tr\u1ecb c\u1ee5 th\u1ec3. V\u00ed d\u1ee5 m\u00ecnh c\u00f3 method th\u1ef1c hi\u1ec7n chia 2 s\u1ed1 nguy\u00ean: public class MathUtils { public static int divide ( int input1 , int input2 ) throws Exception { if ( input2 == 0 ) { throw new ArithmeticException ( \"divide by zero\" ); } return input1 / input2 ; } } V\u1edbi tr\u01b0\u1eddng h\u1ee3p input2 = 0 th\u00ec x\u1ea3y ra exception ch\u1ee9 kh\u00f4ng tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 n\u00e0o c\u1ea3. Do \u0111\u00f3 ta expect exception nh\u01b0 sau: @Test ( expected = ArithmeticException . class ) public void testMathUtils1 () throws Exception { MathUtils . divide ( 1 , 0 ); } N\u1ebfu method MathUtils.divide(1, 0); kh\u00f4ng x\u1ea3y ra exception ArithmeticException th\u00ec t\u1ee9c l\u00e0 test case fail S\u1eed d\u1ee5ng try/catch \u00b6 Vi\u1ec7c s\u1eed d\u1ee5ng thu\u1ed9c t\u00ednh expected trong annotation @Test c\u00f3 nh\u01b0\u1ee3c \u0111i\u1ec3m l\u00e0 ta kh\u00f4ng th\u1ec3 ki\u1ec3m tra \u0111\u01b0\u1ee3c message c\u1ee7a exception hay tr\u1ea1ng th\u00e1i c\u1ee7a object sau khi exception \u0111\u01b0\u1ee3c n\u00e9m ra. \u0110\u1ec3 kh\u1eafc ph\u1ee5c \u0111i\u1ec1u \u0111\u00f3 ta s\u1eed d\u1ee5ng try/catch. V\u00ed d\u1ee5: @Test public void testMathUtils2 () throws Exception { try { MathUtils . divide ( 1 , 0 ); fail ( \"Not throw exception\" ); } catch ( Exception e ) { assertThat ( e , instanceOf ( ArithmeticException . class )); assertEquals ( e . getMessage (), \"divide by zero\" ); } } Ta c\u00f3 th\u1ec3 ki\u1ec3m tra \u0111\u01b0\u1ee3c l\u00e0 exception g\u00ec l\u00e0 ki\u1ec3m tra message c\u00f3 \u0111\u00fang nh\u01b0 mong \u0111\u1ee3i kh\u00f4ng. L\u1ec7nh fail(\"Not throw exception\"); n\u1ebfu \u0111\u01b0\u1ee3c ch\u1ea1y t\u1edbi th\u00ec t\u1ee9c l\u00e0 test case b\u1ecb failed. Nh\u01b0 \u1edf test case tr\u00ean n\u1ebfu method MathUtils.divide(1, 0); kh\u00f4ng x\u1ea3y ra exception th\u00ec n\u00f3 s\u1ebd ch\u1ea1y t\u1edbi l\u1ec7nh fail(\"Not throw exception\"); V\u1edbi tr\u01b0\u1eddng h\u1ee3p expect kh\u00f4ng x\u1ea3y ra exception th\u00ec ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng fail() trong try/catch. N\u1ebfu kh\u00f4ng x\u1ea3y ra exception th\u00ec l\u1ec7nh fail() kh\u00f4ng \u0111\u01b0\u1ee3c ch\u1ea1y qua t\u1ee9c l\u00e0 test case pass. @Test public void testMathUtils3 () throws Exception { try { MathUtils . divide ( 1 , 1 ); } catch ( Exception e ) { fail ( \"throw exception\" ); } } S\u1eed d\u1ee5ng ExpectedException Rule \u00b6 S\u1eed d\u1ee5ng ExpectedException c\u0169ng gi\u00fap x\u00e1c nh\u1eadn lo\u1ea1i exception v\u00e0 message exception: @Rule public ExpectedException thrown = ExpectedException . none (); @Test public void shouldTestExceptionMessage () throws Exception { thrown . expect ( ArithmeticException . class ); thrown . expectMessage ( \"divide by zero\" ); MathUtils . divide ( 1 , 0 ); } ExpectedException c\u0169ng cho ph\u00e9p s\u1eed d\u1ee5ng Matchers \u0111\u1ec3 ki\u1ec3m tra message m\u1ed9t c\u00e1ch linh ho\u1ea1t: thrown . expectMessage ( Matchers . containsString ( \"by zero\" )); Ngo\u00e0i ra, ta c\u0169ng c\u00f3 th\u1ec3 d\u00f9ng Matchers \u0111\u1ec3 x\u00e1c nh\u1eadn tr\u1ea1ng th\u00e1i, thu\u1ed9c t\u00ednh c\u1ee7a k\u1ebft qu\u1ea3, v\u00ed d\u1ee5: import static org.hamcrest.Matchers.hasProperty ; import static org.hamcrest.Matchers.is ; import static org.hamcrest.Matchers.startsWith ; import javax.ws.rs.NotFoundException ; import javax.ws.rs.core.Response ; import javax.ws.rs.core.Response.Status ; import org.junit.Rule ; import org.junit.Test ; import org.junit.rules.ExpectedException ; public class TestExy { @Rule public ExpectedException thrown = ExpectedException . none (); @Test public void shouldThrow () { TestThing testThing = new TestThing (); thrown . expect ( NotFoundException . class ); thrown . expectMessage ( startsWith ( \"some Message\" )); thrown . expect ( hasProperty ( \"response\" , hasProperty ( \"status\" , is ( 404 )))); testThing . chuck (); } private class TestThing { public void chuck () { Response response = Response . status ( Status . NOT_FOUND ). entity ( \"Resource not found\" ). build (); throw new NotFoundException ( \"some Message\" , response ); } } } Demo: import static org.hamcrest.CoreMatchers.instanceOf ; import static org.junit.Assert.assertEquals ; import static org.junit.Assert.assertThat ; import static org.junit.Assert.fail ; import org.junit.Rule ; import org.junit.Test ; import org.junit.rules.ExpectedException ; public class TestMathUtils { @Test ( expected = ArithmeticException . class ) public void testMathUtils1 () throws Exception { MathUtils . divide ( 1 , 0 ); } @Test public void testMathUtils2 () throws Exception { try { MathUtils . divide ( 1 , 0 ); fail ( \"Not throw exception\" ); } catch ( Exception e ) { assertThat ( e , instanceOf ( ArithmeticException . class )); assertEquals ( e . getMessage (), \"divide by zero\" ); } } @Test public void testMathUtils3 () throws Exception { try { MathUtils . divide ( 1 , 1 ); } catch ( Exception e ) { fail ( \"Not throw exception\" ); } } @Rule public ExpectedException thrown = ExpectedException . none (); @Test public void shouldTestExceptionMessage () throws Exception { thrown . expect ( ArithmeticException . class ); thrown . expectMessage ( \"divide by zero\" ); MathUtils . divide ( 1 , 0 ); } } Okay, Done! References: https://github.com/junit-team/junit4/wiki","title":"JUnit Expected Exceptions"},{"location":"junit/junit-expected-exceptions-code-vi-du-test-exception-voi-junit/#junit-expected-exceptions","text":"\u1ede nh\u1eefng b\u00e0i tr\u01b0\u1edbc ch\u00fang ta \u0111\u00e3 t\u00ecm hi\u1ec3u c\u00e1ch test method b\u1eb1ng vi\u1ec7c so s\u00e1nh c\u00e1c gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 c\u1ee7a test case. V\u1eady v\u1edbi nh\u1eefng tr\u01b0\u1eddng h\u1ee3p method kh\u00f4ng tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb ho\u1eb7c x\u1ea3y ra exception th\u00ec ch\u00fang ta th\u1ef1c hi\u1ec7n unit test nh\u01b0 n\u00e0o?","title":"JUnit Expected Exceptions"},{"location":"junit/junit-expected-exceptions-code-vi-du-test-exception-voi-junit/#su-dung-expect-exception","text":"V\u1edbi nh\u1eefng test case cho unit (method, \u0111o\u1ea1n code) \u1ee9ng v\u1edbi tr\u01b0\u1eddng h\u1ee3p x\u1ea3y ra exception th\u00ec ch\u00fang ta expect k\u1ebft qu\u1ea3 l\u00e0 test case \u0111\u00f3 s\u1ebd tr\u1ea3 v\u1ec1 / x\u1ea3y ra exception ch\u1ee9 kh\u00f4ng ph\u1ea3i m\u1ed9t gi\u00e1 tr\u1ecb c\u1ee5 th\u1ec3. V\u00ed d\u1ee5 m\u00ecnh c\u00f3 method th\u1ef1c hi\u1ec7n chia 2 s\u1ed1 nguy\u00ean: public class MathUtils { public static int divide ( int input1 , int input2 ) throws Exception { if ( input2 == 0 ) { throw new ArithmeticException ( \"divide by zero\" ); } return input1 / input2 ; } } V\u1edbi tr\u01b0\u1eddng h\u1ee3p input2 = 0 th\u00ec x\u1ea3y ra exception ch\u1ee9 kh\u00f4ng tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 n\u00e0o c\u1ea3. Do \u0111\u00f3 ta expect exception nh\u01b0 sau: @Test ( expected = ArithmeticException . class ) public void testMathUtils1 () throws Exception { MathUtils . divide ( 1 , 0 ); } N\u1ebfu method MathUtils.divide(1, 0); kh\u00f4ng x\u1ea3y ra exception ArithmeticException th\u00ec t\u1ee9c l\u00e0 test case fail","title":"S\u1eed d\u1ee5ng expect exception"},{"location":"junit/junit-expected-exceptions-code-vi-du-test-exception-voi-junit/#su-dung-trycatch","text":"Vi\u1ec7c s\u1eed d\u1ee5ng thu\u1ed9c t\u00ednh expected trong annotation @Test c\u00f3 nh\u01b0\u1ee3c \u0111i\u1ec3m l\u00e0 ta kh\u00f4ng th\u1ec3 ki\u1ec3m tra \u0111\u01b0\u1ee3c message c\u1ee7a exception hay tr\u1ea1ng th\u00e1i c\u1ee7a object sau khi exception \u0111\u01b0\u1ee3c n\u00e9m ra. \u0110\u1ec3 kh\u1eafc ph\u1ee5c \u0111i\u1ec1u \u0111\u00f3 ta s\u1eed d\u1ee5ng try/catch. V\u00ed d\u1ee5: @Test public void testMathUtils2 () throws Exception { try { MathUtils . divide ( 1 , 0 ); fail ( \"Not throw exception\" ); } catch ( Exception e ) { assertThat ( e , instanceOf ( ArithmeticException . class )); assertEquals ( e . getMessage (), \"divide by zero\" ); } } Ta c\u00f3 th\u1ec3 ki\u1ec3m tra \u0111\u01b0\u1ee3c l\u00e0 exception g\u00ec l\u00e0 ki\u1ec3m tra message c\u00f3 \u0111\u00fang nh\u01b0 mong \u0111\u1ee3i kh\u00f4ng. L\u1ec7nh fail(\"Not throw exception\"); n\u1ebfu \u0111\u01b0\u1ee3c ch\u1ea1y t\u1edbi th\u00ec t\u1ee9c l\u00e0 test case b\u1ecb failed. Nh\u01b0 \u1edf test case tr\u00ean n\u1ebfu method MathUtils.divide(1, 0); kh\u00f4ng x\u1ea3y ra exception th\u00ec n\u00f3 s\u1ebd ch\u1ea1y t\u1edbi l\u1ec7nh fail(\"Not throw exception\"); V\u1edbi tr\u01b0\u1eddng h\u1ee3p expect kh\u00f4ng x\u1ea3y ra exception th\u00ec ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng fail() trong try/catch. N\u1ebfu kh\u00f4ng x\u1ea3y ra exception th\u00ec l\u1ec7nh fail() kh\u00f4ng \u0111\u01b0\u1ee3c ch\u1ea1y qua t\u1ee9c l\u00e0 test case pass. @Test public void testMathUtils3 () throws Exception { try { MathUtils . divide ( 1 , 1 ); } catch ( Exception e ) { fail ( \"throw exception\" ); } }","title":"S\u1eed d\u1ee5ng try/catch"},{"location":"junit/junit-expected-exceptions-code-vi-du-test-exception-voi-junit/#su-dung-expectedexception-rule","text":"S\u1eed d\u1ee5ng ExpectedException c\u0169ng gi\u00fap x\u00e1c nh\u1eadn lo\u1ea1i exception v\u00e0 message exception: @Rule public ExpectedException thrown = ExpectedException . none (); @Test public void shouldTestExceptionMessage () throws Exception { thrown . expect ( ArithmeticException . class ); thrown . expectMessage ( \"divide by zero\" ); MathUtils . divide ( 1 , 0 ); } ExpectedException c\u0169ng cho ph\u00e9p s\u1eed d\u1ee5ng Matchers \u0111\u1ec3 ki\u1ec3m tra message m\u1ed9t c\u00e1ch linh ho\u1ea1t: thrown . expectMessage ( Matchers . containsString ( \"by zero\" )); Ngo\u00e0i ra, ta c\u0169ng c\u00f3 th\u1ec3 d\u00f9ng Matchers \u0111\u1ec3 x\u00e1c nh\u1eadn tr\u1ea1ng th\u00e1i, thu\u1ed9c t\u00ednh c\u1ee7a k\u1ebft qu\u1ea3, v\u00ed d\u1ee5: import static org.hamcrest.Matchers.hasProperty ; import static org.hamcrest.Matchers.is ; import static org.hamcrest.Matchers.startsWith ; import javax.ws.rs.NotFoundException ; import javax.ws.rs.core.Response ; import javax.ws.rs.core.Response.Status ; import org.junit.Rule ; import org.junit.Test ; import org.junit.rules.ExpectedException ; public class TestExy { @Rule public ExpectedException thrown = ExpectedException . none (); @Test public void shouldThrow () { TestThing testThing = new TestThing (); thrown . expect ( NotFoundException . class ); thrown . expectMessage ( startsWith ( \"some Message\" )); thrown . expect ( hasProperty ( \"response\" , hasProperty ( \"status\" , is ( 404 )))); testThing . chuck (); } private class TestThing { public void chuck () { Response response = Response . status ( Status . NOT_FOUND ). entity ( \"Resource not found\" ). build (); throw new NotFoundException ( \"some Message\" , response ); } } } Demo: import static org.hamcrest.CoreMatchers.instanceOf ; import static org.junit.Assert.assertEquals ; import static org.junit.Assert.assertThat ; import static org.junit.Assert.fail ; import org.junit.Rule ; import org.junit.Test ; import org.junit.rules.ExpectedException ; public class TestMathUtils { @Test ( expected = ArithmeticException . class ) public void testMathUtils1 () throws Exception { MathUtils . divide ( 1 , 0 ); } @Test public void testMathUtils2 () throws Exception { try { MathUtils . divide ( 1 , 0 ); fail ( \"Not throw exception\" ); } catch ( Exception e ) { assertThat ( e , instanceOf ( ArithmeticException . class )); assertEquals ( e . getMessage (), \"divide by zero\" ); } } @Test public void testMathUtils3 () throws Exception { try { MathUtils . divide ( 1 , 1 ); } catch ( Exception e ) { fail ( \"Not throw exception\" ); } } @Rule public ExpectedException thrown = ExpectedException . none (); @Test public void shouldTestExceptionMessage () throws Exception { thrown . expect ( ArithmeticException . class ); thrown . expectMessage ( \"divide by zero\" ); MathUtils . divide ( 1 , 0 ); } } Okay, Done! References: https://github.com/junit-team/junit4/wiki","title":"S\u1eed d\u1ee5ng\u00a0ExpectedException Rule"},{"location":"junit/junit-la-gi-vi-du-junit-voi-eclipse-maven/","text":"JUnit l\u00e0 g\u00ec? \u00b6 JUnit l\u00e0 m\u1ed9t framework d\u00f9ng \u0111\u1ec3 unit test cho ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh Java. (M\u1ed9t unit \u1edf \u0111\u00e2y c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t h\u00e0m, ph\u00e9p t\u00ednh, m\u1ed9t module, m\u1ed9t class -- th\u01b0\u1eddng th\u00ec ng\u01b0\u1eddi ta s\u1ebd s\u1eed d\u1ee5ng method \u0111\u1ec3 l\u00e0m unit test) JUnit l\u00e0 m\u1ed9t m\u00e3 ngu\u1ed3n m\u1edf, mi\u1ec5n ph\u00ed (\u1ede b\u00e0i n\u00e0y m\u00ecnh s\u1ebd gi\u1edbi thi\u1ec7u v\u1ec1 JUnit 4, c\u00f2n v\u1ec1 JUnit 5 th\u00ec c\u01a1 ch\u1ebf, c\u1ea5u tr\u00fac c\u1ee7a n\u00f3 kh\u00e1c ho\u00e0n to\u00e0n so v\u1edbi c\u00e1c b\u1ea3n tr\u01b0\u1edbc \u0111\u00f3) V\u00ed d\u1ee5 JUnit v\u1edbi Eclipse +Maven \u00b6 T\u1ea1o maven project (Maven Project s\u1ebd t\u1ef1 t\u1ea1o source folder \u0111\u1ec3 vi\u1ebft code src/main/java v\u00e0 folder \u0111\u1ec3 vi\u1ebft test src/test/java ) \u0110\u1ec3 s\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n JUnit ta khai b\u00e1o <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.12 </version> <scope> test </scope> </dependency> M\u1ee5c ti\u00eau c\u1ee7a JUnit l\u00e0 ki\u1ec3m tra k\u1ebft qu\u1ea3 c\u1ee7a 1 unit c\u00f3 tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 gi\u1ed1ng nh\u01b0 mong mu\u1ed1n hay kh\u00f4ng. Code ngu\u1ed3n \u00b6 V\u00ed d\u1ee5: \u1ede \u0111\u00e2y m\u00ecnh c\u00f3 method isPrimeNumber \u0111\u1ec3 ki\u1ec3m tra m\u1ed9t s\u1ed1 c\u00f3 ph\u1ea3i l\u00e0 s\u1ed1 nguy\u00ean t\u1ed1 hay kh\u00f4ng (S\u1ed1 nguy\u00ean t\u1ed1 l\u00e0 s\u1ed1 t\u1ef1 nhi\u00ean ch\u1ec9 c\u00f3 hai \u01b0\u1edbc s\u1ed1 d\u01b0\u01a1ng ph\u00e2n bi\u1ec7t l\u00e0 1 v\u00e0 ch\u00ednh n\u00f3. (S\u1ed1 1 ch\u1ec9 c\u00f3 m\u1ed9t \u01b0\u1edbc s\u1ed1 d\u01b0\u01a1ng l\u00e0 ch\u00ednh n\u00f3 n\u00ean n\u00f3 kh\u00f4ng ph\u1ea3i l\u00e0 s\u1ed1 nguy\u00ean t\u1ed1)) public class Demo { public boolean isPrimeNumber ( int input ) { for ( int i = 2 ; i < input ; i ++) { if ( input % i == 0 ) return false ; } return true ; } } B\u00e2y gi\u1edd ta s\u1ebd s\u1eed d\u1ee5ng JUnit \u0111\u1ec3 ki\u1ec3m tra h\u00e0m tr\u00ean v\u1edbi c\u00e1c \u0111\u1ea7u v\u00e0o kh\u00e1c nhau: Code Test \u00b6 \u1ede \u0111\u00e2y m\u00ecnh c\u00f3 6 test case t\u01b0\u01a1ng \u1ee9ng v\u1edbi 6 method public class TestDemo { @Test public void testIsPrimeNumber1 () { Demo demo1 = new Demo (); boolean result = demo1 . isPrimeNumber (- 1 ); assertFalse ( result ); } @Test public void testIsPrimeNumber2 () { Demo demo1 = new Demo (); boolean result = demo1 . isPrimeNumber ( 0 ); assertFalse ( result ); } @Test public void testIsPrimeNumber3 () { Demo demo1 = new Demo (); boolean result = demo1 . isPrimeNumber ( 1 ); assertFalse ( result ); } @Test public void testIsPrimeNumber4 () { Demo demo1 = new Demo (); boolean result = demo1 . isPrimeNumber ( 2 ); assertTrue ( result ); } @Test public void testIsPrimeNumber5 () { Demo demo1 = new Demo (); boolean result = demo1 . isPrimeNumber ( 4 ); assertFalse ( result ); } @Test public void testIsPrimeNumber6 () { Demo demo1 = new Demo (); boolean result = demo1 . isPrimeNumber ( 5 ); assertTrue ( result ); } } H\u00e0m th\u1ee9 nh\u1ea5t \u0111\u1ea7u v\u00e0o l\u00e0 s\u1ed1 \u00e2m '-1' n\u00ean k\u1ebft qu\u1ea3 mong \u0111\u1ee3i s\u1ebd l\u00e0 false n\u00ean m\u00ecnh d\u00f9ng assertFalse H\u00e0m th\u1ee9 hai \u0111\u1ea7u v\u00e0o l\u00e0 s\u1ed1 0, 0 kh\u00f4ng ph\u1ea3i l\u00e0 s\u1ed1 nguy\u00ean t\u1ed1 n\u00ean k\u1ebft qu\u1ea3 mong \u0111\u1ee3i s\u1ebd l\u00e0 false H\u00e0m th\u1ee9 ba \u0111\u1ea7u v\u00e0o l\u00e0 s\u1ed1 1, 1 kh\u00f4ng ph\u1ea3i l\u00e0 s\u1ed1 nguy\u00ean t\u1ed1 n\u00ean k\u1ebft qu\u1ea3 mong \u0111\u1ee3i s\u1ebd l\u00e0 false H\u00e0m th\u1ee9 t\u01b0 \u0111\u1ea7u v\u00e0o l\u00e0 s\u1ed1 '2' , 2 l\u00e0 s\u1ed1 nguy\u00ean t\u1ed1 n\u00ean k\u1ebft qu\u1ea3 mong \u0111\u1ee3i s\u1ebd l\u00e0 true n\u00ean m\u00ecnh d\u00f9ng assertTrue H\u00e0m th\u1ee9 n\u0103m \u0111\u1ea7u v\u00e0o l\u00e0 s\u1ed1 '4', 4 kh\u00f4ng ph\u1ea3i l\u00e0 s\u1ed1 nguy\u00ean t\u1ed1 n\u00ean k\u1ebft qu\u1ea3 mong \u0111\u1ee3i s\u1ebd l\u00e0 false H\u00e0m th\u1ee9 s\u00e1u \u0111\u1ea7u v\u00e0o l\u00e0 s\u1ed1 '5', 5 l\u00e0 s\u1ed1 nguy\u00ean t\u1ed1 n\u00ean k\u1ebft qu\u1ea3 mong \u0111\u1ee3i s\u1ebd l\u00e0 true Ch\u1ea1y c\u00e1c test case tr\u00ean (Chu\u1ed9t ph\u1ea3i v\u00e0o class TestDemo.java v\u00e0 ch\u1ecdn Run As JUnit) K\u1ebft qu\u1ea3: (\u1ede \u0111\u00e2y m\u00ecnh ch\u1ea1y tr\u00ean eclipse) Ch\u1ea1y h\u1ebft 6 test case tr\u00ean h\u1ebft 0.029 gi\u00e2y, thanh tr\u1ea1ng th\u00e1i m\u00e0u \u0111\u1ecf t\u1ee9c l\u00e0 c\u00f3 test case kh\u00f4ng pass (3 test case th\u1ea5t b\u1ea1i). Nh\u01b0 b\u1ea1n th\u1ea5y tr\u00ean h\u00ecnh 3 test case \u0111\u1ea7u ti\u00ean b\u1ecb th\u1ea5t b\u1ea1i t\u1ee9c l\u00e0 method isPrimeNumber \u0111ang b\u1ecb sai cho nh\u1eefng tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3 (do m\u00ecnh qu\u00ean ch\u01b0a ki\u1ec3m tra tr\u01b0\u1eddng h\u1ee3p b\u1eb1ng 0 v\u00e0 1 v\u00e0 nh\u1ecf h\u01a1n kh\u00f4ng) B\u00e2y gi\u1edd s\u1eeda l\u1ea1i method isPrimeNumber \u0111\u1ec3 fix c\u00e1c l\u1ed7i \u0111\u00f3: public class Demo { public boolean isPrimeNumber ( int input ) { if ( input < 2 ) { return false ; } for ( int i = 2 ; i < input ; i ++) { if ( input % i == 0 ) return false ; } return true ; } } Ch\u1ea1y l\u1ea1i c\u00e1c test case: JUnit l\u00e0 g\u00ec? V\u00ed d\u1ee5 JUnit v\u1edbi Eclipse +Maven \u00b6 T\u1ea5t c\u1ea3 c\u00e1c test case \u0111\u1ec1u pass, thanh tr\u1ea1ng th\u00e1i chuy\u1ec3n m\u00e0u xanh. C\u00e1c b\u1ea1n c\u00f3 th\u1ec3 th\u1ea5y c\u00e1c test case c\u1ee7a JUnit kh\u00f4ng c\u1ea7n ph\u1ea3i s\u1eeda g\u00ec c\u1ea3, v\u00e0 n\u00f3 c\u0169ng kh\u00f4ng c\u1ea7n quan t\u00e2m c\u00e1c method c\u1ea7n ki\u1ec3m tra th\u1ef1c hi\u1ec7n g\u00ec m\u00e0 ch\u1ec9 c\u1ea7n quan t\u00e2m \u0111\u1ea7u v\u00e0o v\u00e0 \u0111\u1ea7u ra. (Khi c\u00e1c b\u1ea1n \u0111i thi th\u00ec k\u1ebft qu\u1ea3 \u0111\u1ea7u ra c\u1ee7a c\u00e1c b\u1ea1n c\u0169ng s\u1ebd ki\u1ec3m tra b\u1eb1ng m\u1ed9t b\u1ed9 c\u00e1c test case v\u00e0 t\u1ef1 \u0111\u1ed9ng ch\u1ea1y nh\u01b0 th\u1ebf) JUnit l\u00e0 g\u00ec? V\u00ed d\u1ee5 JUnit v\u1edbi Eclipse +Maven \u00b6 Okay, Done!\\ Ph\u1ea7n ti\u1ebfp theo m\u00ecnh s\u1ebd h\u01b0\u1edbng d\u1eabn c\u00e1c b\u1ea1n th\u1ef1c hi\u1ec7n unit v\u1edbi JUnit cho c\u00e1c tr\u01b0\u1eddng h\u1ee3p ph\u1ee9c t\u1ea1p h\u01a1n, v\u00e0 gi\u1ea3i th\u00edch c\u00e1c annotation c\u1ee7a JUnit References: https://github.com/junit-team/junit4/wiki","title":"JUnit l\u00e0 g\u00ec"},{"location":"junit/junit-la-gi-vi-du-junit-voi-eclipse-maven/#junit-la-gi","text":"JUnit l\u00e0 m\u1ed9t framework d\u00f9ng \u0111\u1ec3 unit test cho ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh Java. (M\u1ed9t unit \u1edf \u0111\u00e2y c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t h\u00e0m, ph\u00e9p t\u00ednh, m\u1ed9t module, m\u1ed9t class -- th\u01b0\u1eddng th\u00ec ng\u01b0\u1eddi ta s\u1ebd s\u1eed d\u1ee5ng method \u0111\u1ec3 l\u00e0m unit test) JUnit l\u00e0 m\u1ed9t m\u00e3 ngu\u1ed3n m\u1edf, mi\u1ec5n ph\u00ed (\u1ede b\u00e0i n\u00e0y m\u00ecnh s\u1ebd gi\u1edbi thi\u1ec7u v\u1ec1 JUnit 4, c\u00f2n v\u1ec1 JUnit 5 th\u00ec c\u01a1 ch\u1ebf, c\u1ea5u tr\u00fac c\u1ee7a n\u00f3 kh\u00e1c ho\u00e0n to\u00e0n so v\u1edbi c\u00e1c b\u1ea3n tr\u01b0\u1edbc \u0111\u00f3)","title":"JUnit l\u00e0 g\u00ec?"},{"location":"junit/junit-la-gi-vi-du-junit-voi-eclipse-maven/#vi-du-junit-voi-eclipse-maven","text":"T\u1ea1o maven project (Maven Project s\u1ebd t\u1ef1 t\u1ea1o source folder \u0111\u1ec3 vi\u1ebft code src/main/java v\u00e0 folder \u0111\u1ec3 vi\u1ebft test src/test/java ) \u0110\u1ec3 s\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n JUnit ta khai b\u00e1o <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.12 </version> <scope> test </scope> </dependency> M\u1ee5c ti\u00eau c\u1ee7a JUnit l\u00e0 ki\u1ec3m tra k\u1ebft qu\u1ea3 c\u1ee7a 1 unit c\u00f3 tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 gi\u1ed1ng nh\u01b0 mong mu\u1ed1n hay kh\u00f4ng.","title":"V\u00ed d\u1ee5 JUnit v\u1edbi Eclipse +Maven"},{"location":"junit/junit-la-gi-vi-du-junit-voi-eclipse-maven/#code-nguon","text":"V\u00ed d\u1ee5: \u1ede \u0111\u00e2y m\u00ecnh c\u00f3 method isPrimeNumber \u0111\u1ec3 ki\u1ec3m tra m\u1ed9t s\u1ed1 c\u00f3 ph\u1ea3i l\u00e0 s\u1ed1 nguy\u00ean t\u1ed1 hay kh\u00f4ng (S\u1ed1 nguy\u00ean t\u1ed1 l\u00e0 s\u1ed1 t\u1ef1 nhi\u00ean ch\u1ec9 c\u00f3 hai \u01b0\u1edbc s\u1ed1 d\u01b0\u01a1ng ph\u00e2n bi\u1ec7t l\u00e0 1 v\u00e0 ch\u00ednh n\u00f3. (S\u1ed1 1 ch\u1ec9 c\u00f3 m\u1ed9t \u01b0\u1edbc s\u1ed1 d\u01b0\u01a1ng l\u00e0 ch\u00ednh n\u00f3 n\u00ean n\u00f3 kh\u00f4ng ph\u1ea3i l\u00e0 s\u1ed1 nguy\u00ean t\u1ed1)) public class Demo { public boolean isPrimeNumber ( int input ) { for ( int i = 2 ; i < input ; i ++) { if ( input % i == 0 ) return false ; } return true ; } } B\u00e2y gi\u1edd ta s\u1ebd s\u1eed d\u1ee5ng JUnit \u0111\u1ec3 ki\u1ec3m tra h\u00e0m tr\u00ean v\u1edbi c\u00e1c \u0111\u1ea7u v\u00e0o kh\u00e1c nhau:","title":"Code ngu\u1ed3n"},{"location":"junit/junit-la-gi-vi-du-junit-voi-eclipse-maven/#code-test","text":"\u1ede \u0111\u00e2y m\u00ecnh c\u00f3 6 test case t\u01b0\u01a1ng \u1ee9ng v\u1edbi 6 method public class TestDemo { @Test public void testIsPrimeNumber1 () { Demo demo1 = new Demo (); boolean result = demo1 . isPrimeNumber (- 1 ); assertFalse ( result ); } @Test public void testIsPrimeNumber2 () { Demo demo1 = new Demo (); boolean result = demo1 . isPrimeNumber ( 0 ); assertFalse ( result ); } @Test public void testIsPrimeNumber3 () { Demo demo1 = new Demo (); boolean result = demo1 . isPrimeNumber ( 1 ); assertFalse ( result ); } @Test public void testIsPrimeNumber4 () { Demo demo1 = new Demo (); boolean result = demo1 . isPrimeNumber ( 2 ); assertTrue ( result ); } @Test public void testIsPrimeNumber5 () { Demo demo1 = new Demo (); boolean result = demo1 . isPrimeNumber ( 4 ); assertFalse ( result ); } @Test public void testIsPrimeNumber6 () { Demo demo1 = new Demo (); boolean result = demo1 . isPrimeNumber ( 5 ); assertTrue ( result ); } } H\u00e0m th\u1ee9 nh\u1ea5t \u0111\u1ea7u v\u00e0o l\u00e0 s\u1ed1 \u00e2m '-1' n\u00ean k\u1ebft qu\u1ea3 mong \u0111\u1ee3i s\u1ebd l\u00e0 false n\u00ean m\u00ecnh d\u00f9ng assertFalse H\u00e0m th\u1ee9 hai \u0111\u1ea7u v\u00e0o l\u00e0 s\u1ed1 0, 0 kh\u00f4ng ph\u1ea3i l\u00e0 s\u1ed1 nguy\u00ean t\u1ed1 n\u00ean k\u1ebft qu\u1ea3 mong \u0111\u1ee3i s\u1ebd l\u00e0 false H\u00e0m th\u1ee9 ba \u0111\u1ea7u v\u00e0o l\u00e0 s\u1ed1 1, 1 kh\u00f4ng ph\u1ea3i l\u00e0 s\u1ed1 nguy\u00ean t\u1ed1 n\u00ean k\u1ebft qu\u1ea3 mong \u0111\u1ee3i s\u1ebd l\u00e0 false H\u00e0m th\u1ee9 t\u01b0 \u0111\u1ea7u v\u00e0o l\u00e0 s\u1ed1 '2' , 2 l\u00e0 s\u1ed1 nguy\u00ean t\u1ed1 n\u00ean k\u1ebft qu\u1ea3 mong \u0111\u1ee3i s\u1ebd l\u00e0 true n\u00ean m\u00ecnh d\u00f9ng assertTrue H\u00e0m th\u1ee9 n\u0103m \u0111\u1ea7u v\u00e0o l\u00e0 s\u1ed1 '4', 4 kh\u00f4ng ph\u1ea3i l\u00e0 s\u1ed1 nguy\u00ean t\u1ed1 n\u00ean k\u1ebft qu\u1ea3 mong \u0111\u1ee3i s\u1ebd l\u00e0 false H\u00e0m th\u1ee9 s\u00e1u \u0111\u1ea7u v\u00e0o l\u00e0 s\u1ed1 '5', 5 l\u00e0 s\u1ed1 nguy\u00ean t\u1ed1 n\u00ean k\u1ebft qu\u1ea3 mong \u0111\u1ee3i s\u1ebd l\u00e0 true Ch\u1ea1y c\u00e1c test case tr\u00ean (Chu\u1ed9t ph\u1ea3i v\u00e0o class TestDemo.java v\u00e0 ch\u1ecdn Run As JUnit) K\u1ebft qu\u1ea3: (\u1ede \u0111\u00e2y m\u00ecnh ch\u1ea1y tr\u00ean eclipse) Ch\u1ea1y h\u1ebft 6 test case tr\u00ean h\u1ebft 0.029 gi\u00e2y, thanh tr\u1ea1ng th\u00e1i m\u00e0u \u0111\u1ecf t\u1ee9c l\u00e0 c\u00f3 test case kh\u00f4ng pass (3 test case th\u1ea5t b\u1ea1i). Nh\u01b0 b\u1ea1n th\u1ea5y tr\u00ean h\u00ecnh 3 test case \u0111\u1ea7u ti\u00ean b\u1ecb th\u1ea5t b\u1ea1i t\u1ee9c l\u00e0 method isPrimeNumber \u0111ang b\u1ecb sai cho nh\u1eefng tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3 (do m\u00ecnh qu\u00ean ch\u01b0a ki\u1ec3m tra tr\u01b0\u1eddng h\u1ee3p b\u1eb1ng 0 v\u00e0 1 v\u00e0 nh\u1ecf h\u01a1n kh\u00f4ng) B\u00e2y gi\u1edd s\u1eeda l\u1ea1i method isPrimeNumber \u0111\u1ec3 fix c\u00e1c l\u1ed7i \u0111\u00f3: public class Demo { public boolean isPrimeNumber ( int input ) { if ( input < 2 ) { return false ; } for ( int i = 2 ; i < input ; i ++) { if ( input % i == 0 ) return false ; } return true ; } } Ch\u1ea1y l\u1ea1i c\u00e1c test case:","title":"Code Test"},{"location":"junit/junit-la-gi-vi-du-junit-voi-eclipse-maven/#junit-la-gi-vi-du-junit-voi-eclipse-maven","text":"T\u1ea5t c\u1ea3 c\u00e1c test case \u0111\u1ec1u pass, thanh tr\u1ea1ng th\u00e1i chuy\u1ec3n m\u00e0u xanh. C\u00e1c b\u1ea1n c\u00f3 th\u1ec3 th\u1ea5y c\u00e1c test case c\u1ee7a JUnit kh\u00f4ng c\u1ea7n ph\u1ea3i s\u1eeda g\u00ec c\u1ea3, v\u00e0 n\u00f3 c\u0169ng kh\u00f4ng c\u1ea7n quan t\u00e2m c\u00e1c method c\u1ea7n ki\u1ec3m tra th\u1ef1c hi\u1ec7n g\u00ec m\u00e0 ch\u1ec9 c\u1ea7n quan t\u00e2m \u0111\u1ea7u v\u00e0o v\u00e0 \u0111\u1ea7u ra. (Khi c\u00e1c b\u1ea1n \u0111i thi th\u00ec k\u1ebft qu\u1ea3 \u0111\u1ea7u ra c\u1ee7a c\u00e1c b\u1ea1n c\u0169ng s\u1ebd ki\u1ec3m tra b\u1eb1ng m\u1ed9t b\u1ed9 c\u00e1c test case v\u00e0 t\u1ef1 \u0111\u1ed9ng ch\u1ea1y nh\u01b0 th\u1ebf)","title":"JUnit l\u00e0 g\u00ec? V\u00ed d\u1ee5 JUnit v\u1edbi Eclipse +Maven"},{"location":"junit/junit-la-gi-vi-du-junit-voi-eclipse-maven/#junit-la-gi-vi-du-junit-voi-eclipse-maven_1","text":"Okay, Done!\\ Ph\u1ea7n ti\u1ebfp theo m\u00ecnh s\u1ebd h\u01b0\u1edbng d\u1eabn c\u00e1c b\u1ea1n th\u1ef1c hi\u1ec7n unit v\u1edbi JUnit cho c\u00e1c tr\u01b0\u1eddng h\u1ee3p ph\u1ee9c t\u1ea1p h\u01a1n, v\u00e0 gi\u1ea3i th\u00edch c\u00e1c annotation c\u1ee7a JUnit References: https://github.com/junit-team/junit4/wiki","title":"JUnit l\u00e0 g\u00ec? V\u00ed d\u1ee5 JUnit v\u1edbi Eclipse +Maven"},{"location":"junit/test-runner-va-test-suite-tao-bo-test-voi-junit/","text":"Test runners \u00b6 B\u00ecnh th\u01b0\u1eddng, c\u00e1c IDE nh\u01b0 NetBeans, Eclipse \u0111\u1ec1u c\u00f3 s\u1eb5n tr\u00ecnh ch\u1ea1y (runner) cho JUnit \u0111\u1ec3 hi\u1ec3n th\u1ecb k\u1ebft qu\u1ea3 c\u00e1c test case, v\u00ed d\u1ee5: V\u1eady tr\u01b0\u1eddng h\u1ee3p kh\u00f4ng s\u1eed d\u1ee5ng IDE th\u00ec sao? ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng m\u00e0n h\u00ecnh console \u0111\u1ec3 ch\u1ea1y, hi\u1ec3n th\u1ecb k\u1ebft qu\u1ea3 c\u00e1c test case. JUnit cung c\u1ea5p c\u00f4ng c\u1ee5 \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a b\u1ed9 test case \u0111\u1ec3 ch\u1ea1y v\u00e0 hi\u1ec3n th\u1ecb k\u1ebft qu\u1ea3: \u0110\u1ec3 ch\u1ea1y t\u1eeb ch\u01b0\u01a1ng tr\u00ecnh Java ta s\u1eed d\u1ee5ng: org . junit . runner . JUnitCore . runClasses ( TestClass1 . class , ...); \u0110\u1ec3 ch\u1ea1y t\u1eeb console ta s\u1eed d\u1ee5ng (class test v\u00e0 junit n\u1eb1m c\u00f9ng classpath: http://junit.org/javadoc/latest/org/junit/runner/JUnitCore.html ) java org . junit . runner . JUnitCore TestClass1 [... other test classes ...] Annotation @RunWith \u00b6 N\u1ebfu b\u1ea1n \u0111\u1ec3 \u00fd th\u00ec nh\u1eefng class c\u00f3 c\u00e1c method s\u1eed d\u1ee5ng annotation @Test th\u00ec khi click chu\u1ed9t ph\u1ea3i v\u00e0 ch\u1ecdn Run As s\u1ebd c\u00f3 m\u1ee5c 'JUnit Test', nh\u1eefng tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3 JUnit s\u1ebd s\u1eed d\u1ee5ng tr\u00ecnh runner m\u1eb7c \u0111\u1ecbnh l\u00e0 BlockJUnit4ClassRunner ho\u1eb7c JUnit4ClassRunner cho c\u00e1c version c\u0169 h\u01a1n. \u0110\u1ec3 ch\u1ec9 r\u00f5 tr\u00ecnh runner b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng @RunWith , v\u00ed d\u1ee5 th\u01b0\u1eddng d\u00f9ng nh\u1ea5t l\u00e0 @RunWith(Suite.class) \u0111\u1ec3 ch\u1ea1y nhi\u1ec1u class JUnit c\u00f9ng l\u00fac. Test Suite -- T\u1ea1o b\u1ed9 test v\u1edbi JUnit \u00b6 Th\u00f4ng th\u01b0\u1eddng 1 class test s\u1ebd s\u1eed d\u1ee5ng \u0111\u1ec3 test cho m\u1ed9t ch\u1ee9c n\u0103ng, m\u1ed9t unit. V\u1eady n\u1ebfu mu\u1ed1n ch\u1ea1y nhi\u1ec1u class test \u0111\u1ec3 xem k\u1ebft qu\u1ea3 th\u00ec nh\u01b0 n\u00e0o?\\ C\u00e2u tr\u1ea3 l\u1eddi l\u00e0 test suite, ta s\u1ebd t\u1ea1o m\u1ed9t b\u1ed9 g\u1ed3m nhi\u1ec1u class \u0111\u1ec3 th\u1ef1c hi\u1ec7n test v\u00e0 xem k\u1ebft qu\u1ea3 sau m\u1ed9t l\u1ea7n ch\u1ea1y. \u0110\u1ec3 t\u1ea1o test suite ta s\u1eed d\u1ee5ng @RunWith(Suite.class) v\u00e0 @SuiteClasses(TestClass1.class, ...) . B\u00ean trong @SuiteClasses s\u1ebd l\u00e0 c\u00e1c class test \u0111\u01b0\u1ee3c ch\u1ea1y. V\u00ed d\u1ee5: import static org.junit.Assert.assertEquals ; import org.junit.Test ; public class Test1 { @Test public void test1 () { assertEquals ( \"hello\" , \"hello\" ); } } import static org.junit.Assert.assertTrue ; import org.junit.Test ; public class Test2 { @Test public void test1 () { assertTrue ( true ); } } T\u1ea1o b\u1ed9 test g\u1ed3m 2 class test l\u00e0 Test1.java v\u00e0 Test2.java import org.junit.runner.RunWith ; import org.junit.runners.Suite ; import org.junit.runners.Suite.SuiteClasses ; @RunWith ( Suite . class ) @SuiteClasses ({ Test1 . class , Test2 . class }) public class MyTestSuite { } Demo -- K\u1ebft qu\u1ea3: (Chu\u1ed9t ph\u1ea3i v\u00e0o class MyTestSuite.java v\u00e0 ch\u1ecdn Run As JUnit Test) Test runner v\u00e0 Test suite. T\u1ea1o b\u1ed9 test v\u1edbi JUnit stackjava.com \u00b6 Okay, Done! References: https://github.com/junit-team/junit4/wiki/Test-runners https://github.com/junit-team/junit4/wiki/Aggregating-tests-in-suites","title":"Test runner v\u00e0 Test suite"},{"location":"junit/test-runner-va-test-suite-tao-bo-test-voi-junit/#test-runners","text":"B\u00ecnh th\u01b0\u1eddng, c\u00e1c IDE nh\u01b0 NetBeans, Eclipse \u0111\u1ec1u c\u00f3 s\u1eb5n tr\u00ecnh ch\u1ea1y (runner) cho JUnit \u0111\u1ec3 hi\u1ec3n th\u1ecb k\u1ebft qu\u1ea3 c\u00e1c test case, v\u00ed d\u1ee5: V\u1eady tr\u01b0\u1eddng h\u1ee3p kh\u00f4ng s\u1eed d\u1ee5ng IDE th\u00ec sao? ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng m\u00e0n h\u00ecnh console \u0111\u1ec3 ch\u1ea1y, hi\u1ec3n th\u1ecb k\u1ebft qu\u1ea3 c\u00e1c test case. JUnit cung c\u1ea5p c\u00f4ng c\u1ee5 \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a b\u1ed9 test case \u0111\u1ec3 ch\u1ea1y v\u00e0 hi\u1ec3n th\u1ecb k\u1ebft qu\u1ea3: \u0110\u1ec3 ch\u1ea1y t\u1eeb ch\u01b0\u01a1ng tr\u00ecnh Java ta s\u1eed d\u1ee5ng: org . junit . runner . JUnitCore . runClasses ( TestClass1 . class , ...); \u0110\u1ec3 ch\u1ea1y t\u1eeb console ta s\u1eed d\u1ee5ng (class test v\u00e0 junit n\u1eb1m c\u00f9ng classpath: http://junit.org/javadoc/latest/org/junit/runner/JUnitCore.html ) java org . junit . runner . JUnitCore TestClass1 [... other test classes ...]","title":"Test runners"},{"location":"junit/test-runner-va-test-suite-tao-bo-test-voi-junit/#annotation-runwith","text":"N\u1ebfu b\u1ea1n \u0111\u1ec3 \u00fd th\u00ec nh\u1eefng class c\u00f3 c\u00e1c method s\u1eed d\u1ee5ng annotation @Test th\u00ec khi click chu\u1ed9t ph\u1ea3i v\u00e0 ch\u1ecdn Run As s\u1ebd c\u00f3 m\u1ee5c 'JUnit Test', nh\u1eefng tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3 JUnit s\u1ebd s\u1eed d\u1ee5ng tr\u00ecnh runner m\u1eb7c \u0111\u1ecbnh l\u00e0 BlockJUnit4ClassRunner ho\u1eb7c JUnit4ClassRunner cho c\u00e1c version c\u0169 h\u01a1n. \u0110\u1ec3 ch\u1ec9 r\u00f5 tr\u00ecnh runner b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng @RunWith , v\u00ed d\u1ee5 th\u01b0\u1eddng d\u00f9ng nh\u1ea5t l\u00e0 @RunWith(Suite.class) \u0111\u1ec3 ch\u1ea1y nhi\u1ec1u class JUnit c\u00f9ng l\u00fac.","title":"Annotation @RunWith"},{"location":"junit/test-runner-va-test-suite-tao-bo-test-voi-junit/#test-suite-tao-bo-test-voi-junit","text":"Th\u00f4ng th\u01b0\u1eddng 1 class test s\u1ebd s\u1eed d\u1ee5ng \u0111\u1ec3 test cho m\u1ed9t ch\u1ee9c n\u0103ng, m\u1ed9t unit. V\u1eady n\u1ebfu mu\u1ed1n ch\u1ea1y nhi\u1ec1u class test \u0111\u1ec3 xem k\u1ebft qu\u1ea3 th\u00ec nh\u01b0 n\u00e0o?\\ C\u00e2u tr\u1ea3 l\u1eddi l\u00e0 test suite, ta s\u1ebd t\u1ea1o m\u1ed9t b\u1ed9 g\u1ed3m nhi\u1ec1u class \u0111\u1ec3 th\u1ef1c hi\u1ec7n test v\u00e0 xem k\u1ebft qu\u1ea3 sau m\u1ed9t l\u1ea7n ch\u1ea1y. \u0110\u1ec3 t\u1ea1o test suite ta s\u1eed d\u1ee5ng @RunWith(Suite.class) v\u00e0 @SuiteClasses(TestClass1.class, ...) . B\u00ean trong @SuiteClasses s\u1ebd l\u00e0 c\u00e1c class test \u0111\u01b0\u1ee3c ch\u1ea1y. V\u00ed d\u1ee5: import static org.junit.Assert.assertEquals ; import org.junit.Test ; public class Test1 { @Test public void test1 () { assertEquals ( \"hello\" , \"hello\" ); } } import static org.junit.Assert.assertTrue ; import org.junit.Test ; public class Test2 { @Test public void test1 () { assertTrue ( true ); } } T\u1ea1o b\u1ed9 test g\u1ed3m 2 class test l\u00e0 Test1.java v\u00e0 Test2.java import org.junit.runner.RunWith ; import org.junit.runners.Suite ; import org.junit.runners.Suite.SuiteClasses ; @RunWith ( Suite . class ) @SuiteClasses ({ Test1 . class , Test2 . class }) public class MyTestSuite { } Demo -- K\u1ebft qu\u1ea3: (Chu\u1ed9t ph\u1ea3i v\u00e0o class MyTestSuite.java v\u00e0 ch\u1ecdn Run As JUnit Test)","title":"Test Suite -- T\u1ea1o b\u1ed9 test v\u1edbi JUnit"},{"location":"junit/test-runner-va-test-suite-tao-bo-test-voi-junit/#test-runner-va-test-suite-tao-bo-test-voi-junit-stackjavacom","text":"Okay, Done! References: https://github.com/junit-team/junit4/wiki/Test-runners https://github.com/junit-team/junit4/wiki/Aggregating-tests-in-suites","title":"Test runner v\u00e0 Test suite. T\u1ea1o b\u1ed9 test v\u1edbi JUnit stackjava.com"},{"location":"junit/thu-tu-chay-cac-test-case-trong-junit-vi-du/","text":"Th\u1ee9 t\u1ef1 th\u1ef1c thi c\u00e1c class test trong m\u1ed9t test suite \u00b6 Th\u1ee9 t\u1ef1 th\u1ef1c thi c\u00e1c class test trong m\u1ed9t test suite ch\u00ednh l\u00e0 th\u1ee9 t\u1ef1 khai b\u00e1o c\u00e1c class \u0111\u00f3 trong annotation @SuiteClasses V\u00ed d\u1ee5 m\u00ecnh c\u00f3 2 class test sau: TestA . java import static org.junit.Assert.assertTrue ; import org.junit.FixMethodOrder ; import org.junit.Test ; import org.junit.runners.MethodSorters ; public class TestA { @Test public void testA2 () { System . out . println ( \"testA2\" ); assertTrue ( true ); } @Test public void testA () { System . out . println ( \"testA\" ); assertTrue ( true ); } @Test public void testA1 () { System . out . println ( \"testA1\" ); assertTrue ( true ); } } TestB . java import static org.junit.Assert.assertTrue ; import org.junit.Test ; public class TestB { @Test public void testB1 () { System . out . println ( \"testB1\" ); assertTrue ( true ); } @Test public void testB2 () { System . out . println ( \"testB2\" ); assertTrue ( true ); } } B\u00e2y gi\u1edd m\u00ecnh khai b\u00e1o class TestB.java tr\u01b0\u1edbc class TestA.java trong test suite thi n\u00f3 s\u1ebd th\u1ef1c hi\u1ec7n ch\u1ea1y class TestB.java tr\u01b0\u1edbc @RunWith ( Suite . class ) @SuiteClasses ({ TestB . class , TestA . class }) public class MyTestSuite { } N\u1ebfu m\u00ecnh \u0111\u1ed5i th\u1ee9 t\u1ef1 l\u1ea1i th\u00e0nh khai b\u00e1o class TestA.java tr\u01b0\u1edbc th\u00ec n\u00f3 s\u1ebd ch\u1ea1y class TestA.java tr\u01b0\u1edbc. import org.junit.runner.RunWith ; import org.junit.runners.Suite ; import org.junit.runners.Suite.SuiteClasses ; @RunWith ( Suite . class ) @SuiteClasses ({ TestA . class , TestB . class }) public class MyTestSuite { } Th\u1ee9 t\u1ef1 th\u1ef1c thi c\u00e1c method trong m\u1ed9t class test \u00b6 \u0110\u1ec3 ch\u1ec9 r\u00f5 th\u1ee9 t\u1ef1 ch\u1ea1y c\u1ee7a c\u00e1c method trong class test ta d\u00f9ng annotation @FixMethodOrder \u1edf \u0111\u1ea7u class. C\u00f3 3 ki\u1ec3u s\u1eafp x\u1ebfp l\u00e0: @FixMethodOrder(MethodSorters.DEFAULT) : \u0110\u00e2y l\u00e0 ki\u1ec3u s\u1eafp x\u1ebfp m\u1eb7c \u0111\u1ecbnh n\u1ebfu b\u1ea1n kh\u00f4ng khai b\u00e1o @FixMethodOrder , tuy nhi\u00ean v\u1edbi ki\u1ec3u n\u00e0y th\u00ec s\u1ebd kh\u00f4ng th\u1ec3 x\u00e1c \u0111\u1ecbnh ch\u00ednh x\u00e1c method n\u00e0o s\u1ebd \u0111\u01b0\u1ee3c ch\u1ea1y tr\u01b0\u1edbc @FixMethodOrder(MethodSorters.JVM) : Th\u1ee9 t\u1ef1 c\u00e1c method test d\u1ef1a theo JVM. Tuy nhi\u00ean th\u1ee9 t\u1ef1 n\u00e0y c\u00f3 th\u1ec3 b\u1ecb thay \u0111\u1ed5i khi ch\u1ea1y. @FixMethodOrder(MethodSorters.NAME_ASCENDING) : Th\u1ee9 t\u1ef1 c\u00e1c method \u0111\u01b0\u1ee3c th\u1ef1c thi d\u1ef1a theo t\u00ean method. (Ki\u1ec3u MethodSorters.NAME_ASCENDING th\u00ec ch\u1eafc ch\u1eafn bi\u1ebft tr\u01b0\u1edbc th\u1ee9 t\u1ef1 c\u00e1c method s\u1ebd ch\u1ea1y) V\u00ed d\u1ee5: Th\u1ef1c hi\u1ec7n ch\u1ea1y c\u00e1c method test theo th\u1ee9 t\u1ef1 t\u00ean method: @FixMethodOrder ( MethodSorters . NAME_ASCENDING ) public class TestA { @Test public void testA2 () { System . out . println ( \"testA2\" ); assertTrue ( true ); } @Test public void testA () { System . out . println ( \"testA\" ); assertTrue ( true ); } @Test public void testA1 () { System . out . println ( \"testA1\" ); assertTrue ( true ); } } Okay, Done! Th\u1ee9 t\u1ef1 ch\u1ea1y c\u00e1c test case trong JUnit -- v\u00ed d\u1ee5 stackjava.com \u00b6 References: https://github.com/junit-team/junit4/wiki","title":"Th\u1ee9 t\u1ef1 ch\u1ea1y c\u00e1c test case trong JUnit"},{"location":"junit/thu-tu-chay-cac-test-case-trong-junit-vi-du/#thu-tu-thuc-thi-cac-class-test-trong-mot-test-suite","text":"Th\u1ee9 t\u1ef1 th\u1ef1c thi c\u00e1c class test trong m\u1ed9t test suite ch\u00ednh l\u00e0 th\u1ee9 t\u1ef1 khai b\u00e1o c\u00e1c class \u0111\u00f3 trong annotation @SuiteClasses V\u00ed d\u1ee5 m\u00ecnh c\u00f3 2 class test sau: TestA . java import static org.junit.Assert.assertTrue ; import org.junit.FixMethodOrder ; import org.junit.Test ; import org.junit.runners.MethodSorters ; public class TestA { @Test public void testA2 () { System . out . println ( \"testA2\" ); assertTrue ( true ); } @Test public void testA () { System . out . println ( \"testA\" ); assertTrue ( true ); } @Test public void testA1 () { System . out . println ( \"testA1\" ); assertTrue ( true ); } } TestB . java import static org.junit.Assert.assertTrue ; import org.junit.Test ; public class TestB { @Test public void testB1 () { System . out . println ( \"testB1\" ); assertTrue ( true ); } @Test public void testB2 () { System . out . println ( \"testB2\" ); assertTrue ( true ); } } B\u00e2y gi\u1edd m\u00ecnh khai b\u00e1o class TestB.java tr\u01b0\u1edbc class TestA.java trong test suite thi n\u00f3 s\u1ebd th\u1ef1c hi\u1ec7n ch\u1ea1y class TestB.java tr\u01b0\u1edbc @RunWith ( Suite . class ) @SuiteClasses ({ TestB . class , TestA . class }) public class MyTestSuite { } N\u1ebfu m\u00ecnh \u0111\u1ed5i th\u1ee9 t\u1ef1 l\u1ea1i th\u00e0nh khai b\u00e1o class TestA.java tr\u01b0\u1edbc th\u00ec n\u00f3 s\u1ebd ch\u1ea1y class TestA.java tr\u01b0\u1edbc. import org.junit.runner.RunWith ; import org.junit.runners.Suite ; import org.junit.runners.Suite.SuiteClasses ; @RunWith ( Suite . class ) @SuiteClasses ({ TestA . class , TestB . class }) public class MyTestSuite { }","title":"Th\u1ee9 t\u1ef1 th\u1ef1c thi c\u00e1c class test trong m\u1ed9t test suite"},{"location":"junit/thu-tu-chay-cac-test-case-trong-junit-vi-du/#thu-tu-thuc-thi-cac-method-trong-mot-class-test","text":"\u0110\u1ec3 ch\u1ec9 r\u00f5 th\u1ee9 t\u1ef1 ch\u1ea1y c\u1ee7a c\u00e1c method trong class test ta d\u00f9ng annotation @FixMethodOrder \u1edf \u0111\u1ea7u class. C\u00f3 3 ki\u1ec3u s\u1eafp x\u1ebfp l\u00e0: @FixMethodOrder(MethodSorters.DEFAULT) : \u0110\u00e2y l\u00e0 ki\u1ec3u s\u1eafp x\u1ebfp m\u1eb7c \u0111\u1ecbnh n\u1ebfu b\u1ea1n kh\u00f4ng khai b\u00e1o @FixMethodOrder , tuy nhi\u00ean v\u1edbi ki\u1ec3u n\u00e0y th\u00ec s\u1ebd kh\u00f4ng th\u1ec3 x\u00e1c \u0111\u1ecbnh ch\u00ednh x\u00e1c method n\u00e0o s\u1ebd \u0111\u01b0\u1ee3c ch\u1ea1y tr\u01b0\u1edbc @FixMethodOrder(MethodSorters.JVM) : Th\u1ee9 t\u1ef1 c\u00e1c method test d\u1ef1a theo JVM. Tuy nhi\u00ean th\u1ee9 t\u1ef1 n\u00e0y c\u00f3 th\u1ec3 b\u1ecb thay \u0111\u1ed5i khi ch\u1ea1y. @FixMethodOrder(MethodSorters.NAME_ASCENDING) : Th\u1ee9 t\u1ef1 c\u00e1c method \u0111\u01b0\u1ee3c th\u1ef1c thi d\u1ef1a theo t\u00ean method. (Ki\u1ec3u MethodSorters.NAME_ASCENDING th\u00ec ch\u1eafc ch\u1eafn bi\u1ebft tr\u01b0\u1edbc th\u1ee9 t\u1ef1 c\u00e1c method s\u1ebd ch\u1ea1y) V\u00ed d\u1ee5: Th\u1ef1c hi\u1ec7n ch\u1ea1y c\u00e1c method test theo th\u1ee9 t\u1ef1 t\u00ean method: @FixMethodOrder ( MethodSorters . NAME_ASCENDING ) public class TestA { @Test public void testA2 () { System . out . println ( \"testA2\" ); assertTrue ( true ); } @Test public void testA () { System . out . println ( \"testA\" ); assertTrue ( true ); } @Test public void testA1 () { System . out . println ( \"testA1\" ); assertTrue ( true ); } } Okay, Done!","title":"Th\u1ee9 t\u1ef1 th\u1ef1c thi c\u00e1c method trong m\u1ed9t class test"},{"location":"junit/thu-tu-chay-cac-test-case-trong-junit-vi-du/#thu-tu-chay-cac-test-case-trong-junit-vi-du-stackjavacom","text":"References: https://github.com/junit-team/junit4/wiki","title":"Th\u1ee9 t\u1ef1 ch\u1ea1y c\u00e1c test case trong JUnit -- v\u00ed d\u1ee5 stackjava.com"},{"location":"junit/vi-du-junit-ignoring-tests-va-timeout-voi-test-case/","text":"Ignoring tests \u00b6 V\u00ec m\u1ed9t l\u00fd do n\u00e0o \u0111\u00f3, b\u1ea1n mu\u1ed1n t\u1ea1m th\u1eddi v\u00f4 hi\u1ec7u h\u00f3a test case (b\u1ecf qua kh\u00f4ng ch\u1ea1y test case \u0111\u00f3). Th\u00f4ng th\u01b0\u1eddng ta s\u1ebd x\u00f3a ho\u1eb7c comment annotation @Test nh\u01b0 th\u1ebf tr\u00ecnh test runner s\u1ebd b\u1ecf qua method \u0111\u00f3 nh\u01b0ng \u0111\u1ed3ng th\u1eddi test case \u0111\u00f3 c\u0169ng s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c report (b\u1ea1n c\u00f3 th\u1ec3 qu\u00ean m\u1ea5t l\u00e0 c\u00f3 test case \u0111\u00f3). Bi\u1ec7n ph\u00e1p thay th\u1ec3 l\u00e0 s\u1eed d\u1ee5ng annotation @Ignore \u1edf tr\u01b0\u1edbc ho\u1eb7c sau annotation @Test , sau khi ch\u1ea1y JUnit test, n\u00f3 v\u1eabn th\u00f4ng b\u00e1o l\u00e0 c\u00f3 test case \u0111\u00f3 nh\u01b0ng \u0111ang b\u1ecb disable. V\u00ed d\u1ee5: import static org.junit.Assert.* ; import org.junit.Ignore ; import org.junit.Test ; public class DemoIgnoreTest { @Ignore ( \"Test is ignored as a demonstration\" ) @Test public void testEquals () { String str = \"stackjava.com\" ; assertEquals ( str , \"stackjava.com\" ); } @Test public void testTrue () { assertTrue ( true ); } @Test public void testFalse () { assertFalse ( false ); } } Test case v\u1edbi timeout \u00b6 B\u1ea1n c\u00f3 th\u1ec3 expect th\u1eddi gian timeout c\u1ee7a m\u1ed9t test case b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng tham s\u1ed1 timeout trong annoation @Test V\u00ed d\u1ee5: @Test ( timeout = 3000 ) public void testTimeout () { Demo demo = new Demo (); demo . process (); } \u1ede tr\u00ean m\u00ecnh expect l\u00e0 th\u1eddi gian th\u1ef1c hi\u1ec7n test case <= 3 gi\u00e2y (th\u1eddi gian \u0111\u00f3 c\u0169ng g\u1ea7n t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi th\u1eddi gian th\u1ef1c hi\u1ec7n method process() n\u00ean ch\u00fang ta c\u0169ng c\u00f3 th\u1ec3 d\u00f9ng \u0111\u1ec3 expect th\u1eddi gian ch\u1ea1y c\u1ee7a \u0111\u01a1n v\u1ecb c\u1ea7n test) C\u00f3 m\u1ed9t c\u00e1ch kh\u00e1c l\u00e0 s\u1eed d\u1ee5ng timeout rule (\u00e1p d\u1ee5ng cho t\u1ea5t c\u1ea3 c\u00e1c method test trong class) V\u00ed d\u1ee5: import org.junit.Rule ; import org.junit.Test ; import org.junit.rules.Timeout ; public class HasGlobalTimeout { public static String log ; private final CountDownLatch latch = new CountDownLatch ( 1 ); @Rule public Timeout globalTimeout = Timeout . seconds ( 10 ); // 10 seconds max per method tested @Test public void testSleepForTooLong () throws Exception { log += \"ran1\" ; TimeUnit . SECONDS . sleep ( 100 ); //sleep for 100 seconds } @Test public void testBlockForever () throws Exception { log += \"ran2\" ; latch . await (); // will block } } @Rule public Timeout globalTimeout = Timeout.seconds(10); t\u1ee9c l\u00e0 expected th\u1eddi gian timeout Okay, Done! References: https://github.com/junit-team/junit4/wiki/Ignoring-tests https://github.com/junit-team/junit4/wiki/Timeout-for-tests","title":"JUnit Ignoring v\u00e0 Timeout v\u1edbi test case"},{"location":"junit/vi-du-junit-ignoring-tests-va-timeout-voi-test-case/#ignoring-tests","text":"V\u00ec m\u1ed9t l\u00fd do n\u00e0o \u0111\u00f3, b\u1ea1n mu\u1ed1n t\u1ea1m th\u1eddi v\u00f4 hi\u1ec7u h\u00f3a test case (b\u1ecf qua kh\u00f4ng ch\u1ea1y test case \u0111\u00f3). Th\u00f4ng th\u01b0\u1eddng ta s\u1ebd x\u00f3a ho\u1eb7c comment annotation @Test nh\u01b0 th\u1ebf tr\u00ecnh test runner s\u1ebd b\u1ecf qua method \u0111\u00f3 nh\u01b0ng \u0111\u1ed3ng th\u1eddi test case \u0111\u00f3 c\u0169ng s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c report (b\u1ea1n c\u00f3 th\u1ec3 qu\u00ean m\u1ea5t l\u00e0 c\u00f3 test case \u0111\u00f3). Bi\u1ec7n ph\u00e1p thay th\u1ec3 l\u00e0 s\u1eed d\u1ee5ng annotation @Ignore \u1edf tr\u01b0\u1edbc ho\u1eb7c sau annotation @Test , sau khi ch\u1ea1y JUnit test, n\u00f3 v\u1eabn th\u00f4ng b\u00e1o l\u00e0 c\u00f3 test case \u0111\u00f3 nh\u01b0ng \u0111ang b\u1ecb disable. V\u00ed d\u1ee5: import static org.junit.Assert.* ; import org.junit.Ignore ; import org.junit.Test ; public class DemoIgnoreTest { @Ignore ( \"Test is ignored as a demonstration\" ) @Test public void testEquals () { String str = \"stackjava.com\" ; assertEquals ( str , \"stackjava.com\" ); } @Test public void testTrue () { assertTrue ( true ); } @Test public void testFalse () { assertFalse ( false ); } }","title":"Ignoring tests"},{"location":"junit/vi-du-junit-ignoring-tests-va-timeout-voi-test-case/#test-case-voi-timeout","text":"B\u1ea1n c\u00f3 th\u1ec3 expect th\u1eddi gian timeout c\u1ee7a m\u1ed9t test case b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng tham s\u1ed1 timeout trong annoation @Test V\u00ed d\u1ee5: @Test ( timeout = 3000 ) public void testTimeout () { Demo demo = new Demo (); demo . process (); } \u1ede tr\u00ean m\u00ecnh expect l\u00e0 th\u1eddi gian th\u1ef1c hi\u1ec7n test case <= 3 gi\u00e2y (th\u1eddi gian \u0111\u00f3 c\u0169ng g\u1ea7n t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi th\u1eddi gian th\u1ef1c hi\u1ec7n method process() n\u00ean ch\u00fang ta c\u0169ng c\u00f3 th\u1ec3 d\u00f9ng \u0111\u1ec3 expect th\u1eddi gian ch\u1ea1y c\u1ee7a \u0111\u01a1n v\u1ecb c\u1ea7n test) C\u00f3 m\u1ed9t c\u00e1ch kh\u00e1c l\u00e0 s\u1eed d\u1ee5ng timeout rule (\u00e1p d\u1ee5ng cho t\u1ea5t c\u1ea3 c\u00e1c method test trong class) V\u00ed d\u1ee5: import org.junit.Rule ; import org.junit.Test ; import org.junit.rules.Timeout ; public class HasGlobalTimeout { public static String log ; private final CountDownLatch latch = new CountDownLatch ( 1 ); @Rule public Timeout globalTimeout = Timeout . seconds ( 10 ); // 10 seconds max per method tested @Test public void testSleepForTooLong () throws Exception { log += \"ran1\" ; TimeUnit . SECONDS . sleep ( 100 ); //sleep for 100 seconds } @Test public void testBlockForever () throws Exception { log += \"ran2\" ; latch . await (); // will block } } @Rule public Timeout globalTimeout = Timeout.seconds(10); t\u1ee9c l\u00e0 expected th\u1eddi gian timeout Okay, Done! References: https://github.com/junit-team/junit4/wiki/Ignoring-tests https://github.com/junit-team/junit4/wiki/Timeout-for-tests","title":"Test case v\u1edbi timeout"},{"location":"junit/vi-du-junit-voi-matchers-va-assertthat/","text":"V\u00ed d\u1ee5 JUnit v\u1edbi Matchers v\u00e0 assertThat. Th\u00f4ng th\u01b0\u1eddng ta ch\u1ec9 ki\u1ec3m tra / expect k\u1ebft qu\u1ea3 c\u1ee7a m\u1ed9t unit b\u1eb1ng m\u1ed9t gi\u00e1 tr\u1ecb n\u00e0o \u0111\u00f3. V\u1edbi nh\u1eefng tr\u01b0\u1eddng h\u1ee3p k\u1ebft qu\u1ea3 kh\u00f4ng c\u1ed1 \u0111\u1ecbnh m\u00e0 th\u01b0\u1eddng theo m\u1ed9t \u0111\u1ecbnh d\u1ea1ng n\u00e0o \u0111\u00f3 th\u00ec ta s\u1ebd c\u1ea7n ph\u1ea3i s\u1eed d\u1ee5ng Matchers v\u00e0 assertThat. (\u1ede b\u00e0i test exception v\u1edbi JUnit m\u00ecnh c\u00f3 s\u1eed d\u1ee5ng assertThat v\u00e0 Matchers \u0111\u1ec3 ki\u1ec3m tra lo\u1ea1i exception n\u00e0o \u0111\u01b0\u1ee3c n\u00e9m ra v\u00e0 message c\u00f3 bao g\u1ed3m th\u00f4ng tin g\u00ec). assertThat v\u00e0 Matchers \u00b6 assertThat l\u00e0 m\u1ed9t c\u01a1 ch\u1ebf m\u1edbi c\u1ee7a assertion, c\u00fa ph\u00e1p c\u1ee7a assertThat nh\u01b0 sau: assertThat([value], [matcher statement]); Matcher statement ch\u00ednh l\u00e0 c\u00fa ph\u00e1p so s\u00e1nh, expect k\u1ebft qu\u1ea3. V\u1edbi matchers c\u00f3 th\u1ec3 expect k\u1ebft qu\u1ea3 r\u1ea5t linh ho\u1ea1t, \u00e1p d\u1ee5ng v\u1edbi c\u1ea3 beans, text, number, collections... Core anything describedAs is Logical allOf anyOf not Object equalTo hasToString instanceOf , isCompatibleType notNullValue , nullValue sameInstance Beans hasProperty Collections array hasEntry , hasKey , hasValue hasItem , hasItems hasItemInArray Number closeTo greaterThan , greaterThanOrEqualTo , lessThan , lessThanOrEqualTo Text equalToIgnoringCase equalToIgnoringWhiteSpace containsString , endsWith , startsWith ... \u0110\u1ec3 s\u1eed d\u1ee5ng c\u00e1c c\u00fa ph\u00e1p c\u1ee7a matchers ta khai b\u00e1o th\u01b0 vi\u1ec7n hamcrest-all: <dependency> <groupId> org.hamcrest </groupId> <artifactId> hamcrest-all </artifactId> <version> 1.3 </version> <scope> test </scope> </dependency> (khi khai b\u00e1o th\u01b0 vi\u1ec7n junit n\u00f3 ch\u1ec9 include th\u01b0 vi\u1ec7n hamcrest-core, kh\u00f4ng c\u00f3 c\u00e1c matcher cho bean, collection...) V\u00ed d\u1ee5: import static org.hamcrest.CoreMatchers.containsString ; import static org.junit.Assert.assertThat ; import org.hamcrest.Matchers ; import org.junit.Test ; public class DemoAssertThat { @Test public void demoAssertThat1 () { String str = \"stackjava.com\" ; int number = 10 ; Integer [] arr = new Integer [] { 1 , 2 , 3 }; assertThat ( number , Matchers . greaterThan ( 9 )); assertThat ( number , Matchers . lessThanOrEqualTo ( 11 )); assertThat ( str , containsString ( \"stackjava\" )); assertThat ( arr , Matchers . arrayWithSize ( 3 )); } } Okay, Done! References: https://github.com/junit-team/junit4/wiki/Matchers-and-assertThat https://code.google.com/archive/p/hamcrest/wikis/Tutorial.wiki","title":"JUnit v\u1edbi Matchers v\u00e0 assertThat"},{"location":"junit/vi-du-junit-voi-matchers-va-assertthat/#assertthat-va-matchers","text":"assertThat l\u00e0 m\u1ed9t c\u01a1 ch\u1ebf m\u1edbi c\u1ee7a assertion, c\u00fa ph\u00e1p c\u1ee7a assertThat nh\u01b0 sau: assertThat([value], [matcher statement]); Matcher statement ch\u00ednh l\u00e0 c\u00fa ph\u00e1p so s\u00e1nh, expect k\u1ebft qu\u1ea3. V\u1edbi matchers c\u00f3 th\u1ec3 expect k\u1ebft qu\u1ea3 r\u1ea5t linh ho\u1ea1t, \u00e1p d\u1ee5ng v\u1edbi c\u1ea3 beans, text, number, collections... Core anything describedAs is Logical allOf anyOf not Object equalTo hasToString instanceOf , isCompatibleType notNullValue , nullValue sameInstance Beans hasProperty Collections array hasEntry , hasKey , hasValue hasItem , hasItems hasItemInArray Number closeTo greaterThan , greaterThanOrEqualTo , lessThan , lessThanOrEqualTo Text equalToIgnoringCase equalToIgnoringWhiteSpace containsString , endsWith , startsWith ... \u0110\u1ec3 s\u1eed d\u1ee5ng c\u00e1c c\u00fa ph\u00e1p c\u1ee7a matchers ta khai b\u00e1o th\u01b0 vi\u1ec7n hamcrest-all: <dependency> <groupId> org.hamcrest </groupId> <artifactId> hamcrest-all </artifactId> <version> 1.3 </version> <scope> test </scope> </dependency> (khi khai b\u00e1o th\u01b0 vi\u1ec7n junit n\u00f3 ch\u1ec9 include th\u01b0 vi\u1ec7n hamcrest-core, kh\u00f4ng c\u00f3 c\u00e1c matcher cho bean, collection...) V\u00ed d\u1ee5: import static org.hamcrest.CoreMatchers.containsString ; import static org.junit.Assert.assertThat ; import org.hamcrest.Matchers ; import org.junit.Test ; public class DemoAssertThat { @Test public void demoAssertThat1 () { String str = \"stackjava.com\" ; int number = 10 ; Integer [] arr = new Integer [] { 1 , 2 , 3 }; assertThat ( number , Matchers . greaterThan ( 9 )); assertThat ( number , Matchers . lessThanOrEqualTo ( 11 )); assertThat ( str , containsString ( \"stackjava\" )); assertThat ( arr , Matchers . arrayWithSize ( 3 )); } } Okay, Done! References: https://github.com/junit-team/junit4/wiki/Matchers-and-assertThat https://code.google.com/archive/p/hamcrest/wikis/Tutorial.wiki","title":"assertThat v\u00e0\u00a0Matchers"},{"location":"kotlin/call_java_from_kotlin/","text":"Getters v\u00e0 Setters \u00b6 Nh\u1eefng method n\u00e0o c\u1ee7a Java kh\u00f4ng c\u00f3 parameter n\u00e0o v\u00e0 t\u00ean method b\u1eaft \u0111\u1ea7u b\u1eb1ng t\u1eeb get ho\u1eb7c method c\u00f3 m\u1ed9t parameter v\u00e0 b\u1eaft \u0111\u1ea7u b\u1eb1ng t\u1eeb set , s\u1ebd \u0111\u01b0\u1ee3c coi nh\u01b0 property \u1edf trong Kotlin gi\u1ed1ng nh\u01b0 v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y: import java.util.Calendar fun calendarDemo () { val calendar = Calendar . getInstance () if ( calendar . firstDayOfWeek == Calendar . SUNDAY ) { // call calendar.getFirstDayOfWeek() calendar . firstDayOfWeek = Calendar . MONDAY // call calendar.setFirstDayOfWeek() } } Gi\u1ea3 s\u1eed nh\u01b0 trong Java recyclerView . setAdapter ( adapter ); Kotlin recyclerView . adapter = adapter ; L\u01b0u \u00fd: N\u1ebfu nh\u01b0 java class ch\u1ec9 c\u00f3 m\u1ed9t method setter , Kotlin s\u1ebd kh\u00f4ng coi n\u00f3 nh\u01b0 l\u00e0 m\u1ed9t property v\u00e0 c\u00f3 ngh\u0129a r\u1eb1ng trong khi b\u1ea1n s\u1eed d\u1ee5ng Java class \u0111\u00f3 trong Kotlin, v\u1eabn s\u1ebd g\u1ecdi t\u00ean method v\u00e0 truy\u1ec1n parameter v\u00e0o nh\u01b0 b\u00ecnh th\u01b0\u1eddng. Hi\u1ec7n t\u1ea1i Kotlin ch\u01b0a h\u1ed7 tr\u1ee3 set-only property . Java identifier gi\u1ed1ng v\u1edbi keyword \u1edf trong Kotlin \u00b6 M\u1ed9t s\u1ed1 keyword c\u1ee7a Kotlin l\u00e0 m\u1ed9t t\u00ean h\u1ee3p l\u1ec7 \u1edf trong Java v\u00ed d\u1ee5 nh\u01b0 in , is , object ,... V\u00ed d\u1ee5 nh\u01b0 m\u1ed9t method trong Java s\u1eed d\u1ee5ng keyword is l\u00e0 t\u00ean method, ta s\u1eed d\u1ee5ng method \u0111\u00f3 trong Kotlin b\u1eb1ng c\u00e1ch th\u00eam d\u1ea5u nh\u00e1y v\u00e0o t\u00ean method \u0111\u00f3: foo . `is` ( bar ) getClass() \u00b6 N\u1ebfu mu\u1ed1n l\u1ea5y Java class c\u1ee7a m\u1ed9t object, ta s\u1eed d\u1ee5ng extension java ho\u1eb7c javaclass : Java val fooClass = foo :: class . java val fooClass = foo . javaClass Mu\u1ed1n l\u1ea5y Kotlin class c\u1ee7a m\u1ed9t object: Kotlin val c = MyClass :: class","title":"G\u1ecdi Java code t\u1eeb Kotlin"},{"location":"kotlin/call_java_from_kotlin/#getters-va-setters","text":"Nh\u1eefng method n\u00e0o c\u1ee7a Java kh\u00f4ng c\u00f3 parameter n\u00e0o v\u00e0 t\u00ean method b\u1eaft \u0111\u1ea7u b\u1eb1ng t\u1eeb get ho\u1eb7c method c\u00f3 m\u1ed9t parameter v\u00e0 b\u1eaft \u0111\u1ea7u b\u1eb1ng t\u1eeb set , s\u1ebd \u0111\u01b0\u1ee3c coi nh\u01b0 property \u1edf trong Kotlin gi\u1ed1ng nh\u01b0 v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y: import java.util.Calendar fun calendarDemo () { val calendar = Calendar . getInstance () if ( calendar . firstDayOfWeek == Calendar . SUNDAY ) { // call calendar.getFirstDayOfWeek() calendar . firstDayOfWeek = Calendar . MONDAY // call calendar.setFirstDayOfWeek() } } Gi\u1ea3 s\u1eed nh\u01b0 trong Java recyclerView . setAdapter ( adapter ); Kotlin recyclerView . adapter = adapter ; L\u01b0u \u00fd: N\u1ebfu nh\u01b0 java class ch\u1ec9 c\u00f3 m\u1ed9t method setter , Kotlin s\u1ebd kh\u00f4ng coi n\u00f3 nh\u01b0 l\u00e0 m\u1ed9t property v\u00e0 c\u00f3 ngh\u0129a r\u1eb1ng trong khi b\u1ea1n s\u1eed d\u1ee5ng Java class \u0111\u00f3 trong Kotlin, v\u1eabn s\u1ebd g\u1ecdi t\u00ean method v\u00e0 truy\u1ec1n parameter v\u00e0o nh\u01b0 b\u00ecnh th\u01b0\u1eddng. Hi\u1ec7n t\u1ea1i Kotlin ch\u01b0a h\u1ed7 tr\u1ee3 set-only property .","title":"Getters v\u00e0 Setters"},{"location":"kotlin/call_java_from_kotlin/#java-identifier-giong-voi-keyword-o-trong-kotlin","text":"M\u1ed9t s\u1ed1 keyword c\u1ee7a Kotlin l\u00e0 m\u1ed9t t\u00ean h\u1ee3p l\u1ec7 \u1edf trong Java v\u00ed d\u1ee5 nh\u01b0 in , is , object ,... V\u00ed d\u1ee5 nh\u01b0 m\u1ed9t method trong Java s\u1eed d\u1ee5ng keyword is l\u00e0 t\u00ean method, ta s\u1eed d\u1ee5ng method \u0111\u00f3 trong Kotlin b\u1eb1ng c\u00e1ch th\u00eam d\u1ea5u nh\u00e1y v\u00e0o t\u00ean method \u0111\u00f3: foo . `is` ( bar )","title":"Java identifier gi\u1ed1ng v\u1edbi keyword \u1edf trong Kotlin"},{"location":"kotlin/call_java_from_kotlin/#getclass","text":"N\u1ebfu mu\u1ed1n l\u1ea5y Java class c\u1ee7a m\u1ed9t object, ta s\u1eed d\u1ee5ng extension java ho\u1eb7c javaclass : Java val fooClass = foo :: class . java val fooClass = foo . javaClass Mu\u1ed1n l\u1ea5y Kotlin class c\u1ee7a m\u1ed9t object: Kotlin val c = MyClass :: class","title":"getClass()"},{"location":"kotlin/call_kotlin_from_java/","text":"Property \u00b6 M\u1ed9t property c\u1ee7a m\u1ed9t class trong Kotlin s\u1ebd \u0111\u01b0\u1ee3c compile th\u00e0nh c\u00e1c th\u00e0nh ph\u1ea7n sau trong Java : M\u1ed9t h\u00e0m getter v\u1edbi t\u00ean \u0111\u01b0\u1ee3c suy ra t\u1eeb t\u00ean property v\u00e0 th\u00eam ti\u1ec1n t\u1ed1 get M\u1ed9t h\u00e0m setter v\u1edbi t\u00ean \u0111\u01b0\u1ee3c suy ra t\u1eeb t\u00ean property v\u00e0 th\u00eam ti\u1ec1n t\u1ed1 set (h\u00e0m setter ch\u1ec9 \u0111\u01b0\u1ee3c sinh v\u1edbi property ki\u1ec3u var ) M\u1ed9t field v\u1edbi ph\u1ea1m vi truy c\u1eadp l\u00e0 private v\u1edbi t\u00ean tr\u00f9ng v\u1edbi t\u00ean property (ch\u1ec9 v\u1edbi property c\u00f3 backing field ) VD: Kotlin var firstName : String Java private String firstName ; public String getFirstName () { return firstName ; } public void setFirstName ( String firstName ) { this . firstName = firstName ; } N\u1ebfu t\u00ean c\u1ee7a property b\u1eaft \u0111\u1ea7u v\u1edbi is , m\u1ed9t t\u00ean kh\u00e1c \u0111\u01b0\u1ee3c map sang v\u1edbi quy lu\u1eadt: t\u00ean c\u1ee7a h\u00e0m getter s\u1ebd gi\u1ed1ng v\u1edbi t\u00ean c\u1ee7a property, v\u00e0 t\u00ean c\u1ee7a h\u00e0m setter s\u1ebd \u0111\u01b0\u1ee3c sinh ra b\u1eb1ng c\u00e1ch thay th\u1ebf is b\u1eb1ng set . VD: Kotlin var isOpen : Boolean = true Java private boolean isOpen ; public boolean isOpen (){ return isOpen ; } public void setOpen ( boolean isOpen ){ this . isOpen = isOpen ; } Package-level function \u00b6 T\u1ea5t c\u1ea3 c\u00e1c function v\u00e0 property \u0111\u01b0\u1ee3c khai b\u00e1o trong file example.kt v\u00e0 b\u00ean trong package org.foo.bar , bao g\u1ed3m c\u1ea3 c\u00e1c extension function, \u0111\u01b0\u1ee3c compile th\u00e0nh c\u00e1c h\u00e0m static v\u00e0 thu\u1ed9c Java class org.foo.bar.ExampleKt // example.kt package demo class Foo fun bar () { } //Java new demo . Foo (); demo . ExampleKt . bar (); T\u00ean c\u1ee7a java class \u0111\u01b0\u1ee3c sinh ra c\u00f3 th\u1ec3 thay \u0111\u1ed5i b\u1eb1ng c\u00e1ch d\u00f9ng annotation @JvmName : @file : JvmName ( \"DemoUtils\" ) package demo class Foo fun bar () { } // Java new demo . Foo (); demo . DemoUtils . bar (); Khi c\u00f3 nhi\u1ec1u file c\u00f3 c\u00f9ng t\u00ean java class \u0111\u01b0\u1ee3c sinh ra( c\u00f9ng package v\u00e0 c\u00f9ng t\u00ean ho\u1eb7c c\u00f9ng annotation @JvmName ), s\u1ebd c\u00f3 l\u1ed7i. Tuy nhi\u00ean, compiler c\u00f3 kh\u1ea3 n\u0103ng sinh ra m\u1ed9t java class facade c\u00f3 t\u00ean x\u00e1c \u0111\u1ecbnh v\u00e0 g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c khai b\u00e1o t\u1eeb t\u1ea5t c\u1ea3 c\u00e1c file m\u00e0 c\u00f3 c\u00f9ng c\u00f9ng t\u00ean \u0111\u00f3. \u0110\u1ec3 enable vi\u1ec7c sinh file facade n\u00e0y, s\u1eed d\u1ee5ng annotation @JvmMultifileClass \u1edf t\u1ea5t c\u1ea3 c\u00e1c file c\u00f9ng t\u00ean. // oldutils.kt @file : JvmName ( \"Utils\" ) @file : JvmMultifileClass package demo fun foo () { } // newutils.kt @file : JvmName ( \"Utils\" ) @file : JvmMultifileClass package demo fun bar () { } // Java demo . Utils . foo (); demo . Utils . bar (); Instance field \u00b6 N\u1ebfu b\u1ea1n mu\u1ed1n x\u00e1c \u0111\u1ecbnh m\u1ed9t property trong Kotlin l\u00e0 m\u1ed9t field trong Java , b\u1ea1n c\u1ea7n \u0111\u00e1nh d\u1ea5u property n\u00e0y v\u1edbi annotation @JvmField . Field s\u1ebd c\u00f3 c\u00f9ng access modifier v\u1edbi property. B\u1ea1n c\u00f3 th\u1ec3 \u0111\u00e1nh d\u1ea5u @JvmField n\u1ebfu n\u00f3 c\u00f3 backing field, visibility modifier kh\u00f4ng ph\u1ea3i private, kh\u00f4ng \u0111\u01b0\u1ee3c khai b\u00e1o v\u1edbi t\u1eeb kh\u00f3a open , override ho\u1eb7c const v\u00e0 kh\u00f4ng ph\u1ea3i l\u00e0 m\u1ed9t delegated property. class C ( id : String ) { @JvmField val ID = id } // Java class JavaClient { public String getID ( C c ) { return c . ID ; } } Property lateinit c\u0169ng c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh l\u00e0 m\u1ed9t field trong Java . Khi \u0111\u00f3, visibility modifier c\u1ee7a field s\u1ebd gi\u1ed1ng v\u1edbi visibility modifier c\u1ee7a h\u00e0m setter c\u1ee7a property. Static field \u00b6 Property trong Kotlin \u0111\u01b0\u1ee3c khai b\u00e1o trong m\u1ed9t object ho\u1eb7c companion object s\u1ebd c\u00f3 static backing field ho\u1eb7c trong t\u00ean object ho\u1eb7c trong class m\u00e0 ch\u1ee9a companion objet. Th\u01b0\u1eddng th\u01b0\u1eddng, nh\u1eefng field n\u00e0y l\u00e0 private nh\u01b0ng ch\u00fang c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ph\u01a1i ra b\u1eb1ng nh\u1eefng c\u00e1ch sau: S\u1eed d\u1ee5ng annotation @JvmField S\u1eed d\u1ee5ng t\u1eeb kh\u00f3a lateinit S\u1eed d\u1ee5ng t\u1eeb kh\u00f3a const Vi\u1ec7c s\u1eed d\u1ee5ng @JvmField l\u00e0m cho field c\u00f3 c\u00f9ng visibility modifier v\u1edbi property. class Key ( val value : Int ) { companion object { @JvmField val COMPARATOR : Comparator < Key > = compareBy < Key > { it . value } } } // Java Key . COMPARATOR . compare ( key1 , key2 ); // public static final field in Key class M\u1ed9t property lateinit b\u00ean trong m\u1ed9t object ho\u1eb7c companion object c\u00f3 m\u1ed9t static backing field v\u1edbi c\u00f9ng visibility modifier v\u1edbi h\u00e0m setter. object Singleton { lateinit var provider : Provider } // Java Singleton . provider = new Provider (); // public static non-final field in Singleton class Property \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u b\u1eb1ng const \u1edf trong class c\u0169ng nh\u01b0 \u1edf top-level s\u1ebd \u0111\u01b0\u1ee3c chuy\u1ec3n th\u00e0nh static field trong Java : // file example.kt object Obj { const val CONST = 1 } class C { companion object { const val VERSION = 9 } } const val MAX = 239 int c = Obj . CONST ; int d = ExampleKt . MAX ; int v = C . VERSION ; Static method \u00b6 Nh\u01b0 \u0111\u01b0\u1ee3c \u0111\u1ec1 c\u1eadp \u1edf tr\u00ean, Kotlin coi package-level function l\u00e0 static method. Kotlin c\u0169ng c\u00f3 th\u1ec3 sinh ra c\u00e1c static method cho c\u00e1c function \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a \u1edf trong m\u1ed9t object ho\u1eb7c m\u1ed9t companion object n\u1ebfu b\u1ea1n \u0111\u00e1nh d\u1ea5u c\u00e1c h\u00e0m \u0111\u00f3 v\u1edbi @JvmStatic . N\u1ebfu b\u1ea1n s\u1eed d\u1ee5ng annotation n\u00e0y, compiler s\u1ebd sinh ra c\u1ea3 static method \u1edf b\u00ean trong class \u0111\u00f3 v\u00e0 m\u1ed9t instance method cho class \u0111\u00f3. class C { companion object { @JvmStatic fun foo () {} fun bar () {} } } B\u00e2y gi\u1edd, foo() l\u00e0 h\u00e0m static trong Java , c\u00f2n bar() th\u00ec kh\u00f4ng: C . foo (); // works fine C . bar (); // error: not a static method C . Companion . foo (); // instance method remains C . Companion . bar (); // the only way it works T\u01b0\u01a1ng t\u1ef1 v\u1edbi object object Obj { @JvmStatic fun foo () {} fun bar () {} } V\u00e0 trong Java : Obj . foo (); // works fine Obj . bar (); // error Obj . INSTANCE . bar (); // works, a call through the singleton instance Obj . INSTANCE . foo (); // works too @JvmStatic c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng v\u1edbi m\u1ed9t property c\u1ee7a m\u1ed9t object ho\u1eb7c companion object. Visibility \u00b6 Visibility modifier trong Kotlin s\u1ebd \u0111\u01b0\u1ee3c map sang Java theo c\u00e1ch sau: C\u00e1c th\u00e0nh ph\u1ea7n private v\u1eabn s\u1ebd l\u00e0 c\u00e1c th\u00e0nh ph\u1ea7n private C\u00e1c khai b\u00e1o private \u1edf top-level \u0111\u01b0\u1ee3c compile th\u00e0nh c\u00e1c khai b\u00e1o \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong c\u00f9ng m\u1ed9t package protected v\u1eabn l\u00e0 protected (l\u01b0u \u00fd r\u1eb1ng Java cho ph\u00e9p truy c\u1eadp c\u00e1c th\u00e0nh ph\u1ea7n protected t\u1eeb c\u00e1c class kh\u00e1c trong c\u00f9ng m\u1ed9t package c\u00f2n Kotlin th\u00ec kh\u00f4ng, b\u1edfi v\u1eady c\u00e1c class c\u1ee7a Java s\u1ebd c\u00f3 ph\u1ea1m vi truy c\u1eadp r\u1ed9ng h\u01a1n) internal s\u1ebd tr\u1edf th\u00e0nh public trong Java . public v\u1eabn l\u00e0 public KClass \u00b6 Th\u1ec9nh tho\u1ea3ng b\u1ea1n c\u1ea7n g\u1ecdi m\u1ed9t h\u00e0m trong Kotlin v\u1edbi m\u1ed9t tham s\u1ed1 ki\u1ec3u KClass . S\u1ebd kh\u00f4ng c\u00f3 class n\u00e0o \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng chuy\u1ec3n \u0111\u1ed5i t\u1eeb Class th\u00e0nh KClass , b\u1edfi v\u1eady b\u1ea1n ph\u1ea3i t\u1ef1 g\u1ecdi clas t\u01b0\u01a1ng t\u1ef1 Class<T>.kotlin kotlin . jvm . JvmClassMappingKt . getKotlinClass ( MainView . class ) X\u1eed l\u00fd vi\u1ec7c xung \u0111\u1ed9t v\u1edbi @JvmName \u00b6 Th\u1ec9nh tho\u1ea3ng ch\u00fang ta c\u00f3 m\u1ed9t function trong Kotlin , nh\u01b0ng l\u1ea1i c\u1ea7n c\u00e1c c\u00e1i t\u00ean JVM kh\u00e1c nhau. VD: fun List < String >. filterValid (): List < String > fun List < Int >. filterValid (): List < Int > Hai h\u00e0m n\u00e0y kh\u00f4ng th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a c\u1ea1nh nhau b\u1edfi JVM coi ch\u00fang gi\u1ed1ng nhau: filterValid(Ljava/util/List;)Ljava/util/List; . N\u1ebfu ch\u00fang ta mu\u1ed1n ch\u00fang c\u00f3 c\u00f9ng t\u00ean trong Kotlin , ch\u00fang ta c\u00f3 th\u1ec3 \u0111\u00e1nh d\u1ea5u m\u1ed9t h\u00e0m(ho\u1eb7c c\u1ea3 2) v\u1edbi t\u1eeb kh\u00f3a @JvmName v\u00e0 x\u00e1c \u0111\u1ecbnh m\u1ed9t c\u00e1i t\u00ean kh\u00e1c nh\u01b0 m\u1ed9t tham s\u1ed1: fun List < String >. filterValid (): List < String > @JvmName ( \"filterValidInt\" ) fun List < Int >. filterValid (): List < Int > T\u1eeb Kotlin , ch\u00fang c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c truy c\u1eadp b\u1edfi c\u00f9ng t\u00ean filterValid , nh\u01b0ng t\u1eeb Java , ch\u00fang s\u1ebd c\u00f3 2 t\u00ean kh\u00e1c nhau l\u00e0 filterValid v\u00e0 filterValidInt . M\u1eb9o t\u01b0\u01a1ng t\u1ef1 c\u0169ng \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng khi ch\u00fang ta c\u1ea7n m\u1ed9t property x v\u00e0 m\u1ed9t h\u00e0m getX() val x : Int @JvmName ( \"getX_prop\" ) get () = 15 fun getX () = 10 B\u00e2y gi\u1edd, h\u00e0m getX() s\u1ebd tr\u1ea3 v\u1ec1 10 v\u00e0 h\u00e0m getX_prop() \u0111\u01b0\u1ee3c g\u1ecdi t\u1eeb Java s\u1ebd tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a x Sinh c\u00e1c h\u00e0m overload \u00b6 B\u00ecnh th\u01b0\u1eddng, n\u1ebfu b\u1ea1n vi\u1ebft m\u1ed9t h\u00e0m trong Kotlin v\u1edbi c\u00e1c param c\u00f3 gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh, h\u00e0m \u0111\u00f3 n\u1ebfu \u0111\u01b0\u1ee3c g\u1ecdi trong Java s\u1ebd \u0111\u01b0\u1ee3c nh\u00ecn th\u1ea5y v\u1edbi to\u00e0n b\u1ed9 c\u00e1c param. N\u1ebfu b\u1ea1n mu\u1ed1n sinh ra nhi\u1ec1u h\u00e0m overload c\u1ee7a h\u00e0m \u0111\u00f3, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng annotation @JvmOverloads @JvmOverloads fun f ( a : String , b : Int = 0 , c : String = \"abc\" ) { ... } V\u1edbi m\u1ed7i param c\u00f3 gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh, s\u1ebd c\u00f3 m\u1ed9t h\u00e0m overload \u0111\u01b0\u1ee3c sinh ra v\u1edbi param \u0111\u00f3 v\u00e0 t\u1ea5t c\u1ea3 c\u00e1c param \u1edf b\u00ean ph\u1ea3i c\u1ee7a n\u00f3 \u0111\u01b0\u1ee3c b\u1ecf \u0111i. V\u1edbi h\u00e0m f \u1edf tr\u00ean, s\u1ebd c\u00f3 c\u00e1c h\u00e0m overload sau \u0111\u01b0\u1ee3c sinh ra: // Java void f ( String a , int b , String c ) { } void f ( String a , int b ) { } void f ( String a ) { } V\u1edbi c\u00e1c h\u00e0m m\u00e0 kh\u00f4ng truy\u1ec1n v\u00e0o c\u00e1c param c\u00f3 gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh, c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh \u0111\u01b0\u1ee3c khai b\u00e1o trong Kotlin v\u1eabn s\u1ebd c\u00f3 t\u00e1c d\u1ee5ng \u0111\u1ed1i v\u1edbi Java . Annotation c\u0169ng c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi c\u00e1c h\u00e0m t\u1ea1o, static method,... Tuy nhi\u00ean, annotation kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi abstract method, bao g\u1ed3m c\u1ea3 c\u00e1c method \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u00ean trong interface. L\u01b0u \u00fd: nh\u01b0 \u0111\u00e3 \u0111\u01b0\u1ee3c n\u00f3i \u1edf trong ph\u1ea7n secondary constructor , n\u1ebfu m\u1ed9t l\u1edbp c\u00f3 c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho t\u1ea5t c\u1ea3 c\u00e1c constructor, m\u1ed9t h\u00e0m t\u1ea1o kh\u00f4ng tham s\u1ed1 s\u1ebd \u0111\u01b0\u1ee3c sinh ra. Vi\u1ec7c n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c sinh c\u1ea3 trong tr\u01b0\u1eddng h\u1ee3p kh\u00f4ng s\u1eed d\u1ee5ng annotation JvmOverloads Checked exception \u00b6 Nh\u01b0 ch\u00fang ta \u0111\u00e3 \u0111\u1ec1 c\u1eadp \u1edf tr\u00ean, Kotlin kh\u00f4ng c\u00f3 checked exception. B\u1edfi v\u1eady, b\u00ecnh th\u01b0\u1eddng, signature trong Java c\u1ee7a m\u1ed9t h\u00e0m vi\u1ebft b\u1eb1ng Kotlin kh\u00f4ng \u0111\u01b0\u1ee3c khai b\u00e1o vi\u1ec7c throw c\u00e1c exception. B\u1edfi v\u1eady, n\u1ebfu ch\u00fang ta c\u00f3 m\u1ed9t h\u00e0m trong Kotlin nh\u01b0 th\u1ebf n\u00e0y: // example.kt package demo fun foo () { throw IOException () } V\u00e0 n\u1ebfu ch\u00fang ta mu\u1ed1n g\u1ecdi n\u00f3 t\u1eeb Java v\u00e0 catch exception: // Java try { demo . Example . foo (); } catch ( IOException e ) { // error: foo() kh\u00f4ng khai b\u00e1o IOException trong list c\u00e1c exception s\u1ebd throw // ... } Ch\u00fang ta s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c l\u1ed7i t\u1eeb Java compiler b\u1edfi v\u00ec foo() kh\u00f4ng khai b\u00e1o IOException . \u0110\u1ec3 gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 n\u00e0y, s\u1eed d\u1ee5ng annotation @Throws : @Throws ( IOException :: class ) fun foo () { throw IOException () } Null-safety \u00b6 Khi g\u1ecdi m\u1ed9t h\u00e0m trong Kotlin t\u1eeb Java , kh\u00f4ng c\u00f3 g\u00ec c\u00f3 th\u1ec3 ng\u0103n c\u1ea3 ch\u00fang ta truy\u1ec1n m\u1ed9t gi\u00e1 tr\u1ecb null cho m\u1ed9t param c\u00f3 ki\u1ec3u l\u00e0 non-null n\u1eefa. \u0110\u00f3 l\u00e0 l\u00fd do t\u1ea1i sao Kotlin sinh ra vi\u1ec7c check l\u00fac runtime cho t\u1ea5t c\u1ea3 c\u00e1c h\u00e0m public m\u00e0 y\u00eau c\u1ea7u c\u00e1c param c\u00f3 ki\u1ec3u non-null. T\u1eeb \u0111\u00f3, ch\u00fang ta l\u1ea1i c\u00f3 th\u1ec3 g\u1eb7p l\u1ea1i NullPointerException nh\u01b0 trong Java , ngay l\u1eadp t\u1ee9c.","title":"G\u1ecdi Kotlin t\u1eeb Java"},{"location":"kotlin/call_kotlin_from_java/#property","text":"M\u1ed9t property c\u1ee7a m\u1ed9t class trong Kotlin s\u1ebd \u0111\u01b0\u1ee3c compile th\u00e0nh c\u00e1c th\u00e0nh ph\u1ea7n sau trong Java : M\u1ed9t h\u00e0m getter v\u1edbi t\u00ean \u0111\u01b0\u1ee3c suy ra t\u1eeb t\u00ean property v\u00e0 th\u00eam ti\u1ec1n t\u1ed1 get M\u1ed9t h\u00e0m setter v\u1edbi t\u00ean \u0111\u01b0\u1ee3c suy ra t\u1eeb t\u00ean property v\u00e0 th\u00eam ti\u1ec1n t\u1ed1 set (h\u00e0m setter ch\u1ec9 \u0111\u01b0\u1ee3c sinh v\u1edbi property ki\u1ec3u var ) M\u1ed9t field v\u1edbi ph\u1ea1m vi truy c\u1eadp l\u00e0 private v\u1edbi t\u00ean tr\u00f9ng v\u1edbi t\u00ean property (ch\u1ec9 v\u1edbi property c\u00f3 backing field ) VD: Kotlin var firstName : String Java private String firstName ; public String getFirstName () { return firstName ; } public void setFirstName ( String firstName ) { this . firstName = firstName ; } N\u1ebfu t\u00ean c\u1ee7a property b\u1eaft \u0111\u1ea7u v\u1edbi is , m\u1ed9t t\u00ean kh\u00e1c \u0111\u01b0\u1ee3c map sang v\u1edbi quy lu\u1eadt: t\u00ean c\u1ee7a h\u00e0m getter s\u1ebd gi\u1ed1ng v\u1edbi t\u00ean c\u1ee7a property, v\u00e0 t\u00ean c\u1ee7a h\u00e0m setter s\u1ebd \u0111\u01b0\u1ee3c sinh ra b\u1eb1ng c\u00e1ch thay th\u1ebf is b\u1eb1ng set . VD: Kotlin var isOpen : Boolean = true Java private boolean isOpen ; public boolean isOpen (){ return isOpen ; } public void setOpen ( boolean isOpen ){ this . isOpen = isOpen ; }","title":"Property"},{"location":"kotlin/call_kotlin_from_java/#package-level-function","text":"T\u1ea5t c\u1ea3 c\u00e1c function v\u00e0 property \u0111\u01b0\u1ee3c khai b\u00e1o trong file example.kt v\u00e0 b\u00ean trong package org.foo.bar , bao g\u1ed3m c\u1ea3 c\u00e1c extension function, \u0111\u01b0\u1ee3c compile th\u00e0nh c\u00e1c h\u00e0m static v\u00e0 thu\u1ed9c Java class org.foo.bar.ExampleKt // example.kt package demo class Foo fun bar () { } //Java new demo . Foo (); demo . ExampleKt . bar (); T\u00ean c\u1ee7a java class \u0111\u01b0\u1ee3c sinh ra c\u00f3 th\u1ec3 thay \u0111\u1ed5i b\u1eb1ng c\u00e1ch d\u00f9ng annotation @JvmName : @file : JvmName ( \"DemoUtils\" ) package demo class Foo fun bar () { } // Java new demo . Foo (); demo . DemoUtils . bar (); Khi c\u00f3 nhi\u1ec1u file c\u00f3 c\u00f9ng t\u00ean java class \u0111\u01b0\u1ee3c sinh ra( c\u00f9ng package v\u00e0 c\u00f9ng t\u00ean ho\u1eb7c c\u00f9ng annotation @JvmName ), s\u1ebd c\u00f3 l\u1ed7i. Tuy nhi\u00ean, compiler c\u00f3 kh\u1ea3 n\u0103ng sinh ra m\u1ed9t java class facade c\u00f3 t\u00ean x\u00e1c \u0111\u1ecbnh v\u00e0 g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c khai b\u00e1o t\u1eeb t\u1ea5t c\u1ea3 c\u00e1c file m\u00e0 c\u00f3 c\u00f9ng c\u00f9ng t\u00ean \u0111\u00f3. \u0110\u1ec3 enable vi\u1ec7c sinh file facade n\u00e0y, s\u1eed d\u1ee5ng annotation @JvmMultifileClass \u1edf t\u1ea5t c\u1ea3 c\u00e1c file c\u00f9ng t\u00ean. // oldutils.kt @file : JvmName ( \"Utils\" ) @file : JvmMultifileClass package demo fun foo () { } // newutils.kt @file : JvmName ( \"Utils\" ) @file : JvmMultifileClass package demo fun bar () { } // Java demo . Utils . foo (); demo . Utils . bar ();","title":"Package-level function"},{"location":"kotlin/call_kotlin_from_java/#instance-field","text":"N\u1ebfu b\u1ea1n mu\u1ed1n x\u00e1c \u0111\u1ecbnh m\u1ed9t property trong Kotlin l\u00e0 m\u1ed9t field trong Java , b\u1ea1n c\u1ea7n \u0111\u00e1nh d\u1ea5u property n\u00e0y v\u1edbi annotation @JvmField . Field s\u1ebd c\u00f3 c\u00f9ng access modifier v\u1edbi property. B\u1ea1n c\u00f3 th\u1ec3 \u0111\u00e1nh d\u1ea5u @JvmField n\u1ebfu n\u00f3 c\u00f3 backing field, visibility modifier kh\u00f4ng ph\u1ea3i private, kh\u00f4ng \u0111\u01b0\u1ee3c khai b\u00e1o v\u1edbi t\u1eeb kh\u00f3a open , override ho\u1eb7c const v\u00e0 kh\u00f4ng ph\u1ea3i l\u00e0 m\u1ed9t delegated property. class C ( id : String ) { @JvmField val ID = id } // Java class JavaClient { public String getID ( C c ) { return c . ID ; } } Property lateinit c\u0169ng c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh l\u00e0 m\u1ed9t field trong Java . Khi \u0111\u00f3, visibility modifier c\u1ee7a field s\u1ebd gi\u1ed1ng v\u1edbi visibility modifier c\u1ee7a h\u00e0m setter c\u1ee7a property.","title":"Instance field"},{"location":"kotlin/call_kotlin_from_java/#static-field","text":"Property trong Kotlin \u0111\u01b0\u1ee3c khai b\u00e1o trong m\u1ed9t object ho\u1eb7c companion object s\u1ebd c\u00f3 static backing field ho\u1eb7c trong t\u00ean object ho\u1eb7c trong class m\u00e0 ch\u1ee9a companion objet. Th\u01b0\u1eddng th\u01b0\u1eddng, nh\u1eefng field n\u00e0y l\u00e0 private nh\u01b0ng ch\u00fang c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ph\u01a1i ra b\u1eb1ng nh\u1eefng c\u00e1ch sau: S\u1eed d\u1ee5ng annotation @JvmField S\u1eed d\u1ee5ng t\u1eeb kh\u00f3a lateinit S\u1eed d\u1ee5ng t\u1eeb kh\u00f3a const Vi\u1ec7c s\u1eed d\u1ee5ng @JvmField l\u00e0m cho field c\u00f3 c\u00f9ng visibility modifier v\u1edbi property. class Key ( val value : Int ) { companion object { @JvmField val COMPARATOR : Comparator < Key > = compareBy < Key > { it . value } } } // Java Key . COMPARATOR . compare ( key1 , key2 ); // public static final field in Key class M\u1ed9t property lateinit b\u00ean trong m\u1ed9t object ho\u1eb7c companion object c\u00f3 m\u1ed9t static backing field v\u1edbi c\u00f9ng visibility modifier v\u1edbi h\u00e0m setter. object Singleton { lateinit var provider : Provider } // Java Singleton . provider = new Provider (); // public static non-final field in Singleton class Property \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u b\u1eb1ng const \u1edf trong class c\u0169ng nh\u01b0 \u1edf top-level s\u1ebd \u0111\u01b0\u1ee3c chuy\u1ec3n th\u00e0nh static field trong Java : // file example.kt object Obj { const val CONST = 1 } class C { companion object { const val VERSION = 9 } } const val MAX = 239 int c = Obj . CONST ; int d = ExampleKt . MAX ; int v = C . VERSION ;","title":"Static field"},{"location":"kotlin/call_kotlin_from_java/#static-method","text":"Nh\u01b0 \u0111\u01b0\u1ee3c \u0111\u1ec1 c\u1eadp \u1edf tr\u00ean, Kotlin coi package-level function l\u00e0 static method. Kotlin c\u0169ng c\u00f3 th\u1ec3 sinh ra c\u00e1c static method cho c\u00e1c function \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a \u1edf trong m\u1ed9t object ho\u1eb7c m\u1ed9t companion object n\u1ebfu b\u1ea1n \u0111\u00e1nh d\u1ea5u c\u00e1c h\u00e0m \u0111\u00f3 v\u1edbi @JvmStatic . N\u1ebfu b\u1ea1n s\u1eed d\u1ee5ng annotation n\u00e0y, compiler s\u1ebd sinh ra c\u1ea3 static method \u1edf b\u00ean trong class \u0111\u00f3 v\u00e0 m\u1ed9t instance method cho class \u0111\u00f3. class C { companion object { @JvmStatic fun foo () {} fun bar () {} } } B\u00e2y gi\u1edd, foo() l\u00e0 h\u00e0m static trong Java , c\u00f2n bar() th\u00ec kh\u00f4ng: C . foo (); // works fine C . bar (); // error: not a static method C . Companion . foo (); // instance method remains C . Companion . bar (); // the only way it works T\u01b0\u01a1ng t\u1ef1 v\u1edbi object object Obj { @JvmStatic fun foo () {} fun bar () {} } V\u00e0 trong Java : Obj . foo (); // works fine Obj . bar (); // error Obj . INSTANCE . bar (); // works, a call through the singleton instance Obj . INSTANCE . foo (); // works too @JvmStatic c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng v\u1edbi m\u1ed9t property c\u1ee7a m\u1ed9t object ho\u1eb7c companion object.","title":"Static method"},{"location":"kotlin/call_kotlin_from_java/#visibility","text":"Visibility modifier trong Kotlin s\u1ebd \u0111\u01b0\u1ee3c map sang Java theo c\u00e1ch sau: C\u00e1c th\u00e0nh ph\u1ea7n private v\u1eabn s\u1ebd l\u00e0 c\u00e1c th\u00e0nh ph\u1ea7n private C\u00e1c khai b\u00e1o private \u1edf top-level \u0111\u01b0\u1ee3c compile th\u00e0nh c\u00e1c khai b\u00e1o \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong c\u00f9ng m\u1ed9t package protected v\u1eabn l\u00e0 protected (l\u01b0u \u00fd r\u1eb1ng Java cho ph\u00e9p truy c\u1eadp c\u00e1c th\u00e0nh ph\u1ea7n protected t\u1eeb c\u00e1c class kh\u00e1c trong c\u00f9ng m\u1ed9t package c\u00f2n Kotlin th\u00ec kh\u00f4ng, b\u1edfi v\u1eady c\u00e1c class c\u1ee7a Java s\u1ebd c\u00f3 ph\u1ea1m vi truy c\u1eadp r\u1ed9ng h\u01a1n) internal s\u1ebd tr\u1edf th\u00e0nh public trong Java . public v\u1eabn l\u00e0 public","title":"Visibility"},{"location":"kotlin/call_kotlin_from_java/#kclass","text":"Th\u1ec9nh tho\u1ea3ng b\u1ea1n c\u1ea7n g\u1ecdi m\u1ed9t h\u00e0m trong Kotlin v\u1edbi m\u1ed9t tham s\u1ed1 ki\u1ec3u KClass . S\u1ebd kh\u00f4ng c\u00f3 class n\u00e0o \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng chuy\u1ec3n \u0111\u1ed5i t\u1eeb Class th\u00e0nh KClass , b\u1edfi v\u1eady b\u1ea1n ph\u1ea3i t\u1ef1 g\u1ecdi clas t\u01b0\u01a1ng t\u1ef1 Class<T>.kotlin kotlin . jvm . JvmClassMappingKt . getKotlinClass ( MainView . class )","title":"KClass"},{"location":"kotlin/call_kotlin_from_java/#xu-ly-viec-xung-ot-voi-jvmname","text":"Th\u1ec9nh tho\u1ea3ng ch\u00fang ta c\u00f3 m\u1ed9t function trong Kotlin , nh\u01b0ng l\u1ea1i c\u1ea7n c\u00e1c c\u00e1i t\u00ean JVM kh\u00e1c nhau. VD: fun List < String >. filterValid (): List < String > fun List < Int >. filterValid (): List < Int > Hai h\u00e0m n\u00e0y kh\u00f4ng th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a c\u1ea1nh nhau b\u1edfi JVM coi ch\u00fang gi\u1ed1ng nhau: filterValid(Ljava/util/List;)Ljava/util/List; . N\u1ebfu ch\u00fang ta mu\u1ed1n ch\u00fang c\u00f3 c\u00f9ng t\u00ean trong Kotlin , ch\u00fang ta c\u00f3 th\u1ec3 \u0111\u00e1nh d\u1ea5u m\u1ed9t h\u00e0m(ho\u1eb7c c\u1ea3 2) v\u1edbi t\u1eeb kh\u00f3a @JvmName v\u00e0 x\u00e1c \u0111\u1ecbnh m\u1ed9t c\u00e1i t\u00ean kh\u00e1c nh\u01b0 m\u1ed9t tham s\u1ed1: fun List < String >. filterValid (): List < String > @JvmName ( \"filterValidInt\" ) fun List < Int >. filterValid (): List < Int > T\u1eeb Kotlin , ch\u00fang c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c truy c\u1eadp b\u1edfi c\u00f9ng t\u00ean filterValid , nh\u01b0ng t\u1eeb Java , ch\u00fang s\u1ebd c\u00f3 2 t\u00ean kh\u00e1c nhau l\u00e0 filterValid v\u00e0 filterValidInt . M\u1eb9o t\u01b0\u01a1ng t\u1ef1 c\u0169ng \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng khi ch\u00fang ta c\u1ea7n m\u1ed9t property x v\u00e0 m\u1ed9t h\u00e0m getX() val x : Int @JvmName ( \"getX_prop\" ) get () = 15 fun getX () = 10 B\u00e2y gi\u1edd, h\u00e0m getX() s\u1ebd tr\u1ea3 v\u1ec1 10 v\u00e0 h\u00e0m getX_prop() \u0111\u01b0\u1ee3c g\u1ecdi t\u1eeb Java s\u1ebd tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a x","title":"X\u1eed l\u00fd vi\u1ec7c xung \u0111\u1ed9t v\u1edbi\u00a0@JvmName"},{"location":"kotlin/call_kotlin_from_java/#sinh-cac-ham-overload","text":"B\u00ecnh th\u01b0\u1eddng, n\u1ebfu b\u1ea1n vi\u1ebft m\u1ed9t h\u00e0m trong Kotlin v\u1edbi c\u00e1c param c\u00f3 gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh, h\u00e0m \u0111\u00f3 n\u1ebfu \u0111\u01b0\u1ee3c g\u1ecdi trong Java s\u1ebd \u0111\u01b0\u1ee3c nh\u00ecn th\u1ea5y v\u1edbi to\u00e0n b\u1ed9 c\u00e1c param. N\u1ebfu b\u1ea1n mu\u1ed1n sinh ra nhi\u1ec1u h\u00e0m overload c\u1ee7a h\u00e0m \u0111\u00f3, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng annotation @JvmOverloads @JvmOverloads fun f ( a : String , b : Int = 0 , c : String = \"abc\" ) { ... } V\u1edbi m\u1ed7i param c\u00f3 gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh, s\u1ebd c\u00f3 m\u1ed9t h\u00e0m overload \u0111\u01b0\u1ee3c sinh ra v\u1edbi param \u0111\u00f3 v\u00e0 t\u1ea5t c\u1ea3 c\u00e1c param \u1edf b\u00ean ph\u1ea3i c\u1ee7a n\u00f3 \u0111\u01b0\u1ee3c b\u1ecf \u0111i. V\u1edbi h\u00e0m f \u1edf tr\u00ean, s\u1ebd c\u00f3 c\u00e1c h\u00e0m overload sau \u0111\u01b0\u1ee3c sinh ra: // Java void f ( String a , int b , String c ) { } void f ( String a , int b ) { } void f ( String a ) { } V\u1edbi c\u00e1c h\u00e0m m\u00e0 kh\u00f4ng truy\u1ec1n v\u00e0o c\u00e1c param c\u00f3 gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh, c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh \u0111\u01b0\u1ee3c khai b\u00e1o trong Kotlin v\u1eabn s\u1ebd c\u00f3 t\u00e1c d\u1ee5ng \u0111\u1ed1i v\u1edbi Java . Annotation c\u0169ng c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi c\u00e1c h\u00e0m t\u1ea1o, static method,... Tuy nhi\u00ean, annotation kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi abstract method, bao g\u1ed3m c\u1ea3 c\u00e1c method \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u00ean trong interface. L\u01b0u \u00fd: nh\u01b0 \u0111\u00e3 \u0111\u01b0\u1ee3c n\u00f3i \u1edf trong ph\u1ea7n secondary constructor , n\u1ebfu m\u1ed9t l\u1edbp c\u00f3 c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho t\u1ea5t c\u1ea3 c\u00e1c constructor, m\u1ed9t h\u00e0m t\u1ea1o kh\u00f4ng tham s\u1ed1 s\u1ebd \u0111\u01b0\u1ee3c sinh ra. Vi\u1ec7c n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c sinh c\u1ea3 trong tr\u01b0\u1eddng h\u1ee3p kh\u00f4ng s\u1eed d\u1ee5ng annotation JvmOverloads","title":"Sinh c\u00e1c h\u00e0m overload"},{"location":"kotlin/call_kotlin_from_java/#checked-exception","text":"Nh\u01b0 ch\u00fang ta \u0111\u00e3 \u0111\u1ec1 c\u1eadp \u1edf tr\u00ean, Kotlin kh\u00f4ng c\u00f3 checked exception. B\u1edfi v\u1eady, b\u00ecnh th\u01b0\u1eddng, signature trong Java c\u1ee7a m\u1ed9t h\u00e0m vi\u1ebft b\u1eb1ng Kotlin kh\u00f4ng \u0111\u01b0\u1ee3c khai b\u00e1o vi\u1ec7c throw c\u00e1c exception. B\u1edfi v\u1eady, n\u1ebfu ch\u00fang ta c\u00f3 m\u1ed9t h\u00e0m trong Kotlin nh\u01b0 th\u1ebf n\u00e0y: // example.kt package demo fun foo () { throw IOException () } V\u00e0 n\u1ebfu ch\u00fang ta mu\u1ed1n g\u1ecdi n\u00f3 t\u1eeb Java v\u00e0 catch exception: // Java try { demo . Example . foo (); } catch ( IOException e ) { // error: foo() kh\u00f4ng khai b\u00e1o IOException trong list c\u00e1c exception s\u1ebd throw // ... } Ch\u00fang ta s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c l\u1ed7i t\u1eeb Java compiler b\u1edfi v\u00ec foo() kh\u00f4ng khai b\u00e1o IOException . \u0110\u1ec3 gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 n\u00e0y, s\u1eed d\u1ee5ng annotation @Throws : @Throws ( IOException :: class ) fun foo () { throw IOException () }","title":"Checked exception"},{"location":"kotlin/call_kotlin_from_java/#null-safety","text":"Khi g\u1ecdi m\u1ed9t h\u00e0m trong Kotlin t\u1eeb Java , kh\u00f4ng c\u00f3 g\u00ec c\u00f3 th\u1ec3 ng\u0103n c\u1ea3 ch\u00fang ta truy\u1ec1n m\u1ed9t gi\u00e1 tr\u1ecb null cho m\u1ed9t param c\u00f3 ki\u1ec3u l\u00e0 non-null n\u1eefa. \u0110\u00f3 l\u00e0 l\u00fd do t\u1ea1i sao Kotlin sinh ra vi\u1ec7c check l\u00fac runtime cho t\u1ea5t c\u1ea3 c\u00e1c h\u00e0m public m\u00e0 y\u00eau c\u1ea7u c\u00e1c param c\u00f3 ki\u1ec3u non-null. T\u1eeb \u0111\u00f3, ch\u00fang ta l\u1ea1i c\u00f3 th\u1ec3 g\u1eb7p l\u1ea1i NullPointerException nh\u01b0 trong Java , ngay l\u1eadp t\u1ee9c.","title":"Null-safety"},{"location":"kotlin/kotlin_basic/","text":"1. Val v\u00e0 var \u00b6 Trong Java ch\u00fang ta khai b\u00e1o bi\u1ebfn nh\u01b0 v\u1ea7y: String s ; s = \"hello\" ; final String u = \"hi\" ; //khai b\u00e1o m\u1ed9t constant V\u1edbi Kotlin , ch\u00fang ta c\u00f3 t\u1eeb kh\u00f3a var \u0111\u1ec3 khai b\u00e1o bi\u1ebfn v\u00e0 val \u0111\u1ec3 khai b\u00e1o m\u1ed9t constant, c\u00fa ph\u00e1p s\u1ebd l\u00e0: var s : String s = \"hello\" val v : String = \"hi\" //khai b\u00e1o m\u1ed9t constant, b\u1eaft bu\u1ed9c ph\u1ea3i kh\u1edfi t\u1ea1o khi khai b\u00e1o var u = \"hey\" //C\u00f3 th\u1ec3 kh\u00f4ng x\u00e1c \u0111\u1ecbnh ki\u1ec3u cho bi\u1ebfn m\u00e0 \u0111\u1ec3 t\u1ef1 compiler x\u00e1c \u0111\u1ecbnh Note: Kotlin kh\u00f4ng y\u00eau c\u1ea7u d\u1ea5u ; sau m\u1ed7i statement n\u1eefa C\u01a1 ch\u1ebf gi\u00fap Kotlin t\u1ef1 x\u00e1c \u0111\u1ecbnh ki\u1ec3u c\u1ee7a bi\u1ebfn g\u1ecdi l\u00e0 Type inference, ngo\u00e0i t\u1ef1 suy ra ki\u1ec3u bi\u1ebfn, c\u01a1 ch\u1ebf n\u00e0y c\u00f2n s\u1eed d\u1ee5ng trong single-expression function (s\u1ebd n\u00f3i sau), l\u00e0m cho boilerplate code gi\u1ea3m \u0111i r\u1ea5t nhi\u1ec1u 2. Ki\u1ec3u d\u1eef li\u1ec7u \u00b6 Everything trong Kotlin \u0111\u1ec1u l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng, kh\u00f4ng c\u00f2n d\u1eef li\u1ec7u ki\u1ec3u nguy\u00ean th\u1ee7y (primitive type) n\u1eefa. \u0110i\u1ec1u n\u00e0y gi\u00fap cho m\u1ecdi bi\u1ebfn \u0111\u1ec1u s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c generic, g\u1ecdi \u0111\u01b0\u1ee3c c\u00e1c function, property ho\u1eb7c c\u00f3 th\u1ec3 g\u00e1n \u0111\u01b0\u1ee3c b\u1eb1ng null Ti\u1ebfp theo, ch\u00fang ta s\u1ebd n\u00f3i v\u1ec1 c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u trong Kotlin : numbers characters booleans strings arrays a. Numbers \u00b6 Size \u00b6 \u0110\u1ed9 d\u00e0i bit c\u1ee7a t\u1eebng ki\u1ec3u \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n trong b\u1ea3ng sau: Type Bit width Double 46 Float 32 Long 64 Int 32 Short 16 Byte 8 Note: character kh\u00f4ng \u0111\u01b0\u1ee3c coi l\u00e0 ki\u1ec3u s\u1ed1 trong Kotlin Constant literal \u00b6 T\u01b0\u01a1ng t\u1ef1 nh\u01b0 trong Java , Kotlin c\u0169ng c\u00f3 c\u00e1c constant literal \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh ki\u1ec3u d\u1eef li\u1ec7u cho c\u00e1c s\u1ed1: val int = 123 val long = 123456L val double = 123.45 val float = 123.45F val hexa = 0 xAB val binary = 0 b0001 D\u1ea5u g\u1ea1ch ngang '_' \u00b6 T\u1eeb Kotlin 1.1, khi s\u1eed d\u1ee5ng m\u1ed9t s\u1ed1 c\u00f3 nhi\u1ec1u ch\u1eef s\u1ed1, ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng d\u1ea5u g\u1ea1ch ngang \u0111\u1ec3 code d\u1ec5 \u0111\u1ecdc h\u01a1n val million = 1 _000_000 val billion = 1 _000_000_000L Representation (Bi\u1ec3u di\u1ec5n number) \u00b6 Trong Java , number \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef m\u1ed9t c\u00e1ch v\u1eadt l\u00fd nh\u01b0 ki\u1ec3u d\u1eef li\u1ec7u nguy\u00ean th\u1ee7y c\u1ee7a JVM tr\u1eeb khi ch\u00fang ta c\u1ea7n bi\u1ebfn \u0111\u00f3 c\u00f3 th\u1ec3 g\u00e1n \u0111\u01b0\u1ee3c b\u1eb1ng null (VD: Int? ) ho\u1eb7c c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi generic. Trong tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3, number s\u1ebd \u0111\u01b0\u1ee3c boxing - t\u1ee9c l\u00e0 t\u1ef1 wrap ki\u1ec3u nguy\u00ean th\u1ee7y \u0111\u00f3 \u0111\u1ec3 n\u00f3 tr\u1edf th\u00e0nh ki\u1ec3u Object . Note: khi boxing, \u0111\u1ecbnh danh c\u1ee7a number kh\u00f4ng nh\u1ea5t thi\u1ebft \u0111\u01b0\u1ee3c gi\u1eef l\u1ea1i val a : Int = 10000 print ( a === a ) // Prints 'true' val boxedA : Int ? = a val anotherBoxedA : Int ? = a print ( boxedA === anotherBoxedA ) // !!!Prints 'false'!!! V\u1edbi to\u00e1n t\u1eed === , boxedA v\u00e0 anotherBoxedA b\u1eb1ng nhau khi v\u00e0 ch\u1ec9 khi 2 bi\u1ebfn n\u00e0y tr\u1ecf \u0111\u1ebfn c\u00f9ng 1 \u0111\u1ed1i t\u01b0\u1ee3ng. Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, khi g\u00e1n gi\u00e1 tr\u1ecb 10000 cho bi\u1ebfn a . 10000 s\u1ebd \u0111\u01b0\u1ee3c boxing th\u00e0nh ki\u1ec3u Int . B\u1edfi v\u1eady, theo nh\u01b0 suy lu\u1eadn b\u00ecnh th\u01b0\u1eddng, bi\u1ebfn boxedA v\u00e0 anotherBoxedA \u0111\u01b0\u1ee3c g\u00e1n b\u1eb1ng a s\u1ebd b\u1eb1ng nhau v\u00ec c\u00f9ng tr\u1ecf t\u1edbi c\u00f9ng m\u1ed9t object l\u00e0 a . Tuy nhi\u00ean, v\u1edbi c\u00e1c gi\u00e1 tr\u1ecb t\u1eeb 0 -> 127 (2^7 - 1), c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u trong c\u00f9ng m\u1ed9t v\u00f9ng nh\u1edb. V\u1edbi c\u00e1c gi\u00e1 tr\u1ecb l\u1edbn h\u01a1n m\u1ed1c 127 n\u00e0y, v\u00ec boxing, c\u00e1c \u0111\u1ecbnh danh s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c gi\u1eef, t\u1ee9c l\u00e0 2 bi\u1ebfn boxedA v\u00e0 anotherBoxedA s\u1ebd tr\u1ecf \u0111\u1ebfn 2 v\u00f9ng nh\u1edb kh\u00e1c nhau. B\u1edfi v\u1eady, boxedA ==== anotherBoxedA tr\u1ea3 v\u1ec1 false Th\u1eed l\u1ea1i v\u1edbi a = 127 val a : Int = 127 print ( a === a ) // Prints 'true' val boxedA : Int ? = a val anotherBoxedA : Int ? = a print ( boxedA === anotherBoxedA ) // !!!Prints 'true'!!! M\u1eb7t kh\u00e1c, n\u00f3 gi\u1eef l\u1ea1i s\u1ef1 b\u1eb1ng nhau val a : Int = 10000 print ( a == a ) // Prints 'true' val boxedA : Int ? = a val anotherBoxedA : Int ? = a print ( boxedA == anotherBoxedA ) // Prints 'true' To\u00e1n t\u1eed == tr\u1ea3 v\u1ec1 true n\u1ebfu 2 bi\u1ebfn kh\u00f4ng null v\u00e0 c\u00f3 gi\u00e1 tr\u1ecb b\u1eb1ng nhau Explicity conversion (Chuy\u1ec3n \u0111\u1ed5i ki\u1ec3u t\u01b0\u1eddng minh) \u00b6 Trong Java , khi mu\u1ed1n convert m\u1ed9t bi\u1ebfn c\u00f3 ki\u1ec3u d\u1eef li\u1ec7u nh\u1ecf h\u01a1n sang ki\u1ec3u l\u1edbn h\u01a1n, ta ch\u1ec9 c\u1ea7n g\u00e1n bi\u1ebfn \u0111\u00f3 cho m\u1ed9t bi\u1ebfn kh\u00e1c v\u1edbi ki\u1ec3u d\u1eef li\u1ec7u ta mu\u1ed1n convert byte b = 1 ; int a = b ; // ngon V\u1edbi Kotlin , vi\u1ec7c n\u00e0y l\u00e0 kh\u00f4ng th\u1ec3 b\u1edfi: Kotlin kh\u00f4ng h\u1ed7 tr\u1ee3 vi\u1ec7c m\u1edf r\u1ed9ng size c\u1ee7a m\u1ed9t s\u1ed1 nh\u01b0 trong Java . val b : Byte = 1 val i : Int = b //compiler b\u00e1o l\u1ed7i: type mismatch \u0110\u1ec3 l\u00e0m vi\u1ec7c n\u00e0y, ta b\u1eaft bu\u1ed9c ph\u1ea3i d\u00f9ng c\u00e1c function \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 b\u1edfi Kotlin nh\u01b0: toByte(): Byte toShort(): Short toInt(): Int toLong(): Long toFloat(): Float toDouble(): Double toChar(): Char val b : Byte = 1 val i : Int = b . toInt () //ngon To\u00e1n t\u1eed \u00b6 V\u1edbi Kotlin , c\u00e1c to\u00e1n t\u1eed l\u00e0 m\u1ed9t function member c\u1ee7a c\u00e1c l\u1edbp, ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c to\u00e1n t\u1eed n\u00e0y nh\u01b0 m\u1ed9t function ho\u1eb7c g\u1ecdi ch\u00fang nh\u01b0 m\u1ed9t to\u00e1n t\u1eed trung t\u1ed1(infix) v\u00e0 overload c\u00e1c to\u00e1n t\u1eed n\u00e0y. C\u00e1c to\u00e1n t\u1eed thao t\u00e1c v\u1ec1 bit bao g\u1ed3m: shl(bits) -- signed shift left (Java's <<) shr(bits) -- signed shift right (Java's >>) ushr(bits) -- unsigned shift right (Java's >>>) and(bits) -- bitwise and or(bits) -- bitwise or xor(bits) -- bitwise xor inv() -- bitwise inversion val x = ( 1 shl 2 ) and 0 x000FF000 val y = 1. shl ( 2 ). and ( 0 x000FF000 ) b. Characters \u00b6 L\u1edbp \u0111\u1ea1i di\u1ec7n cho character trong Kotlin l\u00e0 Char . \u0110\u1ec3 bi\u1ec3u di\u1ec5n m\u1ed9t k\u00fd t\u1ef1, ta d\u00f9ng d\u1ea5u nh\u00e1y \u0111\u01a1n val c : Char = 'a' val d : Char = 4 //compiler s\u1ebd b\u00e1o l\u1ed7i Note: Char kh\u00f4ng \u0111\u01b0\u1ee3c coi l\u00e0 s\u1ed1 trong Kotlin . B\u1edfi v\u1eady, vi\u1ec7c g\u00e1n nh\u01b0 tr\u00ean s\u1ebd kh\u00f4ng th\u00e0nh c\u00f4ng c. Boolean \u00b6 L\u1edbp \u0111\u1ea1i di\u1ec7n cho ki\u1ec3u Boolean trong Kotlin l\u00e0 Boolean . Boolean c\u00f3 2 gi\u00e1 tr\u1ecb l\u00e0 true v\u00e0 false . C\u00e1c to\u00e1n t\u1eed \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 cho Boolean l\u00e0: || - ph\u00e9p tuy\u1ec3n && - ph\u00e9p h\u1ed9i ! - ph\u1ee7 \u0111\u1ecbnh d. String \u00b6 \u0110\u1ea1i di\u1ec7n cho string trong Kotlin l\u00e0 l\u1edbp String . String l\u00e0 ki\u1ec3u immutable. Th\u00e0nh ph\u1ea7n c\u1ee7a string l\u00e0 c\u00e1c character, c\u00f3 th\u1ec3 truy c\u1eadp b\u1eb1ng c\u00e1ch d\u00f9ng [] Java String s = \"hello\" ; s . charAt ( 0 ); // 'h' Kotlin var s : String = \"hello\" s [ 0 ] // 'h' String Literals \u00b6 Kotlin c\u00f3 2 lo\u1ea1i literal: Double quote: \u0111\u1ec3 xu\u1ed1ng d\u00f2ng ho\u1eb7c tab th\u00ec s\u1eed d\u1ee5ng c\u00e1c k\u00fd t\u1ef1 \u0111\u1eb7c bi\u1ec7t: \\n , \\t ... val s1 = \"hello\\n\" Triple quote: ch\u00fang ta s\u1ebd t\u1ea1o \u0111\u01b0\u1ee3c m\u1ed9t raw string, c\u00f3 th\u1ec3 bao g\u1ed3m c\u1ea3 m\u1ed9t d\u00f2ng m\u1edbi val text = \"\"\" for (c in \"foo\") { print(c) } \"\"\" String template \u00b6 Kotlin cho ph\u00e9p truy\u1ec1n bi\u1ebfn v\u00e0o string b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a ${} Java int result = 3 ; String s = \"K\u1ebft qu\u1ea3 l\u00e0 \" + result ; Kotlin val s3 = \"abc\" val str = \"$s3.length is ${s3.length}\" // \"abc.length is 3\" e. Arrays \u00b6 L\u1edbp \u0111\u1ea1i di\u1ec7n cho m\u1ea3ng trong Kotlin l\u00e0 Array . Vi\u1ec7c truy c\u1eadp v\u00e0o c\u00e1c ph\u1ea7n t\u1eed s\u1eed d\u1ee5ng get, set ho\u1eb7c [], size l\u00e0 m\u1ed9t thu\u1ed9c t\u00ednh c\u1ee7a l\u1edbp Array . Kh\u1edfi t\u1ea1o \u00b6 \u0110\u1ec3 t\u1ea1o m\u1ea3ng, ta s\u1eed d\u1ee5ng function arrayOf ho\u1eb7c h\u00e0m t\u1ea1o val a : Array < Int > = arrayOf ( 1 , 2 , 3 , 4 ) // [1,2,3,4] var a1 : Array < Int > = Array ( 3 , { it -> it * 3 }) //[0,3,6,9] B\u1ea5t bi\u1ebfn \u00b6 Array trong Kotlin l\u00e0 m\u1ed9t \u0111\u1ea1i l\u01b0\u1ee3ng b\u1ea5t bi\u1ebfn. B\u1edfi v\u1eady, kh\u00f4ng th\u1ec3 g\u00e1n m\u1ed9t Array<String> cho m\u1ed9t Array<Any> (M\u1ecdi l\u1edbp trong Kotlin \u0111\u1ec1u extends t\u1eeb \u0111\u1ed1i t\u01b0\u1ee3ng Any ) Java String a1 [] = new String [ 3 ]; Object a [] = a1 ; //ngon Kotlin var a2 : Array < String > = arrayOf ( 1 , 2 , 3 ) var a3 : Array < Any > = a2 //compiler s\u1ebd b\u00e1o l\u1ed7i C\u00e1c l\u1edbp Array kh\u00e1c \u00b6 Kotlin c\u00f3 h\u1ed7 tr\u1ee3 m\u1ed9t s\u1ed1 c\u00e1c l\u1edbp \u0111\u1ec3 chuy\u00ean l\u01b0u tr\u1eef c\u00e1c gi\u00e1 tr\u1ecb nguy\u00ean th\u1ee7y nh\u1eb1m gi\u1ea3m b\u1edbt chi ph\u00ed boxing: ByteArray , ShortArray , IntArray ... Tuy nhi\u00ean th\u00ec c\u00e1c l\u1edbp n\u00e0y k c\u00f3 quan h\u1ec7 k\u1ebf th\u1eeba g\u00ec v\u1edbi Array . Tuy nhi\u00ean, c\u00e1c l\u1edbp n\u00e0y v\u1eabn c\u00f3 thu\u1ed9c t\u00ednh v\u00e0 function t\u01b0\u01a1ng t\u1ef1 nh\u01b0 Array 3. Null safety \u00b6 Kotlin cung c\u1ea5p c\u1ea3 2 ki\u1ec3u l\u00e0 non-null v\u00e0 nullable(nh\u01b0 trong Java). T\u1eeb b\u00e2y gi\u1edd, exception ch\u1ec9 c\u00f3 th\u1ec3 null trong tr\u01b0\u1eddng h\u1ee3p T\u1ef1 throw NullPointerException() S\u1eed d\u1ee5ng to\u00e1n t\u1eed !! (s\u1ebd \u0111\u01b0\u1ee3c n\u00f3i sau) Java code g\u00e2y ra 1 tr\u01b0\u1eddng h\u1ee3p ch\u01b0a hi\u1ec3u M\u1eb7c \u0111\u1ecbnh, ki\u1ec3u c\u1ee7a bi\u1ebfn l\u00e0 non-null. \u0110\u1ec3 khai b\u00e1o m\u1ed9t bi\u1ebfn ki\u1ec3u nullable, ta s\u1eed d\u1ee5ng ? var e : String ? = null V\u1edbi m\u1ed9t bi\u1ebfn non-null, vi\u1ec7c g\u00e1n null s\u1ebd l\u00e0 kh\u00f4ng th\u1ec3 var e : String = null //compiler b\u00e1o l\u1ed7i Khi ki\u1ec3u bi\u1ebfn l\u00e0 non null, vi\u1ec7c g\u1ecdi \u0111\u1ebfn c\u00e1c bi\u1ebfn, function ho\u00e0n to\u00e0n safe. Ng\u01b0\u1ee3c l\u1ea1i, n\u1ebfu truy c\u1eadp \u0111\u1ebfn m\u1ed9t bi\u1ebfn c\u00f3 ki\u1ec3u nullable, NPE v\u1eabn c\u00f3 th\u1ec3 x\u1ea3y ra -> unsafe call Safe call \u00b6 S\u1eed d\u1ee5ng d\u1ea5u ? \u0111\u1ec3 safe call e ?. length Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, n\u1ebfu bi\u1ebfn e null, k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 s\u1ebd l\u00e0 null. Ng\u01b0\u1ee3c l\u1ea1i, k\u1ebft qu\u1ea3 l\u00e0 \u0111\u1ed9 d\u00e0i c\u1ee7a x\u00e2u e. \u0110\u1eb7c bi\u1ec7t, c\u01a1 ch\u1ebf safe call c\u00f3 th\u1ec3 g\u1ecdi theo chain: var user : User ? = User ( \"tu\" , 22 ) var length = user ?. name ?. length Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, n\u1ebfu user null ho\u1eb7c name null, gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 cho length l\u00e0 null. N\u1ebfu t\u1ea5t c\u1ea3 kh\u00f4ng null, length khi n\u00e0y m\u1edbi c\u00f3 gi\u00e1 tr\u1ecb. \u0110\u1ec3 th\u1ef1c hi\u1ec7n vi\u1ec7c g\u00ec ch\u1ec9 v\u1edbi c\u00e1c gi\u00e1 tr\u1ecb kh\u00e1c null, ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng to\u00e1n t\u1eed ?. v\u00e0 c\u00e1c h\u00e0m apply , let ... val listWithNulls : List < String ?> = listOf ( \"A\" , null ) for ( item in listWithNulls ) { item ?. let { println ( it ) } // ch\u1ec9 th\u1ef1c hi\u1ec7n v\u1edbi c\u00e1c gi\u00e1 tr\u1ecb kh\u00e1c null } To\u00e1n t\u1eed elvis ?: \u00b6 B\u00ecnh th\u01b0\u1eddng, \u0111\u1ec3 g\u00e1n gi\u00e1 tr\u1ecb cho m\u1ed9t bi\u1ebfn, ta l\u00e0m nh\u01b0 th\u1ebf n\u00e0y var b : String ? = \"hello\" val l : Int = if ( b != null ) b . length else - 1 V\u1edbi to\u00e1n t\u1eed elvis, ta c\u00f3 th\u1ec3 l\u00e0m nh\u01b0 th\u1ebf n\u00e0y val l = b ?. length ?: - 1 N\u1ebfu b kh\u00e1c null, l = b.length, n\u1ebfu b null, l = -1 Ngo\u00e0i ra, v\u00ec throw v\u00e0 return l\u00e0 bi\u1ec3u th\u1ee9c trong Kotlin , ta c\u00f3 th\u1ec3 l\u00e0m nh\u01b0 th\u1ebf n\u00e0y fun foo ( node : Node ): String ? { val parent = node . getParent () ?: return null val name = node . getName () ?: throw IllegalArgumentException ( \"name expected\" ) // ... } To\u00e1n t\u1eed !! \u00b6 val l = b !! . length V\u1edbi !!, n\u1ebfu b kh\u00f4ng null, l = b.length. N\u1ebfu b null, NPE s\u1ebd \u0111\u01b0\u1ee3c throw -> V\u1edbi Kotlin, NPE xu\u1ea5t hi\u1ec7n n\u1ebfu n\u00f3 \u0111\u01b0\u1ee3c y\u00eau c\u1ea7u m\u1ed9t c\u00e1ch t\u01b0\u1eddng minh ch\u1ee9 kh\u00f4ng th\u1ec3 xu\u1ea5t hi\u1ec7n n\u1ebfu b\u1ea1n kh\u00f4ng mong mu\u1ed1n 4. To\u00e1n t\u1eed so s\u00e1nh \u00b6 Trong Kotlin , c\u00f3 2 lo\u1ea1i \u0111\u1eb3ng th\u1ee9c: Referential equality: 2 references tr\u1ecf t\u1edb c\u00f9ng m\u1ed9t object Structural equality: function equals Referential equality \u00b6 To\u00e1n t\u1eed === v\u00e0 kh\u00e1c l\u00e0 !== . a === b khi v\u00e0 ch\u1ec9 khi a v\u00e0 b c\u00f9ng tr\u1ecf \u0111\u1ebfn c\u00f9ng m\u1ed9t object Structural equality \u00b6 To\u00e1n t\u1eed == v\u00e0 kh\u00e1c != . Theo quy \u01b0\u1edbc, khi g\u1ecdi a == b, compiler s\u1ebd t\u1ef1 \u0111\u1ed9ng translate th\u00e0nh a ? equals ( b ) ?: ( b === null ) T\u1ee9c l\u00e0 n\u1ebfu a kh\u00f4ng null, s\u1ebd g\u1ecdi function equals \u0111\u1ec3 ki\u1ec3m tra v\u1edbi b, n\u1ebfu a null, th\u00ec s\u1ebd ki\u1ec3m tra b c\u00f3 tr\u1ecf t\u1edbi null kh\u00f4ng Note: L\u01b0u \u00fd: khi s\u1eed d\u1ee5ng a==null, m\u1eb7c \u0111\u1ecbnh compiler s\u1ebd t\u1ef1 \u0111\u1ed9ng chuy\u1ec3n th\u00e0nh a===null 5. Check ki\u1ec3u v\u00e0 casting \u00b6 Ki\u1ec3m tra ki\u1ec3u bi\u1ebfn \u00b6 V\u1edbi Java , ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a instanceOf . V\u1edbi Kotlin , \u0111\u1ec3 ki\u1ec3m tra ki\u1ec3u bi\u1ebfn trong Kotlin , ta s\u1eed d\u1ee5ng is v\u00e0 !is Java if ( s instanceOf String ){ } Kotlin if ( s is String ){ } Casting \u00b6 S\u1eed d\u1ee5ng to\u00e1n t\u1eed as val t : String = y as String Unsafe cast \u00b6 Trong Java, n\u1ebfu vi\u1ec7c cast kh\u00f4ng th\u00e0nh c\u00f4ng, s\u1ebd c\u00f3 m\u1ed9t exception c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c throw: ClassCastException . \u0110\u1ed1i t\u01b0\u1ee3ng c\u00f3 ki\u1ec3u nullable kh\u00f4ng th\u1ec3 cast th\u00e0nh \u0111\u1ed1i t\u01b0\u1ee3ng non-null. N\u1ebfu y = null trong tr\u01b0\u1eddng h\u1ee3p tr\u00ean, s\u1ebd c\u00f3 exception \u0111\u01b0\u1ee3c b\u1eafn ra. \u0110\u1ec3 cast \u0111\u01b0\u1ee3c, Kotlin cung c\u1ea5p nh\u01b0 sau val t : String ? = null as String ? Safe cast \u00b6 \u0110\u1ec3 tr\u00e1nh vi\u1ec7c exception \u0111\u01b0\u1ee3c b\u1eafn ra, Kotlin cung c\u1ea5p as? val s4 : String ? = s5 as ? String s4 s\u1ebd c\u00f3 gi\u00e1 tr\u1ecb c\u1ee7a s5 n\u1ebfu s5 kh\u00f4ng null, ng\u01b0\u1ee3c l\u1ea1i, s4 = null. Smart casting \u00b6 Trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p, ch\u00fang ta kh\u00f4ng ph\u1ea3i cast m\u1ed9t c\u00e1ch t\u01b0\u1eddng minh v\u00ec compiler s\u1ebd track vi\u1ec7c check ki\u1ec3u b\u1eb1ng is v\u00e0 s\u1ebd t\u1ef1 \u0111\u1ed9ng cast n\u1ebfu c\u1ea7n: if ( s is String ) { print ( s . length ) // x \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng cast th\u00e0nh ki\u1ec3u String } if ( s ! is String ) return print ( s . length ) // x \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng cast th\u00e0nh ki\u1ec3u String if ( s ! is String || s . length == 0 ) return // x \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng cast th\u00e0nh ki\u1ec3u String 6. C\u1ea5u tr\u00fac \u0111i\u1ec1u khi\u1ec3n \u00b6 a. C\u1ea5u tr\u00fac if \u00b6 Trong Kotlin , if l\u00e0 m\u1ed9t bi\u1ec3u th\u1ee9c. B\u1edfi v\u1eady, Kotlin kh\u00f4ng c\u00f2n to\u00e1n t\u1eed 3 y\u1ebfu t\u1ed1 Java int a = result ? 1 : 0 ; Kotlin var a : Int = if ( result ) 1 else 0 var r : Int = if ( result ) { print ( \"ok\" ) 1 } else { print ( \"fail\" ) 0 } N\u1ebfu l\u00e0 kh\u1ed1i l\u1ec7nh, gi\u00e1 tr\u1ecb \u1edf cu\u1ed1i kh\u1ed1i l\u1ec7nh l\u00e0 gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1. Khi g\u00e1n gi\u00e1 tr\u1ecb, nh\u00e1nh else b\u1eaft bu\u1ed9c ph\u1ea3i c\u00f3 b. C\u1ea5u tr\u00fac when \u00b6 C\u1ea5u tr\u00fac when thay th\u1ebf switch trong Java . C\u1ea5u tr\u00fac c\u1ee7a when l\u00e0 when ( x ) { 1 -> print ( \"x == 1\" ) 2 -> print ( \"x == 2\" ) else -> { print ( \"x ch\u1ea3 b\u1eb1ng 1 c\u0169ng m\u00e9o b\u1eb1ng 2\" ) } } Note: else l\u00e0 b\u1eaft bu\u1ed9c , tr\u1eeb khi compiler c\u00f3 th\u1ec3 ch\u1ee9ng minh \u0111\u01b0\u1ee3c t\u1ea5t c\u1ea3 c\u00e1 tr\u01b0\u1eddng h\u1ee3p \u0111\u00e3 \u0111\u01b0\u1ee3c cover. C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng when \u0111\u1ec3 thay th\u1ebf vi\u1ec7c s\u1eed d\u1ee5ng if else if N\u1ebfu vi\u1ec7c x\u1eed l\u00fd c\u1ee7a 1 s\u1ed1 tr\u01b0\u1eddng h\u1ee3p gi\u1ed1ng nhau: when ( x ) { 0 , 1 -> print ( \"x == 0 or x == 1\" ) else -> print ( \"ng\u01b0\u1ee3c l\u1ea1i\" ) } C\u00e1c tr\u01b0\u1eddng h\u1ee3p c\u1ee7a when kh\u00f4ng nh\u1ea5t thi\u1ebft ph\u1ea3i l\u00e0 constant, ch\u00fang c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t function when ( x ) { parseInt ( s ) -> print ( \"s encodes x\" ) else -> print ( \"s does not encode x\" ) } Ho\u1eb7c ki\u1ec3u d\u1eef li\u1ec7u var result1 = when ( s ) { is String -> s . startsWith ( \"prefix\" ) else -> false } C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng when \u0111\u1ec3 g\u00e1n gi\u00e1 tr\u1ecb var l : Int = when ( s ) { \"hello\" -> 0 \"hi\" -> 1 else -> 2 } \u0110i\u1ec1u ki\u1ec7n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 ki\u1ec3m tra trong kho\u1ea3ng val validNumbers = arrayOf ( 11 , 13 , 17 , 19 ) when ( x ) { in 1. . 10 -> print ( \"x is in the range\" ) in validNumbers -> print ( \"x is valid\" ) ! in 10. . 20 -> print ( \"x is outside the range\" ) else -> print ( \"none of the above\" ) } c. C\u1ea5u tr\u00fac for \u00b6 V\u00f2ng l\u1eb7p for c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 duy\u1ec7t b\u1ea5t k\u1ef3 th\u1ee9 g\u00ec cung c\u1ea5p m\u1ed9t iterator. VD: C\u00f3 m\u1ed9t member ho\u1eb7c extension function t\u00ean l\u00e0 iterator() , ki\u1ec3u tr\u1ea3 v\u1ec1 l\u00e0 Iterator C\u00f3 m\u1ed9t member ho\u1eb7c extension function next() C\u00f3 m\u1ed9t member ho\u1eb7c extension function hasNext tr\u1ea3 v\u1ec1 ki\u1ec3u Boolean T\u1ea5t c\u1ea3 3 function n\u00e0y \u0111\u1ec1u c\u1ea7n \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u l\u00e0 operator VD: class DateRange ( start : Int , val end : Int ) { var current = start operator fun iterator (): Iterator < Int >{ return object : Iterator < Int >{ override fun next (): Int { val result = current current ++ return result } override fun hasNext (): Boolean { return current <= end } } } } //for for ( i in DateRange ( 1 , 10 )) { print ( i ) //1..10 } M\u1ed9t v\u00f2ng l\u1eb7p for \u0111\u1ed1i v\u1edbi m\u1ed9t array s\u1ebd \u0111\u01b0\u1ee3c compile th\u00e0nh m\u1ed9t v\u00f2ng l\u1eb7p index m\u00e0 kh\u00f4ng c\u1ea7n t\u1ea1o m\u1ed9t iterator object: //Kotlin var array : Array < Int > = arrayOf ( 1 , 2 , 5 , 6 , 7 ) for ( i in array ) { // do something } //Decompile code Object [] elements $ iv = new Integer []{ Integer . valueOf ( 1 ), Integer . valueOf ( 2 ), Integer . valueOf ( 5 ), Integer . valueOf ( 6 ), Integer . valueOf ( 7 )}; Integer [] array = elements $ iv ; for ( int var4 = 0 ; var4 < array . length ; ++ var4 ) { int i = array [ var4 ]. intValue (); } N\u1ebfu b\u1ea1n mu\u1ed1n duy\u1ec7t qua m\u1ed9t array ho\u1eb7c m\u1ed9t list b\u1eb1ng c\u00e1c ch\u1ec9 s\u1ed1, b\u1ea1n c\u00f3 th\u1ec3 l\u00e0m nh\u01b0 sau: val array = arrayOf ( 1 , 3 , 2 , 6 , 8 ) for ( i in array . indices ) { print ( array [ i ]) //13268 } L\u01b0u \u00fd r\u1eb1ng vi\u1ec7c duy\u1ec7t qua m\u1ed9t ph\u1ea1m vi (iteration through a range) \u0111\u01b0\u1ee3c compile thanh m\u1ed9t c\u00e1ch th\u1ef1c thi t\u1ed1i \u01b0u m\u00e0 kh\u00f4ng ph\u1ea3i c\u1ea7n th\u00eam object n\u00e0o \u0111\u01b0\u1ee3c t\u1ea1o ra Ngo\u00e0i ra, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng function withIndex trong th\u01b0 vi\u1ec7n chu\u1ea9n: val array = arrayOf ( 1 , 3 , 2 , 6 , 8 ) for ( pair in array . withIndex ()) { println ( \"element at ${pair.index} is ${pair.value}\" ) } //result //element at 0 is 1 //element at 1 is 3 //element at 2 is 2 //element at 3 is 6 //element at 4 is 8 M\u1ed9t s\u1ed1 so s\u00e1nh V\u00f2ng l\u1eb7p xu\u00f4i Java for ( int i = 1 ; i <= 11 ; i ++) { //... } Kotlin for ( i in 1. . 11 ){ } V\u00f2ng l\u1eb7p b\u01b0\u1edbc 2 Java for ( int i = 1 ; i <= 11 ; i += 2 ) { //... } Kotlin for ( i in 1. . 11 step 2 ){ } V\u00f2ng l\u1eb7p l\u00f9i Java for ( int i = 10 ; i >= 0 ; i --) { //... } Kotlin for ( i in 11 downTo 1 ){ } V\u00f2ng l\u1eb7p t\u1eebng gi\u00e1 tr\u1ecb Java for ( String s : arrayList ) { //... } Kotlin for ( item : Int in ints ){ } d. C\u1ea5u tr\u00fac while \u00b6 T\u01b0\u01a1ng t\u1ef1 nh\u01b0 Java while ( x > 0 ) { x -- } do { val y = retrieveData () } while ( y != null ) // y is visible here! e. break, continue v\u00e0 return \u00b6 Ch\u1ee9c n\u0103ng c\u1ee7a t\u1eebng t\u1eeb kh\u00f3a m\u1eb7c \u0111\u1ecbnh nh\u01b0 sau: return : tho\u00e1t kh\u1ecfi function g\u1ea7n nh\u1ea5t break : tho\u00e1t kh\u1ecfi v\u00f2ng l\u1eb7p g\u1ea7n nh\u1ea5t continue : ti\u1ebfp t\u1ee5c b\u01b0\u1edbc ti\u1ebfp theo c\u1ee7a v\u00f2ng l\u1eb7p g\u1ea7n nh\u1ea5t Label v\u1edbi break v\u00e0 continue \u00b6 \u0110\u1ec3 ch\u1ec9 \u0111\u1ecbnh break v\u00e0 continue \u0111\u1ebfn m\u1ed9t expression n\u00e0o \u0111\u00f3, s\u1eed d\u1ee5ng label: @label loop @ for ( i in 1. . 100 ) { for ( j in 1. . 100 ) { if ( j > 2 ) break @loop } } M\u1eb7c \u0111\u1ecbnh, n\u1ebfu kh\u00f4ng c\u00f3 label @loop , break s\u1ebd tho\u00e1t ra kh\u1ecfi v\u00f2ng l\u1eb7p g\u1ea7n nh\u1ea5t, v\u00f2ng l\u1eb7p j. V\u1edbi label @loop , break@loop s\u1ebd tho\u00e1t ra c\u1ea3 2 v\u00f2ng l\u1eb7p. T\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1eady, continue c\u0169ng c\u00f3 th\u1ec3 dung label \u0111\u1ec3 \u0111i \u0111\u1ebfn b\u01b0\u1edbc ti\u1ebfp theo c\u1ee7a v\u00f2ng l\u1eb7p Label v\u1edbi return \u00b6 fun foo (){ var ints : Array < Int > = arrayOf ( 1 , 3 , 5 , 6 ) ints . forEach lit @ { if ( it == 0 ) return @lit print ( it ) } } V\u1edbi tr\u01b0\u1eddng h\u1ee3p tr\u00ean, c\u00e2u l\u1ec7nh return s\u1ebd ch\u1ec9 tho\u00e1t ra kh\u1ecfi function forEach , v\u00e0 s\u1ebd l\u00e0m ti\u1ebfp c\u00e1c c\u00f4ng vi\u1ec7c ph\u00eda sau. N\u1ebfu kh\u00f4ng c\u00f3 label, return s\u1ebd tho\u00e1t ra kh\u1ecfi function foo() . Ta c\u00f3 th\u1ec3 \u0111\u1eb7t label ho\u1eb7c s\u1eed d\u1ee5ng implicit label \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a d\u1ef1a theo t\u00ean function fun foo (){ var ints : Array < Int > = arrayOf ( 1 , 3 , 5 , 6 ) ints . forEach lit @ { if ( it == 0 ) return @forEach print ( it ) } } Ngo\u00e0i ra, ta c\u00f2n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng label vs return trong tr\u01b0\u1eddng h\u1ee3p mu\u1ed1n tr\u1ea3 v\u1ec1 m\u1ed9t gi\u00e1 tr\u1ecb n\u00e0o \u0111\u00f3 t\u1ea1i label \u0111\u00f3 b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng return lit @ 4 7. Visibility modifier \u00b6 Trong Java , \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a kh\u1ea3 n\u0103ng truy c\u1eadp c\u1ee7a c\u00e1c property, function c\u1ee7a m\u1ed9t class, ta s\u1eed d\u1ee5ng access modifier. Trong Kotlin , \u0111\u00f3 l\u00e0 visibility modifier. Visibility modifier c\u1ee7a Kotlin g\u1ed3m 4 m\u1ee9c, t\u01b0\u01a1ng \u0111\u01b0\u01a1ng nh\u01b0 v\u1edbi Java: public internal protected private \u0110\u1ec3 hi\u1ec3u chi ti\u1ebft h\u01a1n, h\u00e3y xem Visibility modifier 8. Kh\u1edfi t\u1ea1o m\u1ed9t l\u1edbp \u00b6 Trong Java , \u0111\u1ec3 kh\u1edfi t\u1ea1o m\u1ed9t class, ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a new , v\u1edbi Kotlin . Function t\u1ea1o \u0111\u01b0\u1ee3c g\u1ecdi nh\u01b0 m\u1ed9t function b\u00ecnh th\u01b0\u1eddng Java User user = new User ( \"nam\" , 22 ); Kotlin var user : User = User ( \"nam\" , 22 ) 9. Bi\u1ec3u th\u1ee9c This \u00b6 \u0110\u1ec3 bi\u1ec3u th\u1ecb \u0111\u1ed1i t\u01b0\u1ee3ng hi\u1ec7n t\u1ea1i, ta s\u1eed d\u1ee5ng bieru th\u1ee9c this Trong m\u1ed9t th\u00e0nh ph\u1ea7n c\u1ee7a class, this tham chi\u1ebfu \u0111\u1ebfn \u0111\u1ed1i t\u01b0\u1ee3ng hi\u1ec7n t\u1ea1i c\u1ee7a class Trong extension function, ho\u1eb7c function literal with receiver, this bi\u1ec3u th\u1ecb param c\u1ee7a function - t\u1ee9c l\u00e0 gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o b\u00ean tr\u00e1i d\u1ea5u . N\u1ebfu this kh\u00f4ng c\u00f3 label ch\u1ec9 \u0111\u1ecbnh \u0111\u1ed1i t\u01b0\u1ee3ng ch\u1ec9 v\u00e0o, this tham chi\u1ebfu t\u1edbi ph\u1ea1m vi ch\u1ee9a g\u1ea7n nh\u1ea5t. \u0110\u1ec3 tham chi\u1ebfu \u0111\u1ebfn m\u1ed9t ph\u1ea1m vi kh\u00e1c, label ch\u1ec9 \u0111\u1ecbnh s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng Label ch\u1ec9 \u0111\u1ecbnh \u00b6 \u0110\u1ec3 truy c\u1eadp \u0111\u1ebfn this t\u1eeb ph\u1ea1m vi b\u00ean ngo\u00e0i (m\u1ed9t class ho\u1eb7c extension function), ch\u00fang ta s\u1eed d\u1ee5ng this@label v\u1edbi @label l\u00e0 ch\u1ec9 \u0111\u1ecbnh \u0111\u1ebfn ph\u1ea1m vi this mong mu\u1ed1n class A { // implicit label @A inner class B { // implicit label @B fun Int . foo () { // implicit label @foo val a = this @A // tr\u1ecf \u0111\u1ebfn l\u1edbp A val b = this @B // tr\u1ecf \u0111\u1ebfn l\u1edbp B val c = this // tr\u1ecf \u0111\u1ebfn param (m\u1ed9t s\u1ed1 Int) c\u1ee7a function foo() b\u1edfi foo() l\u00e0 m\u1ed9t extension function val c1 = this @foo // tr\u1ecf \u0111\u1ebfn param (m\u1ed9t s\u1ed1 Int) c\u1ee7a function foo() b\u1edfi foo() l\u00e0 m\u1ed9t extension function val funLit = lambda @ fun String .() { val d = this // tr\u1ecf \u0111\u1ebfn param (m\u1ed9t String) c\u1ee7a function funLit() } val funLit2 = { s : String -> // tr\u1ecf \u0111\u1ebfn param (m\u1ed9t s\u1ed1 Int) c\u1ee7a function foo() b\u1edfi foo() l\u00e0 m\u1ed9t extension function val d1 = this } } } } 10. Package \u00b6 Package cho ph\u00e9p ch\u00fang ta chia nh\u1ecf code b\u1eb1ng namspace. B\u1ea5t k\u1ef3 file n\u00e0o c\u0169ng c\u00f3 th\u1ec3 b\u1eaft \u0111\u1ea7u b\u1eb1ng vi\u1ec7c khai b\u00e1o m\u1ed9t package package com.packt.myproject class Foo fun bar (): String = \"bar\" \u1ede \u0111\u00e2y, t\u1ea5t c\u1ea3 c\u00e1c n\u1ed9i dung(VD: class, function...) \u0111\u1ec1u thu\u1ed9c package \u0111\u00e3 \u0111\u01b0\u1ee3c khai b\u00e1o. B\u1edfi v\u1eady, fully qualified name (FQN) c\u1ee7a c\u00e1c th\u00e0nh ph\u1ea7n trong \u0111\u00f3 t\u01b0\u01a1ng \u1ee9ng l\u00e0: com.packt.myproject.Foo l\u00e0 t\u00ean c\u1ee7a class Foo , com.packt.myproject.bar l\u00e0 t\u00ean c\u1ee7a function bar . N\u1ebfu package kh\u00f4ng \u0111\u01b0\u1ee3c khai b\u00e1o, c\u00e1c th\u00e0nh ph\u1ea7n trong file \u0111\u00f3 s\u1ebd thu\u1ed9c v\u1ec1 root package .","title":"Kotlin Basic"},{"location":"kotlin/kotlin_basic/#146-val-va-var","text":"Trong Java ch\u00fang ta khai b\u00e1o bi\u1ebfn nh\u01b0 v\u1ea7y: String s ; s = \"hello\" ; final String u = \"hi\" ; //khai b\u00e1o m\u1ed9t constant V\u1edbi Kotlin , ch\u00fang ta c\u00f3 t\u1eeb kh\u00f3a var \u0111\u1ec3 khai b\u00e1o bi\u1ebfn v\u00e0 val \u0111\u1ec3 khai b\u00e1o m\u1ed9t constant, c\u00fa ph\u00e1p s\u1ebd l\u00e0: var s : String s = \"hello\" val v : String = \"hi\" //khai b\u00e1o m\u1ed9t constant, b\u1eaft bu\u1ed9c ph\u1ea3i kh\u1edfi t\u1ea1o khi khai b\u00e1o var u = \"hey\" //C\u00f3 th\u1ec3 kh\u00f4ng x\u00e1c \u0111\u1ecbnh ki\u1ec3u cho bi\u1ebfn m\u00e0 \u0111\u1ec3 t\u1ef1 compiler x\u00e1c \u0111\u1ecbnh Note: Kotlin kh\u00f4ng y\u00eau c\u1ea7u d\u1ea5u ; sau m\u1ed7i statement n\u1eefa C\u01a1 ch\u1ebf gi\u00fap Kotlin t\u1ef1 x\u00e1c \u0111\u1ecbnh ki\u1ec3u c\u1ee7a bi\u1ebfn g\u1ecdi l\u00e0 Type inference, ngo\u00e0i t\u1ef1 suy ra ki\u1ec3u bi\u1ebfn, c\u01a1 ch\u1ebf n\u00e0y c\u00f2n s\u1eed d\u1ee5ng trong single-expression function (s\u1ebd n\u00f3i sau), l\u00e0m cho boilerplate code gi\u1ea3m \u0111i r\u1ea5t nhi\u1ec1u","title":"1. Val v\u00e0 var"},{"location":"kotlin/kotlin_basic/#246-kieu-du-lieu","text":"Everything trong Kotlin \u0111\u1ec1u l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng, kh\u00f4ng c\u00f2n d\u1eef li\u1ec7u ki\u1ec3u nguy\u00ean th\u1ee7y (primitive type) n\u1eefa. \u0110i\u1ec1u n\u00e0y gi\u00fap cho m\u1ecdi bi\u1ebfn \u0111\u1ec1u s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c generic, g\u1ecdi \u0111\u01b0\u1ee3c c\u00e1c function, property ho\u1eb7c c\u00f3 th\u1ec3 g\u00e1n \u0111\u01b0\u1ee3c b\u1eb1ng null Ti\u1ebfp theo, ch\u00fang ta s\u1ebd n\u00f3i v\u1ec1 c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u trong Kotlin : numbers characters booleans strings arrays","title":"2. Ki\u1ec3u d\u1eef li\u1ec7u"},{"location":"kotlin/kotlin_basic/#a-numbers","text":"","title":"a. Numbers"},{"location":"kotlin/kotlin_basic/#size","text":"\u0110\u1ed9 d\u00e0i bit c\u1ee7a t\u1eebng ki\u1ec3u \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n trong b\u1ea3ng sau: Type Bit width Double 46 Float 32 Long 64 Int 32 Short 16 Byte 8 Note: character kh\u00f4ng \u0111\u01b0\u1ee3c coi l\u00e0 ki\u1ec3u s\u1ed1 trong Kotlin","title":"Size"},{"location":"kotlin/kotlin_basic/#constant-literal","text":"T\u01b0\u01a1ng t\u1ef1 nh\u01b0 trong Java , Kotlin c\u0169ng c\u00f3 c\u00e1c constant literal \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh ki\u1ec3u d\u1eef li\u1ec7u cho c\u00e1c s\u1ed1: val int = 123 val long = 123456L val double = 123.45 val float = 123.45F val hexa = 0 xAB val binary = 0 b0001","title":"Constant literal"},{"location":"kotlin/kotlin_basic/#dau-gach-ngang-_","text":"T\u1eeb Kotlin 1.1, khi s\u1eed d\u1ee5ng m\u1ed9t s\u1ed1 c\u00f3 nhi\u1ec1u ch\u1eef s\u1ed1, ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng d\u1ea5u g\u1ea1ch ngang \u0111\u1ec3 code d\u1ec5 \u0111\u1ecdc h\u01a1n val million = 1 _000_000 val billion = 1 _000_000_000L","title":"D\u1ea5u g\u1ea1ch ngang '_'"},{"location":"kotlin/kotlin_basic/#representation-bieu-dien-number","text":"Trong Java , number \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef m\u1ed9t c\u00e1ch v\u1eadt l\u00fd nh\u01b0 ki\u1ec3u d\u1eef li\u1ec7u nguy\u00ean th\u1ee7y c\u1ee7a JVM tr\u1eeb khi ch\u00fang ta c\u1ea7n bi\u1ebfn \u0111\u00f3 c\u00f3 th\u1ec3 g\u00e1n \u0111\u01b0\u1ee3c b\u1eb1ng null (VD: Int? ) ho\u1eb7c c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi generic. Trong tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3, number s\u1ebd \u0111\u01b0\u1ee3c boxing - t\u1ee9c l\u00e0 t\u1ef1 wrap ki\u1ec3u nguy\u00ean th\u1ee7y \u0111\u00f3 \u0111\u1ec3 n\u00f3 tr\u1edf th\u00e0nh ki\u1ec3u Object . Note: khi boxing, \u0111\u1ecbnh danh c\u1ee7a number kh\u00f4ng nh\u1ea5t thi\u1ebft \u0111\u01b0\u1ee3c gi\u1eef l\u1ea1i val a : Int = 10000 print ( a === a ) // Prints 'true' val boxedA : Int ? = a val anotherBoxedA : Int ? = a print ( boxedA === anotherBoxedA ) // !!!Prints 'false'!!! V\u1edbi to\u00e1n t\u1eed === , boxedA v\u00e0 anotherBoxedA b\u1eb1ng nhau khi v\u00e0 ch\u1ec9 khi 2 bi\u1ebfn n\u00e0y tr\u1ecf \u0111\u1ebfn c\u00f9ng 1 \u0111\u1ed1i t\u01b0\u1ee3ng. Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, khi g\u00e1n gi\u00e1 tr\u1ecb 10000 cho bi\u1ebfn a . 10000 s\u1ebd \u0111\u01b0\u1ee3c boxing th\u00e0nh ki\u1ec3u Int . B\u1edfi v\u1eady, theo nh\u01b0 suy lu\u1eadn b\u00ecnh th\u01b0\u1eddng, bi\u1ebfn boxedA v\u00e0 anotherBoxedA \u0111\u01b0\u1ee3c g\u00e1n b\u1eb1ng a s\u1ebd b\u1eb1ng nhau v\u00ec c\u00f9ng tr\u1ecf t\u1edbi c\u00f9ng m\u1ed9t object l\u00e0 a . Tuy nhi\u00ean, v\u1edbi c\u00e1c gi\u00e1 tr\u1ecb t\u1eeb 0 -> 127 (2^7 - 1), c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u trong c\u00f9ng m\u1ed9t v\u00f9ng nh\u1edb. V\u1edbi c\u00e1c gi\u00e1 tr\u1ecb l\u1edbn h\u01a1n m\u1ed1c 127 n\u00e0y, v\u00ec boxing, c\u00e1c \u0111\u1ecbnh danh s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c gi\u1eef, t\u1ee9c l\u00e0 2 bi\u1ebfn boxedA v\u00e0 anotherBoxedA s\u1ebd tr\u1ecf \u0111\u1ebfn 2 v\u00f9ng nh\u1edb kh\u00e1c nhau. B\u1edfi v\u1eady, boxedA ==== anotherBoxedA tr\u1ea3 v\u1ec1 false Th\u1eed l\u1ea1i v\u1edbi a = 127 val a : Int = 127 print ( a === a ) // Prints 'true' val boxedA : Int ? = a val anotherBoxedA : Int ? = a print ( boxedA === anotherBoxedA ) // !!!Prints 'true'!!! M\u1eb7t kh\u00e1c, n\u00f3 gi\u1eef l\u1ea1i s\u1ef1 b\u1eb1ng nhau val a : Int = 10000 print ( a == a ) // Prints 'true' val boxedA : Int ? = a val anotherBoxedA : Int ? = a print ( boxedA == anotherBoxedA ) // Prints 'true' To\u00e1n t\u1eed == tr\u1ea3 v\u1ec1 true n\u1ebfu 2 bi\u1ebfn kh\u00f4ng null v\u00e0 c\u00f3 gi\u00e1 tr\u1ecb b\u1eb1ng nhau","title":"Representation (Bi\u1ec3u di\u1ec5n number)"},{"location":"kotlin/kotlin_basic/#explicity-conversion-chuyen-oi-kieu-tuong-minh","text":"Trong Java , khi mu\u1ed1n convert m\u1ed9t bi\u1ebfn c\u00f3 ki\u1ec3u d\u1eef li\u1ec7u nh\u1ecf h\u01a1n sang ki\u1ec3u l\u1edbn h\u01a1n, ta ch\u1ec9 c\u1ea7n g\u00e1n bi\u1ebfn \u0111\u00f3 cho m\u1ed9t bi\u1ebfn kh\u00e1c v\u1edbi ki\u1ec3u d\u1eef li\u1ec7u ta mu\u1ed1n convert byte b = 1 ; int a = b ; // ngon V\u1edbi Kotlin , vi\u1ec7c n\u00e0y l\u00e0 kh\u00f4ng th\u1ec3 b\u1edfi: Kotlin kh\u00f4ng h\u1ed7 tr\u1ee3 vi\u1ec7c m\u1edf r\u1ed9ng size c\u1ee7a m\u1ed9t s\u1ed1 nh\u01b0 trong Java . val b : Byte = 1 val i : Int = b //compiler b\u00e1o l\u1ed7i: type mismatch \u0110\u1ec3 l\u00e0m vi\u1ec7c n\u00e0y, ta b\u1eaft bu\u1ed9c ph\u1ea3i d\u00f9ng c\u00e1c function \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 b\u1edfi Kotlin nh\u01b0: toByte(): Byte toShort(): Short toInt(): Int toLong(): Long toFloat(): Float toDouble(): Double toChar(): Char val b : Byte = 1 val i : Int = b . toInt () //ngon","title":"Explicity conversion (Chuy\u1ec3n \u0111\u1ed5i ki\u1ec3u t\u01b0\u1eddng minh)"},{"location":"kotlin/kotlin_basic/#toan-tu","text":"V\u1edbi Kotlin , c\u00e1c to\u00e1n t\u1eed l\u00e0 m\u1ed9t function member c\u1ee7a c\u00e1c l\u1edbp, ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c to\u00e1n t\u1eed n\u00e0y nh\u01b0 m\u1ed9t function ho\u1eb7c g\u1ecdi ch\u00fang nh\u01b0 m\u1ed9t to\u00e1n t\u1eed trung t\u1ed1(infix) v\u00e0 overload c\u00e1c to\u00e1n t\u1eed n\u00e0y. C\u00e1c to\u00e1n t\u1eed thao t\u00e1c v\u1ec1 bit bao g\u1ed3m: shl(bits) -- signed shift left (Java's <<) shr(bits) -- signed shift right (Java's >>) ushr(bits) -- unsigned shift right (Java's >>>) and(bits) -- bitwise and or(bits) -- bitwise or xor(bits) -- bitwise xor inv() -- bitwise inversion val x = ( 1 shl 2 ) and 0 x000FF000 val y = 1. shl ( 2 ). and ( 0 x000FF000 )","title":"To\u00e1n t\u1eed"},{"location":"kotlin/kotlin_basic/#b-characters","text":"L\u1edbp \u0111\u1ea1i di\u1ec7n cho character trong Kotlin l\u00e0 Char . \u0110\u1ec3 bi\u1ec3u di\u1ec5n m\u1ed9t k\u00fd t\u1ef1, ta d\u00f9ng d\u1ea5u nh\u00e1y \u0111\u01a1n val c : Char = 'a' val d : Char = 4 //compiler s\u1ebd b\u00e1o l\u1ed7i Note: Char kh\u00f4ng \u0111\u01b0\u1ee3c coi l\u00e0 s\u1ed1 trong Kotlin . B\u1edfi v\u1eady, vi\u1ec7c g\u00e1n nh\u01b0 tr\u00ean s\u1ebd kh\u00f4ng th\u00e0nh c\u00f4ng","title":"b. Characters"},{"location":"kotlin/kotlin_basic/#c-boolean","text":"L\u1edbp \u0111\u1ea1i di\u1ec7n cho ki\u1ec3u Boolean trong Kotlin l\u00e0 Boolean . Boolean c\u00f3 2 gi\u00e1 tr\u1ecb l\u00e0 true v\u00e0 false . C\u00e1c to\u00e1n t\u1eed \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 cho Boolean l\u00e0: || - ph\u00e9p tuy\u1ec3n && - ph\u00e9p h\u1ed9i ! - ph\u1ee7 \u0111\u1ecbnh","title":"c. Boolean"},{"location":"kotlin/kotlin_basic/#d-string","text":"\u0110\u1ea1i di\u1ec7n cho string trong Kotlin l\u00e0 l\u1edbp String . String l\u00e0 ki\u1ec3u immutable. Th\u00e0nh ph\u1ea7n c\u1ee7a string l\u00e0 c\u00e1c character, c\u00f3 th\u1ec3 truy c\u1eadp b\u1eb1ng c\u00e1ch d\u00f9ng [] Java String s = \"hello\" ; s . charAt ( 0 ); // 'h' Kotlin var s : String = \"hello\" s [ 0 ] // 'h'","title":"d. String"},{"location":"kotlin/kotlin_basic/#string-literals","text":"Kotlin c\u00f3 2 lo\u1ea1i literal: Double quote: \u0111\u1ec3 xu\u1ed1ng d\u00f2ng ho\u1eb7c tab th\u00ec s\u1eed d\u1ee5ng c\u00e1c k\u00fd t\u1ef1 \u0111\u1eb7c bi\u1ec7t: \\n , \\t ... val s1 = \"hello\\n\" Triple quote: ch\u00fang ta s\u1ebd t\u1ea1o \u0111\u01b0\u1ee3c m\u1ed9t raw string, c\u00f3 th\u1ec3 bao g\u1ed3m c\u1ea3 m\u1ed9t d\u00f2ng m\u1edbi val text = \"\"\" for (c in \"foo\") { print(c) } \"\"\"","title":"String Literals"},{"location":"kotlin/kotlin_basic/#string-template","text":"Kotlin cho ph\u00e9p truy\u1ec1n bi\u1ebfn v\u00e0o string b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a ${} Java int result = 3 ; String s = \"K\u1ebft qu\u1ea3 l\u00e0 \" + result ; Kotlin val s3 = \"abc\" val str = \"$s3.length is ${s3.length}\" // \"abc.length is 3\"","title":"String template"},{"location":"kotlin/kotlin_basic/#e-arrays","text":"L\u1edbp \u0111\u1ea1i di\u1ec7n cho m\u1ea3ng trong Kotlin l\u00e0 Array . Vi\u1ec7c truy c\u1eadp v\u00e0o c\u00e1c ph\u1ea7n t\u1eed s\u1eed d\u1ee5ng get, set ho\u1eb7c [], size l\u00e0 m\u1ed9t thu\u1ed9c t\u00ednh c\u1ee7a l\u1edbp Array .","title":"e. Arrays"},{"location":"kotlin/kotlin_basic/#khoi-tao","text":"\u0110\u1ec3 t\u1ea1o m\u1ea3ng, ta s\u1eed d\u1ee5ng function arrayOf ho\u1eb7c h\u00e0m t\u1ea1o val a : Array < Int > = arrayOf ( 1 , 2 , 3 , 4 ) // [1,2,3,4] var a1 : Array < Int > = Array ( 3 , { it -> it * 3 }) //[0,3,6,9]","title":"Kh\u1edfi t\u1ea1o"},{"location":"kotlin/kotlin_basic/#bat-bien","text":"Array trong Kotlin l\u00e0 m\u1ed9t \u0111\u1ea1i l\u01b0\u1ee3ng b\u1ea5t bi\u1ebfn. B\u1edfi v\u1eady, kh\u00f4ng th\u1ec3 g\u00e1n m\u1ed9t Array<String> cho m\u1ed9t Array<Any> (M\u1ecdi l\u1edbp trong Kotlin \u0111\u1ec1u extends t\u1eeb \u0111\u1ed1i t\u01b0\u1ee3ng Any ) Java String a1 [] = new String [ 3 ]; Object a [] = a1 ; //ngon Kotlin var a2 : Array < String > = arrayOf ( 1 , 2 , 3 ) var a3 : Array < Any > = a2 //compiler s\u1ebd b\u00e1o l\u1ed7i","title":"B\u1ea5t bi\u1ebfn"},{"location":"kotlin/kotlin_basic/#cac-lop-array-khac","text":"Kotlin c\u00f3 h\u1ed7 tr\u1ee3 m\u1ed9t s\u1ed1 c\u00e1c l\u1edbp \u0111\u1ec3 chuy\u00ean l\u01b0u tr\u1eef c\u00e1c gi\u00e1 tr\u1ecb nguy\u00ean th\u1ee7y nh\u1eb1m gi\u1ea3m b\u1edbt chi ph\u00ed boxing: ByteArray , ShortArray , IntArray ... Tuy nhi\u00ean th\u00ec c\u00e1c l\u1edbp n\u00e0y k c\u00f3 quan h\u1ec7 k\u1ebf th\u1eeba g\u00ec v\u1edbi Array . Tuy nhi\u00ean, c\u00e1c l\u1edbp n\u00e0y v\u1eabn c\u00f3 thu\u1ed9c t\u00ednh v\u00e0 function t\u01b0\u01a1ng t\u1ef1 nh\u01b0 Array","title":"C\u00e1c l\u1edbp Array kh\u00e1c"},{"location":"kotlin/kotlin_basic/#346-null-safety","text":"Kotlin cung c\u1ea5p c\u1ea3 2 ki\u1ec3u l\u00e0 non-null v\u00e0 nullable(nh\u01b0 trong Java). T\u1eeb b\u00e2y gi\u1edd, exception ch\u1ec9 c\u00f3 th\u1ec3 null trong tr\u01b0\u1eddng h\u1ee3p T\u1ef1 throw NullPointerException() S\u1eed d\u1ee5ng to\u00e1n t\u1eed !! (s\u1ebd \u0111\u01b0\u1ee3c n\u00f3i sau) Java code g\u00e2y ra 1 tr\u01b0\u1eddng h\u1ee3p ch\u01b0a hi\u1ec3u M\u1eb7c \u0111\u1ecbnh, ki\u1ec3u c\u1ee7a bi\u1ebfn l\u00e0 non-null. \u0110\u1ec3 khai b\u00e1o m\u1ed9t bi\u1ebfn ki\u1ec3u nullable, ta s\u1eed d\u1ee5ng ? var e : String ? = null V\u1edbi m\u1ed9t bi\u1ebfn non-null, vi\u1ec7c g\u00e1n null s\u1ebd l\u00e0 kh\u00f4ng th\u1ec3 var e : String = null //compiler b\u00e1o l\u1ed7i Khi ki\u1ec3u bi\u1ebfn l\u00e0 non null, vi\u1ec7c g\u1ecdi \u0111\u1ebfn c\u00e1c bi\u1ebfn, function ho\u00e0n to\u00e0n safe. Ng\u01b0\u1ee3c l\u1ea1i, n\u1ebfu truy c\u1eadp \u0111\u1ebfn m\u1ed9t bi\u1ebfn c\u00f3 ki\u1ec3u nullable, NPE v\u1eabn c\u00f3 th\u1ec3 x\u1ea3y ra -> unsafe call","title":"3. Null safety"},{"location":"kotlin/kotlin_basic/#safe-call","text":"S\u1eed d\u1ee5ng d\u1ea5u ? \u0111\u1ec3 safe call e ?. length Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, n\u1ebfu bi\u1ebfn e null, k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 s\u1ebd l\u00e0 null. Ng\u01b0\u1ee3c l\u1ea1i, k\u1ebft qu\u1ea3 l\u00e0 \u0111\u1ed9 d\u00e0i c\u1ee7a x\u00e2u e. \u0110\u1eb7c bi\u1ec7t, c\u01a1 ch\u1ebf safe call c\u00f3 th\u1ec3 g\u1ecdi theo chain: var user : User ? = User ( \"tu\" , 22 ) var length = user ?. name ?. length Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, n\u1ebfu user null ho\u1eb7c name null, gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 cho length l\u00e0 null. N\u1ebfu t\u1ea5t c\u1ea3 kh\u00f4ng null, length khi n\u00e0y m\u1edbi c\u00f3 gi\u00e1 tr\u1ecb. \u0110\u1ec3 th\u1ef1c hi\u1ec7n vi\u1ec7c g\u00ec ch\u1ec9 v\u1edbi c\u00e1c gi\u00e1 tr\u1ecb kh\u00e1c null, ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng to\u00e1n t\u1eed ?. v\u00e0 c\u00e1c h\u00e0m apply , let ... val listWithNulls : List < String ?> = listOf ( \"A\" , null ) for ( item in listWithNulls ) { item ?. let { println ( it ) } // ch\u1ec9 th\u1ef1c hi\u1ec7n v\u1edbi c\u00e1c gi\u00e1 tr\u1ecb kh\u00e1c null }","title":"Safe call"},{"location":"kotlin/kotlin_basic/#toan-tu-elvis","text":"B\u00ecnh th\u01b0\u1eddng, \u0111\u1ec3 g\u00e1n gi\u00e1 tr\u1ecb cho m\u1ed9t bi\u1ebfn, ta l\u00e0m nh\u01b0 th\u1ebf n\u00e0y var b : String ? = \"hello\" val l : Int = if ( b != null ) b . length else - 1 V\u1edbi to\u00e1n t\u1eed elvis, ta c\u00f3 th\u1ec3 l\u00e0m nh\u01b0 th\u1ebf n\u00e0y val l = b ?. length ?: - 1 N\u1ebfu b kh\u00e1c null, l = b.length, n\u1ebfu b null, l = -1 Ngo\u00e0i ra, v\u00ec throw v\u00e0 return l\u00e0 bi\u1ec3u th\u1ee9c trong Kotlin , ta c\u00f3 th\u1ec3 l\u00e0m nh\u01b0 th\u1ebf n\u00e0y fun foo ( node : Node ): String ? { val parent = node . getParent () ?: return null val name = node . getName () ?: throw IllegalArgumentException ( \"name expected\" ) // ... }","title":"To\u00e1n t\u1eed elvis\u00a0?:"},{"location":"kotlin/kotlin_basic/#toan-tu_1","text":"val l = b !! . length V\u1edbi !!, n\u1ebfu b kh\u00f4ng null, l = b.length. N\u1ebfu b null, NPE s\u1ebd \u0111\u01b0\u1ee3c throw -> V\u1edbi Kotlin, NPE xu\u1ea5t hi\u1ec7n n\u1ebfu n\u00f3 \u0111\u01b0\u1ee3c y\u00eau c\u1ea7u m\u1ed9t c\u00e1ch t\u01b0\u1eddng minh ch\u1ee9 kh\u00f4ng th\u1ec3 xu\u1ea5t hi\u1ec7n n\u1ebfu b\u1ea1n kh\u00f4ng mong mu\u1ed1n","title":"To\u00e1n t\u1eed\u00a0!!"},{"location":"kotlin/kotlin_basic/#446-toan-tu-so-sanh","text":"Trong Kotlin , c\u00f3 2 lo\u1ea1i \u0111\u1eb3ng th\u1ee9c: Referential equality: 2 references tr\u1ecf t\u1edb c\u00f9ng m\u1ed9t object Structural equality: function equals","title":"4. To\u00e1n t\u1eed so s\u00e1nh"},{"location":"kotlin/kotlin_basic/#referential-equality","text":"To\u00e1n t\u1eed === v\u00e0 kh\u00e1c l\u00e0 !== . a === b khi v\u00e0 ch\u1ec9 khi a v\u00e0 b c\u00f9ng tr\u1ecf \u0111\u1ebfn c\u00f9ng m\u1ed9t object","title":"Referential equality"},{"location":"kotlin/kotlin_basic/#structural-equality","text":"To\u00e1n t\u1eed == v\u00e0 kh\u00e1c != . Theo quy \u01b0\u1edbc, khi g\u1ecdi a == b, compiler s\u1ebd t\u1ef1 \u0111\u1ed9ng translate th\u00e0nh a ? equals ( b ) ?: ( b === null ) T\u1ee9c l\u00e0 n\u1ebfu a kh\u00f4ng null, s\u1ebd g\u1ecdi function equals \u0111\u1ec3 ki\u1ec3m tra v\u1edbi b, n\u1ebfu a null, th\u00ec s\u1ebd ki\u1ec3m tra b c\u00f3 tr\u1ecf t\u1edbi null kh\u00f4ng Note: L\u01b0u \u00fd: khi s\u1eed d\u1ee5ng a==null, m\u1eb7c \u0111\u1ecbnh compiler s\u1ebd t\u1ef1 \u0111\u1ed9ng chuy\u1ec3n th\u00e0nh a===null","title":"Structural equality"},{"location":"kotlin/kotlin_basic/#546-check-kieu-va-casting","text":"","title":"5. Check ki\u1ec3u v\u00e0 casting"},{"location":"kotlin/kotlin_basic/#kiem-tra-kieu-bien","text":"V\u1edbi Java , ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a instanceOf . V\u1edbi Kotlin , \u0111\u1ec3 ki\u1ec3m tra ki\u1ec3u bi\u1ebfn trong Kotlin , ta s\u1eed d\u1ee5ng is v\u00e0 !is Java if ( s instanceOf String ){ } Kotlin if ( s is String ){ }","title":"Ki\u1ec3m tra ki\u1ec3u bi\u1ebfn"},{"location":"kotlin/kotlin_basic/#casting","text":"S\u1eed d\u1ee5ng to\u00e1n t\u1eed as val t : String = y as String","title":"Casting"},{"location":"kotlin/kotlin_basic/#unsafe-cast","text":"Trong Java, n\u1ebfu vi\u1ec7c cast kh\u00f4ng th\u00e0nh c\u00f4ng, s\u1ebd c\u00f3 m\u1ed9t exception c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c throw: ClassCastException . \u0110\u1ed1i t\u01b0\u1ee3ng c\u00f3 ki\u1ec3u nullable kh\u00f4ng th\u1ec3 cast th\u00e0nh \u0111\u1ed1i t\u01b0\u1ee3ng non-null. N\u1ebfu y = null trong tr\u01b0\u1eddng h\u1ee3p tr\u00ean, s\u1ebd c\u00f3 exception \u0111\u01b0\u1ee3c b\u1eafn ra. \u0110\u1ec3 cast \u0111\u01b0\u1ee3c, Kotlin cung c\u1ea5p nh\u01b0 sau val t : String ? = null as String ?","title":"Unsafe cast"},{"location":"kotlin/kotlin_basic/#safe-cast","text":"\u0110\u1ec3 tr\u00e1nh vi\u1ec7c exception \u0111\u01b0\u1ee3c b\u1eafn ra, Kotlin cung c\u1ea5p as? val s4 : String ? = s5 as ? String s4 s\u1ebd c\u00f3 gi\u00e1 tr\u1ecb c\u1ee7a s5 n\u1ebfu s5 kh\u00f4ng null, ng\u01b0\u1ee3c l\u1ea1i, s4 = null.","title":"Safe cast"},{"location":"kotlin/kotlin_basic/#smart-casting","text":"Trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p, ch\u00fang ta kh\u00f4ng ph\u1ea3i cast m\u1ed9t c\u00e1ch t\u01b0\u1eddng minh v\u00ec compiler s\u1ebd track vi\u1ec7c check ki\u1ec3u b\u1eb1ng is v\u00e0 s\u1ebd t\u1ef1 \u0111\u1ed9ng cast n\u1ebfu c\u1ea7n: if ( s is String ) { print ( s . length ) // x \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng cast th\u00e0nh ki\u1ec3u String } if ( s ! is String ) return print ( s . length ) // x \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng cast th\u00e0nh ki\u1ec3u String if ( s ! is String || s . length == 0 ) return // x \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng cast th\u00e0nh ki\u1ec3u String","title":"Smart casting"},{"location":"kotlin/kotlin_basic/#646-cau-truc-ieu-khien","text":"","title":"6. C\u1ea5u tr\u00fac \u0111i\u1ec1u khi\u1ec3n"},{"location":"kotlin/kotlin_basic/#a-cau-truc-if","text":"Trong Kotlin , if l\u00e0 m\u1ed9t bi\u1ec3u th\u1ee9c. B\u1edfi v\u1eady, Kotlin kh\u00f4ng c\u00f2n to\u00e1n t\u1eed 3 y\u1ebfu t\u1ed1 Java int a = result ? 1 : 0 ; Kotlin var a : Int = if ( result ) 1 else 0 var r : Int = if ( result ) { print ( \"ok\" ) 1 } else { print ( \"fail\" ) 0 } N\u1ebfu l\u00e0 kh\u1ed1i l\u1ec7nh, gi\u00e1 tr\u1ecb \u1edf cu\u1ed1i kh\u1ed1i l\u1ec7nh l\u00e0 gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1. Khi g\u00e1n gi\u00e1 tr\u1ecb, nh\u00e1nh else b\u1eaft bu\u1ed9c ph\u1ea3i c\u00f3","title":"a. C\u1ea5u tr\u00fac if"},{"location":"kotlin/kotlin_basic/#b-cau-truc-when","text":"C\u1ea5u tr\u00fac when thay th\u1ebf switch trong Java . C\u1ea5u tr\u00fac c\u1ee7a when l\u00e0 when ( x ) { 1 -> print ( \"x == 1\" ) 2 -> print ( \"x == 2\" ) else -> { print ( \"x ch\u1ea3 b\u1eb1ng 1 c\u0169ng m\u00e9o b\u1eb1ng 2\" ) } } Note: else l\u00e0 b\u1eaft bu\u1ed9c , tr\u1eeb khi compiler c\u00f3 th\u1ec3 ch\u1ee9ng minh \u0111\u01b0\u1ee3c t\u1ea5t c\u1ea3 c\u00e1 tr\u01b0\u1eddng h\u1ee3p \u0111\u00e3 \u0111\u01b0\u1ee3c cover. C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng when \u0111\u1ec3 thay th\u1ebf vi\u1ec7c s\u1eed d\u1ee5ng if else if N\u1ebfu vi\u1ec7c x\u1eed l\u00fd c\u1ee7a 1 s\u1ed1 tr\u01b0\u1eddng h\u1ee3p gi\u1ed1ng nhau: when ( x ) { 0 , 1 -> print ( \"x == 0 or x == 1\" ) else -> print ( \"ng\u01b0\u1ee3c l\u1ea1i\" ) } C\u00e1c tr\u01b0\u1eddng h\u1ee3p c\u1ee7a when kh\u00f4ng nh\u1ea5t thi\u1ebft ph\u1ea3i l\u00e0 constant, ch\u00fang c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t function when ( x ) { parseInt ( s ) -> print ( \"s encodes x\" ) else -> print ( \"s does not encode x\" ) } Ho\u1eb7c ki\u1ec3u d\u1eef li\u1ec7u var result1 = when ( s ) { is String -> s . startsWith ( \"prefix\" ) else -> false } C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng when \u0111\u1ec3 g\u00e1n gi\u00e1 tr\u1ecb var l : Int = when ( s ) { \"hello\" -> 0 \"hi\" -> 1 else -> 2 } \u0110i\u1ec1u ki\u1ec7n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 ki\u1ec3m tra trong kho\u1ea3ng val validNumbers = arrayOf ( 11 , 13 , 17 , 19 ) when ( x ) { in 1. . 10 -> print ( \"x is in the range\" ) in validNumbers -> print ( \"x is valid\" ) ! in 10. . 20 -> print ( \"x is outside the range\" ) else -> print ( \"none of the above\" ) }","title":"b. C\u1ea5u tr\u00fac when"},{"location":"kotlin/kotlin_basic/#c-cau-truc-for","text":"V\u00f2ng l\u1eb7p for c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 duy\u1ec7t b\u1ea5t k\u1ef3 th\u1ee9 g\u00ec cung c\u1ea5p m\u1ed9t iterator. VD: C\u00f3 m\u1ed9t member ho\u1eb7c extension function t\u00ean l\u00e0 iterator() , ki\u1ec3u tr\u1ea3 v\u1ec1 l\u00e0 Iterator C\u00f3 m\u1ed9t member ho\u1eb7c extension function next() C\u00f3 m\u1ed9t member ho\u1eb7c extension function hasNext tr\u1ea3 v\u1ec1 ki\u1ec3u Boolean T\u1ea5t c\u1ea3 3 function n\u00e0y \u0111\u1ec1u c\u1ea7n \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u l\u00e0 operator VD: class DateRange ( start : Int , val end : Int ) { var current = start operator fun iterator (): Iterator < Int >{ return object : Iterator < Int >{ override fun next (): Int { val result = current current ++ return result } override fun hasNext (): Boolean { return current <= end } } } } //for for ( i in DateRange ( 1 , 10 )) { print ( i ) //1..10 } M\u1ed9t v\u00f2ng l\u1eb7p for \u0111\u1ed1i v\u1edbi m\u1ed9t array s\u1ebd \u0111\u01b0\u1ee3c compile th\u00e0nh m\u1ed9t v\u00f2ng l\u1eb7p index m\u00e0 kh\u00f4ng c\u1ea7n t\u1ea1o m\u1ed9t iterator object: //Kotlin var array : Array < Int > = arrayOf ( 1 , 2 , 5 , 6 , 7 ) for ( i in array ) { // do something } //Decompile code Object [] elements $ iv = new Integer []{ Integer . valueOf ( 1 ), Integer . valueOf ( 2 ), Integer . valueOf ( 5 ), Integer . valueOf ( 6 ), Integer . valueOf ( 7 )}; Integer [] array = elements $ iv ; for ( int var4 = 0 ; var4 < array . length ; ++ var4 ) { int i = array [ var4 ]. intValue (); } N\u1ebfu b\u1ea1n mu\u1ed1n duy\u1ec7t qua m\u1ed9t array ho\u1eb7c m\u1ed9t list b\u1eb1ng c\u00e1c ch\u1ec9 s\u1ed1, b\u1ea1n c\u00f3 th\u1ec3 l\u00e0m nh\u01b0 sau: val array = arrayOf ( 1 , 3 , 2 , 6 , 8 ) for ( i in array . indices ) { print ( array [ i ]) //13268 } L\u01b0u \u00fd r\u1eb1ng vi\u1ec7c duy\u1ec7t qua m\u1ed9t ph\u1ea1m vi (iteration through a range) \u0111\u01b0\u1ee3c compile thanh m\u1ed9t c\u00e1ch th\u1ef1c thi t\u1ed1i \u01b0u m\u00e0 kh\u00f4ng ph\u1ea3i c\u1ea7n th\u00eam object n\u00e0o \u0111\u01b0\u1ee3c t\u1ea1o ra Ngo\u00e0i ra, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng function withIndex trong th\u01b0 vi\u1ec7n chu\u1ea9n: val array = arrayOf ( 1 , 3 , 2 , 6 , 8 ) for ( pair in array . withIndex ()) { println ( \"element at ${pair.index} is ${pair.value}\" ) } //result //element at 0 is 1 //element at 1 is 3 //element at 2 is 2 //element at 3 is 6 //element at 4 is 8 M\u1ed9t s\u1ed1 so s\u00e1nh V\u00f2ng l\u1eb7p xu\u00f4i Java for ( int i = 1 ; i <= 11 ; i ++) { //... } Kotlin for ( i in 1. . 11 ){ } V\u00f2ng l\u1eb7p b\u01b0\u1edbc 2 Java for ( int i = 1 ; i <= 11 ; i += 2 ) { //... } Kotlin for ( i in 1. . 11 step 2 ){ } V\u00f2ng l\u1eb7p l\u00f9i Java for ( int i = 10 ; i >= 0 ; i --) { //... } Kotlin for ( i in 11 downTo 1 ){ } V\u00f2ng l\u1eb7p t\u1eebng gi\u00e1 tr\u1ecb Java for ( String s : arrayList ) { //... } Kotlin for ( item : Int in ints ){ }","title":"c. C\u1ea5u tr\u00fac for"},{"location":"kotlin/kotlin_basic/#d-cau-truc-while","text":"T\u01b0\u01a1ng t\u1ef1 nh\u01b0 Java while ( x > 0 ) { x -- } do { val y = retrieveData () } while ( y != null ) // y is visible here!","title":"d. C\u1ea5u tr\u00fac while"},{"location":"kotlin/kotlin_basic/#e-break-continue-va-return","text":"Ch\u1ee9c n\u0103ng c\u1ee7a t\u1eebng t\u1eeb kh\u00f3a m\u1eb7c \u0111\u1ecbnh nh\u01b0 sau: return : tho\u00e1t kh\u1ecfi function g\u1ea7n nh\u1ea5t break : tho\u00e1t kh\u1ecfi v\u00f2ng l\u1eb7p g\u1ea7n nh\u1ea5t continue : ti\u1ebfp t\u1ee5c b\u01b0\u1edbc ti\u1ebfp theo c\u1ee7a v\u00f2ng l\u1eb7p g\u1ea7n nh\u1ea5t","title":"e. break, continue v\u00e0 return"},{"location":"kotlin/kotlin_basic/#label-voi-break-va-continue","text":"\u0110\u1ec3 ch\u1ec9 \u0111\u1ecbnh break v\u00e0 continue \u0111\u1ebfn m\u1ed9t expression n\u00e0o \u0111\u00f3, s\u1eed d\u1ee5ng label: @label loop @ for ( i in 1. . 100 ) { for ( j in 1. . 100 ) { if ( j > 2 ) break @loop } } M\u1eb7c \u0111\u1ecbnh, n\u1ebfu kh\u00f4ng c\u00f3 label @loop , break s\u1ebd tho\u00e1t ra kh\u1ecfi v\u00f2ng l\u1eb7p g\u1ea7n nh\u1ea5t, v\u00f2ng l\u1eb7p j. V\u1edbi label @loop , break@loop s\u1ebd tho\u00e1t ra c\u1ea3 2 v\u00f2ng l\u1eb7p. T\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1eady, continue c\u0169ng c\u00f3 th\u1ec3 dung label \u0111\u1ec3 \u0111i \u0111\u1ebfn b\u01b0\u1edbc ti\u1ebfp theo c\u1ee7a v\u00f2ng l\u1eb7p","title":"Label v\u1edbi break v\u00e0 continue"},{"location":"kotlin/kotlin_basic/#label-voi-return","text":"fun foo (){ var ints : Array < Int > = arrayOf ( 1 , 3 , 5 , 6 ) ints . forEach lit @ { if ( it == 0 ) return @lit print ( it ) } } V\u1edbi tr\u01b0\u1eddng h\u1ee3p tr\u00ean, c\u00e2u l\u1ec7nh return s\u1ebd ch\u1ec9 tho\u00e1t ra kh\u1ecfi function forEach , v\u00e0 s\u1ebd l\u00e0m ti\u1ebfp c\u00e1c c\u00f4ng vi\u1ec7c ph\u00eda sau. N\u1ebfu kh\u00f4ng c\u00f3 label, return s\u1ebd tho\u00e1t ra kh\u1ecfi function foo() . Ta c\u00f3 th\u1ec3 \u0111\u1eb7t label ho\u1eb7c s\u1eed d\u1ee5ng implicit label \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a d\u1ef1a theo t\u00ean function fun foo (){ var ints : Array < Int > = arrayOf ( 1 , 3 , 5 , 6 ) ints . forEach lit @ { if ( it == 0 ) return @forEach print ( it ) } } Ngo\u00e0i ra, ta c\u00f2n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng label vs return trong tr\u01b0\u1eddng h\u1ee3p mu\u1ed1n tr\u1ea3 v\u1ec1 m\u1ed9t gi\u00e1 tr\u1ecb n\u00e0o \u0111\u00f3 t\u1ea1i label \u0111\u00f3 b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng return lit @ 4","title":"Label v\u1edbi return"},{"location":"kotlin/kotlin_basic/#746-visibility-modifier","text":"Trong Java , \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a kh\u1ea3 n\u0103ng truy c\u1eadp c\u1ee7a c\u00e1c property, function c\u1ee7a m\u1ed9t class, ta s\u1eed d\u1ee5ng access modifier. Trong Kotlin , \u0111\u00f3 l\u00e0 visibility modifier. Visibility modifier c\u1ee7a Kotlin g\u1ed3m 4 m\u1ee9c, t\u01b0\u01a1ng \u0111\u01b0\u01a1ng nh\u01b0 v\u1edbi Java: public internal protected private \u0110\u1ec3 hi\u1ec3u chi ti\u1ebft h\u01a1n, h\u00e3y xem Visibility modifier","title":"7. Visibility modifier"},{"location":"kotlin/kotlin_basic/#846-khoi-tao-mot-lop","text":"Trong Java , \u0111\u1ec3 kh\u1edfi t\u1ea1o m\u1ed9t class, ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a new , v\u1edbi Kotlin . Function t\u1ea1o \u0111\u01b0\u1ee3c g\u1ecdi nh\u01b0 m\u1ed9t function b\u00ecnh th\u01b0\u1eddng Java User user = new User ( \"nam\" , 22 ); Kotlin var user : User = User ( \"nam\" , 22 )","title":"8. Kh\u1edfi t\u1ea1o m\u1ed9t l\u1edbp"},{"location":"kotlin/kotlin_basic/#946-bieu-thuc-this","text":"\u0110\u1ec3 bi\u1ec3u th\u1ecb \u0111\u1ed1i t\u01b0\u1ee3ng hi\u1ec7n t\u1ea1i, ta s\u1eed d\u1ee5ng bieru th\u1ee9c this Trong m\u1ed9t th\u00e0nh ph\u1ea7n c\u1ee7a class, this tham chi\u1ebfu \u0111\u1ebfn \u0111\u1ed1i t\u01b0\u1ee3ng hi\u1ec7n t\u1ea1i c\u1ee7a class Trong extension function, ho\u1eb7c function literal with receiver, this bi\u1ec3u th\u1ecb param c\u1ee7a function - t\u1ee9c l\u00e0 gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o b\u00ean tr\u00e1i d\u1ea5u . N\u1ebfu this kh\u00f4ng c\u00f3 label ch\u1ec9 \u0111\u1ecbnh \u0111\u1ed1i t\u01b0\u1ee3ng ch\u1ec9 v\u00e0o, this tham chi\u1ebfu t\u1edbi ph\u1ea1m vi ch\u1ee9a g\u1ea7n nh\u1ea5t. \u0110\u1ec3 tham chi\u1ebfu \u0111\u1ebfn m\u1ed9t ph\u1ea1m vi kh\u00e1c, label ch\u1ec9 \u0111\u1ecbnh s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng","title":"9. Bi\u1ec3u th\u1ee9c This"},{"location":"kotlin/kotlin_basic/#label-chi-inh","text":"\u0110\u1ec3 truy c\u1eadp \u0111\u1ebfn this t\u1eeb ph\u1ea1m vi b\u00ean ngo\u00e0i (m\u1ed9t class ho\u1eb7c extension function), ch\u00fang ta s\u1eed d\u1ee5ng this@label v\u1edbi @label l\u00e0 ch\u1ec9 \u0111\u1ecbnh \u0111\u1ebfn ph\u1ea1m vi this mong mu\u1ed1n class A { // implicit label @A inner class B { // implicit label @B fun Int . foo () { // implicit label @foo val a = this @A // tr\u1ecf \u0111\u1ebfn l\u1edbp A val b = this @B // tr\u1ecf \u0111\u1ebfn l\u1edbp B val c = this // tr\u1ecf \u0111\u1ebfn param (m\u1ed9t s\u1ed1 Int) c\u1ee7a function foo() b\u1edfi foo() l\u00e0 m\u1ed9t extension function val c1 = this @foo // tr\u1ecf \u0111\u1ebfn param (m\u1ed9t s\u1ed1 Int) c\u1ee7a function foo() b\u1edfi foo() l\u00e0 m\u1ed9t extension function val funLit = lambda @ fun String .() { val d = this // tr\u1ecf \u0111\u1ebfn param (m\u1ed9t String) c\u1ee7a function funLit() } val funLit2 = { s : String -> // tr\u1ecf \u0111\u1ebfn param (m\u1ed9t s\u1ed1 Int) c\u1ee7a function foo() b\u1edfi foo() l\u00e0 m\u1ed9t extension function val d1 = this } } } }","title":"Label ch\u1ec9 \u0111\u1ecbnh"},{"location":"kotlin/kotlin_basic/#1046-package","text":"Package cho ph\u00e9p ch\u00fang ta chia nh\u1ecf code b\u1eb1ng namspace. B\u1ea5t k\u1ef3 file n\u00e0o c\u0169ng c\u00f3 th\u1ec3 b\u1eaft \u0111\u1ea7u b\u1eb1ng vi\u1ec7c khai b\u00e1o m\u1ed9t package package com.packt.myproject class Foo fun bar (): String = \"bar\" \u1ede \u0111\u00e2y, t\u1ea5t c\u1ea3 c\u00e1c n\u1ed9i dung(VD: class, function...) \u0111\u1ec1u thu\u1ed9c package \u0111\u00e3 \u0111\u01b0\u1ee3c khai b\u00e1o. B\u1edfi v\u1eady, fully qualified name (FQN) c\u1ee7a c\u00e1c th\u00e0nh ph\u1ea7n trong \u0111\u00f3 t\u01b0\u01a1ng \u1ee9ng l\u00e0: com.packt.myproject.Foo l\u00e0 t\u00ean c\u1ee7a class Foo , com.packt.myproject.bar l\u00e0 t\u00ean c\u1ee7a function bar . N\u1ebfu package kh\u00f4ng \u0111\u01b0\u1ee3c khai b\u00e1o, c\u00e1c th\u00e0nh ph\u1ea7n trong file \u0111\u00f3 s\u1ebd thu\u1ed9c v\u1ec1 root package .","title":"10. Package"},{"location":"kotlin/kotlin_class_inheritance/","text":"1. Class \u00b6 T\u01b0\u01a1ng t\u1ef1 v\u1edbi Java , \u0111\u1ec3 t\u1ea1o ra m\u1ed9t class ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a class \u0111\u1ec3 khai b\u00e1o. Java public class Invoice { } Kotlin class Invoice { } Ta th\u1ea5y d\u00f2ng code khai b\u00e1o class Invoice trong Kotlin kh\u00f4ng x\u00e1c \u0111\u1ecbnh visibility modifier ( access modifier ) cho class, tuy nhi\u00ean trong Kotlin n\u1ebfu ta kh\u00f4ng x\u00e1c \u0111\u1ecbnh visibility modifier cho class, th\u00ec m\u1eb7c \u0111\u1ecbnh s\u1ebd l\u00e0 public . N\u1ebfu m\u1ed9t class kh\u00f4ng c\u00f3 body, kh\u00f4ng c\u00f3 b\u1ea5t k\u00ec m\u1ed9t param n\u00e0o ta c\u00f3 th\u1ec3 khai b\u00e1o nh\u01b0 sau, kh\u00f4ng c\u1ea7n d\u1ea5u {} class Empty Constructor \u00b6 Primary Constructor \u00b6 Kotlin c\u00f3 m\u1ed9t primary constructor v\u00e0 c\u00f3 th\u1ec3 c\u00f3 m\u1ed9t ho\u1eb7c nhi\u1ec1u secondary constructors . \u0110\u1ec3 x\u00e1c \u0111\u1ecbnh primary constructor ta khai b\u00e1o nh\u01b0 sau: class Person constructor ( firstName : String ) { } N\u1ebfu nh\u01b0 primary constructor kh\u00f4ng c\u00f3 b\u1ea5t k\u00ec m\u1ed9t visibility modifier ho\u1eb7c annotation th\u00ec t\u1eeb kh\u00f3a constructor c\u00f3 th\u1ec3 b\u1ecf: class Person ( firstName : String ) { } C\u00f2n n\u1ebfu c\u00f3 visibility modifier ho\u1eb7c annotation th\u00ec t\u1eeb kh\u00f3a constructor s\u1ebd c\u1ea7n ph\u1ea3i c\u00f3: class Customer public @Inject constructor ( name : String ) { ... } Primary constructor kh\u00f4ng ch\u1ee9a b\u1ea5t c\u1ee9 d\u00f2ng code n\u00e0o, n\u1ebfu mu\u1ed1n th\u1ef1c hi\u1ec7n c\u00e1c logic code ngay sau primary constructor c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n b\u1eb1ng c\u00e1ch kh\u1edfi t\u1ea1o ra m\u1ed9t block {} v\u1edbi t\u1eeb kh\u00f3a ti\u1ec1n t\u1ed1 init \u1edf tr\u01b0\u1edbc: class Customer ( name : String ) { init { print ( \"Customer's name is $name\" ) } } Ch\u00fa \u00fd: C\u00e1c param c\u1ee7a primary constructor n\u1ebfu khai b\u00e1o name: String , n\u00f3 ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong c\u00e1c block init{...} v\u00e0 \u0111\u1ec3 kh\u1edfi t\u1ea1o c\u00e1c property trong body class , kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng trong c\u00e1c function c\u1ee7a class ho\u1eb7c c\u00e1c instance c\u1ee7a class \u0111\u00f3: class Customer ( name : String ) { val customerKey = name . toUpperCase () init { print ( \"Customer's name is $name\" ) } } Do \u0111\u00f3 \u0111\u1ec3 coi c\u00e1c param c\u1ee7a primary constructor nh\u01b0 m\u1ed9t property trong class, ta th\u00eam var ho\u1eb7c val cho c\u00e1c param c\u1ee7a primary constructor : class Person ( val firstName : String , val lastName : String , var age : Int ) { // ... } Secondary Constructors \u00b6 Trong m\u1ed9t class ch\u1ec9 c\u00f3 duy nh\u1ea5t m\u1ed9t primary constructor , tuy nhi\u00ean c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u secondary constructor . \u0110\u1ec3 t\u1ea1o secondary constructor ta khai b\u00e1o nh\u01b0 sau: class Person { constructor ( parent : Person ) { parent . children . add ( this ) } } N\u1ebfu nh\u01b0 class c\u00f3 primary constructor th\u00ec m\u1ed7i secondary constructor ph\u1ea3i kh\u1edfi t\u1ea1o gi\u00e1 tr\u1ecb cho primary constructor b\u1eb1ng c\u00e1ch g\u1ecdi primary constructor m\u1ed9t c\u00e1ch gi\u00e1n ti\u1ebfp ho\u1eb7c tr\u1ef1c ti\u1ebfp: class Invoice ( id : Int ) { constructor ( id : Int , name : String ) : this ( id ) { //this \u1edf \u0111\u00e2y g\u1ecdi tr\u1ef1c ti\u1ebfp \u0111\u1ebfn primary constructor // v\u00e0 truy\u1ec1n gi\u00e1 tr\u1ecb id cho primary constructor } constructor ( id : Int , name : String , version : Int ) : this ( id , name ) { //this \u1edf \u0111\u00e2y g\u1ecdi tr\u1ef1c ti\u1ebfp secondary constructor 2 tham s\u1ed1 // v\u00e0 \u0111\u01b0\u1ee3c coi l\u00e0 g\u1ecdi gi\u00e1n ti\u1ebfp primary constructor qua secondary constructor 2 tham s\u1ed1 \u0111\u00f3 } } N\u1ebfu nh\u01b0 m\u1ed9t class kh\u00f4ng t\u1ea1o ra b\u1ea5t k\u00ec m\u1ed9t constructor n\u00e0o ( primary v\u00e0 secondary ) th\u00ec m\u1eb7c \u0111\u1ecbnh Kotlin s\u1ebd t\u1ea1o ra m\u1ed9t primary constructor 0 param v\u00e0 visibility modifier l\u00e0 public , n\u1ebfu ta kh\u00f4ng mu\u1ed1n ai s\u1eed d\u1ee5ng constructor \u0111\u00f3 (\u0111\u1ed3ng ngh\u0129a v\u1edbi vi\u1ec7c kh\u00f4ng t\u1ea1o ra b\u1ea5t k\u00ec m\u1ed9t instance n\u00e0o c\u1ee7a class \u0111\u00f3) th\u00ec ta th\u00eam visibility modifier l\u00e0 private tr\u01b0\u1edbc primary constructor kh\u00f4ng tham s\u1ed1: class DontCreateMe private constructor () { } T\u1ea1o instance cho class \u00b6 Java Invoice invoice = new Invoice (); Customer customer = new Customer ( \"Joe Smith\" ) Kotlin val invoice = Invoice () val customer = Customer ( \"Joe Smith\" ) Vi\u1ec7c t\u1ea1o instance cho class gi\u1ed1ng nh\u01b0 g\u1ecdi m\u1ed9t function. L\u01b0u \u00fd l\u00e0 trong Kotlin kh\u00f4ng c\u00f3 t\u1eeb kh\u00f3a new . T\u1ea1o instance cho nested class s\u1ebd \u0111\u01b0\u1ee3c tr\u00ecnh b\u00e0y trong ph\u1ea7n Nested Class 2. K\u1ebf th\u1eeba (Inheritance) \u00b6 Kh\u00e1c v\u1edbi Java , m\u1ecdi class \u0111\u1ec1u ng\u1ea7m hi\u1ec3u l\u00e0 k\u1ebf th\u1eeba t\u1eeb l\u1edbp cha Object , c\u00f2n \u1edf trong Kotlin c\u00e1c class s\u1ebd \u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 k\u1ebf th\u1eeba t\u1eeb l\u1edbp cha Any class Example // Implicitly inherits from Any L\u01b0u \u00fd \u1edf \u0111\u00e2y Any kh\u00f4ng ph\u1ea3i l\u00e0 Object , v\u00ec Any kh\u00f4ng c\u00f3 b\u1ea5t c\u1ee9 m\u1ed9t function n\u00e0o kh\u00e1c ngo\u00e0i c\u00e1c function l\u00e0 equals() , hashCode() v\u00e0 toString() . \u0110\u1ec3 th\u1ef1c hi\u1ec7n k\u1ebf th\u1eeba ta khai b\u00e1o t\u00ean class cha sau t\u00ean d\u1ea5u : : open class Base ( p : Int ) class Derived ( p : Int ) : Base ( p ) open class Base ( p : Int ) { constructor ( p : Int , t : String ) : this ( p ) } class Derived ( p : Int ) : Base ( p , \"Hello\" ) \u1ede \u0111\u00e2y class Derived k\u1ebf th\u1eeba class Base . Class Derived c\u00f3 primary constructor , do \u0111\u00f3 khi th\u1ef1c hi\u1ec7n k\u1ebf th\u1eeba ph\u1ea3i kh\u1edfi t\u1ea1o gi\u00e1 tr\u1ecb cho c\u00e1c param c\u1ee7a primary constructor ho\u1eb7c secondary constructor class cha ngay sau t\u00ean class cha. N\u1ebfu class th\u1ef1c hi\u1ec7n k\u1ebf th\u1eeba (v\u00ed d\u1ee5 nh\u01b0 Derived ) kh\u00f4ng c\u00f3 primary constructor , ta c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n kh\u1edfi t\u1ea1o c\u00e1c gi\u00e1 tr\u1ecb param c\u1ee7a primary constructor ho\u1eb7c secondary constructor class cha qua c\u00e1c secondary constructor c\u1ee7a class th\u1ef1c hi\u1ec7n k\u1ebf th\u1eeba b\u1eb1ng t\u1eeb kh\u00f3a super : class MyView : View { constructor ( ctx : Context ) : super ( ctx ) constructor ( ctx : Context , attrs : AttributeSet ) : super ( ctx , attrs ) } Ch\u00fa \u00fd: t\u1eeb kh\u00f3a open c\u00f3 ngh\u0129a ng\u01b0\u1ee3c l\u1ea1i v\u1edbi final trong Java . Th\u00eam open khi khai b\u00e1o class Base cho ph\u00e9p c\u00e1c class c\u00f3 th\u1ec3 k\u1ebf th\u1eeba t\u1eeb n\u00f3. M\u1eb7c \u0111\u1ecbnh t\u1ea5t c\u1ea3 c\u00e1c class trong Kotlin \u0111\u1ec1u l\u00e0 final . Overriding method \u00b6 T\u01b0\u01a1ng t\u1ef1 v\u1edbi Java c\u00e1c class con trong Kotlin c\u00f3 th\u1ec3 override l\u1ea1i c\u00e1c function c\u1ee7a class cha, v\u1edbi \u0111i\u1ec1u ki\u1ec7n function \u0111\u00f3 c\u1ee7a class cha ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o v\u1edbi t\u1eeb kh\u00f3a open . Kh\u00e1c v\u1edbi Java khi override method ta c\u00f3 th\u1ec3 kh\u1ed3ng c\u1ea7n annotation @Override , tuy nhi\u00ean trong Kotlin th\u00ec nh\u1ea5t \u0111\u1ecbnh ph\u1ea3i x\u00e1c \u0111\u1ecbnh n\u00f3 b\u1eb1ng annotation override : open class Base { open fun v () {} fun nv () {} } class Derived () : Base () { override fun v () {} } L\u00fac n\u00e0y function fun() trong class Derived t\u1ef1 \u0111\u1ed9ng \u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 open , do \u0111\u00f3 n\u1ebfu kh\u00f4ng mu\u1ed1n b\u1ea5t c\u1ee9 class n\u00e0o override l\u1ea1i function func() khi k\u1ebf th\u1eeba class Derived. Ta \u0111\u00e1nh d\u1ea5u n\u00f3 v\u1edbi t\u1eeb kh\u00f3a final : class Derived () : Base () { final override fun v () {} } verriding property \u00b6 C\u00e1c ph\u1ea7n li\u00ean quan \u0111\u1ebfn overriding property \u0111\u01b0\u1ee3c tr\u00ecnh b\u00e0y t\u1ea1i \u0111\u00e2y Overriding rule \u00b6 M\u1ed9t v\u1ea5n \u0111\u1ec1 xu\u1ea5t hi\u1ec7n khi th\u1ef1c hi\u1ec7n \u0111a th\u1eeba k\u1ebf trong Kotlin \u0111\u00f3 l\u00e0 c\u00f3 nh\u1eefng property ho\u1eb7c method gi\u1ed1ng nhau gi\u1eefa c\u00e1c superclass v\u00ed d\u1ee5 nh\u01b0 m\u1ed9t class k\u1ebf th\u1eeba c\u1ea3 class A v\u00e0 interface B : open class A { open fun f () { print ( \"A\" ) } fun a () { print ( \"a\" ) } } interface B { fun f () { print ( \"B\" ) } // interface members are 'open' by default fun b () { print ( \"b\" ) } } Khi k\u1ebf th\u1eeba c\u1ea3 A v\u00e0 B , \u0111\u1ec3 g\u1ecdi \u0111\u00edch th\u1ecb \u0111\u1ebfn function f() c\u1ee7a class A hay interface B ta s\u1eed d\u1ee5ng super<Base> \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh: class C () : A (), B { // The compiler requires f() to be overridden: override fun f () { super < A >. f () // call to A.f() super < B >. f () // call to B.f() } } Abstract Classes \u00b6 Class ho\u1eb7c c\u00e1c th\u00e0nh ph\u1ea7n c\u1ee7a n\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c khai b\u00e1o l\u00e0 abstract . C\u00e1c th\u00e0nh ph\u1ea7n \u0111\u01b0\u1ee3c khai b\u00e1o abstract trong m\u1ed9t class abstract kh\u00f4ng c\u1ea7n ph\u1ea3i khai b\u00e1o body: abstract class Base { abstract fun calculate () } class Invoice ( id : Int ) : Base () { override fun calculate () { } } Ta c\u0169ng c\u00f3 th\u1ec3 bi\u1ebfn m\u1ed9t open function non-abtract th\u00e0nh abstract b\u1eb1ng c\u00e1ch override l\u1ea1i n\u00f3: open class Base { open fun f () {} } abstract class Derived : Base () { override abstract fun f () }","title":"Kotlin Class v\u00e0 k\u1ebf th\u1eeba"},{"location":"kotlin/kotlin_class_inheritance/#1-class","text":"T\u01b0\u01a1ng t\u1ef1 v\u1edbi Java , \u0111\u1ec3 t\u1ea1o ra m\u1ed9t class ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a class \u0111\u1ec3 khai b\u00e1o. Java public class Invoice { } Kotlin class Invoice { } Ta th\u1ea5y d\u00f2ng code khai b\u00e1o class Invoice trong Kotlin kh\u00f4ng x\u00e1c \u0111\u1ecbnh visibility modifier ( access modifier ) cho class, tuy nhi\u00ean trong Kotlin n\u1ebfu ta kh\u00f4ng x\u00e1c \u0111\u1ecbnh visibility modifier cho class, th\u00ec m\u1eb7c \u0111\u1ecbnh s\u1ebd l\u00e0 public . N\u1ebfu m\u1ed9t class kh\u00f4ng c\u00f3 body, kh\u00f4ng c\u00f3 b\u1ea5t k\u00ec m\u1ed9t param n\u00e0o ta c\u00f3 th\u1ec3 khai b\u00e1o nh\u01b0 sau, kh\u00f4ng c\u1ea7n d\u1ea5u {} class Empty","title":"1. Class"},{"location":"kotlin/kotlin_class_inheritance/#constructor","text":"","title":"Constructor"},{"location":"kotlin/kotlin_class_inheritance/#primary-constructor","text":"Kotlin c\u00f3 m\u1ed9t primary constructor v\u00e0 c\u00f3 th\u1ec3 c\u00f3 m\u1ed9t ho\u1eb7c nhi\u1ec1u secondary constructors . \u0110\u1ec3 x\u00e1c \u0111\u1ecbnh primary constructor ta khai b\u00e1o nh\u01b0 sau: class Person constructor ( firstName : String ) { } N\u1ebfu nh\u01b0 primary constructor kh\u00f4ng c\u00f3 b\u1ea5t k\u00ec m\u1ed9t visibility modifier ho\u1eb7c annotation th\u00ec t\u1eeb kh\u00f3a constructor c\u00f3 th\u1ec3 b\u1ecf: class Person ( firstName : String ) { } C\u00f2n n\u1ebfu c\u00f3 visibility modifier ho\u1eb7c annotation th\u00ec t\u1eeb kh\u00f3a constructor s\u1ebd c\u1ea7n ph\u1ea3i c\u00f3: class Customer public @Inject constructor ( name : String ) { ... } Primary constructor kh\u00f4ng ch\u1ee9a b\u1ea5t c\u1ee9 d\u00f2ng code n\u00e0o, n\u1ebfu mu\u1ed1n th\u1ef1c hi\u1ec7n c\u00e1c logic code ngay sau primary constructor c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n b\u1eb1ng c\u00e1ch kh\u1edfi t\u1ea1o ra m\u1ed9t block {} v\u1edbi t\u1eeb kh\u00f3a ti\u1ec1n t\u1ed1 init \u1edf tr\u01b0\u1edbc: class Customer ( name : String ) { init { print ( \"Customer's name is $name\" ) } } Ch\u00fa \u00fd: C\u00e1c param c\u1ee7a primary constructor n\u1ebfu khai b\u00e1o name: String , n\u00f3 ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong c\u00e1c block init{...} v\u00e0 \u0111\u1ec3 kh\u1edfi t\u1ea1o c\u00e1c property trong body class , kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng trong c\u00e1c function c\u1ee7a class ho\u1eb7c c\u00e1c instance c\u1ee7a class \u0111\u00f3: class Customer ( name : String ) { val customerKey = name . toUpperCase () init { print ( \"Customer's name is $name\" ) } } Do \u0111\u00f3 \u0111\u1ec3 coi c\u00e1c param c\u1ee7a primary constructor nh\u01b0 m\u1ed9t property trong class, ta th\u00eam var ho\u1eb7c val cho c\u00e1c param c\u1ee7a primary constructor : class Person ( val firstName : String , val lastName : String , var age : Int ) { // ... }","title":"Primary Constructor"},{"location":"kotlin/kotlin_class_inheritance/#secondary-constructors","text":"Trong m\u1ed9t class ch\u1ec9 c\u00f3 duy nh\u1ea5t m\u1ed9t primary constructor , tuy nhi\u00ean c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u secondary constructor . \u0110\u1ec3 t\u1ea1o secondary constructor ta khai b\u00e1o nh\u01b0 sau: class Person { constructor ( parent : Person ) { parent . children . add ( this ) } } N\u1ebfu nh\u01b0 class c\u00f3 primary constructor th\u00ec m\u1ed7i secondary constructor ph\u1ea3i kh\u1edfi t\u1ea1o gi\u00e1 tr\u1ecb cho primary constructor b\u1eb1ng c\u00e1ch g\u1ecdi primary constructor m\u1ed9t c\u00e1ch gi\u00e1n ti\u1ebfp ho\u1eb7c tr\u1ef1c ti\u1ebfp: class Invoice ( id : Int ) { constructor ( id : Int , name : String ) : this ( id ) { //this \u1edf \u0111\u00e2y g\u1ecdi tr\u1ef1c ti\u1ebfp \u0111\u1ebfn primary constructor // v\u00e0 truy\u1ec1n gi\u00e1 tr\u1ecb id cho primary constructor } constructor ( id : Int , name : String , version : Int ) : this ( id , name ) { //this \u1edf \u0111\u00e2y g\u1ecdi tr\u1ef1c ti\u1ebfp secondary constructor 2 tham s\u1ed1 // v\u00e0 \u0111\u01b0\u1ee3c coi l\u00e0 g\u1ecdi gi\u00e1n ti\u1ebfp primary constructor qua secondary constructor 2 tham s\u1ed1 \u0111\u00f3 } } N\u1ebfu nh\u01b0 m\u1ed9t class kh\u00f4ng t\u1ea1o ra b\u1ea5t k\u00ec m\u1ed9t constructor n\u00e0o ( primary v\u00e0 secondary ) th\u00ec m\u1eb7c \u0111\u1ecbnh Kotlin s\u1ebd t\u1ea1o ra m\u1ed9t primary constructor 0 param v\u00e0 visibility modifier l\u00e0 public , n\u1ebfu ta kh\u00f4ng mu\u1ed1n ai s\u1eed d\u1ee5ng constructor \u0111\u00f3 (\u0111\u1ed3ng ngh\u0129a v\u1edbi vi\u1ec7c kh\u00f4ng t\u1ea1o ra b\u1ea5t k\u00ec m\u1ed9t instance n\u00e0o c\u1ee7a class \u0111\u00f3) th\u00ec ta th\u00eam visibility modifier l\u00e0 private tr\u01b0\u1edbc primary constructor kh\u00f4ng tham s\u1ed1: class DontCreateMe private constructor () { }","title":"Secondary Constructors"},{"location":"kotlin/kotlin_class_inheritance/#tao-instance-cho-class","text":"Java Invoice invoice = new Invoice (); Customer customer = new Customer ( \"Joe Smith\" ) Kotlin val invoice = Invoice () val customer = Customer ( \"Joe Smith\" ) Vi\u1ec7c t\u1ea1o instance cho class gi\u1ed1ng nh\u01b0 g\u1ecdi m\u1ed9t function. L\u01b0u \u00fd l\u00e0 trong Kotlin kh\u00f4ng c\u00f3 t\u1eeb kh\u00f3a new . T\u1ea1o instance cho nested class s\u1ebd \u0111\u01b0\u1ee3c tr\u00ecnh b\u00e0y trong ph\u1ea7n Nested Class","title":"T\u1ea1o instance cho class"},{"location":"kotlin/kotlin_class_inheritance/#2-ke-thua-inheritance","text":"Kh\u00e1c v\u1edbi Java , m\u1ecdi class \u0111\u1ec1u ng\u1ea7m hi\u1ec3u l\u00e0 k\u1ebf th\u1eeba t\u1eeb l\u1edbp cha Object , c\u00f2n \u1edf trong Kotlin c\u00e1c class s\u1ebd \u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 k\u1ebf th\u1eeba t\u1eeb l\u1edbp cha Any class Example // Implicitly inherits from Any L\u01b0u \u00fd \u1edf \u0111\u00e2y Any kh\u00f4ng ph\u1ea3i l\u00e0 Object , v\u00ec Any kh\u00f4ng c\u00f3 b\u1ea5t c\u1ee9 m\u1ed9t function n\u00e0o kh\u00e1c ngo\u00e0i c\u00e1c function l\u00e0 equals() , hashCode() v\u00e0 toString() . \u0110\u1ec3 th\u1ef1c hi\u1ec7n k\u1ebf th\u1eeba ta khai b\u00e1o t\u00ean class cha sau t\u00ean d\u1ea5u : : open class Base ( p : Int ) class Derived ( p : Int ) : Base ( p ) open class Base ( p : Int ) { constructor ( p : Int , t : String ) : this ( p ) } class Derived ( p : Int ) : Base ( p , \"Hello\" ) \u1ede \u0111\u00e2y class Derived k\u1ebf th\u1eeba class Base . Class Derived c\u00f3 primary constructor , do \u0111\u00f3 khi th\u1ef1c hi\u1ec7n k\u1ebf th\u1eeba ph\u1ea3i kh\u1edfi t\u1ea1o gi\u00e1 tr\u1ecb cho c\u00e1c param c\u1ee7a primary constructor ho\u1eb7c secondary constructor class cha ngay sau t\u00ean class cha. N\u1ebfu class th\u1ef1c hi\u1ec7n k\u1ebf th\u1eeba (v\u00ed d\u1ee5 nh\u01b0 Derived ) kh\u00f4ng c\u00f3 primary constructor , ta c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n kh\u1edfi t\u1ea1o c\u00e1c gi\u00e1 tr\u1ecb param c\u1ee7a primary constructor ho\u1eb7c secondary constructor class cha qua c\u00e1c secondary constructor c\u1ee7a class th\u1ef1c hi\u1ec7n k\u1ebf th\u1eeba b\u1eb1ng t\u1eeb kh\u00f3a super : class MyView : View { constructor ( ctx : Context ) : super ( ctx ) constructor ( ctx : Context , attrs : AttributeSet ) : super ( ctx , attrs ) } Ch\u00fa \u00fd: t\u1eeb kh\u00f3a open c\u00f3 ngh\u0129a ng\u01b0\u1ee3c l\u1ea1i v\u1edbi final trong Java . Th\u00eam open khi khai b\u00e1o class Base cho ph\u00e9p c\u00e1c class c\u00f3 th\u1ec3 k\u1ebf th\u1eeba t\u1eeb n\u00f3. M\u1eb7c \u0111\u1ecbnh t\u1ea5t c\u1ea3 c\u00e1c class trong Kotlin \u0111\u1ec1u l\u00e0 final .","title":"2. K\u1ebf th\u1eeba (Inheritance)"},{"location":"kotlin/kotlin_class_inheritance/#overriding-method","text":"T\u01b0\u01a1ng t\u1ef1 v\u1edbi Java c\u00e1c class con trong Kotlin c\u00f3 th\u1ec3 override l\u1ea1i c\u00e1c function c\u1ee7a class cha, v\u1edbi \u0111i\u1ec1u ki\u1ec7n function \u0111\u00f3 c\u1ee7a class cha ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o v\u1edbi t\u1eeb kh\u00f3a open . Kh\u00e1c v\u1edbi Java khi override method ta c\u00f3 th\u1ec3 kh\u1ed3ng c\u1ea7n annotation @Override , tuy nhi\u00ean trong Kotlin th\u00ec nh\u1ea5t \u0111\u1ecbnh ph\u1ea3i x\u00e1c \u0111\u1ecbnh n\u00f3 b\u1eb1ng annotation override : open class Base { open fun v () {} fun nv () {} } class Derived () : Base () { override fun v () {} } L\u00fac n\u00e0y function fun() trong class Derived t\u1ef1 \u0111\u1ed9ng \u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 open , do \u0111\u00f3 n\u1ebfu kh\u00f4ng mu\u1ed1n b\u1ea5t c\u1ee9 class n\u00e0o override l\u1ea1i function func() khi k\u1ebf th\u1eeba class Derived. Ta \u0111\u00e1nh d\u1ea5u n\u00f3 v\u1edbi t\u1eeb kh\u00f3a final : class Derived () : Base () { final override fun v () {} }","title":"Overriding method"},{"location":"kotlin/kotlin_class_inheritance/#verriding-property","text":"C\u00e1c ph\u1ea7n li\u00ean quan \u0111\u1ebfn overriding property \u0111\u01b0\u1ee3c tr\u00ecnh b\u00e0y t\u1ea1i \u0111\u00e2y","title":"verriding property"},{"location":"kotlin/kotlin_class_inheritance/#overriding-rule","text":"M\u1ed9t v\u1ea5n \u0111\u1ec1 xu\u1ea5t hi\u1ec7n khi th\u1ef1c hi\u1ec7n \u0111a th\u1eeba k\u1ebf trong Kotlin \u0111\u00f3 l\u00e0 c\u00f3 nh\u1eefng property ho\u1eb7c method gi\u1ed1ng nhau gi\u1eefa c\u00e1c superclass v\u00ed d\u1ee5 nh\u01b0 m\u1ed9t class k\u1ebf th\u1eeba c\u1ea3 class A v\u00e0 interface B : open class A { open fun f () { print ( \"A\" ) } fun a () { print ( \"a\" ) } } interface B { fun f () { print ( \"B\" ) } // interface members are 'open' by default fun b () { print ( \"b\" ) } } Khi k\u1ebf th\u1eeba c\u1ea3 A v\u00e0 B , \u0111\u1ec3 g\u1ecdi \u0111\u00edch th\u1ecb \u0111\u1ebfn function f() c\u1ee7a class A hay interface B ta s\u1eed d\u1ee5ng super<Base> \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh: class C () : A (), B { // The compiler requires f() to be overridden: override fun f () { super < A >. f () // call to A.f() super < B >. f () // call to B.f() } }","title":"Overriding rule"},{"location":"kotlin/kotlin_class_inheritance/#abstract-classes","text":"Class ho\u1eb7c c\u00e1c th\u00e0nh ph\u1ea7n c\u1ee7a n\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c khai b\u00e1o l\u00e0 abstract . C\u00e1c th\u00e0nh ph\u1ea7n \u0111\u01b0\u1ee3c khai b\u00e1o abstract trong m\u1ed9t class abstract kh\u00f4ng c\u1ea7n ph\u1ea3i khai b\u00e1o body: abstract class Base { abstract fun calculate () } class Invoice ( id : Int ) : Base () { override fun calculate () { } } Ta c\u0169ng c\u00f3 th\u1ec3 bi\u1ebfn m\u1ed9t open function non-abtract th\u00e0nh abstract b\u1eb1ng c\u00e1ch override l\u1ea1i n\u00f3: open class Base { open fun f () {} } abstract class Derived : Base () { override abstract fun f () }","title":"Abstract Classes"},{"location":"kotlin/kotlin_collection/","text":"Gi\u1edbi thi\u1ec7u \u00b6 Kh\u00e1c v\u1edbi c\u00e1c nhi\u1ec1u ng\u00f4n ng\u1eef kh\u00e1c, Kotlin ph\u00e2n bi\u1ec7t r\u00f5 r\u00e0ng gi\u1eefa collection c\u00f3 th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb v\u00e0 collection kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb( list , set , map ...). B\u1edfi v\u1eady, vi\u1ec7c control ch\u00ednh x\u00e1c l\u00fac n\u00e0o d\u00f9ng lo\u1ea1i collection th\u1ebf n\u00e0o s\u1ebd gi\u00fap gi\u1ea3m thi\u1ec3u bug v\u00e0 vi\u1ec7c thi\u1ebft k\u1ebf c\u00e1c API \u0111\u01b0\u1ee3c t\u1ed1t h\u01a1n. Kotlin cung c\u1ea5p cho ch\u00fang ta m\u1ed9t t\u1eadp c\u00e1c native interface \u0111\u1ec3 l\u00e0m vi\u1ec7c v\u1edbi collection: Iterable: L\u1edbp cha. B\u1ea5t k\u1ef3 class n\u00e0o k\u1ebf th\u1eeba t\u1eeb interface n\u00e0y \u0111\u1ea1i di\u1ec7n cho m\u1ed9t chu\u1ed7i c\u00e1c ph\u1ea7n t\u1eed m\u00e0 ch\u00fang ta c\u00f3 th\u1ec3 duy\u1ec7t qua MutableIterable: Iterable h\u1ed7 tr\u1ee3 vi\u1ec7c x\u00f3a c\u00e1c ph\u1ea7n t\u1eed trong khi \u0111anh duy\u1ec7t Collection: Class \u0111\u1ea1i di\u1ec7n cho m\u1ed9t t\u1eadp c\u00e1c ph\u1ea7n t\u1eed. Ch\u00fang ta c\u00f3 th\u1ec3 truy c\u1eadp \u0111\u1ebfn c\u00e1c h\u00e0m m\u00e0 tr\u1ea3 v\u1ec1 size c\u1ee7a collection, ki\u1ec3m tra collection c\u00f3 r\u1ed7ng hay kh\u00f4ng,... T\u1ea5t c\u1ea3 c\u00e1c method cho lo\u1ea1i n\u00e0y ch\u1ec9 l\u00e0 l\u1ea5y d\u1eef li\u1ec7u, b\u1edfi v\u00ec collection l\u00e0 immutable. MutableCollection: Collection h\u1ed7 tr\u1ee3 vi\u1ec7c th\u00eam ho\u1eb7c x\u00f3a c\u00e1c ph\u1ea7n t\u1eed: c\u00e1c h\u00e0m add , remove , clear ... List: Collection c\u00f3 l\u1ebd l\u00e0 \u0111\u01b0\u1ee3c d\u00f9ng nhi\u1ec1u nh\u1ea5t. N\u00f3 \u0111\u1ea1i di\u1ec7n cho m\u1ed9t t\u1eadp c\u00e1c ph\u1ea7n t\u1eed c\u00f3 th\u1ee9 t\u1ef1. B\u1edfi v\u00ec c\u00f3 th\u1ee9 t\u1ef1, ta c\u00f3 th\u1ec3 truy c\u1eadp c\u00e1c ph\u1ea7n t\u1eed th\u00f4ng qua ch\u1ec9 s\u1ed1 MutableList: List h\u1ed7 tr\u1ee3 vi\u1ec7c th\u00eam ho\u1eb7c x\u00f3a c\u00e1c ph\u1ea7n t\u1eed Set: m\u1ed9t t\u1eadp c\u00e1c ph\u1ea7n t\u1eed kh\u00f4ng c\u00f3 th\u1ee9 t\u1ef1 v\u00e0 kh\u00f4ng h\u1ed7 tr\u1ee3 l\u01b0u c\u00e1c ph\u1ea7n t\u1eed tr\u00f9ng MutableSet: Set h\u1ed7 tr\u1ee3 vi\u1ec7c th\u00eam v\u00e0 x\u00f3a c\u00e1c ph\u1ea7n t\u1eed Map: m\u1ed9t t\u1eadp c\u00e1c c\u1eb7p key - value v\u1edbi key trong map l\u00e0 duy nh\u1ea5t MutableMap: Map h\u1ed7 tr\u1ee3 vi\u1ec7c th\u00eam v\u00e0 x\u00f3a c\u00e1c ph\u1ea7n t\u1eed V\u1edbi 2 ki\u1ec3u collection n\u00e0y, ta c\u1ea7n ph\u00e2n bi\u1ec7t r\u00f5 r\u00e0ng gi\u1eefa c\u00e1c kh\u00e1i ni\u1ec7m read only view c\u1ee7a mutable collection v\u00e0 m\u1ed9t collection th\u1ef1c s\u1ef1 immutable. Ph\u1ea7n n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c n\u00f3i \u1edf sau Kh\u1edfi t\u1ea1o \u00b6 List<out T> trong Kotlin l\u00e0 m\u1ed9t interface cung c\u1ea5p c\u00e1c thao t\u00e1c nh\u01b0 size , get .... C\u0169ng nh\u01b0 trong Java , List<out T> k\u1ebf th\u1eeba t\u1eeb Collection<T> v\u00e0 Iterable<T> . \u0110\u00e2y l\u00e0 immutable collection. var list : List < Int > = listOf ( 1 , 2 , 3 , 4 , 5 ) // [1,2,3,4,5] var list1 : List < Int > = List ( 5 , { index -> index + 1 }) // [2,3,4,5,6] list . add ( 5 ) //compiler s\u1ebd b\u00e1o l\u1ed7i list . clear () // compiler s\u1ebd b\u00e1o l\u1ed7i V\u00ec collection kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i, ch\u00fang ch\u1ec9 c\u00f3 th\u1ec3 kh\u1edfi t\u1ea1o gi\u00e1 tr\u1ecb l\u00fac khai b\u00e1o. Kotlin cung c\u1ea5p h\u00e0m kh\u1edfi t\u1ea1o ho\u1eb7c ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng h\u00e0m th\u01b0 vi\u1ec7n chu\u1ea9n c\u00f3 s\u1eb5n listOf() , setOf() v\u00e0 mapOf() . V\u1edbi mapOf() , ta s\u1eed d\u1ee5ng c\u00fa ph\u00e1p mapOf(a to b, c to d) . C\u00f9ng v\u1edbi \u0111\u00f3, c\u00e1c h\u00e0m add() , clear() c\u0169ng s\u1ebd kh\u00f4ng c\u00f3 \u0111\u1ed1i v\u1edbi immutable collection. var list : MutableList < Int > = mutableListOf ( 1 , 2 , 3 , 4 , 5 ) // [1,2,3,4,5] var list1 : MutableList < Int > = MutableList ( 5 , { index -> index + 1 }) // [2,3,4,5,6] list . add ( 5 ) // OK list . clear () // OK V\u1edbi mutable collection, ch\u00fang ta c\u00f3 MutableList<T> , interface n\u00e0y cung c\u1ea5p th\u00eam c\u00e1c thao t\u00e1c nh\u01b0 add , clear ... Vi\u1ec7c ph\u00e2n chia c\u0169ng t\u01b0\u01a1ng t\u1ef1 v\u1edbi Set<out T>/MutableSet<T> v\u00e0 Map<K, out V>/MutableMap<K, V> . Ph\u00e2n bi\u1ec7t \u00b6 Ch\u00fang ta c\u00f9ng xem vd sau: val numbers : MutableList < Int > = mutableListOf ( 1 , 2 , 3 ) val readOnlyView : List < Int > = numbers println ( numbers ) // prints \"[1, 2, 3]\" numbers . add ( 4 ) println ( readOnlyView ) // prints \"[1, 2, 3, 4]\" readOnlyView . clear () // -> compiler b\u00e1o l\u1ed7i numbers . clear () // OK readOnlyView kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a list m\u00e0 ch\u1ec9 c\u00f3 th\u1ec3 xem \u0111\u01b0\u1ee3c gi\u00e1 tr\u1ecb c\u1ee7a list. Gi\u00e1 tr\u1ecb c\u1ee7a list thay \u0111\u1ed5i khi numbers thay \u0111\u1ed5i gi\u00e1 tr\u1ecb b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng add ho\u1eb7c clear . Khi \u0111\u00f3, gi\u00e1 tr\u1ecb c\u1ee7a readOnlyView khi in ra c\u0169ng s\u1ebd thay \u0111\u1ed5i. \u0110i\u1ec1u \u0111\u00f3 b\u1edfi v\u00ec c\u1ea3 2 bi\u1ebfn numbers v\u00e0 readOnlyView \u0111\u1ec1u c\u00f9ng tr\u1ecf v\u00e0o c\u00f9ng m\u1ed9t list v\u00e0 readOnlyView s\u1ebd thay \u0111\u1ed5i n\u1ebfu list \u0111\u01b0\u1ee3c tr\u1ecf v\u00e0o thay \u0111\u1ed5i. Trong tr\u01b0\u1eddng h\u1ee3p ch\u1ec9 c\u00f3 duy nh\u1ea5t 1 tham chi\u1ebfu t\u1edbi list, ch\u00fang ta c\u00f3 th\u1ec3 coi collection \u0111\u00f3 ho\u00e0n to\u00e0n l\u00e0 immutable collection. Trong tr\u01b0\u1eddng h\u1ee3p b\u1ea1n ch\u1ec9 mu\u1ed1n thay \u0111\u1ed5i collection \u1edf b\u00ean trong \u0111\u1ed1i t\u01b0\u1ee3ng m\u00e0 kh\u00f4ng mu\u1ed1n b\u1ecb thay \u0111\u1ed5i t\u1eeb b\u00ean ngo\u00e0i: class Controller { private val _items = mutableListOf < String >() val items : List < String > get () = _items . toList () } M\u1ed9t s\u1ed1 extension method quen thu\u1ed9c val items = listOf ( 1 , 2 , 3 , 4 ) items . first () == 1 items . last () == 4 items . filter { it % 2 == 0 } // returns [2, 4] val rwList = mutableListOf ( 1 , 2 , 3 ) rwList . requireNoNulls () // returns [1, 2, 3] if ( rwList . none { it > 6 }) println ( \"No items above 6\" ) // prints \"No items above 6\" val item = rwList . firstOrNull () V\u1edbi map , ta c\u00f3 th\u1ec3 kh\u1edfi t\u1ea1o v\u00e0 truy c\u1eadp nh\u01b0 sau: val readWriteMap = hashMapOf ( \"foo\" to 1 , \"bar\" to 2 ) println ( readWriteMap [ \"foo\" ]) // prints \"1\" val snapshot : Map < String , Int > = HashMap ( readWriteMap ) M\u1ed9t s\u1ed1 h\u00e0m ph\u1ed5 bi\u1ebfn \u00b6 \u0110\u00e2y l\u00e0 c\u00e1c h\u00e0m n\u1eb1m trong th\u01b0 vi\u1ec7n chu\u1ea9n \u0111\u01b0\u1ee3c Kotlin cung c\u1ea5p v\u1edbi nhi\u1ec1u lo\u1ea1i collection kh\u00e1c nhau C\u00e1c h\u00e0m l\u00e0m vi\u1ec7c v\u1edbi t\u1ed5ng th\u1ec3 \u00b6 any \u00b6 Tr\u1ea3 v\u1ec1 true n\u1ebfu c\u00f3 \u00edt nh\u1ea5t 1 ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 5 , 7 ) list . any { it == 3 } // true all \u00b6 Tr\u1ea3 v\u1ec1 true n\u1ebfu t\u1ea5t c\u1ea3 c\u00e1c ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 6 , 9 ) list . all { it % 3 == 0 } //true count \u00b6 Tr\u1ea3 v\u1ec1 s\u1ed1 ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 5 , 9 ) list . count { it % 3 == 0 } // 2 fold \u00b6 T\u1ed5ng c\u1ee7a c\u00e1c gi\u00e1 tr\u1ecb b\u1eaft \u0111\u1ea7u t\u1eeb gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o v\u00e0 \u00e1p d\u1ee5ng vi\u1ec7c t\u00ednh to\u00e1n \u1edf h\u00e0m \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o v\u1edbi c\u00e1c ph\u1ea7n t\u1eed t\u1eeb \u0111\u1ea7u \u0111\u1ebfn cu\u1ed1i collection. var list = mutableListOf ( 3 , 5 , 6 ) val result = list . fold ( 0 , { total : Int , i : Int -> total + i }) print ( result ) // 14 Nh\u01b0 \u1edf v\u00ed d\u1ee5 tr\u00ean: 0 l\u00e0 gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o, total l\u00e0 t\u1ed5ng c\u1ee7a qu\u00e1 tr\u00ecnh, i l\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a t\u1eebng ph\u1ea7n t\u1eed, l\u1ea7n l\u01b0\u1ee3t l\u00e0 3 , 5 , 6 foldRight \u00b6 T\u01b0\u01a1ng t\u1ef1 nh\u01b0 fold nh\u01b0ng duy\u1ec7t theo th\u1ee9 t\u1ef1 t\u1eeb cu\u1ed1i tr\u1edf v\u1ec1 \u0111\u1ea7u var list = mutableListOf ( 3 , 5 , 6 ) val result = list . foldRight ( 0 , { total : Int , i : Int -> total + i }) print ( result ) // 14 Gi\u00e1 tr\u1ecb l\u1ea7n l\u01b0\u1ee3t c\u1ee7a i b\u00e2y gi\u1edd l\u00e0: 6 , 5 , 3 forEach \u00b6 Th\u1ef1c hi\u1ec7n h\u00e0m \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o v\u1edbi m\u1ed7i ph\u1ea7n t\u1eed trong collection: var list = mutableListOf ( 3 , 5 , 6 ) list . forEach { println ( it ) } forEachIndexed \u00b6 T\u01b0\u01a1ng t\u1ef1 nh\u01b0 forEach , tuy nhi\u00ean c\u00f3 th\u00eam ch\u1ec9 s\u1ed1 c\u1ee7a c\u00e1c ph\u1ea7n t\u1eed: var list = mutableListOf ( 3 , 5 , 6 ) list . forEachIndexed { index : Int , value : Int -> println ( \"position $index: $value\" ) } max \u00b6 Tr\u1ea3 v\u1ec1 ph\u1ea7n t\u1eed l\u1edbn nh\u1ea5t c\u1ee7a collection ho\u1eb7c null n\u1ebfu collection r\u1ed7ng var list = mutableListOf ( 3 , 5 , 6 ) print ( list . max ()) // 6 min \u00b6 Tr\u1ea3 v\u1ec1 ph\u1ea7n t\u1eed nh\u1ecf nh\u1ea5t c\u1ee7a collection ho\u1eb7c null n\u1ebfu collection r\u1ed7ng var list = mutableListOf ( 3 , 5 , 6 ) print ( list . min ()) // 3 none \u00b6 Tr\u1ea3 v\u1ec1 true n\u1ebfu kh\u00f4ng c\u00f3 ph\u1ea7n t\u1eed n\u00e0o th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 5 , 6 ) print ( list . none { it > 8 }) reduce \u00b6 T\u01b0\u01a1ng t\u1ef1 nh\u01b0 fold nh\u01b0ng kh\u00f4ng c\u00f3 gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o m\u00e0 ch\u1ec9 \u00e1p d\u1ee5ng v\u1edbi c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a d\u00e3y var list = mutableListOf ( 3 , 5 , 6 ) var result = list . reduce { total : Int , i : Int -> total + i } print ( result ) // 14 reduceRight \u00b6 T\u01b0\u01a1ng t\u1ef1 nh\u01b0 reduce nh\u01b0ng duy\u1ec7t t\u1eeb cu\u1ed1i d\u00e3y tr\u1edf v\u1ec1 \u0111\u1ea7u var list = mutableListOf ( 3 , 5 , 6 ) var result = list . reduce { total : Int , i : Int -> total + i } print ( result ) // 14 sumBy \u00b6 Tr\u1ea3 v\u1ec1 t\u1ed5ng c\u1ee7a t\u1ea5t c\u1ea3 c\u00e1c ph\u1ea7n t\u1eed nh\u01b0ng \u0111\u01b0\u1ee3c x\u1eed l\u00fd th\u00f4ng qua logic \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 5 , 7 ) var result = list . sumBy { it % 3 } print ( result ) // 3 result \u1edf tr\u00ean l\u00e0 t\u1ed5ng c\u1ee7a c\u00e1c s\u1ed1 d\u01b0 c\u1ee7a d\u01b0 c\u1ee7a t\u1eebng ph\u1ea7n t\u1eed C\u00e1c h\u00e0m l\u1ecdc \u00b6 drop \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t list bao g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c ph\u1ea7n t\u1eed tr\u1eeb n ph\u1ea7n t\u1eed \u0111\u1ea7u ti\u00ean var list = mutableListOf ( 3 , 5 , 6 , 7 , 9 ) var result = list . drop ( 3 ) print ( result ) // [7, 9] dropWhile \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t list bao g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c ph\u1ea7n t\u1eed tr\u1eeb c\u00e1c ph\u1ea7n t\u1eed \u0111\u1ea7u ti\u00ean m\u00e0 th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . dropWhile { it % 3 == 0 } print ( result ) // [7, 9] Trong v\u00ed d\u1ee5 tr\u00ean, c\u00e1c ph\u1ea7n t\u1eeb \u0111\u1ea7u ti\u00ean m\u00e0 th\u1ecfa m\u00e3n y\u00eau c\u1ea7u s\u1ebd b\u1ecb lo\u1ea1i ra. dropLastWhile \u00b6 T\u01b0\u01a1ng t\u1ef1 nh\u01b0 dropWhile tuy nhi\u00ean s\u1ebd lo\u1ea1i c\u00e1c ph\u1ea7n t\u1eed cu\u1ed1i n\u1ebfu th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . dropLastWhile { it % 3 == 0 } print ( result ) // [3, 6, 6, 7] filter \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t list c\u00e1c ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . filter { it % 3 == 0 } print ( result ) // [3, 6, 6, 9] filterNot \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t list c\u00e1c ph\u1ea7n t\u1eed kh\u00f4ng th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . filterNot { it % 3 == 0 } print ( result ) // [7] filterNotNull \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t list c\u00e1c ph\u1ea7n t\u1eed tr\u1eeb c\u00e1c ph\u1ea7n t\u1eed null var list = mutableListOf ( 3 , 6 , 6 , null , 9 ) var result = list . filterNotNull () print ( result ) // [3, 6, 6, 9] slice \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t list c\u00e1c ph\u1ea7n t\u1eed \u1edf c\u00e1c v\u1ecb tr\u00ed x\u00e1c \u0111\u1ecbnh var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . slice ( listOf ( 0 , 1 , 3 , 4 )) print ( result ) // [3, 6, 6, 9] take \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t list g\u1ed3m n ph\u1ea7n t\u1eed \u0111\u1ea7u ti\u00ean var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . take ( 4 ) print ( result ) // [3, 6, 6, 7] takeLast \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t list g\u1ed3m n ph\u1ea7n t\u1eed cu\u1ed1i c\u00f9ng var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . takeLast ( 4 ) print ( result ) // [6, 6, 7, 9] takeWhile \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t list bao g\u1ed3m c\u00e1c ph\u1ea7n t\u1eed \u0111\u1ea7u ti\u00ean m\u00e0 th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . takeWhile { it % 3 == 0 } print ( result ) // [3, 6, 6] C\u00e1c h\u00e0m chuy\u1ec3n \u0111\u1ed5i \u00b6 flatMap \u00b6 Duy\u1ec7t qua t\u1ea5t c\u1ea3 c\u00e1c ph\u1ea7n t\u1eed v\u00e0 t\u1ea1o ra m\u1ed9t collection m\u1edbi cho m\u1ed7i ph\u1ea7n t\u1eed b\u1eb1ng c\u00e1ch \u00e1p d\u1ee5ng logic truy\u1ec1n v\u00e0o, cu\u1ed1i c\u00f9ng tr\u1ea3 v\u1ec1 m\u1ed9t list bao g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a c\u00e1c list v\u1eeba \u0111\u01b0\u1ee3c t\u1ea1o ra var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . flatMap { listOf ( it , it + 1 , it + 2 ) } print ( result ) // [3, 4, 5, 6, 7, 8, 6, 7, 8, 7, 8, 9, 9, 10, 11] groupBy \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t map b\u1eb1ng c\u00e1ch \u00e1p d\u1ee5ng logic truy\u1ec1n v\u00e0o v\u00e0 ph\u00e2n lo\u1ea1i c\u00e1c ph\u1ea7n t\u1eed trong collection th\u00e0nh c\u00e1c nh\u00f3m var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . groupBy { if ( it % 2 == 0 ) \"even\" else \"odd\" } print ( result ) // {odd=[3, 7, 9], even=[6, 6]} map \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t list l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a logic chuy\u1ec3n \u0111\u1ed5i \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o \u00e1p d\u1ee5ng v\u1edbi t\u1ea5t c\u1ea3 c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a collection ban \u0111\u1ea7u var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . map { it + 1 } print ( result ) //[4, 7, 7, 8, 10] mapIndexed \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t list l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a logic chuy\u1ec3n \u0111\u1ed5i \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o \u00e1p d\u1ee5ng v\u1edbi t\u1ea5t c\u1ea3 c\u00e1c ph\u1ea7n t\u1eed v\u00e0 ch\u1ec9 s\u1ed1 c\u1ee7a c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a collection ban \u0111\u1ea7u var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . mapIndexed { index , value -> value + index } print ( result ) //[3, 7, 8, 10, 13] C\u00e1c h\u00e0m l\u00e0m vi\u1ec7c v\u1edbi c\u00e1c ph\u1ea7n t\u1eed \u00b6 contains \u00b6 Tr\u1ea3 v\u1ec1 true n\u1ebfu ph\u1ea7n t\u1eed n\u1eb1m trong collection var list = mutableListOf ( \"a\" , \"b\" , \"c\" , null , \"d\" ) var result = list . contains ( \"a\" ) print ( result ) //true elementAt \u00b6 Tr\u1ea3 v\u1ec1 ph\u1ea7n t\u1eed t\u1ea1i v\u1ecb tr\u00ed i ho\u1eb7c throw IndexOutOfBoundException n\u1ebfu i kh\u00f4ng n\u1eb1m trong kho\u1ea3ng ch\u1ec9 s\u1ed1 c\u1ee7a collection var list = mutableListOf ( \"a\" , \"b\" , \"c\" , null , \"d\" ) var result = list . elementAt ( 1 ) print ( result ) // \"a\" elementAtOrElse \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t ph\u1ea7n t\u1eed \u1edf v\u1ecb tr\u00ed i ho\u1eb7c th\u1ef1c hi\u1ec7n logic \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o n\u1ebfu ch\u1ec9 s\u1ed1 c\u1ee7a collection kh\u00f4ng n\u1eb1m trong kho\u1ea3ng ch\u1ec9 s\u1ed1 c\u1ee7a collection var list = mutableListOf ( \"a\" , \"b\" , \"c\" , null , \"d\" ) var result = list . elementAtOrElse ( 10 , { i -> \"null\" }) print ( result ) // \"null\" elementAtOrNull \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t ph\u1ea7n t\u1eed \u1edf v\u1ecb tr\u00ed i ho\u1eb7c null n\u1ebfu ch\u1ec9 s\u1ed1 n\u1eb1m ngo\u00e0i kho\u1ea3ng ch\u1ec9 s\u1ed1 c\u1ee7a collection var list = mutableListOf ( \"a\" , \"b\" , \"c\" , null , \"d\" ) var result = list . elementAtOrNull ( 10 ) print ( result ) // null first \u00b6 Tr\u1ea3 v\u1ec1 ph\u1ea7n t\u1eed \u0111\u1ea7u ti\u00ean th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o ho\u1eb7c throw NoSuchElementCollection n\u1ebfu kh\u00f4ng c\u00f3 ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic var list = mutableListOf ( 1 , 2 , 4 , 1 , 7 ) var result = list . first { it > 3 } print ( result ) // 4 firstOrNull \u00b6 Tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb \u0111\u1ea7u ti\u00ean th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o ho\u1eb7c tr\u1ea3 v\u1ec1 null n\u1ebfu kh\u00f4ng c\u00f3 ph\u1ea7n t\u1eeb n\u00e0o th\u1ecfa m\u00e3n logic var list = mutableListOf ( 1 , 2 , 4 , 1 , 7 ) var result = list . first { it > 9 } print ( result ) // null indexOf \u00b6 Tr\u1ea3 v\u1ec1 ch\u1ec9 s\u1ed1 \u0111\u1ea7u ti\u00ean c\u1ee7a ph\u1ea7n t\u1eed i ho\u1eb7c tr\u1ea3 v\u1ec1 -1 n\u1ebfu kh\u00f4ng c\u00f3 ph\u1ea7n t\u1eed n\u00e0o \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y var list = mutableListOf ( 1 , 2 , 4 , 1 , 7 ) var result = list . indexOf ( 3 ) print ( result ) // -1 indexOfFirst \u00b6 Tr\u1ea3 v\u1ec1 ch\u1ec9 s\u1ed1 \u0111\u1ea7u ti\u00ean c\u1ee7a ph\u1ea7n t\u1eed i th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o ho\u1eb7c tr\u1ea3 v\u1ec1 -1 n\u1ebfu kh\u00f4ng t\u00ecm th\u1ea5y ph\u1ea7n t\u1eed n\u00e0o var list = mutableListOf ( 1 , 2 , 4 , 1 , 7 ) var result = list . indexOfFirst { it % 2 == 0 } print ( result ) // 1 indexOfLast \u00b6 Tr\u1ea3 v\u1ec1 ch\u1ec9 s\u1ed1 c\u1ee7a ph\u1ea7n t\u1eed cu\u1ed1i c\u00f9ng th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o ho\u1eb7c tr\u1ea3 v\u1ec1 -1 n\u1ebfu kh\u00f4ng t\u00ecm th\u1ea5y ph\u1ea7n t\u1eed n\u00e0o var list = mutableListOf ( 1 , 2 , 4 , 1 , 7 ) var result = list . indexOfLast { it % 2 == 0 } print ( result ) // 2 last \u00b6 Tr\u1ea3 v\u1ec1 ph\u1ea7n t\u1eed cu\u1ed1i c\u00f9ng th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 1 , 2 , 4 , 1 , 7 ) var result = list . indexOfLast { it % 2 == 0 } print ( result ) // 4 lastIndexOf \u00b6 Tr\u1ea3 v\u1ec1 ch\u1ec9 s\u1ed1 cu\u1ed1i c\u00f9ng c\u1ee7a ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic ho\u1eb7c -1 n\u1ebfu kh\u00f4ng t\u00ecm th\u1ea5y ph\u1ea7n t\u1eed n\u00e0o var list = mutableListOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . lastIndexOf ( 2 ) print ( result ) //3 lastOrNull \u00b6 Tr\u1ea3 v\u1ec1 ph\u1ea7n t\u1eed cu\u1ed1i c\u00f9ng th\u1ecfa m\u00e3n logic ho\u1eb7c null n\u1ebfu kh\u00f4ng t\u00ecm th\u1ea5y ph\u1ea7n t\u1eed n\u00e0o var list = mutableListOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . lastOrNull ( 3 ) print ( result ) // null single \u00b6 Tr\u1ea3 v\u1ec1 ph\u1ea7n t\u1eed duy nh\u1ea5t th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o, throw NoSuchElementCollection n\u1ebfu kh\u00f4ng c\u00f3 ph\u1ea7n t\u1eed n\u00e0o th\u1ecfa m\u00e3n logic ho\u1eb7c throw IllegalArgumentException n\u1ebfu c\u00f3 nhi\u1ec1u h\u01a1n m\u1ed9t ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic var list = mutableListOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . single { it > 1 } print ( result ) // throw IllegalArgumentException singleOrNull \u00b6 Tr\u1ea3 v\u1ec1 ph\u1ea7n t\u1eed duy nh\u1ea5t th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o v\u00e0 tr\u1ea3 v\u1ec1 null n\u1ebfu kh\u00f4ng c\u00f3 ph\u1ea7n t\u1eed n\u00e0o th\u1ecfa m\u00e3n logic ho\u1eb7c c\u00f3 nhi\u1ec1u h\u01a1n m\u1ed9t ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic var list = mutableListOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . singleOrNull { it > 1 } print ( result ) // null C\u00e1c h\u00e0m sinh \u00b6 partition \u00b6 Chia collection ban \u0111\u1ea7u th\u00e0nh m\u1ed9t c\u1eb7p collection(Pair) v\u1edbi collection \u0111\u1ea7u ti\u00ean ch\u1ee9a nh\u1eefng ph\u1ea7n t\u1eed m\u00e0 logic truy\u1ec1n v\u00e0o tr\u1ea3 v\u1ec1 true c\u00f2n collection th\u1ee9 hai ch\u1ee9a nh\u1eefng ph\u1ea7n t\u1eed m\u00e0 logic truy\u1ec1n v\u00e0o tr\u1ea3 v\u1ec1 false var list = listOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . partition { it % 2 == 0 } print ( result ) // ([2, 4, 2], [1, 7]) plus \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t collection m\u1edbi bao g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a collection ban \u0111\u1ea7u v\u00e0 collection \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o. V\u00ec h\u00e0m plus l\u00e0 h\u00e0m overload c\u1ee7a to\u00e1n t\u1eed + n\u00ean ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng to\u00e1n t\u1eed + var list = listOf ( 1 , 2 , 4 ) var listA = listOf ( 3 , 4 ) var result = list . plus ( listA ) println ( result ) // [1, 2, 4, 3, 4] var result1 = list + listA println ( result1 ) // [1, 2, 4, 3, 4] zip \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t collection m\u1edbi l\u00e0 collection c\u1ee7a m\u1ed9t c\u1eb7p (Pair) b\u1eb1ng c\u00e1ch k\u1ebft h\u1ee3p t\u1eebng ph\u1ea7n t\u1eed c\u1ee7a collection ban \u0111\u1ea7u v\u1edbi t\u1eebng ph\u1ea7n t\u1eed c\u1ee7a collection \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o. Size c\u1ee7a collection m\u1edbi b\u1eb1ng size c\u1ee7a collection c\u00f3 size nh\u1ecf h\u01a1n var list = listOf ( 1 , 2 , 4 , 2 , 7 ) var listA = listOf ( 3 , 4 , 6 , 7 ) var result = list . zip ( listA ) println ( result ) // [(1, 3), (2, 4), (4, 6), (2, 7)] C\u00e1c h\u00e0m l\u00e0m vi\u1ec7c v\u1edbi th\u1ee9 t\u1ef1 \u00b6 reverse \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t collection v\u1edbi th\u1ee9 t\u1ef1 c\u00e1c ph\u1ea7n t\u1eed b\u1ecb \u0111\u1ea3o ng\u01b0\u1ee3c l\u1ea1i var list = listOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . reverse () println ( result ) // [7, 2, 4, 2, 1] sorted \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t list \u0111\u00e3 \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp theo chi\u1ec1u t\u0103ng d\u1ea7n var list = listOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . sorted () println ( result ) // [1, 2, 2, 4, 7] sortedBy \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t list c\u00e1c ph\u1ea7n t\u1eed \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp b\u1eb1ng logic truy\u1ec1n v\u00e0o, nh\u1eefng ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic s\u1ebd \u0111\u01b0\u1ee3c x\u1ebfp v\u00e0o cu\u1ed1i, nh\u1eefng ph\u1ea7n t\u1eed kh\u00f4ng th\u1ecfa m\u00e3n \u0111\u01b0\u1ee3c x\u1ebfp v\u00e0o \u0111\u1ea7u var list = listOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . sortedBy { it > 3 } println ( result ) // [1, 2, 2, 4, 7] sortedDescending \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t list \u0111\u00e3 \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp theo chi\u1ec1u gi\u1ea3m d\u1ea7n var list = listOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . sortedDescending () println ( result ) // [7, 4, 2, 2, 1] sortedByDescending \u00b6 Tr\u1ea3 v\u1ec1 m\u1ed9t list c\u00e1c ph\u1ea7n t\u1eed \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp b\u1eb1ng logic truy\u1ec1n v\u00e0o, nh\u1eefng ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic s\u1ebd \u0111\u01b0\u1ee3c x\u1ebfp v\u00e0o \u0111\u1ea7u, nh\u1eefng ph\u1ea7n t\u1eed kh\u00f4ng th\u1ecfa m\u00e3n \u0111\u01b0\u1ee3c x\u1ebfp v\u00e0o cu\u1ed1i var list = listOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . sortedByDescending { it > 3 } println ( result ) // [4, 7, 1, 2, 2]","title":"Kotlin Collection"},{"location":"kotlin/kotlin_collection/#gioi-thieu","text":"Kh\u00e1c v\u1edbi c\u00e1c nhi\u1ec1u ng\u00f4n ng\u1eef kh\u00e1c, Kotlin ph\u00e2n bi\u1ec7t r\u00f5 r\u00e0ng gi\u1eefa collection c\u00f3 th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb v\u00e0 collection kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb( list , set , map ...). B\u1edfi v\u1eady, vi\u1ec7c control ch\u00ednh x\u00e1c l\u00fac n\u00e0o d\u00f9ng lo\u1ea1i collection th\u1ebf n\u00e0o s\u1ebd gi\u00fap gi\u1ea3m thi\u1ec3u bug v\u00e0 vi\u1ec7c thi\u1ebft k\u1ebf c\u00e1c API \u0111\u01b0\u1ee3c t\u1ed1t h\u01a1n. Kotlin cung c\u1ea5p cho ch\u00fang ta m\u1ed9t t\u1eadp c\u00e1c native interface \u0111\u1ec3 l\u00e0m vi\u1ec7c v\u1edbi collection: Iterable: L\u1edbp cha. B\u1ea5t k\u1ef3 class n\u00e0o k\u1ebf th\u1eeba t\u1eeb interface n\u00e0y \u0111\u1ea1i di\u1ec7n cho m\u1ed9t chu\u1ed7i c\u00e1c ph\u1ea7n t\u1eed m\u00e0 ch\u00fang ta c\u00f3 th\u1ec3 duy\u1ec7t qua MutableIterable: Iterable h\u1ed7 tr\u1ee3 vi\u1ec7c x\u00f3a c\u00e1c ph\u1ea7n t\u1eed trong khi \u0111anh duy\u1ec7t Collection: Class \u0111\u1ea1i di\u1ec7n cho m\u1ed9t t\u1eadp c\u00e1c ph\u1ea7n t\u1eed. Ch\u00fang ta c\u00f3 th\u1ec3 truy c\u1eadp \u0111\u1ebfn c\u00e1c h\u00e0m m\u00e0 tr\u1ea3 v\u1ec1 size c\u1ee7a collection, ki\u1ec3m tra collection c\u00f3 r\u1ed7ng hay kh\u00f4ng,... T\u1ea5t c\u1ea3 c\u00e1c method cho lo\u1ea1i n\u00e0y ch\u1ec9 l\u00e0 l\u1ea5y d\u1eef li\u1ec7u, b\u1edfi v\u00ec collection l\u00e0 immutable. MutableCollection: Collection h\u1ed7 tr\u1ee3 vi\u1ec7c th\u00eam ho\u1eb7c x\u00f3a c\u00e1c ph\u1ea7n t\u1eed: c\u00e1c h\u00e0m add , remove , clear ... List: Collection c\u00f3 l\u1ebd l\u00e0 \u0111\u01b0\u1ee3c d\u00f9ng nhi\u1ec1u nh\u1ea5t. N\u00f3 \u0111\u1ea1i di\u1ec7n cho m\u1ed9t t\u1eadp c\u00e1c ph\u1ea7n t\u1eed c\u00f3 th\u1ee9 t\u1ef1. B\u1edfi v\u00ec c\u00f3 th\u1ee9 t\u1ef1, ta c\u00f3 th\u1ec3 truy c\u1eadp c\u00e1c ph\u1ea7n t\u1eed th\u00f4ng qua ch\u1ec9 s\u1ed1 MutableList: List h\u1ed7 tr\u1ee3 vi\u1ec7c th\u00eam ho\u1eb7c x\u00f3a c\u00e1c ph\u1ea7n t\u1eed Set: m\u1ed9t t\u1eadp c\u00e1c ph\u1ea7n t\u1eed kh\u00f4ng c\u00f3 th\u1ee9 t\u1ef1 v\u00e0 kh\u00f4ng h\u1ed7 tr\u1ee3 l\u01b0u c\u00e1c ph\u1ea7n t\u1eed tr\u00f9ng MutableSet: Set h\u1ed7 tr\u1ee3 vi\u1ec7c th\u00eam v\u00e0 x\u00f3a c\u00e1c ph\u1ea7n t\u1eed Map: m\u1ed9t t\u1eadp c\u00e1c c\u1eb7p key - value v\u1edbi key trong map l\u00e0 duy nh\u1ea5t MutableMap: Map h\u1ed7 tr\u1ee3 vi\u1ec7c th\u00eam v\u00e0 x\u00f3a c\u00e1c ph\u1ea7n t\u1eed V\u1edbi 2 ki\u1ec3u collection n\u00e0y, ta c\u1ea7n ph\u00e2n bi\u1ec7t r\u00f5 r\u00e0ng gi\u1eefa c\u00e1c kh\u00e1i ni\u1ec7m read only view c\u1ee7a mutable collection v\u00e0 m\u1ed9t collection th\u1ef1c s\u1ef1 immutable. Ph\u1ea7n n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c n\u00f3i \u1edf sau","title":"Gi\u1edbi thi\u1ec7u"},{"location":"kotlin/kotlin_collection/#khoi-tao","text":"List<out T> trong Kotlin l\u00e0 m\u1ed9t interface cung c\u1ea5p c\u00e1c thao t\u00e1c nh\u01b0 size , get .... C\u0169ng nh\u01b0 trong Java , List<out T> k\u1ebf th\u1eeba t\u1eeb Collection<T> v\u00e0 Iterable<T> . \u0110\u00e2y l\u00e0 immutable collection. var list : List < Int > = listOf ( 1 , 2 , 3 , 4 , 5 ) // [1,2,3,4,5] var list1 : List < Int > = List ( 5 , { index -> index + 1 }) // [2,3,4,5,6] list . add ( 5 ) //compiler s\u1ebd b\u00e1o l\u1ed7i list . clear () // compiler s\u1ebd b\u00e1o l\u1ed7i V\u00ec collection kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i, ch\u00fang ch\u1ec9 c\u00f3 th\u1ec3 kh\u1edfi t\u1ea1o gi\u00e1 tr\u1ecb l\u00fac khai b\u00e1o. Kotlin cung c\u1ea5p h\u00e0m kh\u1edfi t\u1ea1o ho\u1eb7c ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng h\u00e0m th\u01b0 vi\u1ec7n chu\u1ea9n c\u00f3 s\u1eb5n listOf() , setOf() v\u00e0 mapOf() . V\u1edbi mapOf() , ta s\u1eed d\u1ee5ng c\u00fa ph\u00e1p mapOf(a to b, c to d) . C\u00f9ng v\u1edbi \u0111\u00f3, c\u00e1c h\u00e0m add() , clear() c\u0169ng s\u1ebd kh\u00f4ng c\u00f3 \u0111\u1ed1i v\u1edbi immutable collection. var list : MutableList < Int > = mutableListOf ( 1 , 2 , 3 , 4 , 5 ) // [1,2,3,4,5] var list1 : MutableList < Int > = MutableList ( 5 , { index -> index + 1 }) // [2,3,4,5,6] list . add ( 5 ) // OK list . clear () // OK V\u1edbi mutable collection, ch\u00fang ta c\u00f3 MutableList<T> , interface n\u00e0y cung c\u1ea5p th\u00eam c\u00e1c thao t\u00e1c nh\u01b0 add , clear ... Vi\u1ec7c ph\u00e2n chia c\u0169ng t\u01b0\u01a1ng t\u1ef1 v\u1edbi Set<out T>/MutableSet<T> v\u00e0 Map<K, out V>/MutableMap<K, V> .","title":"Kh\u1edfi t\u1ea1o"},{"location":"kotlin/kotlin_collection/#phan-biet","text":"Ch\u00fang ta c\u00f9ng xem vd sau: val numbers : MutableList < Int > = mutableListOf ( 1 , 2 , 3 ) val readOnlyView : List < Int > = numbers println ( numbers ) // prints \"[1, 2, 3]\" numbers . add ( 4 ) println ( readOnlyView ) // prints \"[1, 2, 3, 4]\" readOnlyView . clear () // -> compiler b\u00e1o l\u1ed7i numbers . clear () // OK readOnlyView kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a list m\u00e0 ch\u1ec9 c\u00f3 th\u1ec3 xem \u0111\u01b0\u1ee3c gi\u00e1 tr\u1ecb c\u1ee7a list. Gi\u00e1 tr\u1ecb c\u1ee7a list thay \u0111\u1ed5i khi numbers thay \u0111\u1ed5i gi\u00e1 tr\u1ecb b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng add ho\u1eb7c clear . Khi \u0111\u00f3, gi\u00e1 tr\u1ecb c\u1ee7a readOnlyView khi in ra c\u0169ng s\u1ebd thay \u0111\u1ed5i. \u0110i\u1ec1u \u0111\u00f3 b\u1edfi v\u00ec c\u1ea3 2 bi\u1ebfn numbers v\u00e0 readOnlyView \u0111\u1ec1u c\u00f9ng tr\u1ecf v\u00e0o c\u00f9ng m\u1ed9t list v\u00e0 readOnlyView s\u1ebd thay \u0111\u1ed5i n\u1ebfu list \u0111\u01b0\u1ee3c tr\u1ecf v\u00e0o thay \u0111\u1ed5i. Trong tr\u01b0\u1eddng h\u1ee3p ch\u1ec9 c\u00f3 duy nh\u1ea5t 1 tham chi\u1ebfu t\u1edbi list, ch\u00fang ta c\u00f3 th\u1ec3 coi collection \u0111\u00f3 ho\u00e0n to\u00e0n l\u00e0 immutable collection. Trong tr\u01b0\u1eddng h\u1ee3p b\u1ea1n ch\u1ec9 mu\u1ed1n thay \u0111\u1ed5i collection \u1edf b\u00ean trong \u0111\u1ed1i t\u01b0\u1ee3ng m\u00e0 kh\u00f4ng mu\u1ed1n b\u1ecb thay \u0111\u1ed5i t\u1eeb b\u00ean ngo\u00e0i: class Controller { private val _items = mutableListOf < String >() val items : List < String > get () = _items . toList () } M\u1ed9t s\u1ed1 extension method quen thu\u1ed9c val items = listOf ( 1 , 2 , 3 , 4 ) items . first () == 1 items . last () == 4 items . filter { it % 2 == 0 } // returns [2, 4] val rwList = mutableListOf ( 1 , 2 , 3 ) rwList . requireNoNulls () // returns [1, 2, 3] if ( rwList . none { it > 6 }) println ( \"No items above 6\" ) // prints \"No items above 6\" val item = rwList . firstOrNull () V\u1edbi map , ta c\u00f3 th\u1ec3 kh\u1edfi t\u1ea1o v\u00e0 truy c\u1eadp nh\u01b0 sau: val readWriteMap = hashMapOf ( \"foo\" to 1 , \"bar\" to 2 ) println ( readWriteMap [ \"foo\" ]) // prints \"1\" val snapshot : Map < String , Int > = HashMap ( readWriteMap )","title":"Ph\u00e2n bi\u1ec7t"},{"location":"kotlin/kotlin_collection/#mot-so-ham-pho-bien","text":"\u0110\u00e2y l\u00e0 c\u00e1c h\u00e0m n\u1eb1m trong th\u01b0 vi\u1ec7n chu\u1ea9n \u0111\u01b0\u1ee3c Kotlin cung c\u1ea5p v\u1edbi nhi\u1ec1u lo\u1ea1i collection kh\u00e1c nhau","title":"M\u1ed9t s\u1ed1 h\u00e0m ph\u1ed5 bi\u1ebfn"},{"location":"kotlin/kotlin_collection/#cac-ham-lam-viec-voi-tong-the","text":"","title":"C\u00e1c h\u00e0m l\u00e0m vi\u1ec7c v\u1edbi t\u1ed5ng th\u1ec3"},{"location":"kotlin/kotlin_collection/#any","text":"Tr\u1ea3 v\u1ec1 true n\u1ebfu c\u00f3 \u00edt nh\u1ea5t 1 ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 5 , 7 ) list . any { it == 3 } // true","title":"any"},{"location":"kotlin/kotlin_collection/#all","text":"Tr\u1ea3 v\u1ec1 true n\u1ebfu t\u1ea5t c\u1ea3 c\u00e1c ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 6 , 9 ) list . all { it % 3 == 0 } //true","title":"all"},{"location":"kotlin/kotlin_collection/#count","text":"Tr\u1ea3 v\u1ec1 s\u1ed1 ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 5 , 9 ) list . count { it % 3 == 0 } // 2","title":"count"},{"location":"kotlin/kotlin_collection/#fold","text":"T\u1ed5ng c\u1ee7a c\u00e1c gi\u00e1 tr\u1ecb b\u1eaft \u0111\u1ea7u t\u1eeb gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o v\u00e0 \u00e1p d\u1ee5ng vi\u1ec7c t\u00ednh to\u00e1n \u1edf h\u00e0m \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o v\u1edbi c\u00e1c ph\u1ea7n t\u1eed t\u1eeb \u0111\u1ea7u \u0111\u1ebfn cu\u1ed1i collection. var list = mutableListOf ( 3 , 5 , 6 ) val result = list . fold ( 0 , { total : Int , i : Int -> total + i }) print ( result ) // 14 Nh\u01b0 \u1edf v\u00ed d\u1ee5 tr\u00ean: 0 l\u00e0 gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o, total l\u00e0 t\u1ed5ng c\u1ee7a qu\u00e1 tr\u00ecnh, i l\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a t\u1eebng ph\u1ea7n t\u1eed, l\u1ea7n l\u01b0\u1ee3t l\u00e0 3 , 5 , 6","title":"fold"},{"location":"kotlin/kotlin_collection/#foldright","text":"T\u01b0\u01a1ng t\u1ef1 nh\u01b0 fold nh\u01b0ng duy\u1ec7t theo th\u1ee9 t\u1ef1 t\u1eeb cu\u1ed1i tr\u1edf v\u1ec1 \u0111\u1ea7u var list = mutableListOf ( 3 , 5 , 6 ) val result = list . foldRight ( 0 , { total : Int , i : Int -> total + i }) print ( result ) // 14 Gi\u00e1 tr\u1ecb l\u1ea7n l\u01b0\u1ee3t c\u1ee7a i b\u00e2y gi\u1edd l\u00e0: 6 , 5 , 3","title":"foldRight"},{"location":"kotlin/kotlin_collection/#foreach","text":"Th\u1ef1c hi\u1ec7n h\u00e0m \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o v\u1edbi m\u1ed7i ph\u1ea7n t\u1eed trong collection: var list = mutableListOf ( 3 , 5 , 6 ) list . forEach { println ( it ) }","title":"forEach"},{"location":"kotlin/kotlin_collection/#foreachindexed","text":"T\u01b0\u01a1ng t\u1ef1 nh\u01b0 forEach , tuy nhi\u00ean c\u00f3 th\u00eam ch\u1ec9 s\u1ed1 c\u1ee7a c\u00e1c ph\u1ea7n t\u1eed: var list = mutableListOf ( 3 , 5 , 6 ) list . forEachIndexed { index : Int , value : Int -> println ( \"position $index: $value\" ) }","title":"forEachIndexed"},{"location":"kotlin/kotlin_collection/#max","text":"Tr\u1ea3 v\u1ec1 ph\u1ea7n t\u1eed l\u1edbn nh\u1ea5t c\u1ee7a collection ho\u1eb7c null n\u1ebfu collection r\u1ed7ng var list = mutableListOf ( 3 , 5 , 6 ) print ( list . max ()) // 6","title":"max"},{"location":"kotlin/kotlin_collection/#min","text":"Tr\u1ea3 v\u1ec1 ph\u1ea7n t\u1eed nh\u1ecf nh\u1ea5t c\u1ee7a collection ho\u1eb7c null n\u1ebfu collection r\u1ed7ng var list = mutableListOf ( 3 , 5 , 6 ) print ( list . min ()) // 3","title":"min"},{"location":"kotlin/kotlin_collection/#none","text":"Tr\u1ea3 v\u1ec1 true n\u1ebfu kh\u00f4ng c\u00f3 ph\u1ea7n t\u1eed n\u00e0o th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 5 , 6 ) print ( list . none { it > 8 })","title":"none"},{"location":"kotlin/kotlin_collection/#reduce","text":"T\u01b0\u01a1ng t\u1ef1 nh\u01b0 fold nh\u01b0ng kh\u00f4ng c\u00f3 gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o m\u00e0 ch\u1ec9 \u00e1p d\u1ee5ng v\u1edbi c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a d\u00e3y var list = mutableListOf ( 3 , 5 , 6 ) var result = list . reduce { total : Int , i : Int -> total + i } print ( result ) // 14","title":"reduce"},{"location":"kotlin/kotlin_collection/#reduceright","text":"T\u01b0\u01a1ng t\u1ef1 nh\u01b0 reduce nh\u01b0ng duy\u1ec7t t\u1eeb cu\u1ed1i d\u00e3y tr\u1edf v\u1ec1 \u0111\u1ea7u var list = mutableListOf ( 3 , 5 , 6 ) var result = list . reduce { total : Int , i : Int -> total + i } print ( result ) // 14","title":"reduceRight"},{"location":"kotlin/kotlin_collection/#sumby","text":"Tr\u1ea3 v\u1ec1 t\u1ed5ng c\u1ee7a t\u1ea5t c\u1ea3 c\u00e1c ph\u1ea7n t\u1eed nh\u01b0ng \u0111\u01b0\u1ee3c x\u1eed l\u00fd th\u00f4ng qua logic \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 5 , 7 ) var result = list . sumBy { it % 3 } print ( result ) // 3 result \u1edf tr\u00ean l\u00e0 t\u1ed5ng c\u1ee7a c\u00e1c s\u1ed1 d\u01b0 c\u1ee7a d\u01b0 c\u1ee7a t\u1eebng ph\u1ea7n t\u1eed","title":"sumBy"},{"location":"kotlin/kotlin_collection/#cac-ham-loc","text":"","title":"C\u00e1c h\u00e0m l\u1ecdc"},{"location":"kotlin/kotlin_collection/#drop","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t list bao g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c ph\u1ea7n t\u1eed tr\u1eeb n ph\u1ea7n t\u1eed \u0111\u1ea7u ti\u00ean var list = mutableListOf ( 3 , 5 , 6 , 7 , 9 ) var result = list . drop ( 3 ) print ( result ) // [7, 9]","title":"drop"},{"location":"kotlin/kotlin_collection/#dropwhile","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t list bao g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c ph\u1ea7n t\u1eed tr\u1eeb c\u00e1c ph\u1ea7n t\u1eed \u0111\u1ea7u ti\u00ean m\u00e0 th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . dropWhile { it % 3 == 0 } print ( result ) // [7, 9] Trong v\u00ed d\u1ee5 tr\u00ean, c\u00e1c ph\u1ea7n t\u1eeb \u0111\u1ea7u ti\u00ean m\u00e0 th\u1ecfa m\u00e3n y\u00eau c\u1ea7u s\u1ebd b\u1ecb lo\u1ea1i ra.","title":"dropWhile"},{"location":"kotlin/kotlin_collection/#droplastwhile","text":"T\u01b0\u01a1ng t\u1ef1 nh\u01b0 dropWhile tuy nhi\u00ean s\u1ebd lo\u1ea1i c\u00e1c ph\u1ea7n t\u1eed cu\u1ed1i n\u1ebfu th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . dropLastWhile { it % 3 == 0 } print ( result ) // [3, 6, 6, 7]","title":"dropLastWhile"},{"location":"kotlin/kotlin_collection/#filter","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t list c\u00e1c ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . filter { it % 3 == 0 } print ( result ) // [3, 6, 6, 9]","title":"filter"},{"location":"kotlin/kotlin_collection/#filternot","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t list c\u00e1c ph\u1ea7n t\u1eed kh\u00f4ng th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . filterNot { it % 3 == 0 } print ( result ) // [7]","title":"filterNot"},{"location":"kotlin/kotlin_collection/#filternotnull","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t list c\u00e1c ph\u1ea7n t\u1eed tr\u1eeb c\u00e1c ph\u1ea7n t\u1eed null var list = mutableListOf ( 3 , 6 , 6 , null , 9 ) var result = list . filterNotNull () print ( result ) // [3, 6, 6, 9]","title":"filterNotNull"},{"location":"kotlin/kotlin_collection/#slice","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t list c\u00e1c ph\u1ea7n t\u1eed \u1edf c\u00e1c v\u1ecb tr\u00ed x\u00e1c \u0111\u1ecbnh var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . slice ( listOf ( 0 , 1 , 3 , 4 )) print ( result ) // [3, 6, 6, 9]","title":"slice"},{"location":"kotlin/kotlin_collection/#take","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t list g\u1ed3m n ph\u1ea7n t\u1eed \u0111\u1ea7u ti\u00ean var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . take ( 4 ) print ( result ) // [3, 6, 6, 7]","title":"take"},{"location":"kotlin/kotlin_collection/#takelast","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t list g\u1ed3m n ph\u1ea7n t\u1eed cu\u1ed1i c\u00f9ng var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . takeLast ( 4 ) print ( result ) // [6, 6, 7, 9]","title":"takeLast"},{"location":"kotlin/kotlin_collection/#takewhile","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t list bao g\u1ed3m c\u00e1c ph\u1ea7n t\u1eed \u0111\u1ea7u ti\u00ean m\u00e0 th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . takeWhile { it % 3 == 0 } print ( result ) // [3, 6, 6]","title":"takeWhile"},{"location":"kotlin/kotlin_collection/#cac-ham-chuyen-oi","text":"","title":"C\u00e1c h\u00e0m chuy\u1ec3n \u0111\u1ed5i"},{"location":"kotlin/kotlin_collection/#flatmap","text":"Duy\u1ec7t qua t\u1ea5t c\u1ea3 c\u00e1c ph\u1ea7n t\u1eed v\u00e0 t\u1ea1o ra m\u1ed9t collection m\u1edbi cho m\u1ed7i ph\u1ea7n t\u1eed b\u1eb1ng c\u00e1ch \u00e1p d\u1ee5ng logic truy\u1ec1n v\u00e0o, cu\u1ed1i c\u00f9ng tr\u1ea3 v\u1ec1 m\u1ed9t list bao g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a c\u00e1c list v\u1eeba \u0111\u01b0\u1ee3c t\u1ea1o ra var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . flatMap { listOf ( it , it + 1 , it + 2 ) } print ( result ) // [3, 4, 5, 6, 7, 8, 6, 7, 8, 7, 8, 9, 9, 10, 11]","title":"flatMap"},{"location":"kotlin/kotlin_collection/#groupby","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t map b\u1eb1ng c\u00e1ch \u00e1p d\u1ee5ng logic truy\u1ec1n v\u00e0o v\u00e0 ph\u00e2n lo\u1ea1i c\u00e1c ph\u1ea7n t\u1eed trong collection th\u00e0nh c\u00e1c nh\u00f3m var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . groupBy { if ( it % 2 == 0 ) \"even\" else \"odd\" } print ( result ) // {odd=[3, 7, 9], even=[6, 6]}","title":"groupBy"},{"location":"kotlin/kotlin_collection/#map","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t list l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a logic chuy\u1ec3n \u0111\u1ed5i \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o \u00e1p d\u1ee5ng v\u1edbi t\u1ea5t c\u1ea3 c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a collection ban \u0111\u1ea7u var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . map { it + 1 } print ( result ) //[4, 7, 7, 8, 10]","title":"map"},{"location":"kotlin/kotlin_collection/#mapindexed","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t list l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a logic chuy\u1ec3n \u0111\u1ed5i \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o \u00e1p d\u1ee5ng v\u1edbi t\u1ea5t c\u1ea3 c\u00e1c ph\u1ea7n t\u1eed v\u00e0 ch\u1ec9 s\u1ed1 c\u1ee7a c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a collection ban \u0111\u1ea7u var list = mutableListOf ( 3 , 6 , 6 , 7 , 9 ) var result = list . mapIndexed { index , value -> value + index } print ( result ) //[3, 7, 8, 10, 13]","title":"mapIndexed"},{"location":"kotlin/kotlin_collection/#cac-ham-lam-viec-voi-cac-phan-tu","text":"","title":"C\u00e1c h\u00e0m l\u00e0m vi\u1ec7c v\u1edbi c\u00e1c ph\u1ea7n t\u1eed"},{"location":"kotlin/kotlin_collection/#contains","text":"Tr\u1ea3 v\u1ec1 true n\u1ebfu ph\u1ea7n t\u1eed n\u1eb1m trong collection var list = mutableListOf ( \"a\" , \"b\" , \"c\" , null , \"d\" ) var result = list . contains ( \"a\" ) print ( result ) //true","title":"contains"},{"location":"kotlin/kotlin_collection/#elementat","text":"Tr\u1ea3 v\u1ec1 ph\u1ea7n t\u1eed t\u1ea1i v\u1ecb tr\u00ed i ho\u1eb7c throw IndexOutOfBoundException n\u1ebfu i kh\u00f4ng n\u1eb1m trong kho\u1ea3ng ch\u1ec9 s\u1ed1 c\u1ee7a collection var list = mutableListOf ( \"a\" , \"b\" , \"c\" , null , \"d\" ) var result = list . elementAt ( 1 ) print ( result ) // \"a\"","title":"elementAt"},{"location":"kotlin/kotlin_collection/#elementatorelse","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t ph\u1ea7n t\u1eed \u1edf v\u1ecb tr\u00ed i ho\u1eb7c th\u1ef1c hi\u1ec7n logic \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o n\u1ebfu ch\u1ec9 s\u1ed1 c\u1ee7a collection kh\u00f4ng n\u1eb1m trong kho\u1ea3ng ch\u1ec9 s\u1ed1 c\u1ee7a collection var list = mutableListOf ( \"a\" , \"b\" , \"c\" , null , \"d\" ) var result = list . elementAtOrElse ( 10 , { i -> \"null\" }) print ( result ) // \"null\"","title":"elementAtOrElse"},{"location":"kotlin/kotlin_collection/#elementatornull","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t ph\u1ea7n t\u1eed \u1edf v\u1ecb tr\u00ed i ho\u1eb7c null n\u1ebfu ch\u1ec9 s\u1ed1 n\u1eb1m ngo\u00e0i kho\u1ea3ng ch\u1ec9 s\u1ed1 c\u1ee7a collection var list = mutableListOf ( \"a\" , \"b\" , \"c\" , null , \"d\" ) var result = list . elementAtOrNull ( 10 ) print ( result ) // null","title":"elementAtOrNull"},{"location":"kotlin/kotlin_collection/#first","text":"Tr\u1ea3 v\u1ec1 ph\u1ea7n t\u1eed \u0111\u1ea7u ti\u00ean th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o ho\u1eb7c throw NoSuchElementCollection n\u1ebfu kh\u00f4ng c\u00f3 ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic var list = mutableListOf ( 1 , 2 , 4 , 1 , 7 ) var result = list . first { it > 3 } print ( result ) // 4","title":"first"},{"location":"kotlin/kotlin_collection/#firstornull","text":"Tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb \u0111\u1ea7u ti\u00ean th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o ho\u1eb7c tr\u1ea3 v\u1ec1 null n\u1ebfu kh\u00f4ng c\u00f3 ph\u1ea7n t\u1eeb n\u00e0o th\u1ecfa m\u00e3n logic var list = mutableListOf ( 1 , 2 , 4 , 1 , 7 ) var result = list . first { it > 9 } print ( result ) // null","title":"firstOrNull"},{"location":"kotlin/kotlin_collection/#indexof","text":"Tr\u1ea3 v\u1ec1 ch\u1ec9 s\u1ed1 \u0111\u1ea7u ti\u00ean c\u1ee7a ph\u1ea7n t\u1eed i ho\u1eb7c tr\u1ea3 v\u1ec1 -1 n\u1ebfu kh\u00f4ng c\u00f3 ph\u1ea7n t\u1eed n\u00e0o \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y var list = mutableListOf ( 1 , 2 , 4 , 1 , 7 ) var result = list . indexOf ( 3 ) print ( result ) // -1","title":"indexOf"},{"location":"kotlin/kotlin_collection/#indexoffirst","text":"Tr\u1ea3 v\u1ec1 ch\u1ec9 s\u1ed1 \u0111\u1ea7u ti\u00ean c\u1ee7a ph\u1ea7n t\u1eed i th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o ho\u1eb7c tr\u1ea3 v\u1ec1 -1 n\u1ebfu kh\u00f4ng t\u00ecm th\u1ea5y ph\u1ea7n t\u1eed n\u00e0o var list = mutableListOf ( 1 , 2 , 4 , 1 , 7 ) var result = list . indexOfFirst { it % 2 == 0 } print ( result ) // 1","title":"indexOfFirst"},{"location":"kotlin/kotlin_collection/#indexoflast","text":"Tr\u1ea3 v\u1ec1 ch\u1ec9 s\u1ed1 c\u1ee7a ph\u1ea7n t\u1eed cu\u1ed1i c\u00f9ng th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o ho\u1eb7c tr\u1ea3 v\u1ec1 -1 n\u1ebfu kh\u00f4ng t\u00ecm th\u1ea5y ph\u1ea7n t\u1eed n\u00e0o var list = mutableListOf ( 1 , 2 , 4 , 1 , 7 ) var result = list . indexOfLast { it % 2 == 0 } print ( result ) // 2","title":"indexOfLast"},{"location":"kotlin/kotlin_collection/#last","text":"Tr\u1ea3 v\u1ec1 ph\u1ea7n t\u1eed cu\u1ed1i c\u00f9ng th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o var list = mutableListOf ( 1 , 2 , 4 , 1 , 7 ) var result = list . indexOfLast { it % 2 == 0 } print ( result ) // 4","title":"last"},{"location":"kotlin/kotlin_collection/#lastindexof","text":"Tr\u1ea3 v\u1ec1 ch\u1ec9 s\u1ed1 cu\u1ed1i c\u00f9ng c\u1ee7a ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic ho\u1eb7c -1 n\u1ebfu kh\u00f4ng t\u00ecm th\u1ea5y ph\u1ea7n t\u1eed n\u00e0o var list = mutableListOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . lastIndexOf ( 2 ) print ( result ) //3","title":"lastIndexOf"},{"location":"kotlin/kotlin_collection/#lastornull","text":"Tr\u1ea3 v\u1ec1 ph\u1ea7n t\u1eed cu\u1ed1i c\u00f9ng th\u1ecfa m\u00e3n logic ho\u1eb7c null n\u1ebfu kh\u00f4ng t\u00ecm th\u1ea5y ph\u1ea7n t\u1eed n\u00e0o var list = mutableListOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . lastOrNull ( 3 ) print ( result ) // null","title":"lastOrNull"},{"location":"kotlin/kotlin_collection/#single","text":"Tr\u1ea3 v\u1ec1 ph\u1ea7n t\u1eed duy nh\u1ea5t th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o, throw NoSuchElementCollection n\u1ebfu kh\u00f4ng c\u00f3 ph\u1ea7n t\u1eed n\u00e0o th\u1ecfa m\u00e3n logic ho\u1eb7c throw IllegalArgumentException n\u1ebfu c\u00f3 nhi\u1ec1u h\u01a1n m\u1ed9t ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic var list = mutableListOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . single { it > 1 } print ( result ) // throw IllegalArgumentException","title":"single"},{"location":"kotlin/kotlin_collection/#singleornull","text":"Tr\u1ea3 v\u1ec1 ph\u1ea7n t\u1eed duy nh\u1ea5t th\u1ecfa m\u00e3n logic truy\u1ec1n v\u00e0o v\u00e0 tr\u1ea3 v\u1ec1 null n\u1ebfu kh\u00f4ng c\u00f3 ph\u1ea7n t\u1eed n\u00e0o th\u1ecfa m\u00e3n logic ho\u1eb7c c\u00f3 nhi\u1ec1u h\u01a1n m\u1ed9t ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic var list = mutableListOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . singleOrNull { it > 1 } print ( result ) // null","title":"singleOrNull"},{"location":"kotlin/kotlin_collection/#cac-ham-sinh","text":"","title":"C\u00e1c h\u00e0m sinh"},{"location":"kotlin/kotlin_collection/#partition","text":"Chia collection ban \u0111\u1ea7u th\u00e0nh m\u1ed9t c\u1eb7p collection(Pair) v\u1edbi collection \u0111\u1ea7u ti\u00ean ch\u1ee9a nh\u1eefng ph\u1ea7n t\u1eed m\u00e0 logic truy\u1ec1n v\u00e0o tr\u1ea3 v\u1ec1 true c\u00f2n collection th\u1ee9 hai ch\u1ee9a nh\u1eefng ph\u1ea7n t\u1eed m\u00e0 logic truy\u1ec1n v\u00e0o tr\u1ea3 v\u1ec1 false var list = listOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . partition { it % 2 == 0 } print ( result ) // ([2, 4, 2], [1, 7])","title":"partition"},{"location":"kotlin/kotlin_collection/#plus","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t collection m\u1edbi bao g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a collection ban \u0111\u1ea7u v\u00e0 collection \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o. V\u00ec h\u00e0m plus l\u00e0 h\u00e0m overload c\u1ee7a to\u00e1n t\u1eed + n\u00ean ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng to\u00e1n t\u1eed + var list = listOf ( 1 , 2 , 4 ) var listA = listOf ( 3 , 4 ) var result = list . plus ( listA ) println ( result ) // [1, 2, 4, 3, 4] var result1 = list + listA println ( result1 ) // [1, 2, 4, 3, 4]","title":"plus"},{"location":"kotlin/kotlin_collection/#zip","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t collection m\u1edbi l\u00e0 collection c\u1ee7a m\u1ed9t c\u1eb7p (Pair) b\u1eb1ng c\u00e1ch k\u1ebft h\u1ee3p t\u1eebng ph\u1ea7n t\u1eed c\u1ee7a collection ban \u0111\u1ea7u v\u1edbi t\u1eebng ph\u1ea7n t\u1eed c\u1ee7a collection \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o. Size c\u1ee7a collection m\u1edbi b\u1eb1ng size c\u1ee7a collection c\u00f3 size nh\u1ecf h\u01a1n var list = listOf ( 1 , 2 , 4 , 2 , 7 ) var listA = listOf ( 3 , 4 , 6 , 7 ) var result = list . zip ( listA ) println ( result ) // [(1, 3), (2, 4), (4, 6), (2, 7)]","title":"zip"},{"location":"kotlin/kotlin_collection/#cac-ham-lam-viec-voi-thu-tu","text":"","title":"C\u00e1c h\u00e0m l\u00e0m vi\u1ec7c v\u1edbi th\u1ee9 t\u1ef1"},{"location":"kotlin/kotlin_collection/#reverse","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t collection v\u1edbi th\u1ee9 t\u1ef1 c\u00e1c ph\u1ea7n t\u1eed b\u1ecb \u0111\u1ea3o ng\u01b0\u1ee3c l\u1ea1i var list = listOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . reverse () println ( result ) // [7, 2, 4, 2, 1]","title":"reverse"},{"location":"kotlin/kotlin_collection/#sorted","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t list \u0111\u00e3 \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp theo chi\u1ec1u t\u0103ng d\u1ea7n var list = listOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . sorted () println ( result ) // [1, 2, 2, 4, 7]","title":"sorted"},{"location":"kotlin/kotlin_collection/#sortedby","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t list c\u00e1c ph\u1ea7n t\u1eed \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp b\u1eb1ng logic truy\u1ec1n v\u00e0o, nh\u1eefng ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic s\u1ebd \u0111\u01b0\u1ee3c x\u1ebfp v\u00e0o cu\u1ed1i, nh\u1eefng ph\u1ea7n t\u1eed kh\u00f4ng th\u1ecfa m\u00e3n \u0111\u01b0\u1ee3c x\u1ebfp v\u00e0o \u0111\u1ea7u var list = listOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . sortedBy { it > 3 } println ( result ) // [1, 2, 2, 4, 7]","title":"sortedBy"},{"location":"kotlin/kotlin_collection/#sorteddescending","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t list \u0111\u00e3 \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp theo chi\u1ec1u gi\u1ea3m d\u1ea7n var list = listOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . sortedDescending () println ( result ) // [7, 4, 2, 2, 1]","title":"sortedDescending"},{"location":"kotlin/kotlin_collection/#sortedbydescending","text":"Tr\u1ea3 v\u1ec1 m\u1ed9t list c\u00e1c ph\u1ea7n t\u1eed \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp b\u1eb1ng logic truy\u1ec1n v\u00e0o, nh\u1eefng ph\u1ea7n t\u1eed th\u1ecfa m\u00e3n logic s\u1ebd \u0111\u01b0\u1ee3c x\u1ebfp v\u00e0o \u0111\u1ea7u, nh\u1eefng ph\u1ea7n t\u1eed kh\u00f4ng th\u1ecfa m\u00e3n \u0111\u01b0\u1ee3c x\u1ebfp v\u00e0o cu\u1ed1i var list = listOf ( 1 , 2 , 4 , 2 , 7 ) var result = list . sortedByDescending { it > 3 } println ( result ) // [4, 7, 1, 2, 2]","title":"sortedByDescending"},{"location":"kotlin/kotlin_data_class/","text":"1. Gi\u1edbi thi\u1ec7u \u00b6 Trong m\u1ed9t \u1ee9ng d\u1ee5ng, ta c\u1ea7n ph\u1ea3i \u0111\u1ecbnh ngh\u0129a r\u1ea5t nhi\u1ec1u c\u00e1c class ch\u1ec9 nh\u1eb1m m\u1ee5c \u0111\u00edch l\u01b0u tr\u1eef d\u1eef li\u1ec7u. V\u1edbi Java , vi\u1ec7c khai b\u00e1o c\u00e1c class nh\u01b0 th\u1ebf kh\u00e1 l\u00e0 m\u1ea5t th\u1eddi gian: Java public class User { private String name ; private int age ; public User ( String name , int age ) { this . name = name ; this . age = age ; } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public int getAge () { return age ; } public void setAge ( int age ) { this . age = age ; } } \u0110\u1ec3 t\u1ed1i \u01b0u h\u00f3a vi\u1ec7c n\u00e0y, Kotlin cung c\u1ea5p c\u00e1c data class. Ch\u00fang \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u b\u1eb1ng t\u1eeb kh\u00f3a data khi khai b\u00e1o class: data class User ( val name : String , val age : Int ) T\u1eeb \u0111\u00f3, compiler s\u1ebd t\u1ef1 \u0111\u1ed9ng suy ra c\u00e1c function t\u1eeb c\u00e1c param khai b\u00e1o trong primary constructor: function equals() , hashCode() function toString() d\u01b0\u1edbi d\u1ea1ng User(name=John, age=42) c\u00e1c function componentN() . C\u00e1c h\u00e0m n\u00e0y \u0111\u01b0\u1ee3c sinh ra d\u1ef1a tr\u00ean s\u1ed1 l\u01b0\u1ee3ng c\u00e1c property c\u1ee7a class v\u1edbi N l\u00e0 s\u1ed1 th\u1ee9 t\u1ef1 c\u1ee7a c\u00e1c thu\u1ed9c t\u00ednh. Nh\u01b0 trong tr\u01b0\u1eddng h\u1ee3p tr\u00ean: var user : User = User ( \"tu\" , 12 ) user . component1 () // property 'name', ki\u1ec3u 'String' user . component2 () // property 'age', ki\u1ec3u 'Int' function copy() : S\u1ebd \u0111\u01b0\u1ee3c n\u00f3i \u1edf ph\u00eda sau N\u1ebfu m\u1ed9t trong c\u00e1c function \u0111\u00f3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a m\u1ed9t c\u00e1ch t\u01b0\u1eddng minh trong body class, ch\u00fang s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c sinh ra. \u0110\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c t\u00ednh nh\u1ea5t qu\u00e1n v\u00e0 c\u00e1c h\u00e0nh vi c\u00f3 \u00fd ngh\u0129a c\u1ee7a code \u0111\u01b0\u1ee3c sinh ra, data class ph\u1ea3i th\u1ecfa m\u00e3n nh\u1eefng y\u00eau c\u1ea7u sau: Primary constructor ph\u1ea3i c\u00f3 \u00edt nh\u1ea5t 1 param T\u1ea5t c\u1ea3 param c\u1ee7a primary constructor ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o l\u00e0 var ho\u1eb7c val Data class kh\u00f4ng th\u1ec3 l\u00e0 abstract , open , sealed hay inner class. Data class ch\u1ec9 c\u00f3 th\u1ec3 implement c\u00e1c interface (Tr\u01b0\u1edbc phi\u00ean b\u1ea3n 1.1) Nh\u01b0 \u0111\u00e3 n\u00f3i trong ph\u1ea7n constructor , n\u1ebfu t\u1ea5t c\u1ea3 c\u00e1c param c\u1ee7a primary constructor c\u00f3 gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh, compiler s\u1ebd t\u1ef1 sinh ra th\u00eam m\u1ed9t constructor kh\u00f4ng c\u00f3 tham s\u1ed1 s\u1eed d\u1ee5ng c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh \u0111\u00e3 khai b\u00e1o \u1edf primary constructor: data class User ( val name : String = \"\" , val age : Int = 0 ) 2. Function copy() \u00b6 Trong tr\u01b0\u1eddng h\u1ee3p b\u1ea1n c\u1ea7n copy m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng nh\u01b0ng l\u1ea1i mu\u1ed1n thay \u0111\u1ed5i m\u1ed9t s\u1ed1 property v\u00e0 gi\u1eef nguy\u00ean ph\u1ea7n c\u00f2n l\u1ea1i. H\u00e0m copy() \u0111\u01b0\u1ee3c sinh ra l\u00e0 \u0111\u1ec3 l\u00e0m \u0111i\u1ec1u \u0111\u00f3. V\u1edbi VD v\u1ec1 \u0111\u1ed1i t\u01b0\u1ee3ng User \u1edf tr\u00ean, h\u00e0m copy() s\u1ebd \u0111\u01b0\u1ee3c implement nh\u01b0 th\u1ebf n\u00e0y: fun copy ( name : String = this . name , age : Int = this . age ) = User ( name , age ) Nh\u1edd v\u1eady, copy() cho ph\u00e9p ch\u00fang ta copy nh\u01b0 th\u1ebf n\u00e0y: val jack = User ( name = \"Jack\" , age = 1 ) val olderJack = jack . copy ( age = 2 ) 3. Data class v\u00e0 Destructuring Declaration \u00b6 V\u1edbi c\u00e1c h\u00e0m componentN() \u0111\u01b0\u1ee3c sinh ra, data class c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u01a1 ch\u1ebf destructuring declaration nh\u01b0 sau: val jane = User ( \"Jane\" , 35 ) val ( name , age ) = jane println ( \"$name, $age tu\u1ed5i\" ) // prints \"Jane, 35 tu\u1ed5i\"","title":"Kotlin Data class"},{"location":"kotlin/kotlin_data_class/#146-gioi-thieu","text":"Trong m\u1ed9t \u1ee9ng d\u1ee5ng, ta c\u1ea7n ph\u1ea3i \u0111\u1ecbnh ngh\u0129a r\u1ea5t nhi\u1ec1u c\u00e1c class ch\u1ec9 nh\u1eb1m m\u1ee5c \u0111\u00edch l\u01b0u tr\u1eef d\u1eef li\u1ec7u. V\u1edbi Java , vi\u1ec7c khai b\u00e1o c\u00e1c class nh\u01b0 th\u1ebf kh\u00e1 l\u00e0 m\u1ea5t th\u1eddi gian: Java public class User { private String name ; private int age ; public User ( String name , int age ) { this . name = name ; this . age = age ; } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public int getAge () { return age ; } public void setAge ( int age ) { this . age = age ; } } \u0110\u1ec3 t\u1ed1i \u01b0u h\u00f3a vi\u1ec7c n\u00e0y, Kotlin cung c\u1ea5p c\u00e1c data class. Ch\u00fang \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u b\u1eb1ng t\u1eeb kh\u00f3a data khi khai b\u00e1o class: data class User ( val name : String , val age : Int ) T\u1eeb \u0111\u00f3, compiler s\u1ebd t\u1ef1 \u0111\u1ed9ng suy ra c\u00e1c function t\u1eeb c\u00e1c param khai b\u00e1o trong primary constructor: function equals() , hashCode() function toString() d\u01b0\u1edbi d\u1ea1ng User(name=John, age=42) c\u00e1c function componentN() . C\u00e1c h\u00e0m n\u00e0y \u0111\u01b0\u1ee3c sinh ra d\u1ef1a tr\u00ean s\u1ed1 l\u01b0\u1ee3ng c\u00e1c property c\u1ee7a class v\u1edbi N l\u00e0 s\u1ed1 th\u1ee9 t\u1ef1 c\u1ee7a c\u00e1c thu\u1ed9c t\u00ednh. Nh\u01b0 trong tr\u01b0\u1eddng h\u1ee3p tr\u00ean: var user : User = User ( \"tu\" , 12 ) user . component1 () // property 'name', ki\u1ec3u 'String' user . component2 () // property 'age', ki\u1ec3u 'Int' function copy() : S\u1ebd \u0111\u01b0\u1ee3c n\u00f3i \u1edf ph\u00eda sau N\u1ebfu m\u1ed9t trong c\u00e1c function \u0111\u00f3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a m\u1ed9t c\u00e1ch t\u01b0\u1eddng minh trong body class, ch\u00fang s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c sinh ra. \u0110\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c t\u00ednh nh\u1ea5t qu\u00e1n v\u00e0 c\u00e1c h\u00e0nh vi c\u00f3 \u00fd ngh\u0129a c\u1ee7a code \u0111\u01b0\u1ee3c sinh ra, data class ph\u1ea3i th\u1ecfa m\u00e3n nh\u1eefng y\u00eau c\u1ea7u sau: Primary constructor ph\u1ea3i c\u00f3 \u00edt nh\u1ea5t 1 param T\u1ea5t c\u1ea3 param c\u1ee7a primary constructor ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o l\u00e0 var ho\u1eb7c val Data class kh\u00f4ng th\u1ec3 l\u00e0 abstract , open , sealed hay inner class. Data class ch\u1ec9 c\u00f3 th\u1ec3 implement c\u00e1c interface (Tr\u01b0\u1edbc phi\u00ean b\u1ea3n 1.1) Nh\u01b0 \u0111\u00e3 n\u00f3i trong ph\u1ea7n constructor , n\u1ebfu t\u1ea5t c\u1ea3 c\u00e1c param c\u1ee7a primary constructor c\u00f3 gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh, compiler s\u1ebd t\u1ef1 sinh ra th\u00eam m\u1ed9t constructor kh\u00f4ng c\u00f3 tham s\u1ed1 s\u1eed d\u1ee5ng c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh \u0111\u00e3 khai b\u00e1o \u1edf primary constructor: data class User ( val name : String = \"\" , val age : Int = 0 )","title":"1. Gi\u1edbi thi\u1ec7u"},{"location":"kotlin/kotlin_data_class/#246-function-copy","text":"Trong tr\u01b0\u1eddng h\u1ee3p b\u1ea1n c\u1ea7n copy m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng nh\u01b0ng l\u1ea1i mu\u1ed1n thay \u0111\u1ed5i m\u1ed9t s\u1ed1 property v\u00e0 gi\u1eef nguy\u00ean ph\u1ea7n c\u00f2n l\u1ea1i. H\u00e0m copy() \u0111\u01b0\u1ee3c sinh ra l\u00e0 \u0111\u1ec3 l\u00e0m \u0111i\u1ec1u \u0111\u00f3. V\u1edbi VD v\u1ec1 \u0111\u1ed1i t\u01b0\u1ee3ng User \u1edf tr\u00ean, h\u00e0m copy() s\u1ebd \u0111\u01b0\u1ee3c implement nh\u01b0 th\u1ebf n\u00e0y: fun copy ( name : String = this . name , age : Int = this . age ) = User ( name , age ) Nh\u1edd v\u1eady, copy() cho ph\u00e9p ch\u00fang ta copy nh\u01b0 th\u1ebf n\u00e0y: val jack = User ( name = \"Jack\" , age = 1 ) val olderJack = jack . copy ( age = 2 )","title":"2. Function\u00a0copy()"},{"location":"kotlin/kotlin_data_class/#346-data-class-va-destructuring-declaration","text":"V\u1edbi c\u00e1c h\u00e0m componentN() \u0111\u01b0\u1ee3c sinh ra, data class c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u01a1 ch\u1ebf destructuring declaration nh\u01b0 sau: val jane = User ( \"Jane\" , 35 ) val ( name , age ) = jane println ( \"$name, $age tu\u1ed5i\" ) // prints \"Jane, 35 tu\u1ed5i\"","title":"3. Data class v\u00e0 Destructuring Declaration"},{"location":"kotlin/kotlin_delegated_property/","text":"Gi\u1edbi thi\u1ec7u \u00b6 V\u1edbi c\u00e1c property trong m\u1ed9t class, ch\u00fang ta b\u1eaft bu\u1ed9c ph\u1ea3i kh\u1edfi t\u1ea1o ch\u00fang ho\u1eb7c s\u1eed d\u1ee5ng constructor \u0111\u1ec3 g\u00e1n gi\u00e1 tr\u1ecb ngay khi kh\u1edfi t\u1ea1o \u0111\u1ed1i t\u01b0\u1ee3ng. Tuy nhi\u00ean, \u0111\u00f4i l\u00fac ch\u00fang ta l\u1ea1i mu\u1ed1n kh\u1edfi t\u1ea1o nh\u1eefng property n\u00e0y ch\u1ec9 khi truy c\u1eadp l\u1ea7n \u0111\u1ea7u ti\u00ean v\u00e0o property \u0111\u00f3. \u0110\u1ec3 th\u1ef1c hi\u1ec7n \u0111i\u1ec1u n\u00e0y, Kotlin cung c\u1ea5p delegated property th\u00f4ng qua nh\u1eefng ch\u1ee9c n\u0103ng sau: lazy property: Gi\u00e1 tr\u1ecb c\u1ee7a property \u0111\u01b0\u1ee3c t\u00ednh to\u00e1n trong l\u00fac truy c\u1eadp l\u1ea7n \u0111\u1ea7u ti\u00ean \u0111\u1ebfn property observable property: l\u1eafng nghe s\u1ef1 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a property L\u01b0u tr\u1eef c\u00e1c property trong m\u1ed9t map thay v\u00ec l\u01b0u ri\u00eang t\u1eebng property M\u1ed9t VD c\u1ee7a delegated property: class Example { var p : String by Delegate () } C\u00fa ph\u00e1p \u0111\u1ec3 khai b\u00e1o delegated property l\u00e0: val/var <property name>: <Type> by <expression> . Bi\u1ec3u th\u1ee9c \u1edf sau by l\u00e0 delegate, b\u1edfi v\u00ec get() (v\u00e0 set() ) t\u01b0\u01a1ng \u1ee9ng v\u1edbi property s\u1ebd \u0111\u01b0\u1ee3c \u1ee7y th\u00e1c cho c\u00e1c method getValue() v\u00e0 setValue() c\u1ee7a class Delegate . Delegate kh\u00f4ng c\u1ea7n ph\u1ea3i implement b\u1ea5t k\u1ef3 interface n\u00e0o nh\u01b0ng ph\u1ea3i cung c\u1ea5p 2 function l\u00e0 getValue() (v\u00e0 setValue() \u0111\u1ed1i v\u1edbi property ki\u1ec3u var ). V\u00ed d\u1ee5: class Delegate { operator fun getValue ( thisRef : Any ?, property : KProperty <*>): String { System . out . println ( \"first\" ) return \"$thisRef, thank you for delegating '${property.name}' to me!\" } operator fun setValue ( thisRef : Any ?, property : KProperty <*>, value : String ) { println ( \"$value has been assigned to '${property.name} in $thisRef.'\" ) } } Khi ch\u00fang ta truy c\u1eadp \u0111\u1ec3 \u0111\u1ecdc gi\u00e1 tr\u1ecb c\u1ee7a p , kh\u00f4ng ph\u1ea3i function getter c\u1ee7a property p \u0111\u01b0\u1ee3c g\u1ecdi m\u00e0 l\u00e0 function getValue() c\u1ee7a class Delegate \u0111\u01b0\u1ee3c g\u1ecdi b\u1edfi property \u0111\u00e3 \u1ee7y th\u00e1c vi\u1ec7c n\u00e0y cho Delegate . 2 tham s\u1ed1 c\u1ee7a function getValue() l\u1ea7n l\u01b0\u1ee3t l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng ch\u1ee9a p v\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng l\u01b0u tr\u1eef c\u00e1c th\u00f4ng tin c\u1ee7a p . B\u1edfi v\u1eady, khi g\u1ecdi p : val e = Example () println ( e . p ) K\u1ebft qu\u1ea3 nh\u1eadn \u0111\u01b0\u1ee3c s\u1ebd l\u00e0: Example @ 33 a17727 , thank you for delegating 'p' to me ! T\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1eady, khi ch\u00fang ta g\u00e1n gi\u00e1 tr\u1ecb cho p , function setValue() s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi. C\u00e1c tham s\u1ed1 c\u1ee7a function setValue() t\u01b0\u01a1ng t\u1ef1 nh\u01b0 function getValue() , tham s\u1ed1 th\u1ee9 3 l\u00e0 gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c g\u00e1n cho p : e . p = \"NEW\" //NEW has been assigned to 'p' in Example@33a17727. L\u01b0u \u00fd: t\u1eeb Kotlin 1.1, b\u1ea1n c\u00f3 th\u1ec3 khai b\u00e1o m\u1ed9t delegated property ngay b\u00ean trong m\u1ed9t function ho\u1eb7c m\u1ed9t block code, n\u00f3 kh\u00f4ng c\u1ea7n l\u00e0 m\u1ed9t member c\u1ee7a class. Delegate chu\u1ea9n \u00b6 Th\u01b0 vi\u1ec7n chu\u1ea9n c\u1ee7a Kotlin cung c\u1ea5p c\u00e1c factory method cho nhi\u1ec1u m\u1ee5c \u0111\u00edch s\u1eed d\u1ee5ng delegate kh\u00e1c nhau. lazy \u00b6 lazy() l\u00e0 m\u1ed9t function l\u1ea5y m\u1ed9t lambda v\u00e0 tr\u1ea3 v\u1ec1 m\u1ed9t instance c\u1ee7a Lazy<T> \u0111\u1ec3 c\u00f3 th\u1ec3 implement m\u1ed9t lazy property: l\u1ea7n g\u1ecdi \u0111\u1ea7u ti\u00ean \u0111\u1ebfn function get() s\u1ebd th\u1ef1c thi \u0111o\u1ea1n code trong lambda \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o \u0111\u1ec3 kh\u1edfi t\u1ea1o k\u1ebft qu\u1ea3 v\u00e0 g\u00e1n k\u1ebft qu\u1ea3 cho property. C\u00e1c l\u1ea7n g\u1ecdi get() sau s\u1ebd ch\u1ec9 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a property. val lazyValue : String by lazy { println ( \"computed!\" ) \"Hello\" } fun main ( args : Array < String >) { println ( lazyValue ) println ( lazyValue ) } K\u1ebft qu\u1ea3 \u0111\u01b0\u1ee3c in ra l\u00e0: computed ! Hello Hello M\u1eb7c \u0111\u1ecbnh, vi\u1ec7c t\u00ednh to\u00e1n c\u1ee7a lazy property \u0111\u01b0\u1ee3c synchronized: gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c t\u00ednh to\u00e1n ch\u1ec9 trong 1 thread, v\u00e0 t\u1ea5t c\u1ea3 c\u00e1c thread s\u1ebd s\u1eed d\u1ee5ng c\u00f9ng k\u1ebft qu\u1ea3 \u0111\u00f3. N\u1ebfu qu\u00e1 tr\u00ecnh synchronize c\u1ee7a vi\u1ec7c kh\u1edfi t\u1ea1o kh\u00f4ng \u0111\u01b0\u1ee3c y\u00eau c\u1ea7u, nhi\u1ec1u thread s\u1ebd c\u00f3 th\u1ec3 th\u1ef1c thi vi\u1ec7c kh\u1edfi t\u1ea1o n\u00e0y c\u00f9ng m\u1ed9t l\u00fac b\u1eb1ng c\u00e1ch truy\u1ec1n tham s\u1ed1 LazyThreadSafetyMode.PUBLICATION cho function lazy() . V\u00e0 n\u1ebfu b\u1ea1n ch\u1eafc ch\u1eafn r\u1eb1ng vi\u1ec7c kh\u1edfi t\u1ea1o s\u1ebd lu\u00f4n lu\u00f4n x\u1ea3y ra tr\u00ean m\u1ed9t thread duy nh\u1ea5t, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng tham s\u1ed1 LazyThreadSafetyMode.NONE , \u0111i\u1ec1u n\u00e0y gi\u00fap gi\u1ea3m chi ph\u00ed (overhead) trong vi\u1ec7c \u0111\u1ea3m b\u1ea3o thread-safety v\u00e0 c\u00e1c chi ph\u00ed kh\u00e1c Observable \u00b6 Delegate.observable() nh\u1eadn v\u00e0o 2 tham s\u1ed1: gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o c\u1ee7a property v\u00e0 m\u1ed9t handler trong tr\u01b0\u1eddng h\u1ee3p property thay \u0111\u1ed5i gi\u00e1 tr\u1ecb. Handler m\u00e0 ch\u00fang ta truy\u1ec1n v\u00e0o s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi m\u1ed7i l\u1ea7n ch\u00fang ta g\u00e1n gi\u00e1 tr\u1ecb cho property ( sau khi vi\u1ec7c g\u00e1n \u0111\u01b0\u1ee3c th\u1ef1c thi). Handler n\u00e0y c\u00f3 3 tham s\u1ed1: property \u0111\u01b0\u1ee3c g\u00e1n, gi\u00e1 tr\u1ecb c\u0169 v\u00e0 gi\u00e1 tr\u1ecb m\u1edbi: import kotlin.properties.Delegates class User { var name : String by Delegates . observable ( \"<no name>\" ) { prop , old , new -> println ( \"$old -> $new\" ) } } fun main ( args : Array < String >) { val user = User () user . name = \"first\" user . name = \"second\" } K\u1ebft qu\u1ea3 \u0111\u01b0\u1ee3c in ra l\u00e0: < no name > -> first first -> second N\u1ebfu b\u1ea1n mu\u1ed1n c\u00f3 th\u1ec3 can thi\u1ec7p v\u00e0o vi\u1ec7c g\u00e1n v\u00e0 ph\u1ee7 quy\u1ebft vi\u1ec7c \u0111\u00f3, s\u1eed d\u1ee5ng vetoable() thay v\u00ec observable() . Hanlder \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o vetoable s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi tr\u01b0\u1edbc khi vi\u1ec7c g\u00e1n \u0111\u01b0\u1ee3c th\u1ef1c thi. L\u01b0u tr\u1eef property trong m\u1ed9t map \u00b6 M\u1ed9t tr\u01b0\u1eddng h\u1ee3p ph\u1ed5 bi\u1ebfn l\u00e0 l\u01b0u tr\u1eef c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c property b\u00ean trong m\u1ed9t map. Vi\u1ec7c n\u00e0y th\u01b0\u1eddng h\u1eefu d\u1ee5ng trong trong tr\u01b0\u1eddng h\u1ee3p nh\u01b0 parsing JSON ho\u1eb7c l\u00e0m m\u1ed9t th\u1ee9 g\u00ec \u0111\u00f3 \u0111\u1ed9ng. Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng ch\u00ednh instance c\u1ee7a map nh\u01b0 l\u00e0 delegate cho m\u1ed9t delegate property class User ( val map : Map < String , Any ?>) { val name : String by map val age : Int by map } val user = User ( mapOf ( \"name\" to \"John Doe\" , \"age\" to 25 )) Ch\u00fang ta c\u00f3 th\u1ec3 kh\u1edfi t\u1ea1o object b\u1eb1ng c\u00e1ch truy\u1ec1n v\u00e0o m\u1ed9t map. Khi truy c\u1eadp \u0111\u1ebfn property, vi\u1ec7c n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c \u1ee7y th\u00e1c cho map println ( user . name ) // Prints \"John Doe\" println ( user . age ) // Prints 25 V\u1edbi ki\u1ec3u var , ch\u00fang ta ph\u1ea3i s\u1eed d\u1ee5ng MutableMap thay v\u00ec Map (read-only Map ) class MutableUser ( val map : MutableMap < String , Any ?>) { var name : String by map var age : Int by map } Local delegated property (t\u1eeb Kotlin 1.1) \u00b6 B\u1ea1n c\u00f3 th\u1ec3 khai b\u00e1o m\u1ed9t local variable nh\u01b0 l\u00e0 m\u1ed9t delegated property. VD: fun example ( computeFoo : () -> Foo ) { val memoizedFoo by lazy ( computeFoo ) if ( someCondition && memoizedFoo . isValid ()) { memoizedFoo . doSomething () } } Bi\u1ebfn memoizedFoo s\u1ebd ch\u1ec9 \u0111\u01b0\u1ee3c t\u00ednh to\u00e1n v\u00e0o l\u1ea7n truy c\u1eadp \u0111\u1ea7u ti\u00ean b\u1eb1ng lambda computeFoo \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o. N\u1ebfu someCondition b\u1eb1ng false , memoizedFoo s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o. Y\u00eau c\u1ea7u c\u1ee7a delegated property \u00b6 \u0110\u00e2y l\u00e0 nh\u1eefng y\u00eau c\u1ea7u c\u1ee7a delegated object \u0111\u01b0\u1ee3c t\u1ed5ng k\u1ebft l\u1ea1i: V\u1edbi read-only property ( val ), m\u1ed9t delegate ph\u1ea3i implement m\u1ed9t function t\u00ean l\u00e0 getValue g\u1ed3m 2 tham s\u1ed1: thisRef - ph\u1ea3i c\u00f3 c\u00f9ng ki\u1ec3u ho\u1eb7c ki\u1ec3u m\u00e0 ki\u1ec3u c\u1ee7a property k\u1ebf th\u1eeba property - ph\u1ea3i c\u00f3 ki\u1ec3u KProperty<*> ho\u1eb7c ki\u1ec3u n\u00f3 k\u1ebf th\u1eeba C\u00f9ng v\u1edbi \u0111\u00f3, function getValue() ph\u1ea3i tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u00f9ng ki\u1ec3u v\u1edbi property. V\u1edbi mutable property ('var'), m\u1ed9t delegate ngo\u00e0i ph\u1ea3i cung c\u1ea5p getValue nh\u01b0 read-only property c\u00f2n ph\u1ea3i implement function setValue c\u00f3 c\u00e1c tham s\u1ed1 sau: thisRef - t\u01b0\u01a1ng t\u1ef1 nh\u01b0 getValue property - t\u01b0\u01a1ng t\u1ef1 nh\u01b0 getValue gi\u00e1 tr\u1ecb m\u1edbi - ph\u1ea3i c\u00f3 c\u00f9ng ki\u1ec3u v\u1edbi property ho\u1eb7c c\u00f3 ki\u1ec3u m\u00e0 ki\u1ec3u c\u1ee7a property k\u1ebf th\u1eeba getValue v\u00e0/ho\u1eb7c setValue c\u00f3 th\u1ec3 l\u00e0 member function c\u1ee7a delegate class ho\u1eb7c extension function. Tr\u01b0\u1eddng h\u1ee3p ph\u00eda sau l\u00e0 ti\u1ec7n h\u01a1n khi b\u1ea1n c\u1ea7n \u1ee7y th\u00e1c property cho m\u1ed9t object m\u00e0 ban \u0111\u1ea7u kh\u00f4ng implement c\u00e1c h\u00e0m n\u00e0y. C\u1ea3 2 function c\u1ea7n \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u v\u1edbi t\u1eeb kh\u00f3a operator class User { var name : String by Delegate () operator fun Delegate . setValue ( thisRef : User , property : KProperty <*>, value : String ) { } operator fun Delegate . getValue ( thisRef : User , property : KProperty <*>): String { println ( \"hi\" ) return \"tu\" } class Delegate } Delegate class c\u00f3 th\u1ec3 implement interface ReadOnlyProperty v\u1edbi val ho\u1eb7c ReadWriteProperty v\u1edbi var \u0111\u01b0\u1ee3c khai b\u00e1o trong th\u01b0 vi\u1ec7n chu\u1ea9n c\u1ee7a Kotlin : interface ReadOnlyProperty < in R , out T > { operator fun getValue ( thisRef : R , property : KProperty <*>): T } interface ReadWriteProperty < in R , T > { operator fun getValue ( thisRef : R , property : KProperty <*>): T operator fun setValue ( thisRef : R , property : KProperty <*>, value : T ) } Lu\u1eadt chuy\u1ec3n \u0111\u1ed5i \u00b6 Th\u1ef1c t\u1ebf, v\u1edbi m\u1ed7i delegated property, Kotlin compiler sinh ra c\u00e1c property h\u1ed7 tr\u1ee3 v\u00e0 delegate cho property \u0111\u00f3. V\u00ed d\u1ee5, v\u1edbi property prop , property \u1ea9n prop$delegate s\u1ebd \u0111\u01b0\u1ee3c sinh ra, v\u00e0 \u0111o\u1ea1n code c\u1ee7a c\u00e1c c\u00e1c h\u00e0m getter, setter \u0111\u01a1n gi\u1ea3n l\u00e0 delegate \u0111\u1ec3n property \u1ea9n n\u00e0y: class C { var prop : Type by MyDelegate () } // this code is generated by the compiler instead: class C { private val prop $ delegate = MyDelegate () var prop : Type get () = prop $ delegate . getValue ( this , this :: prop ) set ( value : Type ) = prop $ delegate . setValue ( this , this :: prop , value ) } Kotlin compiler cung c\u1ea5p t\u1ea5t c\u1ea3 c\u00e1c th\u00f4ng tin c\u1ea7n thi\u1ebft v\u1ec1 prop trong c\u00e1c tham s\u1ed1: this tham chi\u1ebfu \u0111\u1ebfn m\u1ed9t instance c\u1ee7a class C v\u00e0 this::prop l\u00e0 reflection object c\u1ee7a ki\u1ec3u KProperty , m\u00f4 t\u1ea3 ch\u00ednh prop","title":"Kotlin Delegated property"},{"location":"kotlin/kotlin_delegated_property/#gioi-thieu","text":"V\u1edbi c\u00e1c property trong m\u1ed9t class, ch\u00fang ta b\u1eaft bu\u1ed9c ph\u1ea3i kh\u1edfi t\u1ea1o ch\u00fang ho\u1eb7c s\u1eed d\u1ee5ng constructor \u0111\u1ec3 g\u00e1n gi\u00e1 tr\u1ecb ngay khi kh\u1edfi t\u1ea1o \u0111\u1ed1i t\u01b0\u1ee3ng. Tuy nhi\u00ean, \u0111\u00f4i l\u00fac ch\u00fang ta l\u1ea1i mu\u1ed1n kh\u1edfi t\u1ea1o nh\u1eefng property n\u00e0y ch\u1ec9 khi truy c\u1eadp l\u1ea7n \u0111\u1ea7u ti\u00ean v\u00e0o property \u0111\u00f3. \u0110\u1ec3 th\u1ef1c hi\u1ec7n \u0111i\u1ec1u n\u00e0y, Kotlin cung c\u1ea5p delegated property th\u00f4ng qua nh\u1eefng ch\u1ee9c n\u0103ng sau: lazy property: Gi\u00e1 tr\u1ecb c\u1ee7a property \u0111\u01b0\u1ee3c t\u00ednh to\u00e1n trong l\u00fac truy c\u1eadp l\u1ea7n \u0111\u1ea7u ti\u00ean \u0111\u1ebfn property observable property: l\u1eafng nghe s\u1ef1 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a property L\u01b0u tr\u1eef c\u00e1c property trong m\u1ed9t map thay v\u00ec l\u01b0u ri\u00eang t\u1eebng property M\u1ed9t VD c\u1ee7a delegated property: class Example { var p : String by Delegate () } C\u00fa ph\u00e1p \u0111\u1ec3 khai b\u00e1o delegated property l\u00e0: val/var <property name>: <Type> by <expression> . Bi\u1ec3u th\u1ee9c \u1edf sau by l\u00e0 delegate, b\u1edfi v\u00ec get() (v\u00e0 set() ) t\u01b0\u01a1ng \u1ee9ng v\u1edbi property s\u1ebd \u0111\u01b0\u1ee3c \u1ee7y th\u00e1c cho c\u00e1c method getValue() v\u00e0 setValue() c\u1ee7a class Delegate . Delegate kh\u00f4ng c\u1ea7n ph\u1ea3i implement b\u1ea5t k\u1ef3 interface n\u00e0o nh\u01b0ng ph\u1ea3i cung c\u1ea5p 2 function l\u00e0 getValue() (v\u00e0 setValue() \u0111\u1ed1i v\u1edbi property ki\u1ec3u var ). V\u00ed d\u1ee5: class Delegate { operator fun getValue ( thisRef : Any ?, property : KProperty <*>): String { System . out . println ( \"first\" ) return \"$thisRef, thank you for delegating '${property.name}' to me!\" } operator fun setValue ( thisRef : Any ?, property : KProperty <*>, value : String ) { println ( \"$value has been assigned to '${property.name} in $thisRef.'\" ) } } Khi ch\u00fang ta truy c\u1eadp \u0111\u1ec3 \u0111\u1ecdc gi\u00e1 tr\u1ecb c\u1ee7a p , kh\u00f4ng ph\u1ea3i function getter c\u1ee7a property p \u0111\u01b0\u1ee3c g\u1ecdi m\u00e0 l\u00e0 function getValue() c\u1ee7a class Delegate \u0111\u01b0\u1ee3c g\u1ecdi b\u1edfi property \u0111\u00e3 \u1ee7y th\u00e1c vi\u1ec7c n\u00e0y cho Delegate . 2 tham s\u1ed1 c\u1ee7a function getValue() l\u1ea7n l\u01b0\u1ee3t l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng ch\u1ee9a p v\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng l\u01b0u tr\u1eef c\u00e1c th\u00f4ng tin c\u1ee7a p . B\u1edfi v\u1eady, khi g\u1ecdi p : val e = Example () println ( e . p ) K\u1ebft qu\u1ea3 nh\u1eadn \u0111\u01b0\u1ee3c s\u1ebd l\u00e0: Example @ 33 a17727 , thank you for delegating 'p' to me ! T\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1eady, khi ch\u00fang ta g\u00e1n gi\u00e1 tr\u1ecb cho p , function setValue() s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi. C\u00e1c tham s\u1ed1 c\u1ee7a function setValue() t\u01b0\u01a1ng t\u1ef1 nh\u01b0 function getValue() , tham s\u1ed1 th\u1ee9 3 l\u00e0 gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c g\u00e1n cho p : e . p = \"NEW\" //NEW has been assigned to 'p' in Example@33a17727. L\u01b0u \u00fd: t\u1eeb Kotlin 1.1, b\u1ea1n c\u00f3 th\u1ec3 khai b\u00e1o m\u1ed9t delegated property ngay b\u00ean trong m\u1ed9t function ho\u1eb7c m\u1ed9t block code, n\u00f3 kh\u00f4ng c\u1ea7n l\u00e0 m\u1ed9t member c\u1ee7a class.","title":"Gi\u1edbi thi\u1ec7u"},{"location":"kotlin/kotlin_delegated_property/#delegate-chuan","text":"Th\u01b0 vi\u1ec7n chu\u1ea9n c\u1ee7a Kotlin cung c\u1ea5p c\u00e1c factory method cho nhi\u1ec1u m\u1ee5c \u0111\u00edch s\u1eed d\u1ee5ng delegate kh\u00e1c nhau.","title":"Delegate chu\u1ea9n"},{"location":"kotlin/kotlin_delegated_property/#lazy","text":"lazy() l\u00e0 m\u1ed9t function l\u1ea5y m\u1ed9t lambda v\u00e0 tr\u1ea3 v\u1ec1 m\u1ed9t instance c\u1ee7a Lazy<T> \u0111\u1ec3 c\u00f3 th\u1ec3 implement m\u1ed9t lazy property: l\u1ea7n g\u1ecdi \u0111\u1ea7u ti\u00ean \u0111\u1ebfn function get() s\u1ebd th\u1ef1c thi \u0111o\u1ea1n code trong lambda \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o \u0111\u1ec3 kh\u1edfi t\u1ea1o k\u1ebft qu\u1ea3 v\u00e0 g\u00e1n k\u1ebft qu\u1ea3 cho property. C\u00e1c l\u1ea7n g\u1ecdi get() sau s\u1ebd ch\u1ec9 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a property. val lazyValue : String by lazy { println ( \"computed!\" ) \"Hello\" } fun main ( args : Array < String >) { println ( lazyValue ) println ( lazyValue ) } K\u1ebft qu\u1ea3 \u0111\u01b0\u1ee3c in ra l\u00e0: computed ! Hello Hello M\u1eb7c \u0111\u1ecbnh, vi\u1ec7c t\u00ednh to\u00e1n c\u1ee7a lazy property \u0111\u01b0\u1ee3c synchronized: gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c t\u00ednh to\u00e1n ch\u1ec9 trong 1 thread, v\u00e0 t\u1ea5t c\u1ea3 c\u00e1c thread s\u1ebd s\u1eed d\u1ee5ng c\u00f9ng k\u1ebft qu\u1ea3 \u0111\u00f3. N\u1ebfu qu\u00e1 tr\u00ecnh synchronize c\u1ee7a vi\u1ec7c kh\u1edfi t\u1ea1o kh\u00f4ng \u0111\u01b0\u1ee3c y\u00eau c\u1ea7u, nhi\u1ec1u thread s\u1ebd c\u00f3 th\u1ec3 th\u1ef1c thi vi\u1ec7c kh\u1edfi t\u1ea1o n\u00e0y c\u00f9ng m\u1ed9t l\u00fac b\u1eb1ng c\u00e1ch truy\u1ec1n tham s\u1ed1 LazyThreadSafetyMode.PUBLICATION cho function lazy() . V\u00e0 n\u1ebfu b\u1ea1n ch\u1eafc ch\u1eafn r\u1eb1ng vi\u1ec7c kh\u1edfi t\u1ea1o s\u1ebd lu\u00f4n lu\u00f4n x\u1ea3y ra tr\u00ean m\u1ed9t thread duy nh\u1ea5t, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng tham s\u1ed1 LazyThreadSafetyMode.NONE , \u0111i\u1ec1u n\u00e0y gi\u00fap gi\u1ea3m chi ph\u00ed (overhead) trong vi\u1ec7c \u0111\u1ea3m b\u1ea3o thread-safety v\u00e0 c\u00e1c chi ph\u00ed kh\u00e1c","title":"lazy"},{"location":"kotlin/kotlin_delegated_property/#observable","text":"Delegate.observable() nh\u1eadn v\u00e0o 2 tham s\u1ed1: gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o c\u1ee7a property v\u00e0 m\u1ed9t handler trong tr\u01b0\u1eddng h\u1ee3p property thay \u0111\u1ed5i gi\u00e1 tr\u1ecb. Handler m\u00e0 ch\u00fang ta truy\u1ec1n v\u00e0o s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi m\u1ed7i l\u1ea7n ch\u00fang ta g\u00e1n gi\u00e1 tr\u1ecb cho property ( sau khi vi\u1ec7c g\u00e1n \u0111\u01b0\u1ee3c th\u1ef1c thi). Handler n\u00e0y c\u00f3 3 tham s\u1ed1: property \u0111\u01b0\u1ee3c g\u00e1n, gi\u00e1 tr\u1ecb c\u0169 v\u00e0 gi\u00e1 tr\u1ecb m\u1edbi: import kotlin.properties.Delegates class User { var name : String by Delegates . observable ( \"<no name>\" ) { prop , old , new -> println ( \"$old -> $new\" ) } } fun main ( args : Array < String >) { val user = User () user . name = \"first\" user . name = \"second\" } K\u1ebft qu\u1ea3 \u0111\u01b0\u1ee3c in ra l\u00e0: < no name > -> first first -> second N\u1ebfu b\u1ea1n mu\u1ed1n c\u00f3 th\u1ec3 can thi\u1ec7p v\u00e0o vi\u1ec7c g\u00e1n v\u00e0 ph\u1ee7 quy\u1ebft vi\u1ec7c \u0111\u00f3, s\u1eed d\u1ee5ng vetoable() thay v\u00ec observable() . Hanlder \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o vetoable s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi tr\u01b0\u1edbc khi vi\u1ec7c g\u00e1n \u0111\u01b0\u1ee3c th\u1ef1c thi.","title":"Observable"},{"location":"kotlin/kotlin_delegated_property/#luu-tru-property-trong-mot-map","text":"M\u1ed9t tr\u01b0\u1eddng h\u1ee3p ph\u1ed5 bi\u1ebfn l\u00e0 l\u01b0u tr\u1eef c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c property b\u00ean trong m\u1ed9t map. Vi\u1ec7c n\u00e0y th\u01b0\u1eddng h\u1eefu d\u1ee5ng trong trong tr\u01b0\u1eddng h\u1ee3p nh\u01b0 parsing JSON ho\u1eb7c l\u00e0m m\u1ed9t th\u1ee9 g\u00ec \u0111\u00f3 \u0111\u1ed9ng. Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng ch\u00ednh instance c\u1ee7a map nh\u01b0 l\u00e0 delegate cho m\u1ed9t delegate property class User ( val map : Map < String , Any ?>) { val name : String by map val age : Int by map } val user = User ( mapOf ( \"name\" to \"John Doe\" , \"age\" to 25 )) Ch\u00fang ta c\u00f3 th\u1ec3 kh\u1edfi t\u1ea1o object b\u1eb1ng c\u00e1ch truy\u1ec1n v\u00e0o m\u1ed9t map. Khi truy c\u1eadp \u0111\u1ebfn property, vi\u1ec7c n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c \u1ee7y th\u00e1c cho map println ( user . name ) // Prints \"John Doe\" println ( user . age ) // Prints 25 V\u1edbi ki\u1ec3u var , ch\u00fang ta ph\u1ea3i s\u1eed d\u1ee5ng MutableMap thay v\u00ec Map (read-only Map ) class MutableUser ( val map : MutableMap < String , Any ?>) { var name : String by map var age : Int by map }","title":"L\u01b0u tr\u1eef property trong m\u1ed9t map"},{"location":"kotlin/kotlin_delegated_property/#local-delegated-property-tu-kotlin-11","text":"B\u1ea1n c\u00f3 th\u1ec3 khai b\u00e1o m\u1ed9t local variable nh\u01b0 l\u00e0 m\u1ed9t delegated property. VD: fun example ( computeFoo : () -> Foo ) { val memoizedFoo by lazy ( computeFoo ) if ( someCondition && memoizedFoo . isValid ()) { memoizedFoo . doSomething () } } Bi\u1ebfn memoizedFoo s\u1ebd ch\u1ec9 \u0111\u01b0\u1ee3c t\u00ednh to\u00e1n v\u00e0o l\u1ea7n truy c\u1eadp \u0111\u1ea7u ti\u00ean b\u1eb1ng lambda computeFoo \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o. N\u1ebfu someCondition b\u1eb1ng false , memoizedFoo s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o.","title":"Local delegated property (t\u1eeb\u00a0Kotlin\u00a01.1)"},{"location":"kotlin/kotlin_delegated_property/#yeu-cau-cua-delegated-property","text":"\u0110\u00e2y l\u00e0 nh\u1eefng y\u00eau c\u1ea7u c\u1ee7a delegated object \u0111\u01b0\u1ee3c t\u1ed5ng k\u1ebft l\u1ea1i: V\u1edbi read-only property ( val ), m\u1ed9t delegate ph\u1ea3i implement m\u1ed9t function t\u00ean l\u00e0 getValue g\u1ed3m 2 tham s\u1ed1: thisRef - ph\u1ea3i c\u00f3 c\u00f9ng ki\u1ec3u ho\u1eb7c ki\u1ec3u m\u00e0 ki\u1ec3u c\u1ee7a property k\u1ebf th\u1eeba property - ph\u1ea3i c\u00f3 ki\u1ec3u KProperty<*> ho\u1eb7c ki\u1ec3u n\u00f3 k\u1ebf th\u1eeba C\u00f9ng v\u1edbi \u0111\u00f3, function getValue() ph\u1ea3i tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u00f9ng ki\u1ec3u v\u1edbi property. V\u1edbi mutable property ('var'), m\u1ed9t delegate ngo\u00e0i ph\u1ea3i cung c\u1ea5p getValue nh\u01b0 read-only property c\u00f2n ph\u1ea3i implement function setValue c\u00f3 c\u00e1c tham s\u1ed1 sau: thisRef - t\u01b0\u01a1ng t\u1ef1 nh\u01b0 getValue property - t\u01b0\u01a1ng t\u1ef1 nh\u01b0 getValue gi\u00e1 tr\u1ecb m\u1edbi - ph\u1ea3i c\u00f3 c\u00f9ng ki\u1ec3u v\u1edbi property ho\u1eb7c c\u00f3 ki\u1ec3u m\u00e0 ki\u1ec3u c\u1ee7a property k\u1ebf th\u1eeba getValue v\u00e0/ho\u1eb7c setValue c\u00f3 th\u1ec3 l\u00e0 member function c\u1ee7a delegate class ho\u1eb7c extension function. Tr\u01b0\u1eddng h\u1ee3p ph\u00eda sau l\u00e0 ti\u1ec7n h\u01a1n khi b\u1ea1n c\u1ea7n \u1ee7y th\u00e1c property cho m\u1ed9t object m\u00e0 ban \u0111\u1ea7u kh\u00f4ng implement c\u00e1c h\u00e0m n\u00e0y. C\u1ea3 2 function c\u1ea7n \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u v\u1edbi t\u1eeb kh\u00f3a operator class User { var name : String by Delegate () operator fun Delegate . setValue ( thisRef : User , property : KProperty <*>, value : String ) { } operator fun Delegate . getValue ( thisRef : User , property : KProperty <*>): String { println ( \"hi\" ) return \"tu\" } class Delegate } Delegate class c\u00f3 th\u1ec3 implement interface ReadOnlyProperty v\u1edbi val ho\u1eb7c ReadWriteProperty v\u1edbi var \u0111\u01b0\u1ee3c khai b\u00e1o trong th\u01b0 vi\u1ec7n chu\u1ea9n c\u1ee7a Kotlin : interface ReadOnlyProperty < in R , out T > { operator fun getValue ( thisRef : R , property : KProperty <*>): T } interface ReadWriteProperty < in R , T > { operator fun getValue ( thisRef : R , property : KProperty <*>): T operator fun setValue ( thisRef : R , property : KProperty <*>, value : T ) }","title":"Y\u00eau c\u1ea7u c\u1ee7a delegated property"},{"location":"kotlin/kotlin_delegated_property/#luat-chuyen-oi","text":"Th\u1ef1c t\u1ebf, v\u1edbi m\u1ed7i delegated property, Kotlin compiler sinh ra c\u00e1c property h\u1ed7 tr\u1ee3 v\u00e0 delegate cho property \u0111\u00f3. V\u00ed d\u1ee5, v\u1edbi property prop , property \u1ea9n prop$delegate s\u1ebd \u0111\u01b0\u1ee3c sinh ra, v\u00e0 \u0111o\u1ea1n code c\u1ee7a c\u00e1c c\u00e1c h\u00e0m getter, setter \u0111\u01a1n gi\u1ea3n l\u00e0 delegate \u0111\u1ec3n property \u1ea9n n\u00e0y: class C { var prop : Type by MyDelegate () } // this code is generated by the compiler instead: class C { private val prop $ delegate = MyDelegate () var prop : Type get () = prop $ delegate . getValue ( this , this :: prop ) set ( value : Type ) = prop $ delegate . setValue ( this , this :: prop , value ) } Kotlin compiler cung c\u1ea5p t\u1ea5t c\u1ea3 c\u00e1c th\u00f4ng tin c\u1ea7n thi\u1ebft v\u1ec1 prop trong c\u00e1c tham s\u1ed1: this tham chi\u1ebfu \u0111\u1ebfn m\u1ed9t instance c\u1ee7a class C v\u00e0 this::prop l\u00e0 reflection object c\u1ee7a ki\u1ec3u KProperty , m\u00f4 t\u1ea3 ch\u00ednh prop","title":"Lu\u1eadt chuy\u1ec3n \u0111\u1ed5i"},{"location":"kotlin/kotlin_delegation/","text":"Class Delegation \u00b6 M\u1eabu Delegation \u0111\u00e3 \u0111\u01b0\u1ee3c ch\u1ee9ng minh l\u00e0 c\u00e1ch thay th\u1ebf t\u1ed1t cho vi\u1ec7c k\u1ebf th\u1eeba v\u00e0 Kotlin h\u1ed7 tr\u1ee3 m\u1eabu n\u00e0y native v\u00e0 kh\u00f4ng c\u1ea7n m\u1ed9t ch\u00fat boilerplate code n\u00e0o. Ch\u00fang ta xem VD sau: interface Base { fun print () } class BaseImpl ( val x : Int ) : Base { override fun print () { print ( x ) } } class Derived ( b : Base ) : Base by b fun main ( args : Array < String >) { val b = BaseImpl ( 10 ) Derived ( b ). print () // prints 10 } L\u1edbp Derived c\u00f3 th\u1ec3 k\u1ebf th\u1eeba t\u1eeb interface(ch\u1ec9 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng delegation v\u1edbi interface) Base v\u00e0 \u1ee7y th\u00e1c t\u1ea5t c\u1ea3 c\u00e1c public method cho m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng x\u00e1c \u0111\u1ecbnh. T\u1ee9c l\u00e0, l\u1edbp Derived tuy k\u1ebf th\u1eeba t\u1eeb interface Base nh\u01b0ng kh\u00f4ng ph\u1ea3i implement function print() t\u1eeb interface Base m\u00e0 \u1ee7y th\u00e1c cho \u0111\u1ed1i t\u01b0\u1ee3ng b c\u00f3 ki\u1ec3u l\u00e0 BaseImpl , l\u1edbp c\u0169ng k\u1ebf th\u1eeba t\u1eeb Base v\u00e0 implement function print() . M\u1ec7nh \u0111\u1ec1 by bi\u1ec3u th\u1ecb r\u1eb1ng b s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u b\u00ean trong \u0111\u1ed1i t\u01b0\u1ee3ng Derived v\u00e0 compiler s\u1ebd sinh ra t\u1eaft c\u1ea3 c\u00e1c method c\u1ee7a Base cho Derived m\u00e0 b \u0111\u00e3 implement L\u01b0u \u00fd r\u1eb1ng l\u1edbp Derived c\u0169ng c\u00f3 th\u1ec3 t\u1ef1 override l\u1ea1i function print() thay v\u00ec s\u1eed d\u1ee5ng c\u00e1c function c\u1ee7a object \u0111\u01b0\u1ee3c \u1ee7y th\u00e1c. class Derived ( b : Base ) : Base by b { override fun print () { print ( \"abc\" ) } } fun main ( args : Array < String >) { val b = BaseImpl ( 10 ) Derived ( b ). print () // prints \"abc\" }","title":"Kotlin Delegation"},{"location":"kotlin/kotlin_delegation/#class-delegation","text":"M\u1eabu Delegation \u0111\u00e3 \u0111\u01b0\u1ee3c ch\u1ee9ng minh l\u00e0 c\u00e1ch thay th\u1ebf t\u1ed1t cho vi\u1ec7c k\u1ebf th\u1eeba v\u00e0 Kotlin h\u1ed7 tr\u1ee3 m\u1eabu n\u00e0y native v\u00e0 kh\u00f4ng c\u1ea7n m\u1ed9t ch\u00fat boilerplate code n\u00e0o. Ch\u00fang ta xem VD sau: interface Base { fun print () } class BaseImpl ( val x : Int ) : Base { override fun print () { print ( x ) } } class Derived ( b : Base ) : Base by b fun main ( args : Array < String >) { val b = BaseImpl ( 10 ) Derived ( b ). print () // prints 10 } L\u1edbp Derived c\u00f3 th\u1ec3 k\u1ebf th\u1eeba t\u1eeb interface(ch\u1ec9 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng delegation v\u1edbi interface) Base v\u00e0 \u1ee7y th\u00e1c t\u1ea5t c\u1ea3 c\u00e1c public method cho m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng x\u00e1c \u0111\u1ecbnh. T\u1ee9c l\u00e0, l\u1edbp Derived tuy k\u1ebf th\u1eeba t\u1eeb interface Base nh\u01b0ng kh\u00f4ng ph\u1ea3i implement function print() t\u1eeb interface Base m\u00e0 \u1ee7y th\u00e1c cho \u0111\u1ed1i t\u01b0\u1ee3ng b c\u00f3 ki\u1ec3u l\u00e0 BaseImpl , l\u1edbp c\u0169ng k\u1ebf th\u1eeba t\u1eeb Base v\u00e0 implement function print() . M\u1ec7nh \u0111\u1ec1 by bi\u1ec3u th\u1ecb r\u1eb1ng b s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u b\u00ean trong \u0111\u1ed1i t\u01b0\u1ee3ng Derived v\u00e0 compiler s\u1ebd sinh ra t\u1eaft c\u1ea3 c\u00e1c method c\u1ee7a Base cho Derived m\u00e0 b \u0111\u00e3 implement L\u01b0u \u00fd r\u1eb1ng l\u1edbp Derived c\u0169ng c\u00f3 th\u1ec3 t\u1ef1 override l\u1ea1i function print() thay v\u00ec s\u1eed d\u1ee5ng c\u00e1c function c\u1ee7a object \u0111\u01b0\u1ee3c \u1ee7y th\u00e1c. class Derived ( b : Base ) : Base by b { override fun print () { print ( \"abc\" ) } } fun main ( args : Array < String >) { val b = BaseImpl ( 10 ) Derived ( b ). print () // prints \"abc\" }","title":"Class Delegation"},{"location":"kotlin/kotlin_enum_classes/","text":"\u0110\u1ec3 khai b\u00e1o m\u1ed9t enum class ta s\u1eed d\u1ee5ng keyword enum : enum class Direction { NORTH , SOUTH , WEST , EAST } \u1ede \u0111\u00e2y m\u1ed7i enum constant (NORTH, SOUTH, WEST, EAST) l\u00e0 m\u1ed9t object. C\u00e1c enum constant \u0111\u01b0\u1ee3c ph\u00e2n c\u00e1ch nhau b\u1edfi d\u1ea5u , Initialization \u00b6 enum class Color ( val rgb : Int ) { RED ( 0 xFF0000 ), GREEN ( 0 x00FF00 ), BLUE ( 0 x0000FF ) } M\u1ed7i enum constant \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o v\u1edbi 1 h\u1eb1ng s\u1ed1 rgb ki\u1ec3u Int . Anonymous Classes \u00b6 M\u1ed7i enum constant c\u0169ng c\u00f3 th\u1ec3 kh\u1edfi t\u1ea1o anonymous class c\u1ee7a ri\u00eang n\u00f3 enum class ProtocolState { WAITING { override fun signal () = TALKING }, TALKING { override fun signal () = WAITING }; abstract fun signal (): ProtocolState } V\u00ed d\u1ee5 nh\u01b0 constant WAITING \u0111\u1ecbnh ngh\u0129a m\u1ed9t anonymous class c\u1ee7a n\u00f3 v\u00e0 override l\u1ea1i function signal() . N\u1ebfu ch\u00fa \u00fd b\u1ea1n c\u00f3 th\u1ec3 th\u1ea5y d\u1ea5u ; , d\u1ea5u n\u00e0y c\u00f3 t\u00e1c d\u1ee5ng ph\u00e2n c\u00e1ch gi\u1eefa c\u00e1c enum constant v\u00e0 c\u00e1c \u0111\u1ecbnh ngh\u0129a th\u00e0nh ph\u1ea7n member(nh\u01b0 variable , function ) c\u1ee7a enum class. Working with Enum Constants \u00b6 Gi\u1ed1ng nh\u01b0 trong Java, enum class trong Kotlin c\u00f3 c\u00e1c method \u0111\u1ec3 list ra danh s\u00e1ch c\u00e1c enum constant v\u00e0 l\u1ea5y enum constant b\u1eb1ng t\u00ean c\u1ee7a n\u00f3. for ( enumConstant in ProtocolState . values ()) { println ( enumConstant ) } T\u1eeb Kotlin 1.1 tr\u1edf \u0111i, ta c\u00f3 th\u1ec3 truy c\u1eadp v\u00e0o c\u00e1c constant trong enum class b\u1eb1ng generic way . Ta s\u1eed d\u1ee5ng 2 function enumValues<T>() v\u00e0 enumValueOf<T>() : enum class RGB { RED , GREEN , BLUE } inline fun < reified T : Enum < T > > printAllValues () { print ( enumValues < T >(). joinToString { it . name }) } printAllValues < RGB >() // prints RED, GREEN, BLUE M\u1ed7i enum constant \u0111\u1ec1u c\u00f3 2 propery: val name : String val ordinal : Int name gi\u1eef t\u00ean c\u1ee7a enum constant v\u00e0 ordinal gi\u1eef th\u1ee9 t\u1ef1 c\u1ee7a enum constant trong enum class.","title":"Kotlin Enum Classes"},{"location":"kotlin/kotlin_enum_classes/#initialization","text":"enum class Color ( val rgb : Int ) { RED ( 0 xFF0000 ), GREEN ( 0 x00FF00 ), BLUE ( 0 x0000FF ) } M\u1ed7i enum constant \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o v\u1edbi 1 h\u1eb1ng s\u1ed1 rgb ki\u1ec3u Int .","title":"Initialization"},{"location":"kotlin/kotlin_enum_classes/#anonymous-classes","text":"M\u1ed7i enum constant c\u0169ng c\u00f3 th\u1ec3 kh\u1edfi t\u1ea1o anonymous class c\u1ee7a ri\u00eang n\u00f3 enum class ProtocolState { WAITING { override fun signal () = TALKING }, TALKING { override fun signal () = WAITING }; abstract fun signal (): ProtocolState } V\u00ed d\u1ee5 nh\u01b0 constant WAITING \u0111\u1ecbnh ngh\u0129a m\u1ed9t anonymous class c\u1ee7a n\u00f3 v\u00e0 override l\u1ea1i function signal() . N\u1ebfu ch\u00fa \u00fd b\u1ea1n c\u00f3 th\u1ec3 th\u1ea5y d\u1ea5u ; , d\u1ea5u n\u00e0y c\u00f3 t\u00e1c d\u1ee5ng ph\u00e2n c\u00e1ch gi\u1eefa c\u00e1c enum constant v\u00e0 c\u00e1c \u0111\u1ecbnh ngh\u0129a th\u00e0nh ph\u1ea7n member(nh\u01b0 variable , function ) c\u1ee7a enum class.","title":"Anonymous Classes"},{"location":"kotlin/kotlin_enum_classes/#working-with-enum-constants","text":"Gi\u1ed1ng nh\u01b0 trong Java, enum class trong Kotlin c\u00f3 c\u00e1c method \u0111\u1ec3 list ra danh s\u00e1ch c\u00e1c enum constant v\u00e0 l\u1ea5y enum constant b\u1eb1ng t\u00ean c\u1ee7a n\u00f3. for ( enumConstant in ProtocolState . values ()) { println ( enumConstant ) } T\u1eeb Kotlin 1.1 tr\u1edf \u0111i, ta c\u00f3 th\u1ec3 truy c\u1eadp v\u00e0o c\u00e1c constant trong enum class b\u1eb1ng generic way . Ta s\u1eed d\u1ee5ng 2 function enumValues<T>() v\u00e0 enumValueOf<T>() : enum class RGB { RED , GREEN , BLUE } inline fun < reified T : Enum < T > > printAllValues () { print ( enumValues < T >(). joinToString { it . name }) } printAllValues < RGB >() // prints RED, GREEN, BLUE M\u1ed7i enum constant \u0111\u1ec1u c\u00f3 2 propery: val name : String val ordinal : Int name gi\u1eef t\u00ean c\u1ee7a enum constant v\u00e0 ordinal gi\u1eef th\u1ee9 t\u1ef1 c\u1ee7a enum constant trong enum class.","title":"Working with Enum Constants"},{"location":"kotlin/kotlin_exception/","text":"C\u00e1c class exception \u00b6 T\u1ea5t c\u1ea3 c\u00e1c class exception trong Kotlin \u0111\u1ec1u th\u1eeba k\u1ebf t\u1eeb l\u1edbp Throwable . M\u1ecdi exception \u0111\u1ec1u c\u00f3 m\u1ed9t message, stack trace v\u00e0 m\u1ed9t optional cause \u0110\u1ec3 throw m\u1ed9t exception object, ta s\u1eed d\u1ee5ng throw throw MyException ( \"Hi There!\" ) V\u00e0 \u0111\u1ec3 catch m\u1ed9t exception, ta s\u1eed d\u1ee5ng try try { // some code } catch ( e : SomeException ) { // handler } finally { // optional finally block } C\u00f3 th\u1ec3 kh\u00f4ng c\u00f3 ho\u1eb7c nhi\u1ec1u kh\u1ed1i catch . Kh\u1ed1i finally c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c b\u1ecf qua. Tuy nhi\u00ean, \u00edt nh\u1ea5t ph\u1ea3i c\u00f3 1 kh\u1ed1i catch ho\u1eb7c finally xu\u1ea5t hi\u1ec7n. Try l\u00e0 m\u1ed9t bi\u1ec3u th\u1ee9c \u00b6 try l\u00e0 m\u1ed9t bi\u1ec3u th\u1ee9c. B\u1edfi v\u1eady, ta c\u00f3 th\u1ec3 tr\u1ea3 v\u1ec1 m\u1ed9t gi\u00e1 tr\u1ecb val a : Int ? = try { parseInt ( input ) } catch ( e : NumberFormatException ) { null } Gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 c\u1ee7a try ho\u1eb7c l\u00e0 bi\u1ec3u th\u1ee9c cu\u1ed1i c\u00f9ng trong kh\u1ed1i try ho\u1eb7c l\u00e0 bi\u1ec3u th\u1ee9c cu\u1ed1i c\u00f9ng trong kh\u1ed1i catch ho\u1eb7c c\u00e1c kh\u1ed1i catch . N\u1ed9i dung kh\u1ed1i finally kh\u00f4ng \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn k\u1ebft qu\u1ea3 c\u1ee7a bi\u1ec3u th\u1ee9c Checked exception \u00b6 Kotlin kh\u00f4ng c\u00f3 checked exception. C\u00f3 nhi\u1ec1u l\u00fd do cho vi\u1ec7c n\u00e0y. H\u00e3y xem v\u00ed d\u1ee5 sau: //StringBuilder Appendable append ( CharSequence csq ) throws IOException ; Signature c\u1ee7a h\u00e0m cho ta bi\u1ebft \u0111i\u1ec1u g\u00ec? M\u1ed7i l\u1ea7n append m\u1ed9t string, ch\u00fang ta ph\u1ea3i catch c\u00e1c IOException c\u00f3 th\u1ec3 x\u1ea3y ra. B\u1edfi v\u00ec n\u00f3 c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n vi\u1ec7c \u0111\u1ecdc ghi. B\u1edfi v\u1eady, ta ph\u1ea3i catch khi g\u1ecdi h\u00e0m append nh\u01b0 sau: try { log . append ( message ) } catch ( IOException e ) { // Must be safe } Th\u1ef1c thi c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh nh\u1ecf \u0111i t\u1eddi m\u1ed9t k\u1ebft lu\u1eadn r\u1eb1ng vi\u1ec7c y\u00eau c\u1ea7u c\u00e1c exception c\u00f3 th\u1ec3 v\u1eeba n\u00e2ng cao n\u0103ng su\u1ea5t c\u1ee7a developer v\u00e0 n\u00e2ng cao ch\u1ea5t l\u01b0\u1ee3ng code. Tuy nhi\u00ean, tr\u1ea3i nghi\u1ec7p v\u1edbi c\u00e1c project l\u1edbn g\u1ee3i ra m\u1ed9t k\u1ebft qu\u1ea3 kh\u00e1c - gi\u1ea3m hi\u1ec7u su\u1ea5t v\u00e0 t\u0103ng m\u1ed9t ch\u00fat x\u00edu ho\u1eb7c kh\u00f4ng t\u0103ng ch\u1ea5t l\u01b0\u1ee3ng code Ki\u1ec3u Nothing \u00b6 throw l\u00e0 m\u1ed9t bi\u1ec3u th\u1ee9c trong Kotlin , b\u1edfi v\u1eady ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng throw nh\u01b0 m\u1ed9t ph\u1ea7n c\u1ee7a to\u00e1n t\u1eed elvis : val s = person . name ?: throw IllegalArgumentException ( \"Name required\" ) Ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a bi\u1ec3u th\u1ee9c throw l\u00e0 m\u1ed9t ki\u1ec3u \u0111\u1eb7c bi\u1ec7t: Nothing . Ki\u1ec3u d\u1eef li\u1ec7u n\u00e0y kh\u00f4ng c\u00f3 gi\u00e1 tr\u1ecb v\u00e0 th\u01b0\u1eddng \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 \u0111\u00e1nh d\u1ea5u c\u00e1c v\u1ecb tr\u00ed trong code m\u00e0 code kh\u00f4ng bao gi\u1edd c\u00f3 th\u1ec3 ch\u1ea1y t\u1edbi \u0111\u01b0\u1ee3c. V\u1edbi code c\u1ee7a b\u1ea1n, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng Nothing \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh c\u00e1c function m\u00e0 kh\u00f4ng bao gi\u1edd tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb g\u00ec: fun fail ( message : String ): Nothing { throw IllegalArgumentException ( message ) } Khi b\u1ea1n g\u1ecdi function n\u00e0y, compiler s\u1ebd bi\u1ebft r\u1eb1ng vi\u1ec7c th\u1ef1c thi kh\u00f4ng th\u1ec3 ti\u1ebfp t\u1ee5c sau khi function n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi val s = person . name ?: fail ( \"Name required\" ) println ( \"hello\" ) // code kh\u00f4ng th\u1ec3 ch\u1ea1y t\u1edbi d\u00f2ng n\u00e0y","title":"Kotlin Exception"},{"location":"kotlin/kotlin_exception/#cac-class-exception","text":"T\u1ea5t c\u1ea3 c\u00e1c class exception trong Kotlin \u0111\u1ec1u th\u1eeba k\u1ebf t\u1eeb l\u1edbp Throwable . M\u1ecdi exception \u0111\u1ec1u c\u00f3 m\u1ed9t message, stack trace v\u00e0 m\u1ed9t optional cause \u0110\u1ec3 throw m\u1ed9t exception object, ta s\u1eed d\u1ee5ng throw throw MyException ( \"Hi There!\" ) V\u00e0 \u0111\u1ec3 catch m\u1ed9t exception, ta s\u1eed d\u1ee5ng try try { // some code } catch ( e : SomeException ) { // handler } finally { // optional finally block } C\u00f3 th\u1ec3 kh\u00f4ng c\u00f3 ho\u1eb7c nhi\u1ec1u kh\u1ed1i catch . Kh\u1ed1i finally c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c b\u1ecf qua. Tuy nhi\u00ean, \u00edt nh\u1ea5t ph\u1ea3i c\u00f3 1 kh\u1ed1i catch ho\u1eb7c finally xu\u1ea5t hi\u1ec7n.","title":"C\u00e1c class exception"},{"location":"kotlin/kotlin_exception/#try-la-mot-bieu-thuc","text":"try l\u00e0 m\u1ed9t bi\u1ec3u th\u1ee9c. B\u1edfi v\u1eady, ta c\u00f3 th\u1ec3 tr\u1ea3 v\u1ec1 m\u1ed9t gi\u00e1 tr\u1ecb val a : Int ? = try { parseInt ( input ) } catch ( e : NumberFormatException ) { null } Gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 c\u1ee7a try ho\u1eb7c l\u00e0 bi\u1ec3u th\u1ee9c cu\u1ed1i c\u00f9ng trong kh\u1ed1i try ho\u1eb7c l\u00e0 bi\u1ec3u th\u1ee9c cu\u1ed1i c\u00f9ng trong kh\u1ed1i catch ho\u1eb7c c\u00e1c kh\u1ed1i catch . N\u1ed9i dung kh\u1ed1i finally kh\u00f4ng \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn k\u1ebft qu\u1ea3 c\u1ee7a bi\u1ec3u th\u1ee9c","title":"Try\u00a0l\u00e0 m\u1ed9t bi\u1ec3u th\u1ee9c"},{"location":"kotlin/kotlin_exception/#checked-exception","text":"Kotlin kh\u00f4ng c\u00f3 checked exception. C\u00f3 nhi\u1ec1u l\u00fd do cho vi\u1ec7c n\u00e0y. H\u00e3y xem v\u00ed d\u1ee5 sau: //StringBuilder Appendable append ( CharSequence csq ) throws IOException ; Signature c\u1ee7a h\u00e0m cho ta bi\u1ebft \u0111i\u1ec1u g\u00ec? M\u1ed7i l\u1ea7n append m\u1ed9t string, ch\u00fang ta ph\u1ea3i catch c\u00e1c IOException c\u00f3 th\u1ec3 x\u1ea3y ra. B\u1edfi v\u00ec n\u00f3 c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n vi\u1ec7c \u0111\u1ecdc ghi. B\u1edfi v\u1eady, ta ph\u1ea3i catch khi g\u1ecdi h\u00e0m append nh\u01b0 sau: try { log . append ( message ) } catch ( IOException e ) { // Must be safe } Th\u1ef1c thi c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh nh\u1ecf \u0111i t\u1eddi m\u1ed9t k\u1ebft lu\u1eadn r\u1eb1ng vi\u1ec7c y\u00eau c\u1ea7u c\u00e1c exception c\u00f3 th\u1ec3 v\u1eeba n\u00e2ng cao n\u0103ng su\u1ea5t c\u1ee7a developer v\u00e0 n\u00e2ng cao ch\u1ea5t l\u01b0\u1ee3ng code. Tuy nhi\u00ean, tr\u1ea3i nghi\u1ec7p v\u1edbi c\u00e1c project l\u1edbn g\u1ee3i ra m\u1ed9t k\u1ebft qu\u1ea3 kh\u00e1c - gi\u1ea3m hi\u1ec7u su\u1ea5t v\u00e0 t\u0103ng m\u1ed9t ch\u00fat x\u00edu ho\u1eb7c kh\u00f4ng t\u0103ng ch\u1ea5t l\u01b0\u1ee3ng code","title":"Checked exception"},{"location":"kotlin/kotlin_exception/#kieu-nothing","text":"throw l\u00e0 m\u1ed9t bi\u1ec3u th\u1ee9c trong Kotlin , b\u1edfi v\u1eady ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng throw nh\u01b0 m\u1ed9t ph\u1ea7n c\u1ee7a to\u00e1n t\u1eed elvis : val s = person . name ?: throw IllegalArgumentException ( \"Name required\" ) Ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a bi\u1ec3u th\u1ee9c throw l\u00e0 m\u1ed9t ki\u1ec3u \u0111\u1eb7c bi\u1ec7t: Nothing . Ki\u1ec3u d\u1eef li\u1ec7u n\u00e0y kh\u00f4ng c\u00f3 gi\u00e1 tr\u1ecb v\u00e0 th\u01b0\u1eddng \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 \u0111\u00e1nh d\u1ea5u c\u00e1c v\u1ecb tr\u00ed trong code m\u00e0 code kh\u00f4ng bao gi\u1edd c\u00f3 th\u1ec3 ch\u1ea1y t\u1edbi \u0111\u01b0\u1ee3c. V\u1edbi code c\u1ee7a b\u1ea1n, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng Nothing \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh c\u00e1c function m\u00e0 kh\u00f4ng bao gi\u1edd tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb g\u00ec: fun fail ( message : String ): Nothing { throw IllegalArgumentException ( message ) } Khi b\u1ea1n g\u1ecdi function n\u00e0y, compiler s\u1ebd bi\u1ebft r\u1eb1ng vi\u1ec7c th\u1ef1c thi kh\u00f4ng th\u1ec3 ti\u1ebfp t\u1ee5c sau khi function n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi val s = person . name ?: fail ( \"Name required\" ) println ( \"hello\" ) // code kh\u00f4ng th\u1ec3 ch\u1ea1y t\u1edbi d\u00f2ng n\u00e0y","title":"Ki\u1ec3u Nothing"},{"location":"kotlin/kotlin_function/","text":"1. \u0110\u1ecbnh ngh\u0129a Function \u00b6 Function \u1edf trong Kotlin \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1eb1ng t\u1eeb kh\u00f3a fun Java public String doSomething ( String matter ) { } Kotlin fun doSomething ( matter : String ): String { } T\u00ean function: doSomething Khai b\u00e1o parameter truy\u1ec1n v\u00e0o function: <t\u00ean param> : <type param> Return type c\u1ee7a function l\u00e0 String : func <t\u00ean function>(): <return type> {//body} Single-Expression Function \u00b6 N\u1ebfu function v\u1edbi return type ch\u1ec9 c\u00f3 m\u1ed9t bi\u1ec3u th\u1ee9c (expression) th\u00ec \u0111\u1ecbnh ngh\u0129a function theo 2 c\u00e1ch d\u01b0\u1edbi t\u01b0\u01a1ng \u0111\u01b0\u01a1ng nhau: ( getInfo() g\u1ecdi l\u00e0 Single-Expression Function) fun getInfo () : String = \"Hello world...\" fun getInfo2 () : String { return \"Hello world...\" } Function Scope \u00b6 C\u00f3 3 lo\u1ea1i function (d\u1ef1a v\u00e0o m\u1ee9c truy c\u1eadp): Member function: L\u00e0 c\u00e1c function \u0111\u01b0\u1ee3c khai b\u00e1o \u1edf trong class, object ho\u1eb7c interface. C\u00e1c function n\u00e0y \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng th\u00f4ng c\u00e1c instance c\u1ee7a class, object ho\u1eb7c interface. Gi\u1ed1ng nh\u01b0 vi\u1ec7c s\u1eed d\u1ee5ng method trong Java. Local function: C\u00f3 th\u1ec3 hi\u1ec3u r\u1eb1ng local function l\u00e0 c\u00e1c function \u0111\u01b0\u1ee3c khai b\u00e1o b\u00ean trong m\u1ed9t function kh\u00e1c (nested). Local function kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u1edf ngo\u00e0i function \u0111\u1ecbnh ngh\u0129a n\u00f3. V\u00ed d\u1ee5 nh\u01b0 trong printArea() , ta \u0111\u1ecbnh ngh\u0129a m\u1ed9t function kh\u00e1c l\u00e0 calculateArea() , do \u0111\u00f3 ta g\u1ecdi calculateArea() l\u00e0 local function: fun printArea ( width : Int , height : Int ): Unit { fun calculateArea ( width : Int , height : Int ): Int = width * height val area = calculateArea ( width , height ) println ( \"The area is $area\" ) } L\u01b0u \u00fd: Local function c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c param v\u00e0 c\u00e1c bi\u1ebfn khai b\u00e1o tr\u01b0\u1edbc n\u00f3 trong function. L\u01b0u \u00fd c\u00e1c bi\u1ebfn khai b\u00e1o sau n\u00f3 th\u00ec kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng: fun reformat ( age : Int , somethingUnknown : String = \"hello\" ) { var birthMonth : Int = 8 fun localRefomat () { birthMonth = 5 //kh\u00f4ng s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c variable birthYear } var birthYear : Int = 1995 } Top-level function: C\u00f3 th\u1ec3 hi\u1ec3u r\u1eb1ng \u0111\u00e2y l\u00e0 nh\u1eefng function \u0111\u01b0\u1ee3c khai b\u00e1o ngo\u00e0i t\u1ea5t c\u1ea3 nh\u01b0 class , object , interface v\u00e0 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong file Kotlin ( .kt ). C\u00e1c method \u0111\u01b0\u1ee3c truy c\u1eadp th\u00f4ng qua t\u00ean c\u1ee7a file vs k\u00ed hi\u1ec7u \"kt\" (\u0111\u1ed1i v\u1edbi Java), trong Kotlin c\u00e1c function n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi tr\u1ef1c ti\u1ebfp qua t\u00ean c\u1ee7a function. Vi\u1ec7c n\u00e0y r\u1ea5t h\u1eefu \u00edch trong vi\u1ec7c \u0111\u1ecbnh ngh\u0129a c\u00e1c c\u00e1c function hepler , util m\u00e0 trong Java hay l\u00e0m th\u00f4ng qua c\u00e1c method static : //file name is DataManager.kt fun isTokenExpired () : Boolean { var isExpired = false //...... return isExpired } G\u1ecdi function Kotlin trong Java: public class JavaMain { public static void main ( String [] args ) { //call top-level function in java DataManagerKt . isTokenExpired (); } } 2. Parameter \u00b6 fun powerOf ( number : Int , exponent : Int ) { //... } Function powerOf c\u00f3 param number v\u00e0 exponent ki\u1ec3u Int . Khai b\u00e1o param theo c\u00fa ph\u00e1p: <t\u00ean param> : <type param> 3. Gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho parameter \u00b6 fun read ( b : Array < Byte >, off : Int = 0 , len : Int = b . size ()) { ... } M\u1ed7i param trong function c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c g\u00e1n gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh ho\u1eb7c kh\u00f4ng g\u00e1n. Gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho ph\u00e9p l\u00fac truy\u1ec1n param cho function c\u00f3 th\u1ec3 b\u1ecf qua c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh. \u0110i\u1ec1u n\u00e0y gi\u00fap kh\u00f4ng ph\u1ea3i vi\u1ebft qu\u00e1 nhi\u1ec1u overload function. L\u01b0u \u00fd: open class A { open fun foo ( i : Int = 10 ) { ... } } class B : A () { override fun foo ( i : Int ) { ... } // no default value allowed } Khi function foo() c\u1ee7a class A \u0111\u00e3 khai b\u00e1o gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho param, th\u00ec khi class B k\u1ebf th\u1eeba class A v\u00e0 override l\u1ea1i function foo() \u0111\u00f3, th\u00ec gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh c\u1ee7a param \u1edf function foo()``class A \u0111\u01b0\u1ee3c gi\u1eef l\u1ea1i v\u00e0 \u1edf class B kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a l\u1ea1i gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh \u0111\u00f3. \u0110\u1eb7t t\u00ean cho \u0111\u1ed1i truy\u1ec1n v\u00e0o \u00b6 \u0110\u1ea7u ti\u00ean ta c\u00f3 function reformat() v\u1edbi c\u00e1c param, trong \u0111\u00f3 c\u00f3 4 param c\u00f3 gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh. fun reformat ( str : String , normalizeCase : Boolean = true , upperCaseFirstLetter : Boolean = true , divideByCamelHumps : Boolean = false , wordSeparator : Char = ' ' ) { ... } C\u00f3 th\u1ec3 g\u1ecdi function theo c\u00e1c c\u00e1ch: S\u1eed d\u1ee5ng c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh c\u1ee7a param reformat ( str ) Kh\u00f4ng s\u1eed d\u1ee5ng c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh c\u1ee7a param reformat ( str , true , true , false , '_' ) Ho\u1eb7c c\u00f3 th\u1ec3 \u0111\u1eb7t t\u00ean cho c\u00e1c \u0111\u1ed1i truy\u1ec1n v\u00e0o \u0111\u1ec3 d\u1ec5 \u0111\u1ecdc h\u01a1n (t\u00f9y ch\u1ecdn). L\u01b0u \u00fd l\u00e0 t\u00ean \u0111\u01b0\u1ee3c \u0111\u1eb7t s\u1ebd ph\u1ea3i gi\u1ed1ng v\u1edbi t\u00ean param c\u1ee7a function \u0111\u00f3 reformat ( str , wordSeparator = '_' ) L\u01b0u \u00fd: Khi s\u1eed function c\u1ee7a Kotlin trong Java, c\u00e1c param \u0111\u01b0\u1ee3c khai b\u00e1o gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh s\u1ebd kh\u00f4ng c\u00f3 t\u00e1c d\u1ee5ng. V\u00ec Java kh\u00f4ng th\u1ec3 b\u1ecf qua c\u00e1c param c\u00f3 gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh. Khi s\u1eed d\u1ee5ng method c\u1ee7a Java trong Kotlin , kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c ch\u1ee9c n\u0103ng \u0111\u1eb7t t\u00ean cho \u0111\u1ed1i truy\u1ec1n v\u00e0o. 4. Unit-returning functions \u00b6 fun printHello ( name : String ?): Unit { if ( name != null ) println ( \"Hello ${name}\" ) else println ( \"Hi there!\" ) // `return Unit` or `return` is optional } Unit \u1edf \u0111\u00e2y c\u00f3 th\u1ec3 hi\u1ec3u nh\u01b0 l\u00e0 Void \u1edf trong Java ho\u1eb7c c\u00e1c ng\u00f4n ng\u1eef kh\u00e1c. Vi\u1ec7c khai b\u00e1o return type l\u00e0 Unit l\u00e0 kh\u00f4ng b\u1eaft bu\u1ed9c. V\u00ed d\u1ee5 nh\u01b0: fun printHello ( name : String ?) { ... } Unit c\u0169ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong vi\u1ec7c khai b\u00e1o c\u00e1c Higher-Order Function \u1edf ph\u1ea7n s\u1eafp t\u1edbi. 5. Extension functions \u00b6 Gi\u1ed1ng v\u1edbi Swift , Kotlin cho ph\u00e9p ta m\u1edf r\u1ed9ng class m\u00e0 kh\u00f4ng ph\u1ea3i k\u1ebf th\u1eeba t\u1eeb class kh\u00e1c. V\u00ed d\u1ee5 nh\u01b0 ta mu\u1ed1n th\u00eam function swap() cho class MutableList<Int> : fun MutableList < Int >. swap ( index1 : Int , index2 : Int ) { val tmp = this [ index1 ] // 'this' corresponds to the list this [ index1 ] = this [ index2 ] this [ index2 ] = tmp } T\u1eeb kh\u00f3a this \u1edf \u0111\u00e2y d\u00f9ng \u0111\u1ec3 ch\u1ec9 \u0111\u1ebfn instance MutableList<Int> m\u00e0 g\u1ecdi function swap() val l = mutableListOf ( 1 , 2 , 3 ) l . swap ( 0 , 2 ) // 'this' inside 'swap()' will hold the value of 'l' Tuy nhi\u00ean n\u1ebfu extension cho MutableList<Int> ch\u00fang ta ch\u1ec9 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c v\u1edbi c\u00e1c instance c\u1ee7a MutableList<Int> , ch\u00fang ta c\u0169ng c\u00f3 th\u1ec3 kh\u1edfi t\u1ea1o chung b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng Generic Function: fun < T > MutableList < T >. swap ( index1 : Int , index2 : Int ) { val tmp = this [ index1 ] // 'this' corresponds to the list this [ index1 ] = this [ index2 ] this [ index2 ] = tmp } 6. Return nhi\u1ec1u gi\u00e1 tr\u1ecb (Mutiple return values) \u00b6 Xem v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y: data class Result ( val result : Int , val status : Status ) fun function (...): Result { // computations return Result ( result , status ) } // Now, to use this function: val ( result , status ) = function (...) Nh\u01b0 ta th\u1ea5y, function c\u00f3 th\u1ec3 tr\u1ea3 v\u1ec1 \u0111\u1ed3ng th\u1eddi 2 gi\u00e1 tr\u1ecb result v\u00e0 status . B\u1ea3n ch\u1ea5t c\u1ee7a vi\u1ec7c n\u00e0y l\u00e0 g\u00f3i ch\u00fang v\u00e0o m\u1ed9t data class m\u00e0 th\u00f4i v\u00e0 s\u1eed Destructure (tr\u00ecnh b\u00e0y ph\u1ea7n ti\u1ebfp theo) \u0111\u1ec3 g\u00e1n ch\u00fang cho c\u00e1c bi\u1ebfn. Nh\u00ecn \u0111\u1ebfn \u0111\u00e2y ta c\u00f3 th\u1ec3 ngh\u0129 \u0111\u1ebfn s\u1eed d\u1ee5ng Pair<L, R> . Tuy nhi\u00ean vi\u1ec7c s\u1eed d\u1ee5ng class v\u1edbi c\u00e1c t\u00ean c\u00f3 ngh\u0129a gi\u00fap code d\u1ec5 \u0111\u1ecdc h\u01a1n vi\u1ec7c s\u1eed d\u1ee5ng first v\u00e0 second trong Pair . Destructuring Declarations \u00b6 Xem v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y: data class Person ( var name : String , var age : Int ) val ( name , age ) = Person ( \"Hado\" , 22 ) println ( \"Name: $name\" ) //print: Name: Hado println ( \"Age: $age\" ) //print: Age: 22 \u0110o\u1ea1n code tr\u00ean sau khi \u0111\u01b0\u1ee3c complie th\u1ef1c ra s\u1ebd nh\u01b0 th\u1ebf n\u00e0y: data class Person ( var name : String , var age : Int ) val person = Person ( \"Hado\" , 22 ) val name = person . component1 () val age = person . component2 () println ( \"Name: $name\" ) //print: Name: Hado println ( \"Age: $age\" ) //print: Age: 22 Ta c\u00f3 data class v\u1edbi primary constructor c\u00f3 2 param name v\u00e0 age , class s\u1ebd l\u1ea7n l\u01b0\u1ee3t t\u1ef1 \u0111\u1ed9ng t\u1ea1o ra c\u00e1c function componentN (N: 1, 2, 3, ...) cho c\u00e1c param. L\u01b0u \u00fd ch\u1ec9 c\u00f3 c\u00e1c param trong primary constructor m\u1edbi \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng t\u1ea1o ra function component . N\u1ebfu ch\u00fang ta khai b\u00e1o th\u00eam bi\u1ebfn trong class v\u00e0 mu\u1ed1n s\u1eed d\u1ee5ng Destructure th\u00ec c\u1ea7n kh\u1edfi t\u1ea1o th\u00eam c\u00e1c function component t\u01b0\u01a1ng \u1ee9ng v\u1edbi param \u0111\u00f3. V\u00ed d\u1ee5 nh\u01b0: data class Person ( var name : String , var age : Int ) { var province : String = \"Ha Noi\" operator fun component3 (): String { return province } } val ( name , age , province ) = Person ( \"Hado\" , 22 ) println ( \"Name: $name\" ) //print: Name: Hado println ( \"Age: $age\" ) //print: Age: 22 println ( \"Province: $province\" ) //print: Province: Ha Noi N\u1ebfu nh\u01b0 trong class Person , ta ch\u1ec9 c\u1ea7n l\u1ea5y 2 gi\u00e1 tr\u1ecb l\u00e0 age v\u00e0 province , \u0111\u1ed3ng th\u1eddi kh\u00f4ng mu\u1ed1n t\u1ea1o ra bi\u1ebfn name ta s\u1eed d\u1ee5ng d\u1ea5u \"_\" \u0111\u1ec3 thay cho c\u00e1c bi\u1ebfn kh\u00f4ng c\u1ea7n s\u1eed d\u1ee5ng: val ( _ , age , province ) = Person ( \"Hado\" , 22 ) println ( \"Age: $age\" ) //print: Age: 22 println ( \"Province: $province\" ) //print: Province: Ha Noi 7. Generic functions \u00b6 Gi\u1ed1ng nh\u01b0 Java , Kotlin cho ph\u00e9p s\u1eed d\u1ee5ng generic function gi\u00fap cho vi\u1ec7c gi\u1ea3m s\u1ed1 l\u01b0\u1ee3ng code, function c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi nhi\u1ec1u ki\u1ec3u kh\u00e1c nhau \u0110\u1ec3 \u0111\u1ecbnh ngh\u0129a generic function , ta s\u1eed d\u1ee5ng form sau: fun < T > singletonList ( item : T ): List < T > { // ... } fun < T > T . basicToString () : String { // extension function // ... } \u0110\u1ec3 g\u1ecdi function, c\u1ea7n x\u00e1c \u0111\u1ecbnh ki\u1ec3u cho function: val l = singletonList < Int >( 1 ) Ngo\u00e0i ra, gi\u1ed1ng nh\u01b0 Java , ta c\u0169ng c\u00f3 th\u1ec3 t\u1ea1o generic function v\u1edbi ki\u1ec3u \u0111\u01b0\u1ee3c extends t\u1eeb m\u1ed9t ki\u1ec3u kh\u00e1c: fun < T : Comparable < T > > sort ( list : List < T >) { // ... } B\u00e2y gi\u1edd, ta c\u00f3 th\u1ec3 g\u1ecdi function v\u1edbi c\u00e1c bi\u1ebfn c\u00f3 ki\u1ec3u l\u00e0 subclass c\u1ee7a Comparable : sort ( listOf ( 1 , 2 , 3 )) // OK. Int is a subtype of Comparable<Int> sort ( listOf ( HashMap < Int , String >())) // Error: HashMap<Int, String> is not a subtype of Comparable<HashMap<Int, String>> 8. Infix notation \u00b6 Xem v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y: class Fly ( var currentPlace : String ) { infix fun flyTo ( nextPlace : String ) { println ( \"The plane fly from $currentPlace to $nextPlace\" ) } } val plane1 = Fly ( \"Ha Noi\" ) plane1 flyTo \"Ho Chi Minh\" //print: The plane fly from Ha Noi to Ho Chi Minh plane1 . flyTo ( \"Ho Chi Minh\" ) //print: The plane fly from Ha Noi to Ho Chi Minh Nh\u1edd s\u1eed d\u1ee5ng k\u00fd hi\u1ec7u infix cho function flyTo() , ta c\u00f3 th\u1ec3 s\u1ef1 d\u1ee5ng t\u00ean function nh\u01b0 trung t\u1ed1 li\u00ean k\u1ebft gi\u1eefa instance class v\u00e0 param truy\u1ec1n v\u00e0o. Function c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng infix notation (trung t\u1ed1) khi Function l\u00e0 member c\u1ee7a m\u1ed9t class ho\u1eb7c l\u00e0 extension c\u1ee7a class Function ch\u1ec9 c\u00f3 m\u1ed9t param duy nh\u1ea5t Function \u0111\u01b0\u1ee3c mark b\u1eb1ng infix \u1edf \u0111\u1ea7u function 9. Function v\u1edbi parameter kh\u00f4ng x\u00e1c \u0111\u1ecbnh \u00b6 T\u01b0\u01a1ng t\u1ef1 trong Java , Kotlin cho ph\u00e9p m\u1ed9t function kh\u00f4ng c\u1ea7n x\u00e1c \u0111\u1ecbnh s\u1ed1 l\u01b0\u1ee3ng param m\u1ed9t c\u00e1ch c\u1ee5 th\u1ec3. Java public int add ( int ... array ) { int s = 0 ; for ( int i : array ) { s += i ; } return s ; } Kotlin fun add ( vararg array : Int ) : Int { var s = 0 for ( i in array ) { s += i } return s } Ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a vararg . V\u00e0 c\u0169ng t\u01b0\u01a1ng t\u1ef1 nh\u01b0 Java , bi\u1ebfn array \u0111\u01b0\u1ee3c coi l\u00e0 m\u1ed9t m\u1ea3ng. L\u01b0u \u00fd: Ch\u1ec9 c\u00f3 m\u1ed9t param \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u l\u00e0 vararg . N\u1ebfu param kh\u00f4ng ph\u1ea3i l\u00e0 param cu\u1ed1i c\u00f9ng, khi g\u1ecdi h\u00e0m, ta ph\u1ea3i ch\u1ec9 \u0111\u1ecbnh r\u00f5 c\u00e1c param sau \u0111\u00f3 fun multiPrint ( prefix : String , vararg strings : String , suffix : String ) { //..... } S\u1eed d\u1ee5ng function multiPrint() : multiPrint ( \"Start\" , \"a\" , \"b\" , \"c\" , suffix = \"End\" ) 10. Inline function \u00b6 Inline function \u0111\u01b0\u1ee3c gi\u1ea3i th\u00edch \u1edf \u0111\u00e2y","title":"Kotlin Funtion"},{"location":"kotlin/kotlin_function/#146-inh-nghia-function","text":"Function \u1edf trong Kotlin \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1eb1ng t\u1eeb kh\u00f3a fun Java public String doSomething ( String matter ) { } Kotlin fun doSomething ( matter : String ): String { } T\u00ean function: doSomething Khai b\u00e1o parameter truy\u1ec1n v\u00e0o function: <t\u00ean param> : <type param> Return type c\u1ee7a function l\u00e0 String : func <t\u00ean function>(): <return type> {//body}","title":"1. \u0110\u1ecbnh ngh\u0129a Function"},{"location":"kotlin/kotlin_function/#single-expression-function","text":"N\u1ebfu function v\u1edbi return type ch\u1ec9 c\u00f3 m\u1ed9t bi\u1ec3u th\u1ee9c (expression) th\u00ec \u0111\u1ecbnh ngh\u0129a function theo 2 c\u00e1ch d\u01b0\u1edbi t\u01b0\u01a1ng \u0111\u01b0\u01a1ng nhau: ( getInfo() g\u1ecdi l\u00e0 Single-Expression Function) fun getInfo () : String = \"Hello world...\" fun getInfo2 () : String { return \"Hello world...\" }","title":"Single-Expression Function"},{"location":"kotlin/kotlin_function/#function-scope","text":"C\u00f3 3 lo\u1ea1i function (d\u1ef1a v\u00e0o m\u1ee9c truy c\u1eadp): Member function: L\u00e0 c\u00e1c function \u0111\u01b0\u1ee3c khai b\u00e1o \u1edf trong class, object ho\u1eb7c interface. C\u00e1c function n\u00e0y \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng th\u00f4ng c\u00e1c instance c\u1ee7a class, object ho\u1eb7c interface. Gi\u1ed1ng nh\u01b0 vi\u1ec7c s\u1eed d\u1ee5ng method trong Java. Local function: C\u00f3 th\u1ec3 hi\u1ec3u r\u1eb1ng local function l\u00e0 c\u00e1c function \u0111\u01b0\u1ee3c khai b\u00e1o b\u00ean trong m\u1ed9t function kh\u00e1c (nested). Local function kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u1edf ngo\u00e0i function \u0111\u1ecbnh ngh\u0129a n\u00f3. V\u00ed d\u1ee5 nh\u01b0 trong printArea() , ta \u0111\u1ecbnh ngh\u0129a m\u1ed9t function kh\u00e1c l\u00e0 calculateArea() , do \u0111\u00f3 ta g\u1ecdi calculateArea() l\u00e0 local function: fun printArea ( width : Int , height : Int ): Unit { fun calculateArea ( width : Int , height : Int ): Int = width * height val area = calculateArea ( width , height ) println ( \"The area is $area\" ) } L\u01b0u \u00fd: Local function c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c param v\u00e0 c\u00e1c bi\u1ebfn khai b\u00e1o tr\u01b0\u1edbc n\u00f3 trong function. L\u01b0u \u00fd c\u00e1c bi\u1ebfn khai b\u00e1o sau n\u00f3 th\u00ec kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng: fun reformat ( age : Int , somethingUnknown : String = \"hello\" ) { var birthMonth : Int = 8 fun localRefomat () { birthMonth = 5 //kh\u00f4ng s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c variable birthYear } var birthYear : Int = 1995 } Top-level function: C\u00f3 th\u1ec3 hi\u1ec3u r\u1eb1ng \u0111\u00e2y l\u00e0 nh\u1eefng function \u0111\u01b0\u1ee3c khai b\u00e1o ngo\u00e0i t\u1ea5t c\u1ea3 nh\u01b0 class , object , interface v\u00e0 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong file Kotlin ( .kt ). C\u00e1c method \u0111\u01b0\u1ee3c truy c\u1eadp th\u00f4ng qua t\u00ean c\u1ee7a file vs k\u00ed hi\u1ec7u \"kt\" (\u0111\u1ed1i v\u1edbi Java), trong Kotlin c\u00e1c function n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi tr\u1ef1c ti\u1ebfp qua t\u00ean c\u1ee7a function. Vi\u1ec7c n\u00e0y r\u1ea5t h\u1eefu \u00edch trong vi\u1ec7c \u0111\u1ecbnh ngh\u0129a c\u00e1c c\u00e1c function hepler , util m\u00e0 trong Java hay l\u00e0m th\u00f4ng qua c\u00e1c method static : //file name is DataManager.kt fun isTokenExpired () : Boolean { var isExpired = false //...... return isExpired } G\u1ecdi function Kotlin trong Java: public class JavaMain { public static void main ( String [] args ) { //call top-level function in java DataManagerKt . isTokenExpired (); } }","title":"Function Scope"},{"location":"kotlin/kotlin_function/#246-parameter","text":"fun powerOf ( number : Int , exponent : Int ) { //... } Function powerOf c\u00f3 param number v\u00e0 exponent ki\u1ec3u Int . Khai b\u00e1o param theo c\u00fa ph\u00e1p: <t\u00ean param> : <type param>","title":"2. Parameter"},{"location":"kotlin/kotlin_function/#3-gia-tri-mac-inh-cho-parameter","text":"fun read ( b : Array < Byte >, off : Int = 0 , len : Int = b . size ()) { ... } M\u1ed7i param trong function c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c g\u00e1n gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh ho\u1eb7c kh\u00f4ng g\u00e1n. Gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho ph\u00e9p l\u00fac truy\u1ec1n param cho function c\u00f3 th\u1ec3 b\u1ecf qua c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh. \u0110i\u1ec1u n\u00e0y gi\u00fap kh\u00f4ng ph\u1ea3i vi\u1ebft qu\u00e1 nhi\u1ec1u overload function. L\u01b0u \u00fd: open class A { open fun foo ( i : Int = 10 ) { ... } } class B : A () { override fun foo ( i : Int ) { ... } // no default value allowed } Khi function foo() c\u1ee7a class A \u0111\u00e3 khai b\u00e1o gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho param, th\u00ec khi class B k\u1ebf th\u1eeba class A v\u00e0 override l\u1ea1i function foo() \u0111\u00f3, th\u00ec gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh c\u1ee7a param \u1edf function foo()``class A \u0111\u01b0\u1ee3c gi\u1eef l\u1ea1i v\u00e0 \u1edf class B kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a l\u1ea1i gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh \u0111\u00f3.","title":"3. Gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho parameter"},{"location":"kotlin/kotlin_function/#at-ten-cho-oi-truyen-vao","text":"\u0110\u1ea7u ti\u00ean ta c\u00f3 function reformat() v\u1edbi c\u00e1c param, trong \u0111\u00f3 c\u00f3 4 param c\u00f3 gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh. fun reformat ( str : String , normalizeCase : Boolean = true , upperCaseFirstLetter : Boolean = true , divideByCamelHumps : Boolean = false , wordSeparator : Char = ' ' ) { ... } C\u00f3 th\u1ec3 g\u1ecdi function theo c\u00e1c c\u00e1ch: S\u1eed d\u1ee5ng c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh c\u1ee7a param reformat ( str ) Kh\u00f4ng s\u1eed d\u1ee5ng c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh c\u1ee7a param reformat ( str , true , true , false , '_' ) Ho\u1eb7c c\u00f3 th\u1ec3 \u0111\u1eb7t t\u00ean cho c\u00e1c \u0111\u1ed1i truy\u1ec1n v\u00e0o \u0111\u1ec3 d\u1ec5 \u0111\u1ecdc h\u01a1n (t\u00f9y ch\u1ecdn). L\u01b0u \u00fd l\u00e0 t\u00ean \u0111\u01b0\u1ee3c \u0111\u1eb7t s\u1ebd ph\u1ea3i gi\u1ed1ng v\u1edbi t\u00ean param c\u1ee7a function \u0111\u00f3 reformat ( str , wordSeparator = '_' ) L\u01b0u \u00fd: Khi s\u1eed function c\u1ee7a Kotlin trong Java, c\u00e1c param \u0111\u01b0\u1ee3c khai b\u00e1o gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh s\u1ebd kh\u00f4ng c\u00f3 t\u00e1c d\u1ee5ng. V\u00ec Java kh\u00f4ng th\u1ec3 b\u1ecf qua c\u00e1c param c\u00f3 gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh. Khi s\u1eed d\u1ee5ng method c\u1ee7a Java trong Kotlin , kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c ch\u1ee9c n\u0103ng \u0111\u1eb7t t\u00ean cho \u0111\u1ed1i truy\u1ec1n v\u00e0o.","title":"\u0110\u1eb7t t\u00ean cho \u0111\u1ed1i truy\u1ec1n v\u00e0o"},{"location":"kotlin/kotlin_function/#4-unit-returning-functions","text":"fun printHello ( name : String ?): Unit { if ( name != null ) println ( \"Hello ${name}\" ) else println ( \"Hi there!\" ) // `return Unit` or `return` is optional } Unit \u1edf \u0111\u00e2y c\u00f3 th\u1ec3 hi\u1ec3u nh\u01b0 l\u00e0 Void \u1edf trong Java ho\u1eb7c c\u00e1c ng\u00f4n ng\u1eef kh\u00e1c. Vi\u1ec7c khai b\u00e1o return type l\u00e0 Unit l\u00e0 kh\u00f4ng b\u1eaft bu\u1ed9c. V\u00ed d\u1ee5 nh\u01b0: fun printHello ( name : String ?) { ... } Unit c\u0169ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong vi\u1ec7c khai b\u00e1o c\u00e1c Higher-Order Function \u1edf ph\u1ea7n s\u1eafp t\u1edbi.","title":"4. Unit-returning functions"},{"location":"kotlin/kotlin_function/#5-extension-functions","text":"Gi\u1ed1ng v\u1edbi Swift , Kotlin cho ph\u00e9p ta m\u1edf r\u1ed9ng class m\u00e0 kh\u00f4ng ph\u1ea3i k\u1ebf th\u1eeba t\u1eeb class kh\u00e1c. V\u00ed d\u1ee5 nh\u01b0 ta mu\u1ed1n th\u00eam function swap() cho class MutableList<Int> : fun MutableList < Int >. swap ( index1 : Int , index2 : Int ) { val tmp = this [ index1 ] // 'this' corresponds to the list this [ index1 ] = this [ index2 ] this [ index2 ] = tmp } T\u1eeb kh\u00f3a this \u1edf \u0111\u00e2y d\u00f9ng \u0111\u1ec3 ch\u1ec9 \u0111\u1ebfn instance MutableList<Int> m\u00e0 g\u1ecdi function swap() val l = mutableListOf ( 1 , 2 , 3 ) l . swap ( 0 , 2 ) // 'this' inside 'swap()' will hold the value of 'l' Tuy nhi\u00ean n\u1ebfu extension cho MutableList<Int> ch\u00fang ta ch\u1ec9 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c v\u1edbi c\u00e1c instance c\u1ee7a MutableList<Int> , ch\u00fang ta c\u0169ng c\u00f3 th\u1ec3 kh\u1edfi t\u1ea1o chung b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng Generic Function: fun < T > MutableList < T >. swap ( index1 : Int , index2 : Int ) { val tmp = this [ index1 ] // 'this' corresponds to the list this [ index1 ] = this [ index2 ] this [ index2 ] = tmp }","title":"5. Extension functions"},{"location":"kotlin/kotlin_function/#6-return-nhieu-gia-tri-mutiple-return-values","text":"Xem v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y: data class Result ( val result : Int , val status : Status ) fun function (...): Result { // computations return Result ( result , status ) } // Now, to use this function: val ( result , status ) = function (...) Nh\u01b0 ta th\u1ea5y, function c\u00f3 th\u1ec3 tr\u1ea3 v\u1ec1 \u0111\u1ed3ng th\u1eddi 2 gi\u00e1 tr\u1ecb result v\u00e0 status . B\u1ea3n ch\u1ea5t c\u1ee7a vi\u1ec7c n\u00e0y l\u00e0 g\u00f3i ch\u00fang v\u00e0o m\u1ed9t data class m\u00e0 th\u00f4i v\u00e0 s\u1eed Destructure (tr\u00ecnh b\u00e0y ph\u1ea7n ti\u1ebfp theo) \u0111\u1ec3 g\u00e1n ch\u00fang cho c\u00e1c bi\u1ebfn. Nh\u00ecn \u0111\u1ebfn \u0111\u00e2y ta c\u00f3 th\u1ec3 ngh\u0129 \u0111\u1ebfn s\u1eed d\u1ee5ng Pair<L, R> . Tuy nhi\u00ean vi\u1ec7c s\u1eed d\u1ee5ng class v\u1edbi c\u00e1c t\u00ean c\u00f3 ngh\u0129a gi\u00fap code d\u1ec5 \u0111\u1ecdc h\u01a1n vi\u1ec7c s\u1eed d\u1ee5ng first v\u00e0 second trong Pair .","title":"6. Return nhi\u1ec1u gi\u00e1 tr\u1ecb (Mutiple return values)"},{"location":"kotlin/kotlin_function/#destructuring-declarations","text":"Xem v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y: data class Person ( var name : String , var age : Int ) val ( name , age ) = Person ( \"Hado\" , 22 ) println ( \"Name: $name\" ) //print: Name: Hado println ( \"Age: $age\" ) //print: Age: 22 \u0110o\u1ea1n code tr\u00ean sau khi \u0111\u01b0\u1ee3c complie th\u1ef1c ra s\u1ebd nh\u01b0 th\u1ebf n\u00e0y: data class Person ( var name : String , var age : Int ) val person = Person ( \"Hado\" , 22 ) val name = person . component1 () val age = person . component2 () println ( \"Name: $name\" ) //print: Name: Hado println ( \"Age: $age\" ) //print: Age: 22 Ta c\u00f3 data class v\u1edbi primary constructor c\u00f3 2 param name v\u00e0 age , class s\u1ebd l\u1ea7n l\u01b0\u1ee3t t\u1ef1 \u0111\u1ed9ng t\u1ea1o ra c\u00e1c function componentN (N: 1, 2, 3, ...) cho c\u00e1c param. L\u01b0u \u00fd ch\u1ec9 c\u00f3 c\u00e1c param trong primary constructor m\u1edbi \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng t\u1ea1o ra function component . N\u1ebfu ch\u00fang ta khai b\u00e1o th\u00eam bi\u1ebfn trong class v\u00e0 mu\u1ed1n s\u1eed d\u1ee5ng Destructure th\u00ec c\u1ea7n kh\u1edfi t\u1ea1o th\u00eam c\u00e1c function component t\u01b0\u01a1ng \u1ee9ng v\u1edbi param \u0111\u00f3. V\u00ed d\u1ee5 nh\u01b0: data class Person ( var name : String , var age : Int ) { var province : String = \"Ha Noi\" operator fun component3 (): String { return province } } val ( name , age , province ) = Person ( \"Hado\" , 22 ) println ( \"Name: $name\" ) //print: Name: Hado println ( \"Age: $age\" ) //print: Age: 22 println ( \"Province: $province\" ) //print: Province: Ha Noi N\u1ebfu nh\u01b0 trong class Person , ta ch\u1ec9 c\u1ea7n l\u1ea5y 2 gi\u00e1 tr\u1ecb l\u00e0 age v\u00e0 province , \u0111\u1ed3ng th\u1eddi kh\u00f4ng mu\u1ed1n t\u1ea1o ra bi\u1ebfn name ta s\u1eed d\u1ee5ng d\u1ea5u \"_\" \u0111\u1ec3 thay cho c\u00e1c bi\u1ebfn kh\u00f4ng c\u1ea7n s\u1eed d\u1ee5ng: val ( _ , age , province ) = Person ( \"Hado\" , 22 ) println ( \"Age: $age\" ) //print: Age: 22 println ( \"Province: $province\" ) //print: Province: Ha Noi","title":"Destructuring Declarations"},{"location":"kotlin/kotlin_function/#7-generic-functions","text":"Gi\u1ed1ng nh\u01b0 Java , Kotlin cho ph\u00e9p s\u1eed d\u1ee5ng generic function gi\u00fap cho vi\u1ec7c gi\u1ea3m s\u1ed1 l\u01b0\u1ee3ng code, function c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi nhi\u1ec1u ki\u1ec3u kh\u00e1c nhau \u0110\u1ec3 \u0111\u1ecbnh ngh\u0129a generic function , ta s\u1eed d\u1ee5ng form sau: fun < T > singletonList ( item : T ): List < T > { // ... } fun < T > T . basicToString () : String { // extension function // ... } \u0110\u1ec3 g\u1ecdi function, c\u1ea7n x\u00e1c \u0111\u1ecbnh ki\u1ec3u cho function: val l = singletonList < Int >( 1 ) Ngo\u00e0i ra, gi\u1ed1ng nh\u01b0 Java , ta c\u0169ng c\u00f3 th\u1ec3 t\u1ea1o generic function v\u1edbi ki\u1ec3u \u0111\u01b0\u1ee3c extends t\u1eeb m\u1ed9t ki\u1ec3u kh\u00e1c: fun < T : Comparable < T > > sort ( list : List < T >) { // ... } B\u00e2y gi\u1edd, ta c\u00f3 th\u1ec3 g\u1ecdi function v\u1edbi c\u00e1c bi\u1ebfn c\u00f3 ki\u1ec3u l\u00e0 subclass c\u1ee7a Comparable : sort ( listOf ( 1 , 2 , 3 )) // OK. Int is a subtype of Comparable<Int> sort ( listOf ( HashMap < Int , String >())) // Error: HashMap<Int, String> is not a subtype of Comparable<HashMap<Int, String>>","title":"7. Generic functions"},{"location":"kotlin/kotlin_function/#8-infix-notation","text":"Xem v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y: class Fly ( var currentPlace : String ) { infix fun flyTo ( nextPlace : String ) { println ( \"The plane fly from $currentPlace to $nextPlace\" ) } } val plane1 = Fly ( \"Ha Noi\" ) plane1 flyTo \"Ho Chi Minh\" //print: The plane fly from Ha Noi to Ho Chi Minh plane1 . flyTo ( \"Ho Chi Minh\" ) //print: The plane fly from Ha Noi to Ho Chi Minh Nh\u1edd s\u1eed d\u1ee5ng k\u00fd hi\u1ec7u infix cho function flyTo() , ta c\u00f3 th\u1ec3 s\u1ef1 d\u1ee5ng t\u00ean function nh\u01b0 trung t\u1ed1 li\u00ean k\u1ebft gi\u1eefa instance class v\u00e0 param truy\u1ec1n v\u00e0o. Function c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng infix notation (trung t\u1ed1) khi Function l\u00e0 member c\u1ee7a m\u1ed9t class ho\u1eb7c l\u00e0 extension c\u1ee7a class Function ch\u1ec9 c\u00f3 m\u1ed9t param duy nh\u1ea5t Function \u0111\u01b0\u1ee3c mark b\u1eb1ng infix \u1edf \u0111\u1ea7u function","title":"8. Infix notation"},{"location":"kotlin/kotlin_function/#9-function-voi-parameter-khong-xac-inh","text":"T\u01b0\u01a1ng t\u1ef1 trong Java , Kotlin cho ph\u00e9p m\u1ed9t function kh\u00f4ng c\u1ea7n x\u00e1c \u0111\u1ecbnh s\u1ed1 l\u01b0\u1ee3ng param m\u1ed9t c\u00e1ch c\u1ee5 th\u1ec3. Java public int add ( int ... array ) { int s = 0 ; for ( int i : array ) { s += i ; } return s ; } Kotlin fun add ( vararg array : Int ) : Int { var s = 0 for ( i in array ) { s += i } return s } Ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a vararg . V\u00e0 c\u0169ng t\u01b0\u01a1ng t\u1ef1 nh\u01b0 Java , bi\u1ebfn array \u0111\u01b0\u1ee3c coi l\u00e0 m\u1ed9t m\u1ea3ng. L\u01b0u \u00fd: Ch\u1ec9 c\u00f3 m\u1ed9t param \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u l\u00e0 vararg . N\u1ebfu param kh\u00f4ng ph\u1ea3i l\u00e0 param cu\u1ed1i c\u00f9ng, khi g\u1ecdi h\u00e0m, ta ph\u1ea3i ch\u1ec9 \u0111\u1ecbnh r\u00f5 c\u00e1c param sau \u0111\u00f3 fun multiPrint ( prefix : String , vararg strings : String , suffix : String ) { //..... } S\u1eed d\u1ee5ng function multiPrint() : multiPrint ( \"Start\" , \"a\" , \"b\" , \"c\" , suffix = \"End\" )","title":"9. Function v\u1edbi parameter kh\u00f4ng x\u00e1c \u0111\u1ecbnh"},{"location":"kotlin/kotlin_function/#1046-inline-function","text":"Inline function \u0111\u01b0\u1ee3c gi\u1ea3i th\u00edch \u1edf \u0111\u00e2y","title":"10. Inline function"},{"location":"kotlin/kotlin_higher_order_function/","text":"Higher-Order function l\u00e0 function c\u00f3 th\u1ec3 nh\u1eadn m\u1ed9t function nh\u01b0 m\u1ed9t param ho\u1eb7c c\u00f3 th\u1ec3 tr\u1ea3 v\u1ec1 m\u1ed9t function: fun doSomethingWithNumber ( number : Int , receiver : ( String ?) -> Unit ) { var result : String ? = null //...do complex work with number receiver ( result ) } Function doSomethingWithNumber() c\u00f3 2 param l\u00e0 number ki\u1ec3u Int v\u00e0 receiver l\u00e0 m\u1ed9t function (String?) -> Unit v\u1edbi String l\u00e0 ki\u1ec3u c\u1ee7a tham s\u1ed1 truy\u1ec1n v\u00e0o v\u00e0 Unit ( Void ) l\u00e0 ki\u1ec3u tr\u1ea3 v\u1ec1 c\u1ee7a h\u00e0m. Ta c\u00f3 th\u1ec3 g\u1ecdi doSomethingWithNumber() b\u1eb1ng nh\u1eefng c\u00e1ch sau: Function References: \u00b6 doSomethingWithNumber ( 1000 , :: processWithResult ) fun processWithResult ( result : String ?) : Unit { // do something with result } L\u00fac n\u00e0y sau khi m\u00e0 function doSomethingWithNumber() g\u1ecdi receiver(result) , s\u1ebd nh\u1ea3y v\u00e0o function processWithResult() v\u1edbi result \u0111\u01b0\u1ee3c truy\u1ec1n t\u1eeb function doSomethingWithNumber() , \u0111i\u1ec1u n\u00e0y gi\u1ed1ng v\u1edbi callback trong Java hay c\u00e1c ng\u00f4n ng\u1eef kh\u00e1c. Thay v\u00ec ta truy\u1ec1n interface th\u00ec \u1edf \u0111\u00e2y ta truy\u1ec1n reference c\u1ee7a function v\u00e0o b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng to\u00e1n t\u1eed :: v\u00e0 t\u00ean function. N\u00f3i th\u00eam m\u1ed9t ch\u00fat v\u1ec1 Function References . To\u00e1n t\u1eed :: c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi c\u00e1c overload function v\u00ed d\u1ee5 nh\u01b0: fun isOdd ( x : Int ) = x % 2 != 0 fun isOdd ( s : String ) = s == \"brillig\" || s == \"slithy\" || s == \"tove\" val numbers = listOf ( 1 , 2 , 3 ) println ( numbers . filter ( :: isOdd )) // refers to isOdd(x: Int) Function Anonymous \u00b6 doSomethingWithNumber ( 1000 , fun ( result : String ?) { // do something with result }) Thay v\u00ec truy\u1ec1n reference c\u1ee7a function v\u00e0o, ta \u0111\u1ecbnh ngh\u0129a lu\u00f4n function \u1edf argument. Function Anonymous kh\u00e1 gi\u1ed1ng v\u1edbi v\u1edbi c\u00e1c function th\u00f4ng th\u01b0\u1eddng, ch\u1ec9 kh\u00e1c m\u1ed9t \u0111i\u1ec1u l\u00e0 t\u00ean c\u1ee7a function b\u1ecb b\u1ecf qua.","title":"Kotlin Higher order funtion"},{"location":"kotlin/kotlin_higher_order_function/#function-references","text":"doSomethingWithNumber ( 1000 , :: processWithResult ) fun processWithResult ( result : String ?) : Unit { // do something with result } L\u00fac n\u00e0y sau khi m\u00e0 function doSomethingWithNumber() g\u1ecdi receiver(result) , s\u1ebd nh\u1ea3y v\u00e0o function processWithResult() v\u1edbi result \u0111\u01b0\u1ee3c truy\u1ec1n t\u1eeb function doSomethingWithNumber() , \u0111i\u1ec1u n\u00e0y gi\u1ed1ng v\u1edbi callback trong Java hay c\u00e1c ng\u00f4n ng\u1eef kh\u00e1c. Thay v\u00ec ta truy\u1ec1n interface th\u00ec \u1edf \u0111\u00e2y ta truy\u1ec1n reference c\u1ee7a function v\u00e0o b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng to\u00e1n t\u1eed :: v\u00e0 t\u00ean function. N\u00f3i th\u00eam m\u1ed9t ch\u00fat v\u1ec1 Function References . To\u00e1n t\u1eed :: c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi c\u00e1c overload function v\u00ed d\u1ee5 nh\u01b0: fun isOdd ( x : Int ) = x % 2 != 0 fun isOdd ( s : String ) = s == \"brillig\" || s == \"slithy\" || s == \"tove\" val numbers = listOf ( 1 , 2 , 3 ) println ( numbers . filter ( :: isOdd )) // refers to isOdd(x: Int)","title":"Function References:"},{"location":"kotlin/kotlin_higher_order_function/#function-anonymous","text":"doSomethingWithNumber ( 1000 , fun ( result : String ?) { // do something with result }) Thay v\u00ec truy\u1ec1n reference c\u1ee7a function v\u00e0o, ta \u0111\u1ecbnh ngh\u0129a lu\u00f4n function \u1edf argument. Function Anonymous kh\u00e1 gi\u1ed1ng v\u1edbi v\u1edbi c\u00e1c function th\u00f4ng th\u01b0\u1eddng, ch\u1ec9 kh\u00e1c m\u1ed9t \u0111i\u1ec1u l\u00e0 t\u00ean c\u1ee7a function b\u1ecb b\u1ecf qua.","title":"Function Anonymous"},{"location":"kotlin/kotlin_idioms/","text":"T\u1ea1o m\u1ed9t POJO object \u00b6 data class Customer ( val name : String , val email : String ) T\u1ea1o m\u1ed9t l\u1edbp Customer c\u00f9ng v\u1edbi c\u00e1c function sau: getter, setter cho c\u00e1c property equals() hashCode() toString() copy() componentN() cho c\u00e1c property xem th\u00eam Data class Gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh tham s\u1ed1 c\u1ee7a function \u00b6 fun foo ( a : Int = 0 , b : String = \"\" ) { ... } xem th\u00eam Gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho parameter L\u1ecdc m\u1ed9t list \u00b6 val positives = list . filter { x -> x > 0 } ho\u1eb7c val positives = list . filter { it > 0 } String template \u00b6 val name : String = \"tu\" println ( \"Name $name\" ) xem th\u00eam String Ki\u1ec3m tra ki\u1ec3u \u00b6 when ( x ) { is Foo -> ... is Bar -> ... else -> ... } Duy\u1ec7t m\u1ed9t map/list theo c\u1eb7p \u00b6 for (( k , v ) in map ) { println ( \"$k -> $v\" ) } k , v c\u00f3 th\u1ec3 g\u1ecdi \u1edf trong v\u00f2ng l\u1eb7p S\u1eed d\u1ee5ng ranges \u00b6 for ( i in 1. . 100 ) { ... } //kho\u1ea3ng \u0111\u00f3ng, i ch\u1ea1y t\u1eeb 1 \u0111\u1ebfn 100 for ( i in 1 until 100 ) { ... } // kho\u1ea3ng m\u1edf m\u1ed9t n\u1eeda i ch\u1ea1y t\u1eeb 1 \u0111\u1ebfn 99 for ( x in 2. . 10 step 2 ) { ... } for ( x in 10 downTo 1 ) { ... } if ( x in 1. . 10 ) { ... } List/Map ch\u1ec9 \u0111\u1ecdc \u00b6 val list = listOf ( \"a\" , \"b\" , \"c\" ) val map = mapOf ( \"a\" to 1 , \"b\" to 2 , \"c\" to 3 ) xem th\u00eam Collection Kh\u1edfi t\u1ea1o lazy \u00b6 val p : String by lazy { // compute the string } Extension function \u00b6 fun String . spaceToCamelCase () { ... } \"Convert this to camelcase\" . spaceToCamelCase () xem th\u00eam extension function T\u1ea1o m\u1ed9t singleton \u00b6 object Resource { val name = \"Name\" } Ki\u1ec3m tra null \u00b6 // if not null val files = File ( \"Test\" ). listFiles () println ( files ?. size ) // if not null and else val files = File ( \"Test\" ). listFiles () println ( files ?. size ?: \"empty xem th\u00eam Null safety Ch\u1ea1y m\u1ed9t c\u00e2u l\u1ec7nh n\u1ebfu null ho\u1eb7c kh\u00f4ng null \u00b6 //if null val data = ... val email = data [ \"email\" ] ?: throw IllegalStateException ( \"Email is missing!\" ) //if not null val data = ... data ?. let { ... // execute this block if not null } xem th\u00eam Null safety G\u00e1n gi\u00e1 tr\u1ecb cho m\u1ed9t bi\u1ebfn n\u1ebfu null ho\u1eb7c kh\u00f4ng null \u00b6 val data = ... val mapped = data ?. let { transformData ( it ) } ?: defaultValueIfDataIsNull S\u1eed d\u1ee5ng when \u0111\u1ec3 return \u00b6 fun transform ( color : String ): Int { return when ( color ) { \"Red\" -> 0 \"Green\" -> 1 \"Blue\" -> 2 else -> throw IllegalArgumentException ( \"Invalid color param value\" ) } } xem th\u00eam C\u1ea5u tr\u00fac \u0111i\u1ec1u khi\u1ec3n when Bi\u1ec3u th\u1ee9c try/catch \u00b6 fun test () { val result = try { count () } catch ( e : ArithmeticException ) { throw IllegalStateException ( e ) } // Working with result } Bi\u1ec3u th\u1ee9c if \u00b6 fun foo ( param : Int ) { val result = if ( param == 1 ) { \"one\" } else if ( param == 2 ) { \"two\" } else { \"three\" } } xem th\u00eam C\u1ea5u tr\u00fac \u0111i\u1ec1u khi\u1ec3n if Single-expression functions \u00b6 fun theAnswer () = 42 t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi fun theAnswer (): Int { return 42 } S\u1eed d\u1ee5ng c\u00f9ng v\u1edbi when : fun transform ( color : String ): Int = when ( color ) { \"Red\" -> 0 \"Green\" -> 1 \"Blue\" -> 2 else -> throw IllegalArgumentException ( \"Invalid color param value\" ) } G\u1ecdi nhi\u1ec1u method tr\u00ean c\u00f9ng m\u1ed9t instance object \u00b6 class Turtle { fun penDown () fun penUp () fun turn ( degrees : Double ) fun forward ( pixels : Double ) } val myTurtle = Turtle () with ( myTurtle ) { //draw a 100 pix square penDown () for ( i in 1. . 4 ) { forward ( 100.0 ) turn ( 90.0 ) } penUp () }","title":"Kotlin Idioms"},{"location":"kotlin/kotlin_idioms/#tao-mot-pojo-object","text":"data class Customer ( val name : String , val email : String ) T\u1ea1o m\u1ed9t l\u1edbp Customer c\u00f9ng v\u1edbi c\u00e1c function sau: getter, setter cho c\u00e1c property equals() hashCode() toString() copy() componentN() cho c\u00e1c property xem th\u00eam Data class","title":"T\u1ea1o m\u1ed9t POJO object"},{"location":"kotlin/kotlin_idioms/#gia-tri-mac-inh-tham-so-cua-function","text":"fun foo ( a : Int = 0 , b : String = \"\" ) { ... } xem th\u00eam Gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho parameter","title":"Gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh tham s\u1ed1 c\u1ee7a function"},{"location":"kotlin/kotlin_idioms/#loc-mot-list","text":"val positives = list . filter { x -> x > 0 } ho\u1eb7c val positives = list . filter { it > 0 }","title":"L\u1ecdc m\u1ed9t list"},{"location":"kotlin/kotlin_idioms/#string-template","text":"val name : String = \"tu\" println ( \"Name $name\" ) xem th\u00eam String","title":"String template"},{"location":"kotlin/kotlin_idioms/#kiem-tra-kieu","text":"when ( x ) { is Foo -> ... is Bar -> ... else -> ... }","title":"Ki\u1ec3m tra ki\u1ec3u"},{"location":"kotlin/kotlin_idioms/#duyet-mot-maplist-theo-cap","text":"for (( k , v ) in map ) { println ( \"$k -> $v\" ) } k , v c\u00f3 th\u1ec3 g\u1ecdi \u1edf trong v\u00f2ng l\u1eb7p","title":"Duy\u1ec7t m\u1ed9t map/list theo c\u1eb7p"},{"location":"kotlin/kotlin_idioms/#su-dung-ranges","text":"for ( i in 1. . 100 ) { ... } //kho\u1ea3ng \u0111\u00f3ng, i ch\u1ea1y t\u1eeb 1 \u0111\u1ebfn 100 for ( i in 1 until 100 ) { ... } // kho\u1ea3ng m\u1edf m\u1ed9t n\u1eeda i ch\u1ea1y t\u1eeb 1 \u0111\u1ebfn 99 for ( x in 2. . 10 step 2 ) { ... } for ( x in 10 downTo 1 ) { ... } if ( x in 1. . 10 ) { ... }","title":"S\u1eed d\u1ee5ng ranges"},{"location":"kotlin/kotlin_idioms/#listmap-chi-oc","text":"val list = listOf ( \"a\" , \"b\" , \"c\" ) val map = mapOf ( \"a\" to 1 , \"b\" to 2 , \"c\" to 3 ) xem th\u00eam Collection","title":"List/Map ch\u1ec9 \u0111\u1ecdc"},{"location":"kotlin/kotlin_idioms/#khoi-tao-lazy","text":"val p : String by lazy { // compute the string }","title":"Kh\u1edfi t\u1ea1o lazy"},{"location":"kotlin/kotlin_idioms/#extension-function","text":"fun String . spaceToCamelCase () { ... } \"Convert this to camelcase\" . spaceToCamelCase () xem th\u00eam extension function","title":"Extension function"},{"location":"kotlin/kotlin_idioms/#tao-mot-singleton","text":"object Resource { val name = \"Name\" }","title":"T\u1ea1o m\u1ed9t singleton"},{"location":"kotlin/kotlin_idioms/#kiem-tra-null","text":"// if not null val files = File ( \"Test\" ). listFiles () println ( files ?. size ) // if not null and else val files = File ( \"Test\" ). listFiles () println ( files ?. size ?: \"empty xem th\u00eam Null safety","title":"Ki\u1ec3m tra null"},{"location":"kotlin/kotlin_idioms/#chay-mot-cau-lenh-neu-null-hoac-khong-null","text":"//if null val data = ... val email = data [ \"email\" ] ?: throw IllegalStateException ( \"Email is missing!\" ) //if not null val data = ... data ?. let { ... // execute this block if not null } xem th\u00eam Null safety","title":"Ch\u1ea1y m\u1ed9t c\u00e2u l\u1ec7nh n\u1ebfu null ho\u1eb7c kh\u00f4ng null"},{"location":"kotlin/kotlin_idioms/#gan-gia-tri-cho-mot-bien-neu-null-hoac-khong-null","text":"val data = ... val mapped = data ?. let { transformData ( it ) } ?: defaultValueIfDataIsNull","title":"G\u00e1n gi\u00e1 tr\u1ecb cho m\u1ed9t bi\u1ebfn n\u1ebfu null ho\u1eb7c kh\u00f4ng null"},{"location":"kotlin/kotlin_idioms/#su-dung-when-e-return","text":"fun transform ( color : String ): Int { return when ( color ) { \"Red\" -> 0 \"Green\" -> 1 \"Blue\" -> 2 else -> throw IllegalArgumentException ( \"Invalid color param value\" ) } } xem th\u00eam C\u1ea5u tr\u00fac \u0111i\u1ec1u khi\u1ec3n when","title":"S\u1eed d\u1ee5ng when \u0111\u1ec3 return"},{"location":"kotlin/kotlin_idioms/#bieu-thuc-trycatch","text":"fun test () { val result = try { count () } catch ( e : ArithmeticException ) { throw IllegalStateException ( e ) } // Working with result }","title":"Bi\u1ec3u th\u1ee9c try/catch"},{"location":"kotlin/kotlin_idioms/#bieu-thuc-if","text":"fun foo ( param : Int ) { val result = if ( param == 1 ) { \"one\" } else if ( param == 2 ) { \"two\" } else { \"three\" } } xem th\u00eam C\u1ea5u tr\u00fac \u0111i\u1ec1u khi\u1ec3n if","title":"Bi\u1ec3u th\u1ee9c if"},{"location":"kotlin/kotlin_idioms/#single-expression-functions","text":"fun theAnswer () = 42 t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi fun theAnswer (): Int { return 42 } S\u1eed d\u1ee5ng c\u00f9ng v\u1edbi when : fun transform ( color : String ): Int = when ( color ) { \"Red\" -> 0 \"Green\" -> 1 \"Blue\" -> 2 else -> throw IllegalArgumentException ( \"Invalid color param value\" ) }","title":"Single-expression functions"},{"location":"kotlin/kotlin_idioms/#goi-nhieu-method-tren-cung-mot-instance-object","text":"class Turtle { fun penDown () fun penUp () fun turn ( degrees : Double ) fun forward ( pixels : Double ) } val myTurtle = Turtle () with ( myTurtle ) { //draw a 100 pix square penDown () for ( i in 1. . 4 ) { forward ( 100.0 ) turn ( 90.0 ) } penUp () }","title":"G\u1ecdi nhi\u1ec1u method tr\u00ean c\u00f9ng m\u1ed9t instance object"},{"location":"kotlin/kotlin_inline_function/","text":"Gi\u1edbi thi\u1ec7u \u00b6 Ch\u00fang ta \u0111\u00e3 bi\u1ebft kh\u00e1i ni\u1ec7m high-order function , vi\u1ec7c s\u1eed d\u1ee5ng lo\u1ea1i function n\u00e0y b\u1ed9c l\u1ed9 m\u1ed9t s\u1ed1 h\u1ea1n ch\u1ebf l\u00fac runtime: m\u1ed7i function l\u00e0 m\u1ed9t object v\u00e0 n\u00f3 gi\u1eef closure c\u1ee7a n\u00f3. B\u1edfi v\u1eady, vi\u1ec7c c\u1ea5p ph\u00e1t b\u1ed9 nh\u1edb (cho c\u1ea3 function object, class) v\u00e0 c\u00e1c l\u1eddi g\u1ecdi \u1ea3o cho ra m\u1ed9t chi ph\u00ed l\u00fac runtime. T\u1ee9c l\u00e0 khi g\u1ecdi c\u00e1c function n\u00e0y, m\u1ed9t object s\u1ebd \u0111\u01b0\u1ee3c t\u1ea1o ra \u0111\u1ec3 l\u01b0u tr\u1eef function v\u00e0 th\u00eam v\u00e0i function c\u1ea7n thi\u1ebft cho class n\u1eefa. Vi\u1ec7c n\u00e0y l\u00e0m cho s\u1ed1 function c\u1ee7a project s\u1ebd t\u0103ng l\u00ean nhanh ch\u00f3ng. Vi\u1ec7c n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c lo\u1ea1i b\u1ecf b\u1eb1ng c\u00e1ch inline c\u00e1c bi\u1ec3u th\u1ee9c lambda. T\u1ee9c l\u00e0 code c\u1ee7a function s\u1ebd \u0111\u01b0\u1ee3c th\u00eam ngay \u1edf n\u01a1i g\u1ecdi function, tr\u00e1nh kh\u1edfi t\u1ea1o m\u1ed9t instance \u0111\u1ec3 l\u01b0u function. VD: lock ( l ) { foo () } B\u00e2y gi\u1edd, n\u1ebfu function lock l\u00e0 m\u1ed9t inline function, compiler s\u1ebd sinh ra \u0111o\u1ea1n code sau ngay \u1edf n\u01a1i g\u1ecdi h\u00e0m lock thay v\u00ec t\u1ea1o m\u1ed9t function object: l . lock () try { foo () } finally { l . unlock () } \u0110\u1ec3 th\u1ea5y \u0111\u01b0\u1ee3c \u0111i\u1ec1u n\u00e0y, ta c\u00f3 th\u1ec3 decompile Kotlin code sang Java code b\u1eb1ng c\u00e1ch ch\u1ecdn Tools -> Kotlin -> Show Kotlin bytecode , sau \u0111\u00f3 ch\u1ecdn Decompile \u0111\u1ec3 xem. File s\u1ebd \u0111\u01b0\u1ee3c decompile ra file Java t\u01b0\u01a1ng \u0111\u01b0\u01a1ng. \u0110\u1ec3 khai b\u00e1o m\u1ed9t inline function, ta th\u00eam t\u1eeb kh\u00f3a inline khi khai b\u00e1o function inline fun close ( work : String , process : ( String ) -> Unit ) { //ti\u1ec1n x\u1eed l\u00fd process ( work ) println ( \"close\" ) } T\u1eeb kh\u00f3a inline s\u1ebd c\u00f3 \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn c\u1ea3 c\u00e1c lambda b\u00ean trong \u0111\u01b0\u1ee3c truy\u1ec1n cho function. Ngh\u0129a l\u00e0 t\u1ea5t c\u1ea3 c\u00e1c function b\u00e2y gi\u1edd s\u1ebd \u0111\u01b0\u1ee3c inline \u1edf n\u01a1i g\u1ecdi. //g\u1ecdi inline function fun main ( arg : Array < String >) { close ( \"clean\" ){ println ( \"cleaning\" ) } } //code Java t\u01b0\u01a1ng \u0111\u01b0\u01a1ng public final void main ( @NotNull String [] arg ) { Intrinsics . checkParameterIsNotNull ( arg , \"arg\" ); String work $ iv = \"clean\" ; String var5 = \"cleaning\" ; System . out . println ( var5 ); String var4 = \"close\" ; System . out . println ( var4 ); } Vi\u1ec7c s\u1eed d\u1ee5ng inline function c\u0169ng c\u00f3 m\u1ed9t s\u1ed1 h\u1ea1n ch\u1ebf. \u0110\u00f3 l\u00e0: M\u1ed9t inline function kh\u00f4ng th\u1ec3 t\u1ef1 g\u1ecdi l\u1ea1i ch\u00ednh n\u00f3 m\u1ed9t c\u00e1ch tr\u1ef1c ti\u1ebfp ho\u1eb7c g\u1ecdi gi\u00e1n ti\u1ebfp th\u00f4ng qua m\u1ed9t inline funciton kh\u00e1c. M\u1ed9t public inline function \u0111\u01b0\u1ee3c khai b\u00e1o \u1edf trong m\u1ed9t class ch\u1ec9 c\u00f3 th\u1ec3 truy c\u1eadp v\u00e0o c\u00e1c public function v\u00e0 public field c\u1ee7a class \u0111\u00f3 S\u1ed1 l\u01b0\u1ee3ng d\u00f2ng code s\u1ebd t\u0103ng l\u00ean. Vi\u1ec7c inline m\u1ed9t function d\u00e0i, ph\u1ee9c t\u1ea1p nhi\u1ec1u l\u1ea7n s\u1ebd \u0111\u01b0\u1ee3c compiler sinh ra code t\u01b0\u01a1ng \u1ee9ng. B\u1edfi v\u1eady, l\u1eddi khuy\u00ean \u1edf \u0111\u00e2y l\u00e0: Gi\u1eef c\u00e1c inline function ng\u1eafn g\u1ecdn, chuy\u1ec3n c\u00e1c kh\u1ed1i code l\u1edbn v\u00e0o trong c\u00e1c non-inline function n\u1ebfu c\u1ea7n. noinline \u00b6 Nh\u01b0 \u1edf tr\u00ean \u0111\u00e3 \u0111\u1ec1 c\u1eadp, t\u1eeb kh\u00f3a inline c\u00f3 t\u00e1c d\u1ee5ng v\u1edbi c\u1ea3 c\u00e1c lambda \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o function. B\u1edfi v\u1eady, c\u00e1c lambda \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o c\u0169ng s\u1ebd l\u00e0 c\u00e1c inline function. N\u1ebfu kh\u00f4ng mu\u1ed1n \u0111i\u1ec1u n\u00e0y, ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a noinline khi khai b\u00e1o c\u00e1c lambda trong function inline fun close ( work : String , noinline process : ( String ) -> Unit ) { //ti\u1ec1n x\u1eed l\u00fd process ( work ) println ( \"close\" ) } Khi n\u00e0y, funciton process s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c th\u00eam v\u00e0o code \u1edf n\u01a1i g\u1ecdi function m\u00e0 s\u1ebd kh\u1edfi t\u1ea1o m\u1ed9t instance \u0111\u1ec3 ch\u1ee9a ph\u1ea7n noinline \u0111\u00f3. public final void main ( @NotNull String [] arg ) { Intrinsics . checkParameterIsNotNull ( arg , \"arg\" ); String work$iv = \"clean\" ; Function1 process$iv = ( Function1 ) null . INSTANCE ; process$iv . invoke ( work$iv ); String var5 = \"close\" ; System . out . println ( var5 ); } Inline lambda ch\u1ec9 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c g\u1ecdi \u1edf b\u00ean trong m\u1ed9t inline function ho\u1eb7c truy\u1ec1n v\u00e0o param c\u00f3 ki\u1ec3u inline. V\u1edbi noinline , ch\u00fang ta c\u00f3 th\u1ec3 l\u00e0m m\u1ecdi th\u1ee9 ta mu\u1ed1n: l\u01b0u nh\u01b0 m\u1ed9t bi\u1ebfn, truy\u1ec1n v\u00e0o param... Non-local return \u00b6 Trong Kotlin , ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng return \u0111\u1ec3 tho\u00e1t kh\u1ecfi m\u1ed9t function c\u00f3 t\u00ean ho\u1eb7c m\u1ed9t anonymous function. \u0110i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0, \u0111\u1ec3 tho\u00e1t kh\u1ecfi m\u1ed9t lambda, ch\u00fang ta ph\u1ea3i s\u1eed d\u1ee5ng m\u1ed9t label \u0111\u1ec3 l\u00e0m \u0111i\u1ec1u n\u00e0y v\u00e0 n\u1ebfu ch\u1ec9 s\u1eed d\u1ee5ng return , compiler s\u1ebd b\u00e1o l\u1ed7i b\u1edfi b\u00ean trong lambda, ta kh\u00f4ng th\u1ec3 tho\u00e1t ra kh\u1edfi function b\u00ean ngo\u00e0i n\u00f3 fun foo () { ordinaryFunction { return // ERROR: can not make `foo` return here } } Nh\u01b0ng n\u1ebfu function lambda \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o l\u00e0 inline function, vi\u1ec7c return l\u00e0 \u0111\u01b0\u1ee3c cho ph\u00e9p: fun foo () { inlineFunction { return // OK: the lambda is inlined } } Nh\u1eefng return n\u00e0y (b\u00ean trong lambda, nh\u01b0ng tho\u00e1t ra function xung quanh) \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 non-local return. Ch\u00fang ta th\u01b0\u1eddng s\u1eed d\u1ee5ng vi\u1ec7c return n\u00e0y b\u00ean trong v\u00f2ng l\u1eb7p: fun hasZeros ( ints : List < Int >): Boolean { ints . forEach { if ( it == 0 ) return true // returns from hasZeros } return false } L\u01b0u \u00fd r\u1eb1ng inline function b\u00ean trong function c\u00f3 th\u1ec3 g\u1ecdi lambda \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o function ch\u1ee9a n\u00f3 nh\u01b0 m\u1ed9t param m\u1ed9t c\u00e1ch gi\u00e1n ti\u1ebfp trong m\u1ed9t ng\u1eef c\u1ea3nh th\u1ef1c thi nh\u01b0 l\u00e0 m\u1ed9t local object hay function l\u1ed3ng. Trong nh\u1eefng tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3, lu\u1ed3ng \u0111i\u1ec1u khi\u1ec3n non-local l\u00e0 \u0111\u01b0\u1ee3c cho ph\u00e9p. \u0110\u1ec3 th\u1ec3 hi\u1ec7n \u0111i\u1ec1u \u0111\u00f3, lambda param c\u1ea7n \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u b\u1eb1ng t\u1eeb kh\u00f3a crossinline : inline fun f ( crossinline body : () -> Unit ) { val f = object : Runnable { override fun run () = body () } // ... } break v\u00e0 continue kh\u00f4ng \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 trong inline lambda. Reified type parameter (X\u00e1c \u0111\u1ecbnh c\u1ee5 th\u1ec3 ki\u1ec3u param) \u00b6 Th\u1ec9nh tho\u1ea3ng ch\u00fang ta c\u1ea7n truy c\u1eadp \u0111\u1ebfn ki\u1ec3u c\u1ee7a tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o fun < T > TreeNode . findParentOfType ( clazz : Class < T >): T ? { var p = parent while ( p != null && ! clazz . isInstance ( p )) { p = p . parent } @Suppress ( \"UNCHECKED_CAST\" ) return p as T ? } \u1ede \u0111\u00e2y, function \u0111i qua to\u00e0n b\u1ed9 c\u00e2y v\u00e0 s\u1eed d\u1ee5ng reflection \u0111\u1ec3 ki\u1ec3m tra m\u1ed9t node c\u00f3 ki\u1ec3u x\u00e1c \u0111\u1ecbnh hay kh\u00f4ng. N\u1ebfu vi\u1ebft nh\u01b0 v\u1eady, vi\u1ec7c g\u1ecdi v\u1eabn h\u01a1i d\u00e0i d\u00f2ng: treeNode . findParentOfType ( MyTreeNode :: class . java ) Nh\u1eefng g\u00ec ch\u00fang ta th\u1ef1c s\u1ef1 mu\u1ed1n l\u00e0 ch\u1ec9 c\u1ea7n truy\u1ec1n ki\u1ec3u param v\u00e0o function: treeNode . findParentOfType < MyTreeNode >() \u0110\u1ec3 l\u00e0m \u0111i\u1ec1u n\u00e0y, inline function h\u1ed7 tr\u1ee3 vi\u1ec7c n\u00e0y b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a reified : inline fun < reified T > TreeNode . findParentOfType (): T ? { var p = parent while ( p != null && p ! is T ) { p = p . parent } return p as T ? } Khi s\u1eed d\u1ee5ng reified , param \u0111\u00e3 c\u00f3 th\u1ec3 truy c\u1eadp b\u00ean trong function v\u00e0 kh\u00f4ng c\u1ea7n s\u1eed d\u1ee5ng reflection n\u1eefa, c\u00e1c to\u00e1n t\u1eed nh\u01b0 is , !is hay as c\u0169ng \u0111\u00e3 ho\u1ea1t \u0111\u1ed9ng b\u00ecnh th\u01b0\u1eddng. V\u00e0 t\u1eeb \u0111\u00f3, ch\u00fang ta c\u00f3 th\u1ec3 g\u1ecdi function nh\u01b0 \u0111\u00e3 \u0111\u1ec1 c\u1eadp \u1edf tr\u00ean: treeNode . findParentOfType < MyTreeNode >() Ngo\u00e0i ra, ta v\u1eabn c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng reflection v\u1edbi reified type parameter: inline fun < reified T > membersOf () = T :: class . members fun main ( s : Array < String >) { println ( membersOf < StringBuilder >(). joinToString ( \"\\n\" )) } L\u01b0u \u00fd: function kh\u00f4ng ph\u1ea3i l\u00e0 inline function kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng reified type parameter. Inine property \u00b6 T\u1eeb kh\u00f3a inline c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng v\u1edbi c\u00e1c h\u00e0m getter, setter c\u1ee7a c\u00e1c property m\u00e0 kh\u00f4ng c\u00f3 backing field. B\u1ea1n c\u00f3 th\u1ec3 \u0111\u00e1nh d\u1ea5u t\u1eebng h\u00e0m getter, setter: val foo : Foo inline get () = Foo () var bar : Bar get () = ... inline set ( v ) { ... } B\u1ea1n c\u0169ng c\u00f3 th\u1ec3 \u0111\u00e1nh d\u1ea5u to\u00e0n b\u1ed9 property b\u1eb1ng c\u00e1ch \u0111\u00e1nh d\u1ea5u khi khai b\u00e1o property: inline var bar : Bar get () = ... set ( v ) { ... } \u1ede v\u1ecb tr\u00ed g\u1ecdi function, c\u00e1c h\u00e0m getter, setter n\u00e0y c\u0169ng s\u1ebd \u0111\u01b0\u1ee3c coi nh\u01b0 c\u00e1c h\u00e0m inline function b\u00ecnh th\u01b0\u1eddng.","title":"Kotlin Inline function"},{"location":"kotlin/kotlin_inline_function/#gioi-thieu","text":"Ch\u00fang ta \u0111\u00e3 bi\u1ebft kh\u00e1i ni\u1ec7m high-order function , vi\u1ec7c s\u1eed d\u1ee5ng lo\u1ea1i function n\u00e0y b\u1ed9c l\u1ed9 m\u1ed9t s\u1ed1 h\u1ea1n ch\u1ebf l\u00fac runtime: m\u1ed7i function l\u00e0 m\u1ed9t object v\u00e0 n\u00f3 gi\u1eef closure c\u1ee7a n\u00f3. B\u1edfi v\u1eady, vi\u1ec7c c\u1ea5p ph\u00e1t b\u1ed9 nh\u1edb (cho c\u1ea3 function object, class) v\u00e0 c\u00e1c l\u1eddi g\u1ecdi \u1ea3o cho ra m\u1ed9t chi ph\u00ed l\u00fac runtime. T\u1ee9c l\u00e0 khi g\u1ecdi c\u00e1c function n\u00e0y, m\u1ed9t object s\u1ebd \u0111\u01b0\u1ee3c t\u1ea1o ra \u0111\u1ec3 l\u01b0u tr\u1eef function v\u00e0 th\u00eam v\u00e0i function c\u1ea7n thi\u1ebft cho class n\u1eefa. Vi\u1ec7c n\u00e0y l\u00e0m cho s\u1ed1 function c\u1ee7a project s\u1ebd t\u0103ng l\u00ean nhanh ch\u00f3ng. Vi\u1ec7c n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c lo\u1ea1i b\u1ecf b\u1eb1ng c\u00e1ch inline c\u00e1c bi\u1ec3u th\u1ee9c lambda. T\u1ee9c l\u00e0 code c\u1ee7a function s\u1ebd \u0111\u01b0\u1ee3c th\u00eam ngay \u1edf n\u01a1i g\u1ecdi function, tr\u00e1nh kh\u1edfi t\u1ea1o m\u1ed9t instance \u0111\u1ec3 l\u01b0u function. VD: lock ( l ) { foo () } B\u00e2y gi\u1edd, n\u1ebfu function lock l\u00e0 m\u1ed9t inline function, compiler s\u1ebd sinh ra \u0111o\u1ea1n code sau ngay \u1edf n\u01a1i g\u1ecdi h\u00e0m lock thay v\u00ec t\u1ea1o m\u1ed9t function object: l . lock () try { foo () } finally { l . unlock () } \u0110\u1ec3 th\u1ea5y \u0111\u01b0\u1ee3c \u0111i\u1ec1u n\u00e0y, ta c\u00f3 th\u1ec3 decompile Kotlin code sang Java code b\u1eb1ng c\u00e1ch ch\u1ecdn Tools -> Kotlin -> Show Kotlin bytecode , sau \u0111\u00f3 ch\u1ecdn Decompile \u0111\u1ec3 xem. File s\u1ebd \u0111\u01b0\u1ee3c decompile ra file Java t\u01b0\u01a1ng \u0111\u01b0\u01a1ng. \u0110\u1ec3 khai b\u00e1o m\u1ed9t inline function, ta th\u00eam t\u1eeb kh\u00f3a inline khi khai b\u00e1o function inline fun close ( work : String , process : ( String ) -> Unit ) { //ti\u1ec1n x\u1eed l\u00fd process ( work ) println ( \"close\" ) } T\u1eeb kh\u00f3a inline s\u1ebd c\u00f3 \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn c\u1ea3 c\u00e1c lambda b\u00ean trong \u0111\u01b0\u1ee3c truy\u1ec1n cho function. Ngh\u0129a l\u00e0 t\u1ea5t c\u1ea3 c\u00e1c function b\u00e2y gi\u1edd s\u1ebd \u0111\u01b0\u1ee3c inline \u1edf n\u01a1i g\u1ecdi. //g\u1ecdi inline function fun main ( arg : Array < String >) { close ( \"clean\" ){ println ( \"cleaning\" ) } } //code Java t\u01b0\u01a1ng \u0111\u01b0\u01a1ng public final void main ( @NotNull String [] arg ) { Intrinsics . checkParameterIsNotNull ( arg , \"arg\" ); String work $ iv = \"clean\" ; String var5 = \"cleaning\" ; System . out . println ( var5 ); String var4 = \"close\" ; System . out . println ( var4 ); } Vi\u1ec7c s\u1eed d\u1ee5ng inline function c\u0169ng c\u00f3 m\u1ed9t s\u1ed1 h\u1ea1n ch\u1ebf. \u0110\u00f3 l\u00e0: M\u1ed9t inline function kh\u00f4ng th\u1ec3 t\u1ef1 g\u1ecdi l\u1ea1i ch\u00ednh n\u00f3 m\u1ed9t c\u00e1ch tr\u1ef1c ti\u1ebfp ho\u1eb7c g\u1ecdi gi\u00e1n ti\u1ebfp th\u00f4ng qua m\u1ed9t inline funciton kh\u00e1c. M\u1ed9t public inline function \u0111\u01b0\u1ee3c khai b\u00e1o \u1edf trong m\u1ed9t class ch\u1ec9 c\u00f3 th\u1ec3 truy c\u1eadp v\u00e0o c\u00e1c public function v\u00e0 public field c\u1ee7a class \u0111\u00f3 S\u1ed1 l\u01b0\u1ee3ng d\u00f2ng code s\u1ebd t\u0103ng l\u00ean. Vi\u1ec7c inline m\u1ed9t function d\u00e0i, ph\u1ee9c t\u1ea1p nhi\u1ec1u l\u1ea7n s\u1ebd \u0111\u01b0\u1ee3c compiler sinh ra code t\u01b0\u01a1ng \u1ee9ng. B\u1edfi v\u1eady, l\u1eddi khuy\u00ean \u1edf \u0111\u00e2y l\u00e0: Gi\u1eef c\u00e1c inline function ng\u1eafn g\u1ecdn, chuy\u1ec3n c\u00e1c kh\u1ed1i code l\u1edbn v\u00e0o trong c\u00e1c non-inline function n\u1ebfu c\u1ea7n.","title":"Gi\u1edbi thi\u1ec7u"},{"location":"kotlin/kotlin_inline_function/#noinline","text":"Nh\u01b0 \u1edf tr\u00ean \u0111\u00e3 \u0111\u1ec1 c\u1eadp, t\u1eeb kh\u00f3a inline c\u00f3 t\u00e1c d\u1ee5ng v\u1edbi c\u1ea3 c\u00e1c lambda \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o function. B\u1edfi v\u1eady, c\u00e1c lambda \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o c\u0169ng s\u1ebd l\u00e0 c\u00e1c inline function. N\u1ebfu kh\u00f4ng mu\u1ed1n \u0111i\u1ec1u n\u00e0y, ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a noinline khi khai b\u00e1o c\u00e1c lambda trong function inline fun close ( work : String , noinline process : ( String ) -> Unit ) { //ti\u1ec1n x\u1eed l\u00fd process ( work ) println ( \"close\" ) } Khi n\u00e0y, funciton process s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c th\u00eam v\u00e0o code \u1edf n\u01a1i g\u1ecdi function m\u00e0 s\u1ebd kh\u1edfi t\u1ea1o m\u1ed9t instance \u0111\u1ec3 ch\u1ee9a ph\u1ea7n noinline \u0111\u00f3. public final void main ( @NotNull String [] arg ) { Intrinsics . checkParameterIsNotNull ( arg , \"arg\" ); String work$iv = \"clean\" ; Function1 process$iv = ( Function1 ) null . INSTANCE ; process$iv . invoke ( work$iv ); String var5 = \"close\" ; System . out . println ( var5 ); } Inline lambda ch\u1ec9 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c g\u1ecdi \u1edf b\u00ean trong m\u1ed9t inline function ho\u1eb7c truy\u1ec1n v\u00e0o param c\u00f3 ki\u1ec3u inline. V\u1edbi noinline , ch\u00fang ta c\u00f3 th\u1ec3 l\u00e0m m\u1ecdi th\u1ee9 ta mu\u1ed1n: l\u01b0u nh\u01b0 m\u1ed9t bi\u1ebfn, truy\u1ec1n v\u00e0o param...","title":"noinline"},{"location":"kotlin/kotlin_inline_function/#non-local-return","text":"Trong Kotlin , ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng return \u0111\u1ec3 tho\u00e1t kh\u1ecfi m\u1ed9t function c\u00f3 t\u00ean ho\u1eb7c m\u1ed9t anonymous function. \u0110i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0, \u0111\u1ec3 tho\u00e1t kh\u1ecfi m\u1ed9t lambda, ch\u00fang ta ph\u1ea3i s\u1eed d\u1ee5ng m\u1ed9t label \u0111\u1ec3 l\u00e0m \u0111i\u1ec1u n\u00e0y v\u00e0 n\u1ebfu ch\u1ec9 s\u1eed d\u1ee5ng return , compiler s\u1ebd b\u00e1o l\u1ed7i b\u1edfi b\u00ean trong lambda, ta kh\u00f4ng th\u1ec3 tho\u00e1t ra kh\u1edfi function b\u00ean ngo\u00e0i n\u00f3 fun foo () { ordinaryFunction { return // ERROR: can not make `foo` return here } } Nh\u01b0ng n\u1ebfu function lambda \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o l\u00e0 inline function, vi\u1ec7c return l\u00e0 \u0111\u01b0\u1ee3c cho ph\u00e9p: fun foo () { inlineFunction { return // OK: the lambda is inlined } } Nh\u1eefng return n\u00e0y (b\u00ean trong lambda, nh\u01b0ng tho\u00e1t ra function xung quanh) \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 non-local return. Ch\u00fang ta th\u01b0\u1eddng s\u1eed d\u1ee5ng vi\u1ec7c return n\u00e0y b\u00ean trong v\u00f2ng l\u1eb7p: fun hasZeros ( ints : List < Int >): Boolean { ints . forEach { if ( it == 0 ) return true // returns from hasZeros } return false } L\u01b0u \u00fd r\u1eb1ng inline function b\u00ean trong function c\u00f3 th\u1ec3 g\u1ecdi lambda \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o function ch\u1ee9a n\u00f3 nh\u01b0 m\u1ed9t param m\u1ed9t c\u00e1ch gi\u00e1n ti\u1ebfp trong m\u1ed9t ng\u1eef c\u1ea3nh th\u1ef1c thi nh\u01b0 l\u00e0 m\u1ed9t local object hay function l\u1ed3ng. Trong nh\u1eefng tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3, lu\u1ed3ng \u0111i\u1ec1u khi\u1ec3n non-local l\u00e0 \u0111\u01b0\u1ee3c cho ph\u00e9p. \u0110\u1ec3 th\u1ec3 hi\u1ec7n \u0111i\u1ec1u \u0111\u00f3, lambda param c\u1ea7n \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u b\u1eb1ng t\u1eeb kh\u00f3a crossinline : inline fun f ( crossinline body : () -> Unit ) { val f = object : Runnable { override fun run () = body () } // ... } break v\u00e0 continue kh\u00f4ng \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 trong inline lambda.","title":"Non-local return"},{"location":"kotlin/kotlin_inline_function/#reified-type-parameter-xac-inh-cu-the-kieu-param","text":"Th\u1ec9nh tho\u1ea3ng ch\u00fang ta c\u1ea7n truy c\u1eadp \u0111\u1ebfn ki\u1ec3u c\u1ee7a tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o fun < T > TreeNode . findParentOfType ( clazz : Class < T >): T ? { var p = parent while ( p != null && ! clazz . isInstance ( p )) { p = p . parent } @Suppress ( \"UNCHECKED_CAST\" ) return p as T ? } \u1ede \u0111\u00e2y, function \u0111i qua to\u00e0n b\u1ed9 c\u00e2y v\u00e0 s\u1eed d\u1ee5ng reflection \u0111\u1ec3 ki\u1ec3m tra m\u1ed9t node c\u00f3 ki\u1ec3u x\u00e1c \u0111\u1ecbnh hay kh\u00f4ng. N\u1ebfu vi\u1ebft nh\u01b0 v\u1eady, vi\u1ec7c g\u1ecdi v\u1eabn h\u01a1i d\u00e0i d\u00f2ng: treeNode . findParentOfType ( MyTreeNode :: class . java ) Nh\u1eefng g\u00ec ch\u00fang ta th\u1ef1c s\u1ef1 mu\u1ed1n l\u00e0 ch\u1ec9 c\u1ea7n truy\u1ec1n ki\u1ec3u param v\u00e0o function: treeNode . findParentOfType < MyTreeNode >() \u0110\u1ec3 l\u00e0m \u0111i\u1ec1u n\u00e0y, inline function h\u1ed7 tr\u1ee3 vi\u1ec7c n\u00e0y b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a reified : inline fun < reified T > TreeNode . findParentOfType (): T ? { var p = parent while ( p != null && p ! is T ) { p = p . parent } return p as T ? } Khi s\u1eed d\u1ee5ng reified , param \u0111\u00e3 c\u00f3 th\u1ec3 truy c\u1eadp b\u00ean trong function v\u00e0 kh\u00f4ng c\u1ea7n s\u1eed d\u1ee5ng reflection n\u1eefa, c\u00e1c to\u00e1n t\u1eed nh\u01b0 is , !is hay as c\u0169ng \u0111\u00e3 ho\u1ea1t \u0111\u1ed9ng b\u00ecnh th\u01b0\u1eddng. V\u00e0 t\u1eeb \u0111\u00f3, ch\u00fang ta c\u00f3 th\u1ec3 g\u1ecdi function nh\u01b0 \u0111\u00e3 \u0111\u1ec1 c\u1eadp \u1edf tr\u00ean: treeNode . findParentOfType < MyTreeNode >() Ngo\u00e0i ra, ta v\u1eabn c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng reflection v\u1edbi reified type parameter: inline fun < reified T > membersOf () = T :: class . members fun main ( s : Array < String >) { println ( membersOf < StringBuilder >(). joinToString ( \"\\n\" )) } L\u01b0u \u00fd: function kh\u00f4ng ph\u1ea3i l\u00e0 inline function kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng reified type parameter.","title":"Reified type parameter (X\u00e1c \u0111\u1ecbnh c\u1ee5 th\u1ec3 ki\u1ec3u param)"},{"location":"kotlin/kotlin_inline_function/#inine-property","text":"T\u1eeb kh\u00f3a inline c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng v\u1edbi c\u00e1c h\u00e0m getter, setter c\u1ee7a c\u00e1c property m\u00e0 kh\u00f4ng c\u00f3 backing field. B\u1ea1n c\u00f3 th\u1ec3 \u0111\u00e1nh d\u1ea5u t\u1eebng h\u00e0m getter, setter: val foo : Foo inline get () = Foo () var bar : Bar get () = ... inline set ( v ) { ... } B\u1ea1n c\u0169ng c\u00f3 th\u1ec3 \u0111\u00e1nh d\u1ea5u to\u00e0n b\u1ed9 property b\u1eb1ng c\u00e1ch \u0111\u00e1nh d\u1ea5u khi khai b\u00e1o property: inline var bar : Bar get () = ... set ( v ) { ... } \u1ede v\u1ecb tr\u00ed g\u1ecdi function, c\u00e1c h\u00e0m getter, setter n\u00e0y c\u0169ng s\u1ebd \u0111\u01b0\u1ee3c coi nh\u01b0 c\u00e1c h\u00e0m inline function b\u00ecnh th\u01b0\u1eddng.","title":"Inine property"},{"location":"kotlin/kotlin_inteface/","text":"Trong Kotlin interface kh\u00e1 gi\u1ed1ng so v\u1edbi Java 8 . N\u00f3 c\u00f3 th\u1ec3 ch\u1ee9a c\u00e1c function \u1ea3o (abstract function) c\u0169ng nh\u01b0 c\u00e1c implement function (c\u00e1c function c\u00f3 body) v\u00e0 \u0111\u1ed3ng th\u1eddi c\u0169ng c\u00f3 th\u1ec3 ch\u1ee9a c\u00e1c property. \u0110i\u1ec1u kh\u00e1c bi\u1ec7t gi\u1eefa abstract class v\u00e0 interface l\u00e0 interface kh\u00f4ng c\u00f3 state trong khi abstract class th\u00ec c\u00f3. Ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a interface \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a m\u1ed9t interface: interface MyInterface { fun bar () fun foo () { // optional body } } K\u1ebf th\u1eeba interface : class Child : MyInterface { override fun bar () { // body } } Property trong interface \u00b6 B\u1ea1n c\u00f3 th\u1ec3 kh\u1edfi t\u1ea1o c\u00e1c property \u1edf trong interface . interface MyInterface { val prop : Int // abstract val post : String get () = \"Any post\" val propertyWithImplementation : String get () = \"foo\" fun foo () { print ( prop ) } } class Child : MyInterface { override val prop : Int = 29 } L\u01b0u \u00fd l\u00e0 ch\u00fang ta kh\u00f4ng \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o cho property trong interface , v\u00e0 interface kh\u00f4ng c\u00f3 backing fields Overriding conflict \u00b6 interface A { fun foo () { print ( \"A\" ) } fun bar () } interface B { fun foo () { print ( \"B\" ) } fun bar () { print ( \"bar\" ) } } class C : A { override fun bar () { print ( \"bar\" ) } } class D : A , B { override fun foo () { super < A >. foo () super < B >. foo () } override fun bar () { super < B >. bar () } } V\u1ea5n \u0111\u1ec1 x\u1ea3y ra khi c\u1ea3 interface A v\u00e0 B \u0111\u00e8u c\u00f3 function foo() v\u00e0 bar() , chi ti\u1ebft t\u1ea1i \u0111\u00e2y","title":"Kotlin Inteface"},{"location":"kotlin/kotlin_inteface/#property-trong-interface","text":"B\u1ea1n c\u00f3 th\u1ec3 kh\u1edfi t\u1ea1o c\u00e1c property \u1edf trong interface . interface MyInterface { val prop : Int // abstract val post : String get () = \"Any post\" val propertyWithImplementation : String get () = \"foo\" fun foo () { print ( prop ) } } class Child : MyInterface { override val prop : Int = 29 } L\u01b0u \u00fd l\u00e0 ch\u00fang ta kh\u00f4ng \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o cho property trong interface , v\u00e0 interface kh\u00f4ng c\u00f3 backing fields","title":"Property trong interface"},{"location":"kotlin/kotlin_inteface/#overriding-conflict","text":"interface A { fun foo () { print ( \"A\" ) } fun bar () } interface B { fun foo () { print ( \"B\" ) } fun bar () { print ( \"bar\" ) } } class C : A { override fun bar () { print ( \"bar\" ) } } class D : A , B { override fun foo () { super < A >. foo () super < B >. foo () } override fun bar () { super < B >. bar () } } V\u1ea5n \u0111\u1ec1 x\u1ea3y ra khi c\u1ea3 interface A v\u00e0 B \u0111\u00e8u c\u00f3 function foo() v\u00e0 bar() , chi ti\u1ebft t\u1ea1i \u0111\u00e2y","title":"Overriding conflict"},{"location":"kotlin/kotlin_lambda/","text":"T\u1ed5ng quan: \u00b6 Bi\u1ec3u th\u1ee9c c\u1ee7a lambda lu\u00f4n \u0111\u01b0\u1ee3c bao b\u1edfi {} N\u1ebfu lambda function c\u00f3 b\u1ea5t k\u00ec param n\u00e0o n\u00f3 ph\u1ea3i \u1edf tr\u01b0\u1edbc to\u00e1n t\u1eed -> (ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a param c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c b\u1ecf qua) Body c\u1ee7a lambda function ph\u1ea3i \u1edf sau to\u00e1n t\u1eed -> //1 doSomethingWithNumber ( 1000 , { result -> // do something with result }) //2 doSomethingWithNumber ( 1000 , { result : String ? -> // do something with result }) //3 doSomethingWithNumber ( 1000 ) { result -> // do something with result } 3 c\u00e1ch s\u1eed d\u1ee5ng tr\u00ean l\u00e0 nh\u01b0 nhau v\u00e0 nh\u01b0 c\u00e1c c\u00e1ch function reference v\u00e0 function anonymous . C\u00e1ch g\u1ecdi th\u1ee9 3 nh\u00ecn c\u00f3 v\u1ebb kh\u00e1c bi\u1ec7t ch\u00fat so v\u1edbi 2 c\u00e1ch g\u1ecdi c\u00f2n l\u1ea1i. M\u1ed9t \u0111i\u1ec3m th\u00eam \u1edf \u0111\u00e2y l\u00e0 n\u1ebfu param cu\u1ed1i l\u00e0 function th\u00ec ta c\u00f3 th\u1ec3 khai b\u00e1o lambda function b\u00ean ngo\u00e0i () . implicit name of a single parameter \u00b6 doSomethingWithNumber ( 1000 ) { println ( \"The result is $it\" ) // do something with result } C\u00f3 th\u1ec3 hi\u1ec3u \u1edf \u0111\u00e2y it l\u00e0 t\u00ean \u0111\u1ea1i di\u1ec7n cho parameter duy nh\u1ea5t Destructuring trong Lambdas \u00b6 Trong ph\u1ea7n Function m\u00ecnh \u0111\u00e3 gi\u1edbi thi\u1ec7u v\u1ec1 Destructure , \u00e1p d\u1ee5ng n\u00f3 v\u1edbi Lambdas kh\u00f4ng c\u00f3 g\u00ec kh\u00e1c bi\u1ec7t l\u1eafm. map . mapValues { entry -> \"${entry.value}!\" } map . mapValues { ( key , value ) -> \"$value!\" } \u1ede \u0111\u00e2y ta \u0111\u00e3 destructure entry ra 2 tham s\u1ed1 key v\u00e0 value . Lambda return \u00b6 //The first way ints . filter { val shouldFilter = it > 0 shouldFilter } //The second way ints . filter { val shouldFilter = it > 0 return @filter shouldFilter } \u1ede \u0111\u00e2y ta c\u00f3 m\u1ed9t m\u1ed9t Collection ints g\u1ecdi \u0111\u1ebfn function filter() , param c\u1ee7a function filter() l\u00e0 function c\u00f3 ki\u1ec3u tr\u1ea3 v\u1ec1 l\u00e0 Boolean . Ta s\u1eed d\u1ee5ng lambda \u0111\u1ec3 th\u1ef1c hi\u1ec7n \u0111i\u1ec1u n\u00e0y. C\u00f3 2 c\u00e1ch \u0111\u1ec3 return m\u1ed9t function: C\u00e1ch th\u1ee9 nh\u1ea5t, gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ec3u th\u1ee9c cu\u1ed1i c\u00f9ng tr\u00f9ng v\u1edbi return type s\u1ebd \u0111\u01b0\u1ee3c coi l\u00e0 gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1, shouldFilter \u0111\u01b0\u1ee3c coi l\u00e0 gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1. C\u00e1ch th\u1ee9 hai, s\u1eed d\u1ee5ng Return at Labels \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh v\u1ecb tr\u00ed tr\u1ea3 v\u1ec1, n\u1ebfu ch\u1ec9 \u0111\u1ec3 return shouldFilter n\u00f3 s\u1ebd hi\u1ec3u l\u00e0 \u0111ang return tr\u1ea3 function b\u00ean ngo\u00e0i. Closures \u00b6 Lambda, anonymous function, local function v\u00e0 object expression \u0111\u1ec1u c\u00f3 th\u1ec3 truy c\u1eadp closure c\u1ee7a n\u00f3 (n\u00f4m na nh\u01b0 l\u00e0 v\u00f9ng b\u00ean ngo\u00e0i khai b\u00e1o n\u00f3). N\u00f3 c\u00f3 th\u1ec3 truy c\u1eadp c\u00e1c function, bi\u1ebfn v\u00e0 param \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o \u1edf b\u00ean ngo\u00e0i, kh\u00f4ng gi\u1ed1ng Java , ta ch\u1ec9 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c c\u00e1c bi\u1ebfn v\u00e0 param \u1edf v\u00f9ng b\u00ean ngo\u00e0i n\u1ebfu nh\u01b0 ch\u00fang \u0111\u01b0\u1ee3c khai b\u00e1o l\u00e0 final Java final String username = edtUsername . getText (). toString (); btnLogin . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { //username ph\u1ea3i l\u00e0 final if ( username != null && ! username . isEmpty ()) { //..... } } }); Kotlin var sum = 0 ints . filter { it > 0 }. forEach { sum += it //sum kh\u00f4ng c\u1ea7n ph\u1ea3i l\u00e0 val (final) } print ( sum ) Function Literals \u00b6 Theo m\u00ecnh t\u00ecm hi\u1ec3u \u0111\u1ecbnh ngh\u0129a c\u1ee7a Function Literals nh\u01b0 sau v\u00e0 m\u00ecnh th\u1ea5y h\u1ee3p l\u00fd: Comment A function literal is just an expression that defines an unnamed function. M\u1ed9t s\u1ed1 v\u00ed d\u1ee5 v\u1ec1 function literal trong Kotlin : val m = { ( x : String ) -> println ( \"$x\" ) } val n : ( String ) -> Unit = { x -> println ( \"$x\" ) } val o : ( String ) -> Unit = { ( x : String ) -> println ( \"$x\" ) } fun main ( args : Array < String >) { m ( \"good morning\" ) n ( \"good morning\" ) o ( \"good morning\" ) } T\u1ea5t c\u1ea3 m , n v\u00e0 o \u0111\u1ec1u th\u1ef1c hi\u1ec7n ch\u1ee9c n\u0103ng nh\u01b0 nhau. Function Literals v\u1edbi receiver \u00b6 N\u1ebfu b\u1ea1n n\u00e0o \u0111\u1ecdc docs b\u1eb1ng ti\u1ebfng anh c\u00f3 th\u1ec3 hi\u1ec3u receiver object n\u00f3i \u0111\u1ebfn \u0111\u1ed1i t\u01b0\u1ee3ng th\u1ef1c hi\u1ec7n extension : fun Person . run () { ... } \u0110o\u1ea1n code tr\u00ean class Person \u0111\u01b0\u1ee3c coi l\u00e0 receiver object . \u0110\u1ec3 extension class Int m\u1ed9t function sum() b\u00ecnh th\u01b0\u1eddng s\u1ebd nh\u01b0 sau: fun Int . sum ( other : Int ): Int { return this + other } V\u1ee1i vi\u1ec7c s\u1eed d\u1ee5ng function literal nh\u01b0 sau: val sum = fun Int .( other : Int ): Int = this + other Inline function (N\u00e2ng cao) \u00b6 Inline function \u0111\u01b0\u1ee3c gi\u1ea3i th\u00edch \u1edf \u0111\u00e2y","title":"Kotlin Lambda"},{"location":"kotlin/kotlin_lambda/#tong-quan","text":"Bi\u1ec3u th\u1ee9c c\u1ee7a lambda lu\u00f4n \u0111\u01b0\u1ee3c bao b\u1edfi {} N\u1ebfu lambda function c\u00f3 b\u1ea5t k\u00ec param n\u00e0o n\u00f3 ph\u1ea3i \u1edf tr\u01b0\u1edbc to\u00e1n t\u1eed -> (ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a param c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c b\u1ecf qua) Body c\u1ee7a lambda function ph\u1ea3i \u1edf sau to\u00e1n t\u1eed -> //1 doSomethingWithNumber ( 1000 , { result -> // do something with result }) //2 doSomethingWithNumber ( 1000 , { result : String ? -> // do something with result }) //3 doSomethingWithNumber ( 1000 ) { result -> // do something with result } 3 c\u00e1ch s\u1eed d\u1ee5ng tr\u00ean l\u00e0 nh\u01b0 nhau v\u00e0 nh\u01b0 c\u00e1c c\u00e1ch function reference v\u00e0 function anonymous . C\u00e1ch g\u1ecdi th\u1ee9 3 nh\u00ecn c\u00f3 v\u1ebb kh\u00e1c bi\u1ec7t ch\u00fat so v\u1edbi 2 c\u00e1ch g\u1ecdi c\u00f2n l\u1ea1i. M\u1ed9t \u0111i\u1ec3m th\u00eam \u1edf \u0111\u00e2y l\u00e0 n\u1ebfu param cu\u1ed1i l\u00e0 function th\u00ec ta c\u00f3 th\u1ec3 khai b\u00e1o lambda function b\u00ean ngo\u00e0i () .","title":"T\u1ed5ng quan:"},{"location":"kotlin/kotlin_lambda/#implicit-name-of-a-single-parameter","text":"doSomethingWithNumber ( 1000 ) { println ( \"The result is $it\" ) // do something with result } C\u00f3 th\u1ec3 hi\u1ec3u \u1edf \u0111\u00e2y it l\u00e0 t\u00ean \u0111\u1ea1i di\u1ec7n cho parameter duy nh\u1ea5t","title":"implicit name of a single parameter"},{"location":"kotlin/kotlin_lambda/#destructuring-trong-lambdas","text":"Trong ph\u1ea7n Function m\u00ecnh \u0111\u00e3 gi\u1edbi thi\u1ec7u v\u1ec1 Destructure , \u00e1p d\u1ee5ng n\u00f3 v\u1edbi Lambdas kh\u00f4ng c\u00f3 g\u00ec kh\u00e1c bi\u1ec7t l\u1eafm. map . mapValues { entry -> \"${entry.value}!\" } map . mapValues { ( key , value ) -> \"$value!\" } \u1ede \u0111\u00e2y ta \u0111\u00e3 destructure entry ra 2 tham s\u1ed1 key v\u00e0 value .","title":"Destructuring trong Lambdas"},{"location":"kotlin/kotlin_lambda/#lambda-return","text":"//The first way ints . filter { val shouldFilter = it > 0 shouldFilter } //The second way ints . filter { val shouldFilter = it > 0 return @filter shouldFilter } \u1ede \u0111\u00e2y ta c\u00f3 m\u1ed9t m\u1ed9t Collection ints g\u1ecdi \u0111\u1ebfn function filter() , param c\u1ee7a function filter() l\u00e0 function c\u00f3 ki\u1ec3u tr\u1ea3 v\u1ec1 l\u00e0 Boolean . Ta s\u1eed d\u1ee5ng lambda \u0111\u1ec3 th\u1ef1c hi\u1ec7n \u0111i\u1ec1u n\u00e0y. C\u00f3 2 c\u00e1ch \u0111\u1ec3 return m\u1ed9t function: C\u00e1ch th\u1ee9 nh\u1ea5t, gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ec3u th\u1ee9c cu\u1ed1i c\u00f9ng tr\u00f9ng v\u1edbi return type s\u1ebd \u0111\u01b0\u1ee3c coi l\u00e0 gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1, shouldFilter \u0111\u01b0\u1ee3c coi l\u00e0 gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1. C\u00e1ch th\u1ee9 hai, s\u1eed d\u1ee5ng Return at Labels \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh v\u1ecb tr\u00ed tr\u1ea3 v\u1ec1, n\u1ebfu ch\u1ec9 \u0111\u1ec3 return shouldFilter n\u00f3 s\u1ebd hi\u1ec3u l\u00e0 \u0111ang return tr\u1ea3 function b\u00ean ngo\u00e0i.","title":"Lambda return"},{"location":"kotlin/kotlin_lambda/#closures","text":"Lambda, anonymous function, local function v\u00e0 object expression \u0111\u1ec1u c\u00f3 th\u1ec3 truy c\u1eadp closure c\u1ee7a n\u00f3 (n\u00f4m na nh\u01b0 l\u00e0 v\u00f9ng b\u00ean ngo\u00e0i khai b\u00e1o n\u00f3). N\u00f3 c\u00f3 th\u1ec3 truy c\u1eadp c\u00e1c function, bi\u1ebfn v\u00e0 param \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o \u1edf b\u00ean ngo\u00e0i, kh\u00f4ng gi\u1ed1ng Java , ta ch\u1ec9 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c c\u00e1c bi\u1ebfn v\u00e0 param \u1edf v\u00f9ng b\u00ean ngo\u00e0i n\u1ebfu nh\u01b0 ch\u00fang \u0111\u01b0\u1ee3c khai b\u00e1o l\u00e0 final Java final String username = edtUsername . getText (). toString (); btnLogin . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { //username ph\u1ea3i l\u00e0 final if ( username != null && ! username . isEmpty ()) { //..... } } }); Kotlin var sum = 0 ints . filter { it > 0 }. forEach { sum += it //sum kh\u00f4ng c\u1ea7n ph\u1ea3i l\u00e0 val (final) } print ( sum )","title":"Closures"},{"location":"kotlin/kotlin_lambda/#function-literals","text":"Theo m\u00ecnh t\u00ecm hi\u1ec3u \u0111\u1ecbnh ngh\u0129a c\u1ee7a Function Literals nh\u01b0 sau v\u00e0 m\u00ecnh th\u1ea5y h\u1ee3p l\u00fd: Comment A function literal is just an expression that defines an unnamed function. M\u1ed9t s\u1ed1 v\u00ed d\u1ee5 v\u1ec1 function literal trong Kotlin : val m = { ( x : String ) -> println ( \"$x\" ) } val n : ( String ) -> Unit = { x -> println ( \"$x\" ) } val o : ( String ) -> Unit = { ( x : String ) -> println ( \"$x\" ) } fun main ( args : Array < String >) { m ( \"good morning\" ) n ( \"good morning\" ) o ( \"good morning\" ) } T\u1ea5t c\u1ea3 m , n v\u00e0 o \u0111\u1ec1u th\u1ef1c hi\u1ec7n ch\u1ee9c n\u0103ng nh\u01b0 nhau.","title":"Function Literals"},{"location":"kotlin/kotlin_lambda/#function-literals-voi-receiver","text":"N\u1ebfu b\u1ea1n n\u00e0o \u0111\u1ecdc docs b\u1eb1ng ti\u1ebfng anh c\u00f3 th\u1ec3 hi\u1ec3u receiver object n\u00f3i \u0111\u1ebfn \u0111\u1ed1i t\u01b0\u1ee3ng th\u1ef1c hi\u1ec7n extension : fun Person . run () { ... } \u0110o\u1ea1n code tr\u00ean class Person \u0111\u01b0\u1ee3c coi l\u00e0 receiver object . \u0110\u1ec3 extension class Int m\u1ed9t function sum() b\u00ecnh th\u01b0\u1eddng s\u1ebd nh\u01b0 sau: fun Int . sum ( other : Int ): Int { return this + other } V\u1ee1i vi\u1ec7c s\u1eed d\u1ee5ng function literal nh\u01b0 sau: val sum = fun Int .( other : Int ): Int = this + other","title":"Function Literals v\u1edbi receiver"},{"location":"kotlin/kotlin_lambda/#inline-function-nang-cao","text":"Inline function \u0111\u01b0\u1ee3c gi\u1ea3i th\u00edch \u1edf \u0111\u00e2y","title":"Inline function (N\u00e2ng cao)"},{"location":"kotlin/kotlin_nested_class/","text":"1. Gi\u1edbi thi\u1ec7u \u00b6 Trong Java ta c\u00f3 th\u1ec3 vi\u1ebft m\u1ed9t class b\u00ean trong th\u00e2n c\u1ee7a m\u1ed9t class kh\u00e1c: Java class Outer { private int bar = 1 ; class Nested { public int foo (){ return bar ; } } } V\u1edbi Kotlin , ta c\u0169ng c\u00f3 th\u1ec3 l\u00e0m t\u01b0\u01a1ng t\u1ef1: Kotlin class Outer { private val bar : Int = 1 class Nested { fun foo () = 2 } } val demo = Outer . Nested (). foo () // == 2 Tuy nhi\u00ean, khi khai b\u00e1o nh\u01b0 tr\u00ean, trong Kotlin , class Nested s\u1ebd kh\u00f4ng th\u1ec3 truy c\u1eadp \u0111\u1ebfn c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a class Outer ch\u1ee9a n\u00f3 nh\u01b0 trong Java . \u0110\u1ec3 l\u00e0m \u0111\u01b0\u1ee3c \u0111i\u1ec1u \u0111\u00f3, ta c\u1ea7n s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a inner trong Kotlin . 2. Inner class \u00b6 M\u1ed9t class c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c khai b\u00e1o v\u1edbi t\u1eeb kh\u00f3a inner c\u00f3 th\u1ec3 truy c\u1eadp \u0111\u1ebfn c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a class ch\u1ee9a n\u00f3. Inner class mang m\u1ed9t tham chi\u1ebfu \u0111\u1ebfn m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng c\u1ee7a class ch\u1ee9a n\u00f3: class Outer { private val bar : Int = 1 private var fooz : String = \"hello\" inner class Inner { fun foo () = bar fun baz () { this @Outer . fooz = \"hi\" } } } val demo = Outer (). Inner (). foo () // == 1 \u0110\u1ec3 tr\u1ecf \u0111\u1ebfn outer class, ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a this v\u1edbi @label nh\u01b0 \u0111\u00e3 n\u00f3i trong ph\u1ea7n Bi\u1ec3u th\u1ee9c this . 3. Anonymous inner class (L\u1edbp con v\u00f4 danh) \u00b6 \u0110\u1ec3 kh\u1edfi t\u1ea1o anonymous inner class, ch\u00fang ta s\u1eed d\u1ee5ng [object expression]: textView ?. setOnClickListener ( object : View . OnClickListener { override fun onClick ( v : View ?) { //.... } }) N\u1ebfu object \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o l\u00e0 m\u1ed9t functional Java interface (m\u1ed9t interface ch\u1ec9 c\u00f3 duy nh\u1ea5t m\u1ed9t method), ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng lambda v\u00e0 khai b\u00e1o nh\u01b0 sau: val listener = View . OnClickListener { }","title":"Kotlin Nested class"},{"location":"kotlin/kotlin_nested_class/#146-gioi-thieu","text":"Trong Java ta c\u00f3 th\u1ec3 vi\u1ebft m\u1ed9t class b\u00ean trong th\u00e2n c\u1ee7a m\u1ed9t class kh\u00e1c: Java class Outer { private int bar = 1 ; class Nested { public int foo (){ return bar ; } } } V\u1edbi Kotlin , ta c\u0169ng c\u00f3 th\u1ec3 l\u00e0m t\u01b0\u01a1ng t\u1ef1: Kotlin class Outer { private val bar : Int = 1 class Nested { fun foo () = 2 } } val demo = Outer . Nested (). foo () // == 2 Tuy nhi\u00ean, khi khai b\u00e1o nh\u01b0 tr\u00ean, trong Kotlin , class Nested s\u1ebd kh\u00f4ng th\u1ec3 truy c\u1eadp \u0111\u1ebfn c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a class Outer ch\u1ee9a n\u00f3 nh\u01b0 trong Java . \u0110\u1ec3 l\u00e0m \u0111\u01b0\u1ee3c \u0111i\u1ec1u \u0111\u00f3, ta c\u1ea7n s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a inner trong Kotlin .","title":"1. Gi\u1edbi thi\u1ec7u"},{"location":"kotlin/kotlin_nested_class/#246-inner-class","text":"M\u1ed9t class c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c khai b\u00e1o v\u1edbi t\u1eeb kh\u00f3a inner c\u00f3 th\u1ec3 truy c\u1eadp \u0111\u1ebfn c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a class ch\u1ee9a n\u00f3. Inner class mang m\u1ed9t tham chi\u1ebfu \u0111\u1ebfn m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng c\u1ee7a class ch\u1ee9a n\u00f3: class Outer { private val bar : Int = 1 private var fooz : String = \"hello\" inner class Inner { fun foo () = bar fun baz () { this @Outer . fooz = \"hi\" } } } val demo = Outer (). Inner (). foo () // == 1 \u0110\u1ec3 tr\u1ecf \u0111\u1ebfn outer class, ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a this v\u1edbi @label nh\u01b0 \u0111\u00e3 n\u00f3i trong ph\u1ea7n Bi\u1ec3u th\u1ee9c this .","title":"2. Inner class"},{"location":"kotlin/kotlin_nested_class/#346-anonymous-inner-class-lop-con-vo-danh","text":"\u0110\u1ec3 kh\u1edfi t\u1ea1o anonymous inner class, ch\u00fang ta s\u1eed d\u1ee5ng [object expression]: textView ?. setOnClickListener ( object : View . OnClickListener { override fun onClick ( v : View ?) { //.... } }) N\u1ebfu object \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o l\u00e0 m\u1ed9t functional Java interface (m\u1ed9t interface ch\u1ec9 c\u00f3 duy nh\u1ea5t m\u1ed9t method), ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng lambda v\u00e0 khai b\u00e1o nh\u01b0 sau: val listener = View . OnClickListener { }","title":"3. Anonymous inner class (L\u1edbp con v\u00f4 danh)"},{"location":"kotlin/kotlin_overloading_operator/","text":"1. Gi\u1edbi thi\u1ec7u \u00b6 Kotlin cho ph\u00e9p ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 t\u1ef1 \u0111\u1ecbnh ngh\u0129a c\u00e1ch implement c\u1ee7a c\u00e1c to\u00e1n t\u1eed v\u1edbi m\u1ed7i lo\u1ea1i d\u1eef li\u1ec7u. C\u00e1c to\u00e1n t\u1eed c\u00f3 c\u00e1c k\u00fd hi\u1ec7u c\u1ed1 \u0111\u1ecbnh ( * , + , ...) v\u00e0 th\u1ee9 t\u1ef1 \u01b0u ti\u00ean c\u1ed1 \u0111\u1ecbnh. \u0110\u1ec3 implement m\u1ed9t to\u00e1n t\u1eed, ch\u00fang ta s\u1ebd ph\u1ea3i \u0111\u1ecbnh ngh\u0129a c\u00e1c function ( member function ho\u1eb7c extension function ) v\u1edbi t\u00ean function c\u1ed1 \u0111\u1ecbnh, t\u01b0\u01a1ng \u1ee9ng v\u1edbi to\u00e1n t\u1eed m\u00e0 ch\u00fang ta s\u1ebd implement. \u0110\u1ec3 overload c\u00e1c operator, ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a operator . 2. To\u00e1n t\u1eed m\u1ed9t ng\u00f4i \u00b6 To\u00e1n t\u1eed m\u1ed9t ng\u00f4i ti\u1ec1n t\u1ed1 \u00b6 Bi\u1ec3u th\u1ee9c function t\u01b0\u01a1ng \u1ee9ng +a a.unaryPlus() -a a.unaryMinus() !a a.not() Nh\u00ecn v\u00e0o b\u1ea3ng, ta s\u1ebd th\u1ea5y c\u00e1c h\u00e0m t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c to\u00e1n t\u1eed v\u00e0 c\u00e1ch compiler x\u1eed l\u00fd khi ta s\u1eed d\u1ee5ng c\u00e1c to\u00e1n t\u1eed \u0111\u00f3. VD: +a , n\u00f3 s\u1ebd ho\u1ea1t \u0111\u1ed9ng theo c\u00e1c b\u01b0\u1edbc sau: X\u00e1c \u0111\u1ecbnh ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a a, gi\u1ea3 s\u1eed l\u00e0 T T\u00ecm ki\u1ebfm function unaryPlus() v\u1edbi t\u1eeb kh\u00f3a operator v\u00e0 kh\u00f4ng c\u00f3 tham s\u1ed1 \u0111\u1ed1i v\u1edbi ki\u1ec3u T . Function \u0111\u00f3 c\u00f3 th\u1ec3 l\u00e0 member function ho\u1eb7c extension function. N\u1ebfu kh\u00f4ng c\u00f3 function \u0111\u00f3, qu\u00e1 tr\u00ecnh compile s\u1ebd b\u1ecb l\u1ed7i N\u1ebfu function \u0111\u00f3 c\u00f3 m\u1eb7t v\u00e0 ki\u1ec3u tr\u1ea3 v\u1ec1 c\u1ee7a n\u00f3 l\u00e0 R , bi\u1ec3u th\u1ee9c +a s\u1ebd tr\u1ea3 v\u1ec1 ki\u1ec3u d\u1eef li\u1ec7u R L\u01b0u \u00fd: c\u00e1c to\u00e1n t\u1eed n\u00e0y \u0111\u01b0\u1ee3c t\u1ed1i \u01b0u cho c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u c\u01a1 b\u1ea3n ... VD: overload to\u00e1n t\u1eed - data class Point ( val x : Int , val y : Int ) operator fun Point . unaryMinus () = Point (- x , - y ) val point = Point ( 10 , 20 ) println (- point ) // prints \"(-10, -20)\" Sau khi \u0111\u1ecbnh ngh\u0129a l\u1ea1i to\u00e1n t\u1eed - , \u0110\u1ed1i t\u01b0\u1ee3ng Point t\u1eeb b\u00e2y gi\u1edd s\u1ebd d\u00f9ng \u0111\u01b0\u1ee3c v\u1edbi to\u00e1n t\u1eeb - (compile th\u00e0nh c\u00f4ng) v\u00e0 khi s\u1eed d\u1ee5ng to\u00e1n t\u1eed - , compiler s\u1ebd t\u00ecm \u0111\u1ebfn extension function unaryMinus() c\u1ee7a \u0111\u1ed1i t\u01b0\u1ee3ng Point , function n\u00e0y tr\u1ea3 v\u1ec1 ki\u1ec3u Point v\u1edbi gi\u00e1 tr\u1ecb c\u1ee7a x , y \u0111\u01b0\u1ee3c \u0111\u1ed5i d\u1ea5u. To\u00e1n t\u1eed m\u1ed9t ng\u00f4i h\u1eadu t\u1ed1/ ti\u1ec1n t\u1ed1 ++ , -- \u00b6 Bi\u1ec3u th\u1ee9c function t\u01b0\u01a1ng \u1ee9ng a++ a.inc() a-- a.dec() Function inc() v\u00e0 dec() b\u1eaft bu\u1ed9c ph\u1ea3i tr\u1ea3 v\u1ec1 m\u1ed9t gi\u00e1 tr\u1ecb. Gi\u00e1 tr\u1ecb \u0111\u00f3 s\u1ebd \u0111\u01b0\u1ee3c g\u00e1n cho bi\u1ebfn m\u00e0 g\u1ecdi to\u00e1n t\u1eed ++ , -- . Khi x\u1eed l\u00fd c\u00e1c to\u00e1n t\u1eed m\u1ed9t ng\u00f4i h\u1eadu t\u1ed1, compiler s\u1ebd x\u1eed l\u00fd nh\u01b0 sau. VD \u0111\u1ed1i v\u1edbi a++ : X\u00e1c \u0111\u1ecbnh ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a a, gi\u1ea3 s\u1eed l\u00e0 T T\u00ecm ki\u1ebfm function inc() v\u1edbi t\u1eeb kh\u00f3a operator , kh\u00f4ng c\u00f3 tham s\u1ed1 v\u00e0 ki\u1ec3u tr\u1ea3 v\u1ec1 c\u1ee7a function n\u00e0y ph\u1ea3i l\u00e0 ki\u1ec3u T ho\u1eb7c k\u1ebf th\u1eeba t\u1eeb T K\u1ebft qu\u1ea3 c\u1ee7a vi\u1ec7c t\u00ednh to\u00e1n trong bi\u1ec3u th\u1ee9c n\u00e0y l\u00e0: L\u01b0u tr\u1eef gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o c\u1ee7a a v\u00e0o m\u1ed9t bi\u1ebfn t\u1ea1m a0 G\u00e1n k\u1ebft qu\u1ea3 c\u1ee7a a.inc() cho a Tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb a0 nh\u01b0 l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a bi\u1ec3u th\u1ee9c. Gi\u1ea3i th\u00edch m\u1ed9t ch\u00fat: to\u00e1n t\u1eed h\u1eadu t\u1ed1 ho\u1ea1t \u0111\u1ed9ng l\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a a , sau \u0111\u00f3 m\u1edbi t\u0103ng ho\u1eb7c gi\u1ea3m a (ch\u01b0a t\u0103ng/gi\u1ea3m). V\u1edbi to\u00e1n t\u1eed d\u1ea1ng ti\u1ec1n t\u1ed1 ++a , --a , gi\u1ea3i ph\u00e1p l\u00e0 t\u01b0\u01a1ng t\u1ef1. Tuy nhi\u00ean, k\u1ebft qu\u1ea3 l\u00e0: G\u00e1n k\u1ebft qu\u1ea3 c\u1ee7a a.inc() cho a Tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb m\u1edbi c\u1ee7a a l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a bi\u1ec3u th\u1ee9c To\u00e1n t\u1eed ti\u1ec1n t\u1ed1 ho\u1ea1t \u0111\u1ed9ng l\u00e0 t\u0103ng ho\u1eb7c gi\u1ea3m gi\u00e1 tr\u1ecb c\u1ee7a a tr\u01b0\u1edbc, sau \u0111\u00f3 m\u1edbi tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a a (\u0111\u00e3 t\u0103ng/gi\u1ea3m) 3. To\u00e1n t\u1eed 2 ng\u00f4i \u00b6 To\u00e1n t\u1eed s\u1ed1 h\u1ecdc \u00b6 Bi\u1ec3u th\u1ee9c function t\u01b0\u01a1ng \u1ee9ng a + b a.plus(b) a - b a.minus(b) a * b a.times(b) a / b a.div(b) a % b a.rem(b), a.mod(b) (deprecated) a..b a.rangeTo(b) T\u01b0\u01a1ng t\u1ef1 nh\u01b0 to\u00e1n t\u1eed m\u1ed9t ng\u00f4i, compiler c\u0169ng s\u1ebd t\u00ecm c\u00e1c h\u00e0m t\u01b0\u01a1ng \u1ee9ng. L\u01b0u \u00fd: rem s\u1ebd \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 t\u1eeb Kotlin 1.1 , Kotlin 1.0 s\u1eed d\u1ee5ng mod , mod s\u1ebd b\u1ecb deprecated t\u1eeb Kotlin 1.1 VD: \u0111\u1ed1i t\u01b0\u1ee3ng ho\u00e1 \u0111\u01a1n (Bill) v\u1edbi 2 thu\u1ed9c t\u00ednh s\u1ed1 l\u01b0\u1ee3ng(quantity) v\u00e0 gi\u00e1(cost). N\u1ebfu c\u1ed9ng 2 h\u00f3a \u0111\u01a1n l\u1ea1i, ta c\u00f3 m\u1ed9t h\u00f3a \u0111\u01a1n m\u1edbi v\u1edbi s\u1ed1 l\u01b0\u1ee3ng v\u00e0 gi\u00e1 b\u1eb1ng t\u1ed5ng 2 h\u00f3a \u0111\u01a1n kia c\u1ed9ng l\u1ea1i. data class Bill ( var quantity : Int , var cost : Int ) { operator fun plus ( bill : Bill ): Bill { return Bill ( this . quantity + bill . quantity , this . cost + bill . cost ) } } var a : Bill = Bill ( 2 , 10 ) var b : Bill = Bill ( 1 , 5 ) print ( a + b ) // Bill(quantity=3, cost=15) To\u00e1n t\u1eed in \u00b6 Bi\u1ec3u th\u1ee9c function t\u01b0\u01a1ng \u1ee9ng a in b b.contains(a) a !in b !b.contains(a) V\u1edbi to\u00e1n t\u1eed in v\u00e0 !in , vi\u1ec7c x\u1eed l\u00fd l\u00e0 t\u01b0\u01a1ng t\u1ef1 nh\u01b0ng th\u1ee9 t\u1ef1 c\u1ee7a tham s\u1ed1 \u0111\u01b0\u1ee3c \u0111\u1ea3o l\u1ea1i VD: ta implement function contains v\u1edbi \u0111\u1ed1i t\u01b0\u1ee3ng h\u00f3a \u0111\u01a1n, t\u1eeb \u0111\u00f3 ta c\u00f3 th\u1ec3 ki\u1ec3m tra trong \u0111\u01a1n h\u00e0ng ( Order ) c\u00f3 h\u00f3a \u0111\u01a1n ( Bill ) \u0111\u00f3 kh\u00f4ng: data class Order ( var bills : Array < Bill >) { operator fun contains ( bill : Bill ): Boolean { return bill in bills } } var a : Bill = Bill ( 2 , 10 ) var b : Bill = Bill ( 1 , 5 ) var c : Order = Order ( arrayOf ( a , b )) var d : Bill = Bill ( 2 , 10 ) print ( d in c ) // true To\u00e1n t\u1eed truy c\u1eadp \u0111\u1ebfn ch\u1ec9 s\u1ed1 \u00b6 Bi\u1ec3u th\u1ee9c function t\u01b0\u01a1ng \u1ee9ng a[i] a.get(i) a[i, j] a.get(i, j) a[i_1, ..., i_n] a.get(i_1, ..., i_n) a[i] = b a.set(i, b) a[i, j] = b a.set(i, j, b) a[i_1, ..., i_n] = b a.set(i_1, ..., i_n, b) D\u1ea5u ngo\u1eb7c vu\u00f4ng [] s\u1ebd g\u1ecdi \u0111\u1ebfn c\u00e1c h\u00e0m get , set t\u00f9y theo s\u1ed1 l\u01b0\u1ee3ng \u0111\u1ed1i truy\u1ec1n v\u00e0o VD: \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u01a1n h\u00e0ng Order g\u1ed3m nhi\u1ec1u c\u00e1c h\u00f3a \u0111\u01a1n, ta overload l\u1ea1i h\u00e0m get . T\u1eeb \u0111\u00f3, ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng to\u00e1n t\u1eed [] \u0111\u1ec3 truy c\u1eadp \u0111\u1ebfn t\u1eebng h\u00f3a \u0111\u01a1n c\u1ee7a \u0111\u01a1n h\u00e0ng data class Order ( var bills : Array < Bill >) { operator fun get ( i : Int ): Bill { return bills [ i ] } } var a : Bill = Bill ( 2 , 10 ) var b : Bill = Bill ( 1 , 5 ) var c : Order = Order ( arrayOf ( a , b )) print ( c [ 0 ]) // Bill(quantity=2, cost=10) To\u00e1n t\u1eed g\u1ecdi \u00b6 Bi\u1ec3u th\u1ee9c function t\u01b0\u01a1ng \u1ee9ng a() a.invoke() a(i) a.invoke(i) a(i, j) a.invoke(i, j) a(i_1, ..., i_n) a.invoke(i_1, ..., i_n) D\u1ea5u ngo\u1eb7c tr\u00f2n () s\u1ebd g\u1ecdi \u0111\u1ebfn c\u00e1c h\u00e0m invoke t\u00f9y theo s\u1ed1 l\u01b0\u1ee3ng \u0111\u1ed1i truy\u1ec1n v\u00e0o VD: overload function invoke() \u0111\u1ec3 t\u00ednh t\u1ed5ng ti\u1ec1n c\u1ee7a h\u00f3a \u0111\u01a1n: operator fun invoke (): Int { return quantity * cost } var a : Bill = ( 2 , 10 ) print ( a ()) // 20 print ( a . invoke ()) //20 To\u00e1n t\u1eed t\u0103ng v\u00e0 g\u00e1n \u00b6 Bi\u1ec3u th\u1ee9c function t\u01b0\u01a1ng \u1ee9ng a += b a.plusAssign(b) a -= b a.minusAssign(b) a *= b a.timesAssign(b) a /= b a.divAssign(b) a %= b a.modAssign(b) V\u1edbi lo\u1ea1i to\u00e1n t\u1eed n\u00e0y, VD: a += b , compiler s\u1ebd x\u1eed l\u00fd nh\u01b0 sau: N\u1ebfu c\u00f3 function \u1edf c\u1ed9t b\u00ean ph\u1ea3i: N\u1ebfu c\u00e1c function t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c to\u00e1n t\u1eed 2 ng\u00f4i VD ( plus() \u0111\u1ed1i v\u1edbi plusAssign() ), compiler s\u1ebd b\u00e1o l\u1ed7i N\u1ebfu ki\u1ec3u tr\u1ea3 v\u1ec1 c\u1ee7a function kh\u00f4ng ph\u1ea3i l\u00e0 Unit , compiler s\u1ebd b\u00e1o l\u1ed7i S\u1eed d\u1ee5ng function a.plusAssign(b) Ng\u01b0\u1ee3c l\u1ea1i, n\u1ebfu kh\u00f4ng c\u00f3 function, s\u1ebd s\u1eed d\u1ee5ng code \u0111\u01b0\u1ee3c x\u1eed l\u00fd b\u1edfi function a = a + b (y\u00eau c\u1ea7u ki\u1ec3m tra ki\u1ec3u: ki\u1ec3u c\u1ee7a a + b ph\u1ea3i l\u00e0 ki\u1ec3u c\u1ee7a a ho\u1eb7c k\u1ebf th\u1eeba t\u1eeb ki\u1ec3u c\u1ee7a a ) L\u01b0u \u00fd: g\u00e1n kh\u00f4ng ph\u1ea3i l\u00e0 m\u1ed9t bi\u1ec3u th\u1ee9c trong Kotlin VD: v\u1eabn v\u1edbi \u0111\u1ed1i t\u01b0\u1ee3ng Bill \u1edf tr\u00ean, ta \u0111\u1ecbnh ngh\u0129a th\u00eam m\u1ed9t function plusAssign() . Khi \u0111\u00f3, n\u1ebfu ta v\u1eabn \u0111\u1ecbnh ngh\u0129a function plus() \u0111\u1ec3 overload to\u00e1n t\u1eed + , compiler s\u1ebd b\u00e1o l\u1ed7i. \u0110\u1ec3 s\u1eed d\u1ee5ng plusAssign() , ta ph\u1ea3i b\u1ecf function plus() operator fun plusAssign ( bill : Bill ) { this . quantity += bill . quantity this . cost += bill . cost } var a : Bill = Bill ( 2 , 10 ) var b : Bill = Bill ( 1 , 5 ) a += b print ( a ) // Bill(quantity=3, cost=15) To\u00e1n t\u1eed == v\u00e0 != \u00b6 Bi\u1ec3u th\u1ee9c function t\u01b0\u01a1ng \u1ee9ng a == b a?.equals(b) ?: (b === null) a != b !(a?.equals(b) ?: (b === null)) L\u01b0u \u00fd: === v\u00e0 !== (xem th\u00eam to\u00e1n t\u1eed so s\u00e1nh ) kh\u00f4ng th\u1ec3 overload \u0111\u01b0\u1ee3c. To\u00e1n t\u1eed so s\u00e1nh \u00b6 Bi\u1ec3u th\u1ee9c function t\u01b0\u01a1ng \u1ee9ng a > b a.compareTo(b) > 0 a < b a.compareTo(b) < 0 a >= b a.compareTo(b) >= 0 a <= b a.compareTo(b) <= 0 T\u1ea5t c\u1ea3 to\u00e1n t\u1eed so s\u00e1nh s\u1ebd g\u1ecdi h\u00e0m compareTo v\u00e0 y\u00eau c\u1ea7u tr\u1ea3 v\u1ec1 ki\u1ec3u Int VD: operator fun compareTo ( bill : Bill ): Int { return ( this . quantity * this . cost ) - ( bill . quantity * bill . cost ) } var a : Bill = Bill ( 2 , 10 ) var b : Bill = Bill ( 1 , 5 ) print ( a < b ) // false 4. infix notation (trung t\u1ed1) \u00b6 Ch\u00fang ta c\u00f3 th\u1ec3 coi c\u00e1c infix function l\u00e0 c\u00e1c to\u00e1n t\u1eed. Xem th\u00eam infix function","title":"Kotlin Overloading operator"},{"location":"kotlin/kotlin_overloading_operator/#146-gioi-thieu","text":"Kotlin cho ph\u00e9p ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 t\u1ef1 \u0111\u1ecbnh ngh\u0129a c\u00e1ch implement c\u1ee7a c\u00e1c to\u00e1n t\u1eed v\u1edbi m\u1ed7i lo\u1ea1i d\u1eef li\u1ec7u. C\u00e1c to\u00e1n t\u1eed c\u00f3 c\u00e1c k\u00fd hi\u1ec7u c\u1ed1 \u0111\u1ecbnh ( * , + , ...) v\u00e0 th\u1ee9 t\u1ef1 \u01b0u ti\u00ean c\u1ed1 \u0111\u1ecbnh. \u0110\u1ec3 implement m\u1ed9t to\u00e1n t\u1eed, ch\u00fang ta s\u1ebd ph\u1ea3i \u0111\u1ecbnh ngh\u0129a c\u00e1c function ( member function ho\u1eb7c extension function ) v\u1edbi t\u00ean function c\u1ed1 \u0111\u1ecbnh, t\u01b0\u01a1ng \u1ee9ng v\u1edbi to\u00e1n t\u1eed m\u00e0 ch\u00fang ta s\u1ebd implement. \u0110\u1ec3 overload c\u00e1c operator, ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a operator .","title":"1. Gi\u1edbi thi\u1ec7u"},{"location":"kotlin/kotlin_overloading_operator/#246-toan-tu-mot-ngoi","text":"","title":"2. To\u00e1n t\u1eed m\u1ed9t ng\u00f4i"},{"location":"kotlin/kotlin_overloading_operator/#toan-tu-mot-ngoi-tien-to","text":"Bi\u1ec3u th\u1ee9c function t\u01b0\u01a1ng \u1ee9ng +a a.unaryPlus() -a a.unaryMinus() !a a.not() Nh\u00ecn v\u00e0o b\u1ea3ng, ta s\u1ebd th\u1ea5y c\u00e1c h\u00e0m t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c to\u00e1n t\u1eed v\u00e0 c\u00e1ch compiler x\u1eed l\u00fd khi ta s\u1eed d\u1ee5ng c\u00e1c to\u00e1n t\u1eed \u0111\u00f3. VD: +a , n\u00f3 s\u1ebd ho\u1ea1t \u0111\u1ed9ng theo c\u00e1c b\u01b0\u1edbc sau: X\u00e1c \u0111\u1ecbnh ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a a, gi\u1ea3 s\u1eed l\u00e0 T T\u00ecm ki\u1ebfm function unaryPlus() v\u1edbi t\u1eeb kh\u00f3a operator v\u00e0 kh\u00f4ng c\u00f3 tham s\u1ed1 \u0111\u1ed1i v\u1edbi ki\u1ec3u T . Function \u0111\u00f3 c\u00f3 th\u1ec3 l\u00e0 member function ho\u1eb7c extension function. N\u1ebfu kh\u00f4ng c\u00f3 function \u0111\u00f3, qu\u00e1 tr\u00ecnh compile s\u1ebd b\u1ecb l\u1ed7i N\u1ebfu function \u0111\u00f3 c\u00f3 m\u1eb7t v\u00e0 ki\u1ec3u tr\u1ea3 v\u1ec1 c\u1ee7a n\u00f3 l\u00e0 R , bi\u1ec3u th\u1ee9c +a s\u1ebd tr\u1ea3 v\u1ec1 ki\u1ec3u d\u1eef li\u1ec7u R L\u01b0u \u00fd: c\u00e1c to\u00e1n t\u1eed n\u00e0y \u0111\u01b0\u1ee3c t\u1ed1i \u01b0u cho c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u c\u01a1 b\u1ea3n ... VD: overload to\u00e1n t\u1eed - data class Point ( val x : Int , val y : Int ) operator fun Point . unaryMinus () = Point (- x , - y ) val point = Point ( 10 , 20 ) println (- point ) // prints \"(-10, -20)\" Sau khi \u0111\u1ecbnh ngh\u0129a l\u1ea1i to\u00e1n t\u1eed - , \u0110\u1ed1i t\u01b0\u1ee3ng Point t\u1eeb b\u00e2y gi\u1edd s\u1ebd d\u00f9ng \u0111\u01b0\u1ee3c v\u1edbi to\u00e1n t\u1eeb - (compile th\u00e0nh c\u00f4ng) v\u00e0 khi s\u1eed d\u1ee5ng to\u00e1n t\u1eed - , compiler s\u1ebd t\u00ecm \u0111\u1ebfn extension function unaryMinus() c\u1ee7a \u0111\u1ed1i t\u01b0\u1ee3ng Point , function n\u00e0y tr\u1ea3 v\u1ec1 ki\u1ec3u Point v\u1edbi gi\u00e1 tr\u1ecb c\u1ee7a x , y \u0111\u01b0\u1ee3c \u0111\u1ed5i d\u1ea5u.","title":"To\u00e1n t\u1eed m\u1ed9t ng\u00f4i ti\u1ec1n t\u1ed1"},{"location":"kotlin/kotlin_overloading_operator/#toan-tu-mot-ngoi-hau-to-tien-to-","text":"Bi\u1ec3u th\u1ee9c function t\u01b0\u01a1ng \u1ee9ng a++ a.inc() a-- a.dec() Function inc() v\u00e0 dec() b\u1eaft bu\u1ed9c ph\u1ea3i tr\u1ea3 v\u1ec1 m\u1ed9t gi\u00e1 tr\u1ecb. Gi\u00e1 tr\u1ecb \u0111\u00f3 s\u1ebd \u0111\u01b0\u1ee3c g\u00e1n cho bi\u1ebfn m\u00e0 g\u1ecdi to\u00e1n t\u1eed ++ , -- . Khi x\u1eed l\u00fd c\u00e1c to\u00e1n t\u1eed m\u1ed9t ng\u00f4i h\u1eadu t\u1ed1, compiler s\u1ebd x\u1eed l\u00fd nh\u01b0 sau. VD \u0111\u1ed1i v\u1edbi a++ : X\u00e1c \u0111\u1ecbnh ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a a, gi\u1ea3 s\u1eed l\u00e0 T T\u00ecm ki\u1ebfm function inc() v\u1edbi t\u1eeb kh\u00f3a operator , kh\u00f4ng c\u00f3 tham s\u1ed1 v\u00e0 ki\u1ec3u tr\u1ea3 v\u1ec1 c\u1ee7a function n\u00e0y ph\u1ea3i l\u00e0 ki\u1ec3u T ho\u1eb7c k\u1ebf th\u1eeba t\u1eeb T K\u1ebft qu\u1ea3 c\u1ee7a vi\u1ec7c t\u00ednh to\u00e1n trong bi\u1ec3u th\u1ee9c n\u00e0y l\u00e0: L\u01b0u tr\u1eef gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o c\u1ee7a a v\u00e0o m\u1ed9t bi\u1ebfn t\u1ea1m a0 G\u00e1n k\u1ebft qu\u1ea3 c\u1ee7a a.inc() cho a Tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb a0 nh\u01b0 l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a bi\u1ec3u th\u1ee9c. Gi\u1ea3i th\u00edch m\u1ed9t ch\u00fat: to\u00e1n t\u1eed h\u1eadu t\u1ed1 ho\u1ea1t \u0111\u1ed9ng l\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a a , sau \u0111\u00f3 m\u1edbi t\u0103ng ho\u1eb7c gi\u1ea3m a (ch\u01b0a t\u0103ng/gi\u1ea3m). V\u1edbi to\u00e1n t\u1eed d\u1ea1ng ti\u1ec1n t\u1ed1 ++a , --a , gi\u1ea3i ph\u00e1p l\u00e0 t\u01b0\u01a1ng t\u1ef1. Tuy nhi\u00ean, k\u1ebft qu\u1ea3 l\u00e0: G\u00e1n k\u1ebft qu\u1ea3 c\u1ee7a a.inc() cho a Tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb m\u1edbi c\u1ee7a a l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a bi\u1ec3u th\u1ee9c To\u00e1n t\u1eed ti\u1ec1n t\u1ed1 ho\u1ea1t \u0111\u1ed9ng l\u00e0 t\u0103ng ho\u1eb7c gi\u1ea3m gi\u00e1 tr\u1ecb c\u1ee7a a tr\u01b0\u1edbc, sau \u0111\u00f3 m\u1edbi tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a a (\u0111\u00e3 t\u0103ng/gi\u1ea3m)","title":"To\u00e1n t\u1eed m\u1ed9t ng\u00f4i h\u1eadu t\u1ed1/ ti\u1ec1n t\u1ed1\u00a0++,\u00a0--"},{"location":"kotlin/kotlin_overloading_operator/#346-toan-tu-2-ngoi","text":"","title":"3. To\u00e1n t\u1eed 2 ng\u00f4i"},{"location":"kotlin/kotlin_overloading_operator/#toan-tu-so-hoc","text":"Bi\u1ec3u th\u1ee9c function t\u01b0\u01a1ng \u1ee9ng a + b a.plus(b) a - b a.minus(b) a * b a.times(b) a / b a.div(b) a % b a.rem(b), a.mod(b) (deprecated) a..b a.rangeTo(b) T\u01b0\u01a1ng t\u1ef1 nh\u01b0 to\u00e1n t\u1eed m\u1ed9t ng\u00f4i, compiler c\u0169ng s\u1ebd t\u00ecm c\u00e1c h\u00e0m t\u01b0\u01a1ng \u1ee9ng. L\u01b0u \u00fd: rem s\u1ebd \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 t\u1eeb Kotlin 1.1 , Kotlin 1.0 s\u1eed d\u1ee5ng mod , mod s\u1ebd b\u1ecb deprecated t\u1eeb Kotlin 1.1 VD: \u0111\u1ed1i t\u01b0\u1ee3ng ho\u00e1 \u0111\u01a1n (Bill) v\u1edbi 2 thu\u1ed9c t\u00ednh s\u1ed1 l\u01b0\u1ee3ng(quantity) v\u00e0 gi\u00e1(cost). N\u1ebfu c\u1ed9ng 2 h\u00f3a \u0111\u01a1n l\u1ea1i, ta c\u00f3 m\u1ed9t h\u00f3a \u0111\u01a1n m\u1edbi v\u1edbi s\u1ed1 l\u01b0\u1ee3ng v\u00e0 gi\u00e1 b\u1eb1ng t\u1ed5ng 2 h\u00f3a \u0111\u01a1n kia c\u1ed9ng l\u1ea1i. data class Bill ( var quantity : Int , var cost : Int ) { operator fun plus ( bill : Bill ): Bill { return Bill ( this . quantity + bill . quantity , this . cost + bill . cost ) } } var a : Bill = Bill ( 2 , 10 ) var b : Bill = Bill ( 1 , 5 ) print ( a + b ) // Bill(quantity=3, cost=15)","title":"To\u00e1n t\u1eed s\u1ed1 h\u1ecdc"},{"location":"kotlin/kotlin_overloading_operator/#toan-tu-in","text":"Bi\u1ec3u th\u1ee9c function t\u01b0\u01a1ng \u1ee9ng a in b b.contains(a) a !in b !b.contains(a) V\u1edbi to\u00e1n t\u1eed in v\u00e0 !in , vi\u1ec7c x\u1eed l\u00fd l\u00e0 t\u01b0\u01a1ng t\u1ef1 nh\u01b0ng th\u1ee9 t\u1ef1 c\u1ee7a tham s\u1ed1 \u0111\u01b0\u1ee3c \u0111\u1ea3o l\u1ea1i VD: ta implement function contains v\u1edbi \u0111\u1ed1i t\u01b0\u1ee3ng h\u00f3a \u0111\u01a1n, t\u1eeb \u0111\u00f3 ta c\u00f3 th\u1ec3 ki\u1ec3m tra trong \u0111\u01a1n h\u00e0ng ( Order ) c\u00f3 h\u00f3a \u0111\u01a1n ( Bill ) \u0111\u00f3 kh\u00f4ng: data class Order ( var bills : Array < Bill >) { operator fun contains ( bill : Bill ): Boolean { return bill in bills } } var a : Bill = Bill ( 2 , 10 ) var b : Bill = Bill ( 1 , 5 ) var c : Order = Order ( arrayOf ( a , b )) var d : Bill = Bill ( 2 , 10 ) print ( d in c ) // true","title":"To\u00e1n t\u1eed\u00a0in"},{"location":"kotlin/kotlin_overloading_operator/#toan-tu-truy-cap-en-chi-so","text":"Bi\u1ec3u th\u1ee9c function t\u01b0\u01a1ng \u1ee9ng a[i] a.get(i) a[i, j] a.get(i, j) a[i_1, ..., i_n] a.get(i_1, ..., i_n) a[i] = b a.set(i, b) a[i, j] = b a.set(i, j, b) a[i_1, ..., i_n] = b a.set(i_1, ..., i_n, b) D\u1ea5u ngo\u1eb7c vu\u00f4ng [] s\u1ebd g\u1ecdi \u0111\u1ebfn c\u00e1c h\u00e0m get , set t\u00f9y theo s\u1ed1 l\u01b0\u1ee3ng \u0111\u1ed1i truy\u1ec1n v\u00e0o VD: \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u01a1n h\u00e0ng Order g\u1ed3m nhi\u1ec1u c\u00e1c h\u00f3a \u0111\u01a1n, ta overload l\u1ea1i h\u00e0m get . T\u1eeb \u0111\u00f3, ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng to\u00e1n t\u1eed [] \u0111\u1ec3 truy c\u1eadp \u0111\u1ebfn t\u1eebng h\u00f3a \u0111\u01a1n c\u1ee7a \u0111\u01a1n h\u00e0ng data class Order ( var bills : Array < Bill >) { operator fun get ( i : Int ): Bill { return bills [ i ] } } var a : Bill = Bill ( 2 , 10 ) var b : Bill = Bill ( 1 , 5 ) var c : Order = Order ( arrayOf ( a , b )) print ( c [ 0 ]) // Bill(quantity=2, cost=10)","title":"To\u00e1n t\u1eed truy c\u1eadp \u0111\u1ebfn ch\u1ec9 s\u1ed1"},{"location":"kotlin/kotlin_overloading_operator/#toan-tu-goi","text":"Bi\u1ec3u th\u1ee9c function t\u01b0\u01a1ng \u1ee9ng a() a.invoke() a(i) a.invoke(i) a(i, j) a.invoke(i, j) a(i_1, ..., i_n) a.invoke(i_1, ..., i_n) D\u1ea5u ngo\u1eb7c tr\u00f2n () s\u1ebd g\u1ecdi \u0111\u1ebfn c\u00e1c h\u00e0m invoke t\u00f9y theo s\u1ed1 l\u01b0\u1ee3ng \u0111\u1ed1i truy\u1ec1n v\u00e0o VD: overload function invoke() \u0111\u1ec3 t\u00ednh t\u1ed5ng ti\u1ec1n c\u1ee7a h\u00f3a \u0111\u01a1n: operator fun invoke (): Int { return quantity * cost } var a : Bill = ( 2 , 10 ) print ( a ()) // 20 print ( a . invoke ()) //20","title":"To\u00e1n t\u1eed g\u1ecdi"},{"location":"kotlin/kotlin_overloading_operator/#toan-tu-tang-va-gan","text":"Bi\u1ec3u th\u1ee9c function t\u01b0\u01a1ng \u1ee9ng a += b a.plusAssign(b) a -= b a.minusAssign(b) a *= b a.timesAssign(b) a /= b a.divAssign(b) a %= b a.modAssign(b) V\u1edbi lo\u1ea1i to\u00e1n t\u1eed n\u00e0y, VD: a += b , compiler s\u1ebd x\u1eed l\u00fd nh\u01b0 sau: N\u1ebfu c\u00f3 function \u1edf c\u1ed9t b\u00ean ph\u1ea3i: N\u1ebfu c\u00e1c function t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c to\u00e1n t\u1eed 2 ng\u00f4i VD ( plus() \u0111\u1ed1i v\u1edbi plusAssign() ), compiler s\u1ebd b\u00e1o l\u1ed7i N\u1ebfu ki\u1ec3u tr\u1ea3 v\u1ec1 c\u1ee7a function kh\u00f4ng ph\u1ea3i l\u00e0 Unit , compiler s\u1ebd b\u00e1o l\u1ed7i S\u1eed d\u1ee5ng function a.plusAssign(b) Ng\u01b0\u1ee3c l\u1ea1i, n\u1ebfu kh\u00f4ng c\u00f3 function, s\u1ebd s\u1eed d\u1ee5ng code \u0111\u01b0\u1ee3c x\u1eed l\u00fd b\u1edfi function a = a + b (y\u00eau c\u1ea7u ki\u1ec3m tra ki\u1ec3u: ki\u1ec3u c\u1ee7a a + b ph\u1ea3i l\u00e0 ki\u1ec3u c\u1ee7a a ho\u1eb7c k\u1ebf th\u1eeba t\u1eeb ki\u1ec3u c\u1ee7a a ) L\u01b0u \u00fd: g\u00e1n kh\u00f4ng ph\u1ea3i l\u00e0 m\u1ed9t bi\u1ec3u th\u1ee9c trong Kotlin VD: v\u1eabn v\u1edbi \u0111\u1ed1i t\u01b0\u1ee3ng Bill \u1edf tr\u00ean, ta \u0111\u1ecbnh ngh\u0129a th\u00eam m\u1ed9t function plusAssign() . Khi \u0111\u00f3, n\u1ebfu ta v\u1eabn \u0111\u1ecbnh ngh\u0129a function plus() \u0111\u1ec3 overload to\u00e1n t\u1eed + , compiler s\u1ebd b\u00e1o l\u1ed7i. \u0110\u1ec3 s\u1eed d\u1ee5ng plusAssign() , ta ph\u1ea3i b\u1ecf function plus() operator fun plusAssign ( bill : Bill ) { this . quantity += bill . quantity this . cost += bill . cost } var a : Bill = Bill ( 2 , 10 ) var b : Bill = Bill ( 1 , 5 ) a += b print ( a ) // Bill(quantity=3, cost=15)","title":"To\u00e1n t\u1eed t\u0103ng v\u00e0 g\u00e1n"},{"location":"kotlin/kotlin_overloading_operator/#toan-tu-va","text":"Bi\u1ec3u th\u1ee9c function t\u01b0\u01a1ng \u1ee9ng a == b a?.equals(b) ?: (b === null) a != b !(a?.equals(b) ?: (b === null)) L\u01b0u \u00fd: === v\u00e0 !== (xem th\u00eam to\u00e1n t\u1eed so s\u00e1nh ) kh\u00f4ng th\u1ec3 overload \u0111\u01b0\u1ee3c.","title":"To\u00e1n t\u1eed\u00a0==\u00a0v\u00e0\u00a0!="},{"location":"kotlin/kotlin_overloading_operator/#toan-tu-so-sanh","text":"Bi\u1ec3u th\u1ee9c function t\u01b0\u01a1ng \u1ee9ng a > b a.compareTo(b) > 0 a < b a.compareTo(b) < 0 a >= b a.compareTo(b) >= 0 a <= b a.compareTo(b) <= 0 T\u1ea5t c\u1ea3 to\u00e1n t\u1eed so s\u00e1nh s\u1ebd g\u1ecdi h\u00e0m compareTo v\u00e0 y\u00eau c\u1ea7u tr\u1ea3 v\u1ec1 ki\u1ec3u Int VD: operator fun compareTo ( bill : Bill ): Int { return ( this . quantity * this . cost ) - ( bill . quantity * bill . cost ) } var a : Bill = Bill ( 2 , 10 ) var b : Bill = Bill ( 1 , 5 ) print ( a < b ) // false","title":"To\u00e1n t\u1eed so s\u00e1nh"},{"location":"kotlin/kotlin_overloading_operator/#446-infix-notation-trung-to","text":"Ch\u00fang ta c\u00f3 th\u1ec3 coi c\u00e1c infix function l\u00e0 c\u00e1c to\u00e1n t\u1eed. Xem th\u00eam infix function","title":"4. infix notation (trung t\u1ed1)"},{"location":"kotlin/kotlin_property_field/","text":"1. Khai b\u00e1o property \u00b6 C\u00e1c class trong Kotlin c\u00f3 th\u1ec3 c\u00f3 c\u00e1c property . Ch\u00fang c\u00f3 th\u1ec3 khai b\u00e1o l\u00e0 c\u00e1c bi\u1ebfn - s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a var ho\u1eb7c c\u00e1c constant - s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a val . Java class Address { String name ; String street ; String city ; String state ; String zip ; } Kotlin class Address { var name : String = ... var street : String = ... var city : String = ... var state : String ? = ... var zip : String = ... } \u0110\u1ec3 s\u1eed d\u1ee5ng c\u00e1c property n\u00e0y, ch\u00fang ta ch\u1ec9 c\u1ea7n access \u0111\u1ebfn ch\u00fang b\u1eb1ng t\u00ean, ho\u1eb7c b\u1eb1ng c\u00e1c h\u00e0m getter/setter nh\u01b0 trong Java Java public Address copyAddress(Address address) { Address result = new Address(); result.setName(address.getName()); result.setStreet(address.getStreet()); //.... return result; } Kotlin fun copyAddress ( address : Address ): Address { val result = Address () // kh\u00f4ng c\u00f2n t\u1eeb kh\u00f3a 'new' trong Kotlin result . name = address . name //c\u00e1c h\u00e0m 'getter/setter' s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi, d\u00f9 nh\u00ecn tr\u00f4ng nh\u01b0 b\u1ea1n \u0111ang truy c\u1eadp tr\u1ef1c ti\u1ebfp v\u00e0o 'property' result . street = address . street // ... return result } 2. C\u00e1c h\u00e0m getter/setter \u00b6 C\u1ea5u tr\u00fac \u0111\u1ea7y \u0111\u1ee7 c\u1ee7a khai b\u00e1o property trong Kotlin l\u00e0: var < propertyName >[: < PropertyType >] [= < property_initializer >] [< getter >] [< setter >] Trong \u0111\u00f3, gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o, v\u00e0 c\u00e1c h\u00e0m getter/setter l\u00e0 kh\u00f4ng b\u1eaft bu\u1ed9c, ki\u1ec3u d\u1eef li\u1ec7u c\u0169ng l\u00e0 kh\u00f4ng b\u1eaft bu\u1ed9c n\u1ebfu n\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c suy ra t\u1eeb vi\u1ec7c kh\u1edfi t\u1ea1o (ho\u1eb7c t\u1eeb ki\u1ec3u c\u1ee7a m\u00e0 h\u00e0m getter tr\u1ea3 v\u1ec1, s\u1ebd \u0111\u01b0\u1ee3c n\u00f3i ph\u00eda sau). Tuy nhi\u00ean, \u0111\u1ec3 code \u0111\u01b0\u1ee3c trong s\u00e1ng, l\u1eddi khuy\u00ean l\u00e0 n\u00ean th\u00eam ki\u1ec3u c\u1ee7a thu\u1ed9c t\u00ednh khi khai b\u00e1o. var allByDefault : Int ? // compiler b\u00e1o l\u1ed7i v\u00ec vi\u1ec7c kh\u1edfi t\u1ea1o \u0111\u01b0\u1ee3c y\u00eau c\u1ea7u, c\u00e1c h\u00e0m 'getter/setter' m\u1eb7c \u0111\u1ecbnh \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh var initialized = 1 // ki\u1ec3u 'Int', h\u00e0m 'getter/setter' m\u1eb7c \u0111\u1ecbnh V\u1edbi c\u00e1c constant, vi\u1ec7c khai b\u00e1o s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a val v\u00e0 kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a h\u00e0m setter : val simple : Int ? // compiler b\u00e1o l\u1ed7i: y\u00eau c\u1ea7u vi\u1ec7c kh\u1edfi t\u1ea1o, 'getter' m\u1eb7c \u0111\u1ecbnh val inferredType = 1 // ki\u1ec3u 'Int', h\u00e0m 'getter' m\u1eb7c \u0111\u1ecbnh V\u1edbi c\u00e1c h\u00e0m getter/setter , n\u1ebfu kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a, c\u00e1c h\u00e0m getter/setter m\u1eb7c \u0111\u1ecbnh s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Ch\u00fang ta c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a c\u00e1c h\u00e0m n\u00e0y ngay sau vi\u1ec7c khai b\u00e1o c\u00e1c property . M\u1eb7c \u0111\u1ecbnh, t\u00ean c\u1ee7a param c\u1ee7a h\u00e0m setter l\u00e0 value . Tuy nhi\u00ean, b\u1ea1n c\u00f3 th\u1ec3 ch\u1ecdn m\u1ed9t c\u00e1i t\u00ean kh\u00e1c. N\u1ebfu th\u00edch! var isEmpty : Boolean get () { // return field // h\u00e0m 'getter' m\u1eb7c \u0111\u1ecbnh } // set ( value ) { field = value } var isEmpty : Boolean get () = this . size == 0 // h\u00e0m 'getter' t\u1ef1 \u0111\u1ecbnh ngh\u0129a set ( value ){ // print ( \"Setter: $value\" ) //h\u00e0m 'setter' t\u1ef1 \u0111\u1ecbnh ngh\u0129a field = value // } T\u1eeb Kotlin 1.1 , b\u1ea1n c\u00f3 th\u1ec3 b\u1ecf qua ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a property n\u1ebfu n\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c suy ra t\u1eeb ki\u1ec3u tr\u1ea3 v\u1ec1 c\u1ee7a h\u00e0m getter : val isEmpty get () = this . size == 0 // isEmpty s\u1ebd c\u00f3 ki\u1ec3u l\u00e0 Boolean Ngo\u00e0i ra, ta c\u0169ng c\u00f3 th\u1ec3 x\u00e1c \u0111\u1ecbnh visibility modifier c\u1ee7a h\u00e0m setter . L\u01b0u \u00fd: modifier c\u1ee7a setter ph\u1ea3i c\u00f3 ph\u1ea1m vi kh\u00f4ng \u0111\u01b0\u1ee3c l\u1edbn h\u01a1n ph\u1ea1m vi modifier c\u1ee7a property . V\u1edbi getter , ch\u00fang ta kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i modifier c\u1ee7a h\u00e0m getter b\u1edfi modifier c\u1ee7a getter ph\u1ea3i gi\u1ed1ng v\u1edbi modifier c\u1ee7a property . B\u1ea1n c\u0169ng c\u00f3 th\u1ec3 ch\u1ec9 x\u00e1c \u0111\u1ecbnh l\u1ea1i modifier c\u1ee7a h\u00e0m setter m\u00e0 kh\u00f4ng c\u1ea7n implement h\u00e0m \u0111\u00f3: var setterVisibility: String = \"abc\" private set // h\u00e0m 'setter' c\u00f3 modifier l\u00e0 'private' v\u00e0 vi\u1ec7c implement l\u00e0 m\u1eb7c \u0111\u1ecbnh 3. Backing field \u00b6 Trong m\u1ed9t VD \u1edf ph\u00eda tr\u00ean tr\u00ean, ta c\u00f3 th\u1ec3 th\u1ea5y m\u1ed9t bi\u1ebfn xu\u1ea5t hi\u1ec7n trong c\u00e1c h\u00e0m getter/setter t\u1ef1 \u0111\u1ecbnh ngh\u0129a, \u0111\u00f3 l\u00e0 field . L\u01b0u \u00fd, field ch\u1ec9 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng b\u00ean trong c\u00e1c h\u00e0m getter/setter v\u00e0 field s\u1ebd \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng gen cho property n\u1ebfu m\u1ed9t trong c\u00e1c h\u00e0m getter/setter tham chi\u1ebfu \u0111\u1ebfn n\u00f3. N\u1ebfu kh\u00f4ng, property s\u1ebd kh\u00f4ng c\u00f3 field . Nh\u01b0ng v\u00ec sao ph\u1ea3i d\u00f9ng field thay v\u00ec d\u00f9ng property m\u1ed9t c\u00e1ch tr\u1ef1c ti\u1ebfp nh\u01b0 th\u1ebf n\u00e0y: var isEmpty : Boolean get () = { return isEmpty } set ( value ){ isEmpty = value } Nh\u01b0 trong m\u1ed9t vd \u1edf tr\u00ean \u0111\u00e3 \u0111\u1ec1 c\u1eadp, khi b\u1ea1n access \u0111\u1ebfn m\u1ed9t property : val result = Address () result . name = address . name Khi n\u00e0y, th\u1ef1c ch\u1ea5t, h\u00e0m setter v\u00e0 getter c\u1ee7a property name s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi ch\u1ee9 kh\u00f4ng ph\u1ea3i b\u1ea1n \u0111ang access tr\u1ef1c ti\u1ebfp \u0111\u1ebfn name . B\u1edfi v\u1eady, trong c\u00e1c h\u00e0m getter/setter t\u1ef1 \u0111\u1ecbnh ngh\u0129a, n\u1ebfu s\u1eed d\u1ee5ng tr\u1ef1c ti\u1ebfp c\u00e1c property (vd h\u00e0m getter ), Kotlin s\u1ebd g\u1ecdi l\u1ea1i ch\u00ednh h\u00e0m getter \u0111\u00f3, t\u1eeb \u0111\u00f3 g\u00e2y ra tr\u00e0n b\u1ed9 nh\u1edb Stack - StackOverflowError . 4. Backing property \u00b6 N\u1ebfu b\u1ea1n kh\u00f4ng quen (ho\u1eb7c kh\u00f4ng th\u00edch) c\u00e1ch d\u00f9ng field \u1edf tr\u00ean, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng backing property. Vi\u1ec7c n\u00e0y t\u01b0\u01a1ng t\u1ef1 nh\u01b0 trong Java , v\u00e0 c\u00e1c h\u00e0m getter/ setter s\u1ebd \u0111\u01b0\u1ee3c t\u1ed1i \u01b0u \u0111\u1ec3 vi\u1ec7c tr\u00e0n b\u1ed9 nh\u1edb kh\u00f4ng x\u1ea3y ra. Tuy nhi\u00ean, vi\u1ec7c vi\u1ebft code s\u1ebd v\u1ea5t v\u1ea3 h\u01a1n, t\u1ea5t nhi\u00ean r\u1ed3i: private var _table : Map < String , Int >? = null public var table : Map < String , Int > get () { if ( _table == null ) { _table = HashMap () // Type parameters are inferred } return _table ?: throw AssertionError ( \"Set to null by another thread\" ) } set ( value ) { _table = value } Trong VD tr\u00ean, property m\u00e0 ch\u00fang ta s\u1eed d\u1ee5ng \u0111\u1ec3 l\u01b0u d\u1eef li\u1ec7u l\u00e0 _table c\u00f2n table ch\u1ec9 l\u00e0 c\u00e1ch th\u1ee9c \u0111\u1ec3 ch\u00fang ta truy c\u1eadp \u0111\u1ebfn _table . 5. Compile-time constant \u00b6 C\u00e1c thu\u1ed9c t\u00ednh m\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a ch\u00fang \u0111\u01b0\u1ee3c bi\u1ebfn \u0111\u1ebfn l\u00fac compile c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u l\u00e0 compile time constant, s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a const . Nh\u1eefng property \u0111\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c c\u1ea7n th\u1ecfa m\u00e3n nh\u01b0ng y\u00eau c\u1ea7u sau: L\u00e0 top-level property ho\u1eb7c l\u00e0 member c\u1ee7a m\u1ed9t object (object trong Kotlin l\u00e0 m\u1ed9t singleton, kh\u00f4ng ph\u1ea3i l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng) \u0110\u01b0\u1ee3c kh\u1edfi t\u1ea1o v\u1edbi ki\u1ec3u String ho\u1eb7c ki\u1ec3u nguy\u00ean th\u1ee7y(Int, Float, Char, Boolean...), kh\u00f4ng th\u1ec3 l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a Kh\u00f4ng \u0111\u01b0\u1ee3c c\u00f3 h\u00e0m getter t\u1ef1 \u0111\u1ecbnh ngh\u0129a const val SUBSYSTEM_DEPRECATED : String = \"This subsystem is deprecated\" @Deprecated ( SUBSYSTEM_DEPRECATED ) fun foo () { ... } 6. Late-initialized property (Kh\u1edfi t\u1ea1o ch\u1eadm c\u00e1c thu\u1ed9c t\u00ednh) \u00b6 B\u00ecnh th\u01b0\u1eddng, khi c\u00e1c property \u0111\u01b0\u1ee3c khai b\u00e1o trong class m\u00e0 thu\u1ed9c ki\u1ec3u non-null ph\u1ea3i \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o: tr\u1ef1c ti\u1ebfp ho\u1eb7c b\u1eb1ng constructor. Tuy nhi\u00ean, vi\u1ec7c n\u00e0y kh\u00f4ng \u0111\u01b0\u1ee3c ti\u1ec7n cho l\u1eafm. VD: property c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o th\u00f4ng qua Dependency injection ho\u1eb7c \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u00ean trong method setup c\u1ee7a m\u1ed9t unit tets ho\u1eb7c \u0111\u01b0\u1ee3c g\u00e1n trong m\u1ed9t method kh\u00e1c b\u00ean trong class. B\u1edfi v\u1eady, Kotlin cung c\u1ea5p c\u01a1 ch\u1ebf cho ph\u00e9p delay vi\u1ec7c kh\u1edfi t\u1ea1o: t\u1eeb kh\u00f3a lateinit class Teacher ( var name : String , var age : Int ) { lateinit var className : String } Y\u00eau c\u1ea7u \u0111\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c t\u1eeb kh\u00f3a lateinit l\u00e0: Ph\u1ea3i s\u1eed d\u1ee5ng v\u1edbi var property \u0111\u01b0\u1ee3c khai b\u00e1o b\u00ean trong m\u1ed9t class nh\u01b0ng kh\u00f4ng ph\u1ea3i l\u00e0 trong primary constructor. - property n\u00e0y kh\u00f4ng \u0111\u01b0\u1ee3c c\u00f3 c\u00e1c h\u00e0m getter/setter t\u1ef1 \u0111\u1ecbnh ngh\u0129a m\u00e0 ph\u1ea3i d\u00f9ng c\u00e1c h\u00e0m m\u1eb7c \u0111\u1ecbnh Ki\u1ec3u c\u1ee7a c\u00e1c property n\u00e0y ph\u1ea3i l\u00e0 non-null v\u00e0 kh\u00f4ng th\u1ec3 l\u00e0 ki\u1ec3u d\u1eef li\u1ec7u nguy\u00ean th\u1ee7y(Int, Float,Char, Boolean...) N\u1ebfu truy c\u1eadp c\u00e1c property n\u00e0y khi ch\u00fang ch\u01b0a \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o, xin ch\u00fac m\u1eebng: kotlin.UninitializedPropertyAccessException s\u1ebd xu\u1ea5t hi\u1ec7n. 7. Overriding property (Ghi \u0111\u00e8 c\u00e1c property ) \u00b6 Trong Kotlin , ch\u00fang ta c\u00f3 th\u1ec3 ghi \u0111\u00e8 c\u00e1c property b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a override t\u01b0\u01a1ng t\u1ef1 nh\u01b0 override c\u00e1c method. open class Foo { open val x : Int get { ... } } class Bar1 : Foo () { override val x : Int = ... } \u0110\u1eb7c bi\u1ec7t, ch\u00fang ta c\u00f3 th\u1ec3 override l\u1ea1i m\u1ed9t val property b\u1eb1ng m\u1ed9t var property, nh\u01b0ng kh\u00f4ng th\u1ec3 l\u00e0m \u0111i\u1ec1u ng\u01b0\u1ee3c l\u1ea1i. \u0110i\u1ec1u n\u00e0y \u0111\u01b0\u1ee3c ph\u00e9p b\u1edfi v\u00ec m\u1ed9t val property \u0111\u00e3 khai b\u00e1o h\u00e0m getter , v\u00e0 khi override l\u1ea1i n\u00f3 l\u00e0 var , ch\u00fang ta c\u1ea7n vi\u1ebft th\u00eam h\u00e0m setter trong class con. T\u1eeb kh\u00f3a override c\u0169ng c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng ngay trong primary constructor: interface Foo { val count : Int } class Bar1 ( override val count : Int ) : Foo class Bar2 : Foo { override var count : Int = 0 }","title":"Kotlin Property v\u00e0 field"},{"location":"kotlin/kotlin_property_field/#146-khai-bao-property","text":"C\u00e1c class trong Kotlin c\u00f3 th\u1ec3 c\u00f3 c\u00e1c property . Ch\u00fang c\u00f3 th\u1ec3 khai b\u00e1o l\u00e0 c\u00e1c bi\u1ebfn - s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a var ho\u1eb7c c\u00e1c constant - s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a val . Java class Address { String name ; String street ; String city ; String state ; String zip ; } Kotlin class Address { var name : String = ... var street : String = ... var city : String = ... var state : String ? = ... var zip : String = ... } \u0110\u1ec3 s\u1eed d\u1ee5ng c\u00e1c property n\u00e0y, ch\u00fang ta ch\u1ec9 c\u1ea7n access \u0111\u1ebfn ch\u00fang b\u1eb1ng t\u00ean, ho\u1eb7c b\u1eb1ng c\u00e1c h\u00e0m getter/setter nh\u01b0 trong Java Java public Address copyAddress(Address address) { Address result = new Address(); result.setName(address.getName()); result.setStreet(address.getStreet()); //.... return result; } Kotlin fun copyAddress ( address : Address ): Address { val result = Address () // kh\u00f4ng c\u00f2n t\u1eeb kh\u00f3a 'new' trong Kotlin result . name = address . name //c\u00e1c h\u00e0m 'getter/setter' s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi, d\u00f9 nh\u00ecn tr\u00f4ng nh\u01b0 b\u1ea1n \u0111ang truy c\u1eadp tr\u1ef1c ti\u1ebfp v\u00e0o 'property' result . street = address . street // ... return result }","title":"1. Khai b\u00e1o\u00a0property"},{"location":"kotlin/kotlin_property_field/#246-cac-ham-gettersetter","text":"C\u1ea5u tr\u00fac \u0111\u1ea7y \u0111\u1ee7 c\u1ee7a khai b\u00e1o property trong Kotlin l\u00e0: var < propertyName >[: < PropertyType >] [= < property_initializer >] [< getter >] [< setter >] Trong \u0111\u00f3, gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o, v\u00e0 c\u00e1c h\u00e0m getter/setter l\u00e0 kh\u00f4ng b\u1eaft bu\u1ed9c, ki\u1ec3u d\u1eef li\u1ec7u c\u0169ng l\u00e0 kh\u00f4ng b\u1eaft bu\u1ed9c n\u1ebfu n\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c suy ra t\u1eeb vi\u1ec7c kh\u1edfi t\u1ea1o (ho\u1eb7c t\u1eeb ki\u1ec3u c\u1ee7a m\u00e0 h\u00e0m getter tr\u1ea3 v\u1ec1, s\u1ebd \u0111\u01b0\u1ee3c n\u00f3i ph\u00eda sau). Tuy nhi\u00ean, \u0111\u1ec3 code \u0111\u01b0\u1ee3c trong s\u00e1ng, l\u1eddi khuy\u00ean l\u00e0 n\u00ean th\u00eam ki\u1ec3u c\u1ee7a thu\u1ed9c t\u00ednh khi khai b\u00e1o. var allByDefault : Int ? // compiler b\u00e1o l\u1ed7i v\u00ec vi\u1ec7c kh\u1edfi t\u1ea1o \u0111\u01b0\u1ee3c y\u00eau c\u1ea7u, c\u00e1c h\u00e0m 'getter/setter' m\u1eb7c \u0111\u1ecbnh \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh var initialized = 1 // ki\u1ec3u 'Int', h\u00e0m 'getter/setter' m\u1eb7c \u0111\u1ecbnh V\u1edbi c\u00e1c constant, vi\u1ec7c khai b\u00e1o s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a val v\u00e0 kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a h\u00e0m setter : val simple : Int ? // compiler b\u00e1o l\u1ed7i: y\u00eau c\u1ea7u vi\u1ec7c kh\u1edfi t\u1ea1o, 'getter' m\u1eb7c \u0111\u1ecbnh val inferredType = 1 // ki\u1ec3u 'Int', h\u00e0m 'getter' m\u1eb7c \u0111\u1ecbnh V\u1edbi c\u00e1c h\u00e0m getter/setter , n\u1ebfu kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a, c\u00e1c h\u00e0m getter/setter m\u1eb7c \u0111\u1ecbnh s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Ch\u00fang ta c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a c\u00e1c h\u00e0m n\u00e0y ngay sau vi\u1ec7c khai b\u00e1o c\u00e1c property . M\u1eb7c \u0111\u1ecbnh, t\u00ean c\u1ee7a param c\u1ee7a h\u00e0m setter l\u00e0 value . Tuy nhi\u00ean, b\u1ea1n c\u00f3 th\u1ec3 ch\u1ecdn m\u1ed9t c\u00e1i t\u00ean kh\u00e1c. N\u1ebfu th\u00edch! var isEmpty : Boolean get () { // return field // h\u00e0m 'getter' m\u1eb7c \u0111\u1ecbnh } // set ( value ) { field = value } var isEmpty : Boolean get () = this . size == 0 // h\u00e0m 'getter' t\u1ef1 \u0111\u1ecbnh ngh\u0129a set ( value ){ // print ( \"Setter: $value\" ) //h\u00e0m 'setter' t\u1ef1 \u0111\u1ecbnh ngh\u0129a field = value // } T\u1eeb Kotlin 1.1 , b\u1ea1n c\u00f3 th\u1ec3 b\u1ecf qua ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a property n\u1ebfu n\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c suy ra t\u1eeb ki\u1ec3u tr\u1ea3 v\u1ec1 c\u1ee7a h\u00e0m getter : val isEmpty get () = this . size == 0 // isEmpty s\u1ebd c\u00f3 ki\u1ec3u l\u00e0 Boolean Ngo\u00e0i ra, ta c\u0169ng c\u00f3 th\u1ec3 x\u00e1c \u0111\u1ecbnh visibility modifier c\u1ee7a h\u00e0m setter . L\u01b0u \u00fd: modifier c\u1ee7a setter ph\u1ea3i c\u00f3 ph\u1ea1m vi kh\u00f4ng \u0111\u01b0\u1ee3c l\u1edbn h\u01a1n ph\u1ea1m vi modifier c\u1ee7a property . V\u1edbi getter , ch\u00fang ta kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i modifier c\u1ee7a h\u00e0m getter b\u1edfi modifier c\u1ee7a getter ph\u1ea3i gi\u1ed1ng v\u1edbi modifier c\u1ee7a property . B\u1ea1n c\u0169ng c\u00f3 th\u1ec3 ch\u1ec9 x\u00e1c \u0111\u1ecbnh l\u1ea1i modifier c\u1ee7a h\u00e0m setter m\u00e0 kh\u00f4ng c\u1ea7n implement h\u00e0m \u0111\u00f3: var setterVisibility: String = \"abc\" private set // h\u00e0m 'setter' c\u00f3 modifier l\u00e0 'private' v\u00e0 vi\u1ec7c implement l\u00e0 m\u1eb7c \u0111\u1ecbnh","title":"2. C\u00e1c h\u00e0m\u00a0getter/setter"},{"location":"kotlin/kotlin_property_field/#346-backing-field","text":"Trong m\u1ed9t VD \u1edf ph\u00eda tr\u00ean tr\u00ean, ta c\u00f3 th\u1ec3 th\u1ea5y m\u1ed9t bi\u1ebfn xu\u1ea5t hi\u1ec7n trong c\u00e1c h\u00e0m getter/setter t\u1ef1 \u0111\u1ecbnh ngh\u0129a, \u0111\u00f3 l\u00e0 field . L\u01b0u \u00fd, field ch\u1ec9 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng b\u00ean trong c\u00e1c h\u00e0m getter/setter v\u00e0 field s\u1ebd \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng gen cho property n\u1ebfu m\u1ed9t trong c\u00e1c h\u00e0m getter/setter tham chi\u1ebfu \u0111\u1ebfn n\u00f3. N\u1ebfu kh\u00f4ng, property s\u1ebd kh\u00f4ng c\u00f3 field . Nh\u01b0ng v\u00ec sao ph\u1ea3i d\u00f9ng field thay v\u00ec d\u00f9ng property m\u1ed9t c\u00e1ch tr\u1ef1c ti\u1ebfp nh\u01b0 th\u1ebf n\u00e0y: var isEmpty : Boolean get () = { return isEmpty } set ( value ){ isEmpty = value } Nh\u01b0 trong m\u1ed9t vd \u1edf tr\u00ean \u0111\u00e3 \u0111\u1ec1 c\u1eadp, khi b\u1ea1n access \u0111\u1ebfn m\u1ed9t property : val result = Address () result . name = address . name Khi n\u00e0y, th\u1ef1c ch\u1ea5t, h\u00e0m setter v\u00e0 getter c\u1ee7a property name s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi ch\u1ee9 kh\u00f4ng ph\u1ea3i b\u1ea1n \u0111ang access tr\u1ef1c ti\u1ebfp \u0111\u1ebfn name . B\u1edfi v\u1eady, trong c\u00e1c h\u00e0m getter/setter t\u1ef1 \u0111\u1ecbnh ngh\u0129a, n\u1ebfu s\u1eed d\u1ee5ng tr\u1ef1c ti\u1ebfp c\u00e1c property (vd h\u00e0m getter ), Kotlin s\u1ebd g\u1ecdi l\u1ea1i ch\u00ednh h\u00e0m getter \u0111\u00f3, t\u1eeb \u0111\u00f3 g\u00e2y ra tr\u00e0n b\u1ed9 nh\u1edb Stack - StackOverflowError .","title":"3. Backing field"},{"location":"kotlin/kotlin_property_field/#446-backing-property","text":"N\u1ebfu b\u1ea1n kh\u00f4ng quen (ho\u1eb7c kh\u00f4ng th\u00edch) c\u00e1ch d\u00f9ng field \u1edf tr\u00ean, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng backing property. Vi\u1ec7c n\u00e0y t\u01b0\u01a1ng t\u1ef1 nh\u01b0 trong Java , v\u00e0 c\u00e1c h\u00e0m getter/ setter s\u1ebd \u0111\u01b0\u1ee3c t\u1ed1i \u01b0u \u0111\u1ec3 vi\u1ec7c tr\u00e0n b\u1ed9 nh\u1edb kh\u00f4ng x\u1ea3y ra. Tuy nhi\u00ean, vi\u1ec7c vi\u1ebft code s\u1ebd v\u1ea5t v\u1ea3 h\u01a1n, t\u1ea5t nhi\u00ean r\u1ed3i: private var _table : Map < String , Int >? = null public var table : Map < String , Int > get () { if ( _table == null ) { _table = HashMap () // Type parameters are inferred } return _table ?: throw AssertionError ( \"Set to null by another thread\" ) } set ( value ) { _table = value } Trong VD tr\u00ean, property m\u00e0 ch\u00fang ta s\u1eed d\u1ee5ng \u0111\u1ec3 l\u01b0u d\u1eef li\u1ec7u l\u00e0 _table c\u00f2n table ch\u1ec9 l\u00e0 c\u00e1ch th\u1ee9c \u0111\u1ec3 ch\u00fang ta truy c\u1eadp \u0111\u1ebfn _table .","title":"4. Backing property"},{"location":"kotlin/kotlin_property_field/#546-compile-time-constant","text":"C\u00e1c thu\u1ed9c t\u00ednh m\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a ch\u00fang \u0111\u01b0\u1ee3c bi\u1ebfn \u0111\u1ebfn l\u00fac compile c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u l\u00e0 compile time constant, s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a const . Nh\u1eefng property \u0111\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c c\u1ea7n th\u1ecfa m\u00e3n nh\u01b0ng y\u00eau c\u1ea7u sau: L\u00e0 top-level property ho\u1eb7c l\u00e0 member c\u1ee7a m\u1ed9t object (object trong Kotlin l\u00e0 m\u1ed9t singleton, kh\u00f4ng ph\u1ea3i l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng) \u0110\u01b0\u1ee3c kh\u1edfi t\u1ea1o v\u1edbi ki\u1ec3u String ho\u1eb7c ki\u1ec3u nguy\u00ean th\u1ee7y(Int, Float, Char, Boolean...), kh\u00f4ng th\u1ec3 l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a Kh\u00f4ng \u0111\u01b0\u1ee3c c\u00f3 h\u00e0m getter t\u1ef1 \u0111\u1ecbnh ngh\u0129a const val SUBSYSTEM_DEPRECATED : String = \"This subsystem is deprecated\" @Deprecated ( SUBSYSTEM_DEPRECATED ) fun foo () { ... }","title":"5. Compile-time constant"},{"location":"kotlin/kotlin_property_field/#646-late-initialized-property-khoi-tao-cham-cac-thuoc-tinh","text":"B\u00ecnh th\u01b0\u1eddng, khi c\u00e1c property \u0111\u01b0\u1ee3c khai b\u00e1o trong class m\u00e0 thu\u1ed9c ki\u1ec3u non-null ph\u1ea3i \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o: tr\u1ef1c ti\u1ebfp ho\u1eb7c b\u1eb1ng constructor. Tuy nhi\u00ean, vi\u1ec7c n\u00e0y kh\u00f4ng \u0111\u01b0\u1ee3c ti\u1ec7n cho l\u1eafm. VD: property c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o th\u00f4ng qua Dependency injection ho\u1eb7c \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u00ean trong method setup c\u1ee7a m\u1ed9t unit tets ho\u1eb7c \u0111\u01b0\u1ee3c g\u00e1n trong m\u1ed9t method kh\u00e1c b\u00ean trong class. B\u1edfi v\u1eady, Kotlin cung c\u1ea5p c\u01a1 ch\u1ebf cho ph\u00e9p delay vi\u1ec7c kh\u1edfi t\u1ea1o: t\u1eeb kh\u00f3a lateinit class Teacher ( var name : String , var age : Int ) { lateinit var className : String } Y\u00eau c\u1ea7u \u0111\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c t\u1eeb kh\u00f3a lateinit l\u00e0: Ph\u1ea3i s\u1eed d\u1ee5ng v\u1edbi var property \u0111\u01b0\u1ee3c khai b\u00e1o b\u00ean trong m\u1ed9t class nh\u01b0ng kh\u00f4ng ph\u1ea3i l\u00e0 trong primary constructor. - property n\u00e0y kh\u00f4ng \u0111\u01b0\u1ee3c c\u00f3 c\u00e1c h\u00e0m getter/setter t\u1ef1 \u0111\u1ecbnh ngh\u0129a m\u00e0 ph\u1ea3i d\u00f9ng c\u00e1c h\u00e0m m\u1eb7c \u0111\u1ecbnh Ki\u1ec3u c\u1ee7a c\u00e1c property n\u00e0y ph\u1ea3i l\u00e0 non-null v\u00e0 kh\u00f4ng th\u1ec3 l\u00e0 ki\u1ec3u d\u1eef li\u1ec7u nguy\u00ean th\u1ee7y(Int, Float,Char, Boolean...) N\u1ebfu truy c\u1eadp c\u00e1c property n\u00e0y khi ch\u00fang ch\u01b0a \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o, xin ch\u00fac m\u1eebng: kotlin.UninitializedPropertyAccessException s\u1ebd xu\u1ea5t hi\u1ec7n.","title":"6. Late-initialized property (Kh\u1edfi t\u1ea1o ch\u1eadm c\u00e1c thu\u1ed9c t\u00ednh)"},{"location":"kotlin/kotlin_property_field/#746-overriding-property-ghi-e-cac-property","text":"Trong Kotlin , ch\u00fang ta c\u00f3 th\u1ec3 ghi \u0111\u00e8 c\u00e1c property b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a override t\u01b0\u01a1ng t\u1ef1 nh\u01b0 override c\u00e1c method. open class Foo { open val x : Int get { ... } } class Bar1 : Foo () { override val x : Int = ... } \u0110\u1eb7c bi\u1ec7t, ch\u00fang ta c\u00f3 th\u1ec3 override l\u1ea1i m\u1ed9t val property b\u1eb1ng m\u1ed9t var property, nh\u01b0ng kh\u00f4ng th\u1ec3 l\u00e0m \u0111i\u1ec1u ng\u01b0\u1ee3c l\u1ea1i. \u0110i\u1ec1u n\u00e0y \u0111\u01b0\u1ee3c ph\u00e9p b\u1edfi v\u00ec m\u1ed9t val property \u0111\u00e3 khai b\u00e1o h\u00e0m getter , v\u00e0 khi override l\u1ea1i n\u00f3 l\u00e0 var , ch\u00fang ta c\u1ea7n vi\u1ebft th\u00eam h\u00e0m setter trong class con. T\u1eeb kh\u00f3a override c\u0169ng c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng ngay trong primary constructor: interface Foo { val count : Int } class Bar1 ( override val count : Int ) : Foo class Bar2 : Foo { override var count : Int = 0 }","title":"7. Overriding property (Ghi \u0111\u00e8 c\u00e1c\u00a0property)"},{"location":"kotlin/kotlin_range/","text":"1. Gi\u1edbi thi\u1ec7u \u00b6 Bi\u1ec3u th\u1ee9c range(ph\u1ea1m vi) .. l\u00e0 m\u1ed9t d\u1ea1ng c\u1ee7a function rangeTo v\u00e0 s\u1eed d\u1ee5ng v\u1edbi to\u00e1n t\u1eed in ho\u1eb7c !in . Range \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a cho b\u1ea5t k\u1ef3 ki\u1ec3u d\u1eef li\u1ec7u c\u00f3 th\u1ec3 so s\u00e1nh n\u00e0o. Tuy nhi\u00ean, n\u00f3 \u0111\u01b0\u1ee3c t\u1ed1i \u01b0u v\u1edbi ki\u1ec3u d\u1eef li\u1ec7u ki\u1ec3u nguy\u00ean: if ( i in 1. . 10 ) { // t\u01b0\u01a1ng t\u1ef1 v\u1edbi 1 <= i && i <= 10 println ( i ) } To\u00e0n b\u1ed9 ki\u1ec3u ph\u1ea1m vi ( IntRange , LongRange , CharRange ) c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 duy\u1ec7t b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng v\u00f2ng l\u1eb7p for : for ( i in 1. . 4 ) print ( i ) // prints \"1234\" for ( i in 4. . 1 ) print ( i ) // kh\u00f4ng in g\u00ec \u0110\u1ec3 duy\u1ec7t ng\u01b0\u1ee3c, ta s\u1eed d\u1ee5ng function downTo() \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong th\u01b0 vi\u1ec7n chu\u1ea9n Java for ( int i = 10 ; i >= 0 ; i --) { } Kotlin for ( i in 4 downTo 1 ) print ( i ) // prints \"4321\" \u0110\u1ec3 duy\u1ec7t v\u1edbi b\u01b0\u1edbc nh\u1ea3y k ph\u1ea3i l\u00e0 1, ta s\u1eed d\u1ee5ng function step() Java for ( int i = 0 ; i <= 10 ; i = i + 2 ) { } Kotlin for ( i in 1. . 4 step 2 ) print ( i ) // prints \"13\" for ( i in 4 downTo 1 step 2 ) print ( i ) // prints \"42\" \u0110\u1ec3 duy\u1ec7t v\u00e0 ngo\u1ea1i tr\u1eeb ph\u1ea7n t\u1eed cu\u1ed1i c\u00f9ng, ta s\u1eed d\u1ee5ng function until Java for ( int i = 0 ; i < 10 ; i ++){ } Kotlin for ( i in 1 until 10 ) { println ( i ) } 2. C\u00e1ch ho\u1ea1t \u0111\u1ed9ng \u00b6 Ranges implement m\u1ed9t interface trong th\u01b0 vi\u1ec7n: ClosedRange<T> ClosedRange<T> bi\u1ec3u th\u1ecb m\u1ed9t kho\u1ea3ng k\u00edn v\u1edbi c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u c\u00f3 th\u1ec3 so s\u00e1nh \u0111\u01b0\u1ee3c. N\u00f3 c\u00f3 2 endpoint: start v\u00e0 endInclusive , c\u00e1i m\u00e0 \u0111\u01b0\u1ee3c bao g\u1ed3m trong kho\u1ea3ng \u0111\u00f3. Function s\u1eed d\u1ee5ng ch\u00ednh l\u00e0 contains , th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng d\u01b0\u1edbi d\u1ea1ng to\u00e1n t\u1eed in ho\u1eb7c !in . Progression v\u1edbi c\u00e1c d\u1eef li\u1ec7u ki\u1ec3u nguy\u00ean ( IntProgression , LongProgression , CharProgression ) bi\u1ec3u th\u1ecb m\u1ed9t ti\u1ebfn tr\u00ecnh s\u1ed1 h\u1ecdc. Progression \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1edfi ph\u1ea7n t\u1eed first , ph\u1ea7n t\u1eed last v\u00e0 m\u1ed9t step kh\u00e1c 0. Ph\u1ea7n t\u1eed \u0111\u1ea7u ti\u00ean l\u00e0 first , ph\u1ea7n t\u1eed ti\u1ebfp theo l\u00e0 first + step . Progression l\u00e0 l\u1edbp con c\u1ee7a Iterable<N> , v\u1edbi N l\u00e0 ki\u1ec3u Int , Long , Char . B\u1edfi v\u1eady ch\u00fang c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c d\u00f9ng v\u1edbi v\u00f2ng l\u1eb7p for v\u00e0 c\u00e1c function nh\u01b0 map , filter , ... Vi\u1ec7c duy\u1ec7t qua Progression t\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u00f2ng l\u1eb7p for c\u00f3 ch\u1ec9 s\u1ed1 trong Java ho\u1eb7c JavaScript : for ( int i = first ; i != last ; i += step ) { // ... } V\u1edbi ki\u1ec3u d\u1eef li\u1ec7u ki\u1ec3u nguy\u00ean, to\u00e1n t\u1eed .. t\u1ea1o m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng c\u1ea3 ClosedRange<T> v\u00e0 *Progression . VD: IntRange implement ClosedRange<Int> v\u00e0 k\u1ebf th\u1eeba IntProgression , do \u0111\u00f3 c\u00e1c to\u00e1n t\u1eed \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a cho IntProgression c\u0169ng c\u00f3 th\u1ec3 hi\u1ec7u l\u1ef1c v\u1edbi IntRange . K\u1ebft qu\u1ea3 c\u1ee7a c\u00e1c function downTo() v\u00e0 step() lu\u00f4n lu\u00f4n l\u00e0 m\u1ed9t *Progression . Progression \u0111\u01b0\u1ee3c t\u1ea1o ra b\u1edfi function fromClosedRange \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u00ean trong companion object. IntProgression . fromClosedRange ( start , end , step ) Ph\u1ea7n t\u1eed last c\u1ee7a progression \u0111\u01b0\u1ee3c t\u00ednh to\u00e1n \u0111\u1ec3 t\u00ecm \u0111\u01b0\u1ee3c gi\u00e1 tr\u1ecb l\u1edbn nh\u1ea5t kh\u00f4ng l\u1edbn h\u01a1n gi\u00e1 tr\u1ecb end v\u1edbi step >0 ho\u1eb7c kh\u00f4ng nh\u1ecf h\u01a1n gi\u00e1 tr\u1ecb end v\u1edbi step < 0 : (last - first) % step == 0 3. C\u00e1c function h\u1eefu \u00edch \u00b6 rangeTo() \u00b6 To\u00e1n t\u1eed rangeTo() v\u1edbi ki\u1ec3u d\u1eef li\u1ec7u nguy\u00ean \u0111\u01a1n gi\u1ea3n s\u1ebd g\u1ecdi h\u00e0m t\u1ea1o c\u1ee7a c\u00e1c class *Range class Int { //... operator fun rangeTo ( other : Long ): LongRange = LongRange ( this , other ) //... operator fun rangeTo ( other : Int ): IntRange = IntRange ( this , other ) //... } C\u00e1c s\u1ed1 th\u1ef1c ( Double , Float ) kh\u00f4ng \u0111\u1ecbnh ngh\u0129a c\u00e1c to\u00e1n t\u1eed rangeTo() m\u00e0 \u0111\u01b0\u1ee3c cung c\u1ea5p b\u1edfi th\u01b0 vi\u1ec7n chu\u1ea9n cho ki\u1ec3u Comparable public operator fun < T : Comparable < T > > T . rangeTo ( that : T ): ClosedRange < T > B\u1edfi v\u1eady, kh\u00f4ng th\u1ec3 duy\u1ec7t v\u1edbi c\u00e1c s\u1ed1 th\u1ef1c. downTo() \u00b6 Extension function downTo() \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a v\u1edbi ki\u1ec3u s\u1ed1 nguy\u00ean fun Long . downTo ( other : Int ): LongProgression { return LongProgression . fromClosedRange ( this , other . toLong (), - 1L ) } fun Byte . downTo ( other : Int ): IntProgression { return IntProgression . fromClosedRange ( this . toInt (), other , - 1 ) } reversed() \u00b6 Extension function reversed() \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a cho c\u00e1c l\u1edbp *Progression v\u00e0 ch\u00fang tr\u1ea3 v\u1ec1 c\u00e1c progression ng\u01b0\u1ee3c: fun IntProgression . reversed (): IntProgression { return IntProgression . fromClosedRange ( last , first , - step ) } step() \u00b6 C\u00e1c extension function step() \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a cho c\u00e1c l\u1edbp *Progression , t\u1ea5t c\u1ea3 ch\u00fang tr\u1ea3 v\u1ec1 m\u1ed9t progression v\u1edbi gi\u00e1 tr\u1ecb step \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o. Gi\u00e1 tr\u1ecb c\u1ee7a step c\u1ea7n l\u00e0 m\u1ed9t s\u1ed1 d\u01b0\u01a1ng \u0111\u1ec3 function kh\u00f4ng bao gi\u1edd c\u00f3 th\u1ec3 thay \u0111\u1ed5i \u0111\u01b0\u1ee3c h\u01b0\u1edbng duy\u1ec7t fun IntProgression . step ( step : Int ): IntProgression { if ( step <= 0 ) throw IllegalArgumentException ( \"Step must be positive, was: $step\" ) return IntProgression . fromClosedRange ( first , last , if ( this . step > 0 ) step else - step ) } fun CharProgression . step ( step : Int ): CharProgression { if ( step <= 0 ) throw IllegalArgumentException ( \"Step must be positive, was: $step\" ) return CharProgression . fromClosedRange ( first , last , if ( this . step > 0 ) step else - step ) } L\u01b0u \u00fd r\u1eb1ng gi\u00e1 tr\u1ecb last c\u1ee7a progression tr\u1ea3 v\u1ec1 c\u00f3 th\u1ec3 kh\u00e1c so v\u1edbi gi\u00e1 tr\u1ecb last c\u1ee7a progression ban \u0111\u1ea7u \u0111\u1ec3 gi\u1eef l\u1ea1i s\u1ef1 b\u1ea5t bi\u1ebfn: ( 1. . 12 step 2 ). last == 11 // progression with values [1, 3, 5, 7, 9, 11] ( 1. . 12 step 3 ). last == 10 // progression with values [1, 4, 7, 10] ( 1. . 12 step 4 ). last == 9 // progression with values [1, 5, 9]","title":"Kotlin Range"},{"location":"kotlin/kotlin_range/#146-gioi-thieu","text":"Bi\u1ec3u th\u1ee9c range(ph\u1ea1m vi) .. l\u00e0 m\u1ed9t d\u1ea1ng c\u1ee7a function rangeTo v\u00e0 s\u1eed d\u1ee5ng v\u1edbi to\u00e1n t\u1eed in ho\u1eb7c !in . Range \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a cho b\u1ea5t k\u1ef3 ki\u1ec3u d\u1eef li\u1ec7u c\u00f3 th\u1ec3 so s\u00e1nh n\u00e0o. Tuy nhi\u00ean, n\u00f3 \u0111\u01b0\u1ee3c t\u1ed1i \u01b0u v\u1edbi ki\u1ec3u d\u1eef li\u1ec7u ki\u1ec3u nguy\u00ean: if ( i in 1. . 10 ) { // t\u01b0\u01a1ng t\u1ef1 v\u1edbi 1 <= i && i <= 10 println ( i ) } To\u00e0n b\u1ed9 ki\u1ec3u ph\u1ea1m vi ( IntRange , LongRange , CharRange ) c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 duy\u1ec7t b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng v\u00f2ng l\u1eb7p for : for ( i in 1. . 4 ) print ( i ) // prints \"1234\" for ( i in 4. . 1 ) print ( i ) // kh\u00f4ng in g\u00ec \u0110\u1ec3 duy\u1ec7t ng\u01b0\u1ee3c, ta s\u1eed d\u1ee5ng function downTo() \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong th\u01b0 vi\u1ec7n chu\u1ea9n Java for ( int i = 10 ; i >= 0 ; i --) { } Kotlin for ( i in 4 downTo 1 ) print ( i ) // prints \"4321\" \u0110\u1ec3 duy\u1ec7t v\u1edbi b\u01b0\u1edbc nh\u1ea3y k ph\u1ea3i l\u00e0 1, ta s\u1eed d\u1ee5ng function step() Java for ( int i = 0 ; i <= 10 ; i = i + 2 ) { } Kotlin for ( i in 1. . 4 step 2 ) print ( i ) // prints \"13\" for ( i in 4 downTo 1 step 2 ) print ( i ) // prints \"42\" \u0110\u1ec3 duy\u1ec7t v\u00e0 ngo\u1ea1i tr\u1eeb ph\u1ea7n t\u1eed cu\u1ed1i c\u00f9ng, ta s\u1eed d\u1ee5ng function until Java for ( int i = 0 ; i < 10 ; i ++){ } Kotlin for ( i in 1 until 10 ) { println ( i ) }","title":"1. Gi\u1edbi thi\u1ec7u"},{"location":"kotlin/kotlin_range/#246-cach-hoat-ong","text":"Ranges implement m\u1ed9t interface trong th\u01b0 vi\u1ec7n: ClosedRange<T> ClosedRange<T> bi\u1ec3u th\u1ecb m\u1ed9t kho\u1ea3ng k\u00edn v\u1edbi c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u c\u00f3 th\u1ec3 so s\u00e1nh \u0111\u01b0\u1ee3c. N\u00f3 c\u00f3 2 endpoint: start v\u00e0 endInclusive , c\u00e1i m\u00e0 \u0111\u01b0\u1ee3c bao g\u1ed3m trong kho\u1ea3ng \u0111\u00f3. Function s\u1eed d\u1ee5ng ch\u00ednh l\u00e0 contains , th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng d\u01b0\u1edbi d\u1ea1ng to\u00e1n t\u1eed in ho\u1eb7c !in . Progression v\u1edbi c\u00e1c d\u1eef li\u1ec7u ki\u1ec3u nguy\u00ean ( IntProgression , LongProgression , CharProgression ) bi\u1ec3u th\u1ecb m\u1ed9t ti\u1ebfn tr\u00ecnh s\u1ed1 h\u1ecdc. Progression \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1edfi ph\u1ea7n t\u1eed first , ph\u1ea7n t\u1eed last v\u00e0 m\u1ed9t step kh\u00e1c 0. Ph\u1ea7n t\u1eed \u0111\u1ea7u ti\u00ean l\u00e0 first , ph\u1ea7n t\u1eed ti\u1ebfp theo l\u00e0 first + step . Progression l\u00e0 l\u1edbp con c\u1ee7a Iterable<N> , v\u1edbi N l\u00e0 ki\u1ec3u Int , Long , Char . B\u1edfi v\u1eady ch\u00fang c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c d\u00f9ng v\u1edbi v\u00f2ng l\u1eb7p for v\u00e0 c\u00e1c function nh\u01b0 map , filter , ... Vi\u1ec7c duy\u1ec7t qua Progression t\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u00f2ng l\u1eb7p for c\u00f3 ch\u1ec9 s\u1ed1 trong Java ho\u1eb7c JavaScript : for ( int i = first ; i != last ; i += step ) { // ... } V\u1edbi ki\u1ec3u d\u1eef li\u1ec7u ki\u1ec3u nguy\u00ean, to\u00e1n t\u1eed .. t\u1ea1o m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng c\u1ea3 ClosedRange<T> v\u00e0 *Progression . VD: IntRange implement ClosedRange<Int> v\u00e0 k\u1ebf th\u1eeba IntProgression , do \u0111\u00f3 c\u00e1c to\u00e1n t\u1eed \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a cho IntProgression c\u0169ng c\u00f3 th\u1ec3 hi\u1ec7u l\u1ef1c v\u1edbi IntRange . K\u1ebft qu\u1ea3 c\u1ee7a c\u00e1c function downTo() v\u00e0 step() lu\u00f4n lu\u00f4n l\u00e0 m\u1ed9t *Progression . Progression \u0111\u01b0\u1ee3c t\u1ea1o ra b\u1edfi function fromClosedRange \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u00ean trong companion object. IntProgression . fromClosedRange ( start , end , step ) Ph\u1ea7n t\u1eed last c\u1ee7a progression \u0111\u01b0\u1ee3c t\u00ednh to\u00e1n \u0111\u1ec3 t\u00ecm \u0111\u01b0\u1ee3c gi\u00e1 tr\u1ecb l\u1edbn nh\u1ea5t kh\u00f4ng l\u1edbn h\u01a1n gi\u00e1 tr\u1ecb end v\u1edbi step >0 ho\u1eb7c kh\u00f4ng nh\u1ecf h\u01a1n gi\u00e1 tr\u1ecb end v\u1edbi step < 0 : (last - first) % step == 0","title":"2. C\u00e1ch ho\u1ea1t \u0111\u1ed9ng"},{"location":"kotlin/kotlin_range/#346-cac-function-huu-ich","text":"","title":"3. C\u00e1c function h\u1eefu \u00edch"},{"location":"kotlin/kotlin_range/#rangeto","text":"To\u00e1n t\u1eed rangeTo() v\u1edbi ki\u1ec3u d\u1eef li\u1ec7u nguy\u00ean \u0111\u01a1n gi\u1ea3n s\u1ebd g\u1ecdi h\u00e0m t\u1ea1o c\u1ee7a c\u00e1c class *Range class Int { //... operator fun rangeTo ( other : Long ): LongRange = LongRange ( this , other ) //... operator fun rangeTo ( other : Int ): IntRange = IntRange ( this , other ) //... } C\u00e1c s\u1ed1 th\u1ef1c ( Double , Float ) kh\u00f4ng \u0111\u1ecbnh ngh\u0129a c\u00e1c to\u00e1n t\u1eed rangeTo() m\u00e0 \u0111\u01b0\u1ee3c cung c\u1ea5p b\u1edfi th\u01b0 vi\u1ec7n chu\u1ea9n cho ki\u1ec3u Comparable public operator fun < T : Comparable < T > > T . rangeTo ( that : T ): ClosedRange < T > B\u1edfi v\u1eady, kh\u00f4ng th\u1ec3 duy\u1ec7t v\u1edbi c\u00e1c s\u1ed1 th\u1ef1c.","title":"rangeTo()"},{"location":"kotlin/kotlin_range/#downto","text":"Extension function downTo() \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a v\u1edbi ki\u1ec3u s\u1ed1 nguy\u00ean fun Long . downTo ( other : Int ): LongProgression { return LongProgression . fromClosedRange ( this , other . toLong (), - 1L ) } fun Byte . downTo ( other : Int ): IntProgression { return IntProgression . fromClosedRange ( this . toInt (), other , - 1 ) }","title":"downTo()"},{"location":"kotlin/kotlin_range/#reversed","text":"Extension function reversed() \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a cho c\u00e1c l\u1edbp *Progression v\u00e0 ch\u00fang tr\u1ea3 v\u1ec1 c\u00e1c progression ng\u01b0\u1ee3c: fun IntProgression . reversed (): IntProgression { return IntProgression . fromClosedRange ( last , first , - step ) }","title":"reversed()"},{"location":"kotlin/kotlin_range/#step","text":"C\u00e1c extension function step() \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a cho c\u00e1c l\u1edbp *Progression , t\u1ea5t c\u1ea3 ch\u00fang tr\u1ea3 v\u1ec1 m\u1ed9t progression v\u1edbi gi\u00e1 tr\u1ecb step \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o. Gi\u00e1 tr\u1ecb c\u1ee7a step c\u1ea7n l\u00e0 m\u1ed9t s\u1ed1 d\u01b0\u01a1ng \u0111\u1ec3 function kh\u00f4ng bao gi\u1edd c\u00f3 th\u1ec3 thay \u0111\u1ed5i \u0111\u01b0\u1ee3c h\u01b0\u1edbng duy\u1ec7t fun IntProgression . step ( step : Int ): IntProgression { if ( step <= 0 ) throw IllegalArgumentException ( \"Step must be positive, was: $step\" ) return IntProgression . fromClosedRange ( first , last , if ( this . step > 0 ) step else - step ) } fun CharProgression . step ( step : Int ): CharProgression { if ( step <= 0 ) throw IllegalArgumentException ( \"Step must be positive, was: $step\" ) return CharProgression . fromClosedRange ( first , last , if ( this . step > 0 ) step else - step ) } L\u01b0u \u00fd r\u1eb1ng gi\u00e1 tr\u1ecb last c\u1ee7a progression tr\u1ea3 v\u1ec1 c\u00f3 th\u1ec3 kh\u00e1c so v\u1edbi gi\u00e1 tr\u1ecb last c\u1ee7a progression ban \u0111\u1ea7u \u0111\u1ec3 gi\u1eef l\u1ea1i s\u1ef1 b\u1ea5t bi\u1ebfn: ( 1. . 12 step 2 ). last == 11 // progression with values [1, 3, 5, 7, 9, 11] ( 1. . 12 step 3 ). last == 10 // progression with values [1, 4, 7, 10] ( 1. . 12 step 4 ). last == 9 // progression with values [1, 5, 9]","title":"step()"},{"location":"kotlin/kotlin_visibility_modifiers/","text":"Class, object, interface, constructor, function, property(v\u00e0 function set() c\u1ee7a n\u00f3) \u0111\u1ec1u c\u00f3 visibility modifiers (hay th\u01b0\u1eddng g\u1ecdi l\u00e0 access modifiers) .(function get() c\u1ee7a property lu\u00f4n c\u00f3 visibility modifier gi\u1ed1ng v\u1edbi property). Kotlin c\u00f3 4 visibility modifiers: private , protected , internal v\u00e0 public . N\u1ebfu kh\u00f4ng x\u00e1c \u0111\u1ecbnh r\u00f5 r\u00e0ng visibility modifier th\u00ec m\u1eb7c \u0111\u1ecbnh s\u1ebd l\u00e0 public . Packages \u00b6 Function, property, class, object v\u00e0 interface \u0111\u1ec1u c\u00f3 th\u1ec3 khai b\u00e1o \u1edf m\u1ee9c \"top-level\" (\u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 n\u00f3 kh\u00f4ng \u1edf b\u00ean trong b\u1ea5t c\u1ee9 th\u00e0nh ph\u1ea7n n\u00e0o). V\u00ed d\u1ee5 nh\u01b0 trong package (\u0111\u1ea1i di\u1ec7n cho \u0111\u01b0\u1eddng d\u1eabn \u0111\u1ebfn file): // file name: example.kt package foo fun baz () {} class Bar {} N\u1ebfu kh\u00f4ng x\u00e1c \u0111\u1ecbnh r\u00f5 r\u00e0ng visibility modifier th\u00ec m\u1eb7c \u0111\u1ecbnh s\u1ebd l\u00e0 public . \u0110i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng n\u00f3 \u1edf b\u1ea5t k\u00ec \u0111\u00e2u. N\u1ebfu khai b\u00e1o l\u00e0 private , n\u00f3 ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u1edf trong file m\u00e0 n\u00f3 khai b\u00e1o. N\u1ebfu khai b\u00e1o l\u00e0 internal , n\u00f3 ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u1edf c\u00e1c n\u01a1i c\u00f9ng module . protected kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng khi khai b\u00e1o \u1edf m\u1ee9c \"top-level\". V\u00ed d\u1ee5: // file name: example.kt package foo private fun foo () {} // visible inside example.kt public var bar : Int = 5 // property is visible everywhere private set // setter is visible only in example.kt internal val baz = 6 // visible inside the same module Classes v\u00e0 Interfaces \u00b6 \u0110\u1ed1i v\u1edbi c\u00e1c th\u00e0nh ph\u1ea7n khai b\u00e1o \u1edf trong Class : private ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong class \u0111\u00f3 (kh\u00f4ng th\u1ec3 truy c\u1eadp qua instance c\u1ee7a class \u0111\u00f3) protected gi\u1ed1ng v\u1edbi private + c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u1edf trong c\u00e1c subclass (c\u00e1c class k\u1ebf th\u1eeba n\u00f3). internal kh\u1ea3 n\u0103ng truy c\u1eadp r\u1ed9ng h\u01a1n 2 lo\u1ea1i tr\u00ean v\u00e0 \u0111\u01b0\u1ee3c truy c\u1eadp b\u1edfi c\u00e1c instance c\u1ee7a class khai b\u00e1o n\u00f3 (c\u00e1c instance v\u00e0 n\u01a1i khai b\u00e1o class thu\u1ed9c c\u00f9ng module) public r\u1ed9ng nh\u1ea5t v\u00e0 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u1edf b\u1ea5t k\u00ec \u0111\u00e2u th\u00f4ng qua instance khai b\u00e1o n\u00f3. V\u00ed d\u1ee5: open class Outer { private val a = 1 protected open val b = 2 internal val c = 3 val d = 4 // public by default protected class Nested { public val e : Int = 5 } } class Subclass : Outer () { // a is not visible // b, c and d are visible // Nested and e are visible override val b = 5 // 'b' is protected } class Unrelated ( o : Outer ) { // o.a, o.b are not visible // o.c and o.d are visible (same module) // Outer.Nested is not visible, and Nested::e is not visible either } Constructors \u00b6 \u0110\u1ec3 x\u00e1c \u0111\u1ecbnh r\u00f5 visibility c\u1ee7a primary constructor, s\u1eed d\u1ee5ng c\u00fa ph\u00e1p d\u01b0\u1edbi \u0111\u00e2y(ch\u00fa \u00fd khi x\u00e1c \u0111\u1ecbnh visibility ph\u1ea3i s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a constructor , b\u00ecnh th\u01b0\u1eddng kh\u00f4ng c\u00f3 visibility modifier ho\u1eb7c annotation th\u00ec constructor c\u00f3 th\u1ec3 b\u1ecf qua): class C private constructor ( a : Int ) { ... } M\u1eb7c \u0111\u1ecbnh c\u00e1c constructor l\u00e0 public . Local declarations \u00b6 Local variables, functions v\u00e0 class kh\u00f4ng c\u00f3 visibility modifier Modules \u00b6 internal visibility modifier c\u00f3 th\u1ec3 truy c\u1eadp n\u1ebfu c\u00f9ng module. Chi ti\u1ebft h\u01a1n th\u00ec module l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c file Kotlin \u0111\u01b0\u1ee3c complie c\u00f9ng nhau nh\u01b0: Intellij IDEA module Maven ho\u1eb7c Gradle project","title":"Kotlin Visibility Modifiers"},{"location":"kotlin/kotlin_visibility_modifiers/#packages","text":"Function, property, class, object v\u00e0 interface \u0111\u1ec1u c\u00f3 th\u1ec3 khai b\u00e1o \u1edf m\u1ee9c \"top-level\" (\u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 n\u00f3 kh\u00f4ng \u1edf b\u00ean trong b\u1ea5t c\u1ee9 th\u00e0nh ph\u1ea7n n\u00e0o). V\u00ed d\u1ee5 nh\u01b0 trong package (\u0111\u1ea1i di\u1ec7n cho \u0111\u01b0\u1eddng d\u1eabn \u0111\u1ebfn file): // file name: example.kt package foo fun baz () {} class Bar {} N\u1ebfu kh\u00f4ng x\u00e1c \u0111\u1ecbnh r\u00f5 r\u00e0ng visibility modifier th\u00ec m\u1eb7c \u0111\u1ecbnh s\u1ebd l\u00e0 public . \u0110i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng n\u00f3 \u1edf b\u1ea5t k\u00ec \u0111\u00e2u. N\u1ebfu khai b\u00e1o l\u00e0 private , n\u00f3 ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u1edf trong file m\u00e0 n\u00f3 khai b\u00e1o. N\u1ebfu khai b\u00e1o l\u00e0 internal , n\u00f3 ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u1edf c\u00e1c n\u01a1i c\u00f9ng module . protected kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng khi khai b\u00e1o \u1edf m\u1ee9c \"top-level\". V\u00ed d\u1ee5: // file name: example.kt package foo private fun foo () {} // visible inside example.kt public var bar : Int = 5 // property is visible everywhere private set // setter is visible only in example.kt internal val baz = 6 // visible inside the same module","title":"Packages"},{"location":"kotlin/kotlin_visibility_modifiers/#classes-va-interfaces","text":"\u0110\u1ed1i v\u1edbi c\u00e1c th\u00e0nh ph\u1ea7n khai b\u00e1o \u1edf trong Class : private ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong class \u0111\u00f3 (kh\u00f4ng th\u1ec3 truy c\u1eadp qua instance c\u1ee7a class \u0111\u00f3) protected gi\u1ed1ng v\u1edbi private + c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u1edf trong c\u00e1c subclass (c\u00e1c class k\u1ebf th\u1eeba n\u00f3). internal kh\u1ea3 n\u0103ng truy c\u1eadp r\u1ed9ng h\u01a1n 2 lo\u1ea1i tr\u00ean v\u00e0 \u0111\u01b0\u1ee3c truy c\u1eadp b\u1edfi c\u00e1c instance c\u1ee7a class khai b\u00e1o n\u00f3 (c\u00e1c instance v\u00e0 n\u01a1i khai b\u00e1o class thu\u1ed9c c\u00f9ng module) public r\u1ed9ng nh\u1ea5t v\u00e0 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u1edf b\u1ea5t k\u00ec \u0111\u00e2u th\u00f4ng qua instance khai b\u00e1o n\u00f3. V\u00ed d\u1ee5: open class Outer { private val a = 1 protected open val b = 2 internal val c = 3 val d = 4 // public by default protected class Nested { public val e : Int = 5 } } class Subclass : Outer () { // a is not visible // b, c and d are visible // Nested and e are visible override val b = 5 // 'b' is protected } class Unrelated ( o : Outer ) { // o.a, o.b are not visible // o.c and o.d are visible (same module) // Outer.Nested is not visible, and Nested::e is not visible either }","title":"Classes v\u00e0 Interfaces"},{"location":"kotlin/kotlin_visibility_modifiers/#constructors","text":"\u0110\u1ec3 x\u00e1c \u0111\u1ecbnh r\u00f5 visibility c\u1ee7a primary constructor, s\u1eed d\u1ee5ng c\u00fa ph\u00e1p d\u01b0\u1edbi \u0111\u00e2y(ch\u00fa \u00fd khi x\u00e1c \u0111\u1ecbnh visibility ph\u1ea3i s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a constructor , b\u00ecnh th\u01b0\u1eddng kh\u00f4ng c\u00f3 visibility modifier ho\u1eb7c annotation th\u00ec constructor c\u00f3 th\u1ec3 b\u1ecf qua): class C private constructor ( a : Int ) { ... } M\u1eb7c \u0111\u1ecbnh c\u00e1c constructor l\u00e0 public .","title":"Constructors"},{"location":"kotlin/kotlin_visibility_modifiers/#local-declarations","text":"Local variables, functions v\u00e0 class kh\u00f4ng c\u00f3 visibility modifier","title":"Local declarations"},{"location":"kotlin/kotlin_visibility_modifiers/#modules","text":"internal visibility modifier c\u00f3 th\u1ec3 truy c\u1eadp n\u1ebfu c\u00f9ng module. Chi ti\u1ebft h\u01a1n th\u00ec module l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c file Kotlin \u0111\u01b0\u1ee3c complie c\u00f9ng nhau nh\u01b0: Intellij IDEA module Maven ho\u1eb7c Gradle project","title":"Modules"},{"location":"programming/lap-trinh-cau-truc-la-gi-uu-nhuoc-diem/","text":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac l\u00e0 g\u00ec? \u00b6 L\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac hay c\u00f2n g\u1ecdi l\u00e0 l\u1eadp tr\u00ecnh h\u01b0\u1edbng th\u1ee7 t\u1ee5c (Procedure Oriented Programming -- POP): l\u00e0 m\u1ed9t k\u1ef9 thu\u1eadt l\u1eadp tr\u00ecnh truy\u1ec1n th\u1ed1ng, trong \u0111\u00f3 ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c h\u00e0m (ch\u01b0\u01a1ng tr\u00ecnh con) M\u1ed7i ch\u01b0\u01a1ng tr\u00ecnh c\u00f2n c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c chia ra nhi\u1ec1u ch\u01b0\u01a1ng tr\u00ecnh con kh\u00e1c \u0111\u1ec3 \u0111\u01a1n gi\u1ea3n h\u00f3a c\u00f4ng vi\u1ec7c c\u1ee7a ch\u00fang. (Qu\u00e1 tr\u00ecnh l\u00e0m m\u1ecbn) -- V\u00ed d\u1ee5 ch\u01b0\u01a1ng tr\u00ecnh nh\u1eadp v\u00e0 hi\u1ec3n th\u1ecb th\u00f4ng tin ng\u01b0\u1eddi d\u00f9ng s\u1ebd chia th\u00e0nh hai ch\u01b0\u01a1ng tr\u00ecnh con l\u00e0 ch\u01b0\u01a1ng tr\u00ecnh nh\u1eadp v\u00e0 xu\u1ea5t, n\u1ebfu vi\u1ec7c nh\u1eadp th\u00f4ng tin ph\u1ee9c t\u1ea1p th\u00ec ch\u01b0\u01a1ng tr\u00ecnh nh\u1eadp th\u00f4ng tin c\u00f3 th\u1ec3 chia ra nhi\u1ec1u ch\u01b0\u01a1ng tr\u00ecnh con kh\u00e1c nhau... C\u00e1c ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac: Pascal, C... \u0110\u1eb7c \u0111i\u1ec3m, T\u00ednh ch\u1ea5t \u00b6 Ch\u01b0\u01a1ng tr\u00ecnh = C\u1ea5u tr\u00fac d\u1eef li\u1ec7u + Gi\u1ea3i thu\u1eadt C\u1ea5u tr\u00fac d\u1eef li\u1ec7u: c\u00e1ch m\u00f4 t\u1ea3, t\u1ed5 ch\u1ee9c d\u1eef li\u1ec7u Gi\u1ea3i thu\u1eadt: thu\u1eadt to\u00e1n, c\u00e1c b\u01b0\u1edbc gi\u1ea3i quy\u1ebft b\u00e0i to\u00e1n \u0110\u1ec3 li\u00ean k\u1ebft gi\u1eefa c\u00e1c h\u00e0m v\u1edbi nhau ta th\u01b0\u1eddng d\u00f9ng bi\u1ebfn to\u00e0n c\u1ee5c ho\u1eb7c con tr\u1ecf. C\u00e1c t\u00ednh ch\u1ea5t c\u01a1 b\u1ea3n c\u1ee7a l\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac l\u00e0: T\u1eadp chung v\u00e0o c\u00f4ng vi\u1ec7c c\u1ea7n th\u1ef1c hi\u1ec7n (thu\u1eadt to\u00e1n) Ch\u01b0\u01a1ng tr\u00ecnh l\u1edbn \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh con, m\u1ed7i ch\u01b0\u01a1ng tr\u00ecnh con c\u00f3 th\u1ec3 g\u1ecdi t\u1edbi m\u1ed9t ho\u1eb7c nhi\u1ec1u l\u1ea7n theo th\u1ee9 t\u1ef1 b\u1ea5t k\u1ef3. Ph\u1ea7n l\u1edbn c\u00e1c h\u00e0m s\u1eed d\u1ee5ng d\u1eef li\u1ec7u chung D\u1eef li\u00eau trong h\u1ec7 th\u1ed1ng \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u1ed9ng t\u1eeb h\u00e0m n\u00e0y sang h\u00e0m kh\u00e1c. H\u00e0m bi\u1ebfn \u0111\u1ed5i d\u1eef li\u1ec7u t\u1eeb d\u1ea1ng n\u00e0y sang d\u1ea1ng kh\u00e1c S\u1eed d\u1ee5ng c\u00e1ch ti\u1ebfp c\u1eadn top-down trong thi\u1ebft k\u1ebf ch\u01b0\u01a1ng tr\u00ecnh \u01afu nh\u01b0\u1ee3c \u0111i\u1ec3m \u00b6 \u01afu \u0111i\u1ec3m: T\u01b0 duy gi\u1ea3i thu\u1eadt r\u00f5 r\u00e0ng. \u0110\u01a1n gi\u1ea3n, d\u1ec5 hi\u1ec3u. Nh\u01b0\u1ee3c \u0111i\u1ec3m: Trong l\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac ta th\u01b0\u1eddng quan t\u00e2m \u0111\u1ebfn vi\u1ec7c ph\u00e1t tri\u1ec3n c\u00e1c h\u00e0m m\u00e0 \u00edt quan t\u00e2m t\u1edbi d\u1eef li\u1ec7u -- th\u1ee9 m\u00e0 ch\u00fang d\u00f9ng \u0111\u1ec3 x\u1eed l\u00fd c\u00f4ng vi\u1ec7c. (\u0110i\u1ec1u n\u00e0y khi\u1ebfn cho d\u1eef li\u1ec7u kh\u00f3 ki\u1ec3m so\u00e1t) Kh\u00f4ng h\u1ed7 tr\u1ee3 s\u1eed d\u1ee5ng l\u1ea1i m\u00e3 ngu\u1ed3n: m\u1ed7i c\u1ea5u tr\u00fac d\u1eef li\u1ec7u ch\u1ec9 ph\u00f9 h\u1ee3p v\u1edbi m\u1ed9t s\u1ed1 gi\u1ea3i thu\u1eadt, khi thay \u0111\u1ed5i c\u1ea5u tr\u00fac d\u1eef li\u1ec7u th\u00ec gi\u1ea3i thu\u1eadt ph\u1ea3i thay \u0111\u1ed5i theo. Kh\u00f4ng ph\u00f9 h\u1ee3p v\u1edbi c\u00e1c b\u00e0i to\u00e1n l\u1edbn c\u00f3 nhi\u1ec1u module. L\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac l\u00e0 g\u00ec? \u01afu nh\u01b0\u1ee3c \u0111i\u1ec3m. \u00b6 References: https://en.wikipedia.org/wiki/Procedural_programming","title":"L\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac l\u00e0 g\u00ec"},{"location":"programming/lap-trinh-cau-truc-la-gi-uu-nhuoc-diem/#lap-trinh-huong-cau-truc-la-gi","text":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac hay c\u00f2n g\u1ecdi l\u00e0 l\u1eadp tr\u00ecnh h\u01b0\u1edbng th\u1ee7 t\u1ee5c (Procedure Oriented Programming -- POP): l\u00e0 m\u1ed9t k\u1ef9 thu\u1eadt l\u1eadp tr\u00ecnh truy\u1ec1n th\u1ed1ng, trong \u0111\u00f3 ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c h\u00e0m (ch\u01b0\u01a1ng tr\u00ecnh con) M\u1ed7i ch\u01b0\u01a1ng tr\u00ecnh c\u00f2n c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c chia ra nhi\u1ec1u ch\u01b0\u01a1ng tr\u00ecnh con kh\u00e1c \u0111\u1ec3 \u0111\u01a1n gi\u1ea3n h\u00f3a c\u00f4ng vi\u1ec7c c\u1ee7a ch\u00fang. (Qu\u00e1 tr\u00ecnh l\u00e0m m\u1ecbn) -- V\u00ed d\u1ee5 ch\u01b0\u01a1ng tr\u00ecnh nh\u1eadp v\u00e0 hi\u1ec3n th\u1ecb th\u00f4ng tin ng\u01b0\u1eddi d\u00f9ng s\u1ebd chia th\u00e0nh hai ch\u01b0\u01a1ng tr\u00ecnh con l\u00e0 ch\u01b0\u01a1ng tr\u00ecnh nh\u1eadp v\u00e0 xu\u1ea5t, n\u1ebfu vi\u1ec7c nh\u1eadp th\u00f4ng tin ph\u1ee9c t\u1ea1p th\u00ec ch\u01b0\u01a1ng tr\u00ecnh nh\u1eadp th\u00f4ng tin c\u00f3 th\u1ec3 chia ra nhi\u1ec1u ch\u01b0\u01a1ng tr\u00ecnh con kh\u00e1c nhau... C\u00e1c ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac: Pascal, C...","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac l\u00e0 g\u00ec?"},{"location":"programming/lap-trinh-cau-truc-la-gi-uu-nhuoc-diem/#ac-iem-tinh-chat","text":"Ch\u01b0\u01a1ng tr\u00ecnh = C\u1ea5u tr\u00fac d\u1eef li\u1ec7u + Gi\u1ea3i thu\u1eadt C\u1ea5u tr\u00fac d\u1eef li\u1ec7u: c\u00e1ch m\u00f4 t\u1ea3, t\u1ed5 ch\u1ee9c d\u1eef li\u1ec7u Gi\u1ea3i thu\u1eadt: thu\u1eadt to\u00e1n, c\u00e1c b\u01b0\u1edbc gi\u1ea3i quy\u1ebft b\u00e0i to\u00e1n \u0110\u1ec3 li\u00ean k\u1ebft gi\u1eefa c\u00e1c h\u00e0m v\u1edbi nhau ta th\u01b0\u1eddng d\u00f9ng bi\u1ebfn to\u00e0n c\u1ee5c ho\u1eb7c con tr\u1ecf. C\u00e1c t\u00ednh ch\u1ea5t c\u01a1 b\u1ea3n c\u1ee7a l\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac l\u00e0: T\u1eadp chung v\u00e0o c\u00f4ng vi\u1ec7c c\u1ea7n th\u1ef1c hi\u1ec7n (thu\u1eadt to\u00e1n) Ch\u01b0\u01a1ng tr\u00ecnh l\u1edbn \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh con, m\u1ed7i ch\u01b0\u01a1ng tr\u00ecnh con c\u00f3 th\u1ec3 g\u1ecdi t\u1edbi m\u1ed9t ho\u1eb7c nhi\u1ec1u l\u1ea7n theo th\u1ee9 t\u1ef1 b\u1ea5t k\u1ef3. Ph\u1ea7n l\u1edbn c\u00e1c h\u00e0m s\u1eed d\u1ee5ng d\u1eef li\u1ec7u chung D\u1eef li\u00eau trong h\u1ec7 th\u1ed1ng \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u1ed9ng t\u1eeb h\u00e0m n\u00e0y sang h\u00e0m kh\u00e1c. H\u00e0m bi\u1ebfn \u0111\u1ed5i d\u1eef li\u1ec7u t\u1eeb d\u1ea1ng n\u00e0y sang d\u1ea1ng kh\u00e1c S\u1eed d\u1ee5ng c\u00e1ch ti\u1ebfp c\u1eadn top-down trong thi\u1ebft k\u1ebf ch\u01b0\u01a1ng tr\u00ecnh","title":"\u0110\u1eb7c \u0111i\u1ec3m, T\u00ednh ch\u1ea5t"},{"location":"programming/lap-trinh-cau-truc-la-gi-uu-nhuoc-diem/#uu-nhuoc-iem","text":"\u01afu \u0111i\u1ec3m: T\u01b0 duy gi\u1ea3i thu\u1eadt r\u00f5 r\u00e0ng. \u0110\u01a1n gi\u1ea3n, d\u1ec5 hi\u1ec3u. Nh\u01b0\u1ee3c \u0111i\u1ec3m: Trong l\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac ta th\u01b0\u1eddng quan t\u00e2m \u0111\u1ebfn vi\u1ec7c ph\u00e1t tri\u1ec3n c\u00e1c h\u00e0m m\u00e0 \u00edt quan t\u00e2m t\u1edbi d\u1eef li\u1ec7u -- th\u1ee9 m\u00e0 ch\u00fang d\u00f9ng \u0111\u1ec3 x\u1eed l\u00fd c\u00f4ng vi\u1ec7c. (\u0110i\u1ec1u n\u00e0y khi\u1ebfn cho d\u1eef li\u1ec7u kh\u00f3 ki\u1ec3m so\u00e1t) Kh\u00f4ng h\u1ed7 tr\u1ee3 s\u1eed d\u1ee5ng l\u1ea1i m\u00e3 ngu\u1ed3n: m\u1ed7i c\u1ea5u tr\u00fac d\u1eef li\u1ec7u ch\u1ec9 ph\u00f9 h\u1ee3p v\u1edbi m\u1ed9t s\u1ed1 gi\u1ea3i thu\u1eadt, khi thay \u0111\u1ed5i c\u1ea5u tr\u00fac d\u1eef li\u1ec7u th\u00ec gi\u1ea3i thu\u1eadt ph\u1ea3i thay \u0111\u1ed5i theo. Kh\u00f4ng ph\u00f9 h\u1ee3p v\u1edbi c\u00e1c b\u00e0i to\u00e1n l\u1edbn c\u00f3 nhi\u1ec1u module.","title":"\u01afu nh\u01b0\u1ee3c \u0111i\u1ec3m"},{"location":"programming/lap-trinh-cau-truc-la-gi-uu-nhuoc-diem/#lap-trinh-cau-truc-la-gi-uu-nhuoc-iem","text":"References: https://en.wikipedia.org/wiki/Procedural_programming","title":"L\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac l\u00e0 g\u00ec? \u01afu nh\u01b0\u1ee3c \u0111i\u1ec3m."},{"location":"programming/lap-trinh-huong-doi-tuong-la-gi-uu-nhuoc-diem/","text":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng l\u00e0 g\u00ec? \u00b6 L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (Object Oriented Programming -- OOP): l\u00e0 m\u1ed9t k\u1ef9 thu\u1eadt l\u1eadp tr\u00ecnh, trong \u0111\u00f3 ch\u01b0\u01a1ng tr\u00ecnh s\u1ebd \u0111\u01b0\u1ee3c chia ra th\u00e0nh c\u00e1c ph\u1ea7n nh\u1ecf \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng (Object). \u0110\u1ed1i t\u01b0\u1ee3ng trong l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng s\u1ebd t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c th\u1ef1c th\u1ec3 trong b\u00e0i to\u00e1n, n\u00f3 s\u1ebd c\u00f3 c\u00e1c thu\u1ed9c t\u00ednh (attribute), c\u00e1c h\u00e0nh \u0111\u1ed9ng (method). C\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi nhau. C\u00e1c ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng: Java, C#, Python, Ruby, Swift, Object-C C\u00e1c t\u00ednh ch\u1ea5t c\u01a1 b\u1ea3n c\u1ee7a l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng: t\u00ednh tr\u1eebu t\u01b0\u1ee3ng, t\u00ednh \u0111\u00f3ng g\u00f3i, t\u00ednh \u0111a h\u00ecnh, t\u00ednh k\u1ebf th\u1eeba Th\u1ebf n\u00e0o l\u00e0 ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh? \u00b6 M\u1ed9t ng\u00f4n ng\u1eef \u0111\u01b0\u1ee3c coi l\u00e0 ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng n\u1ebfu \u0111\u00e1p \u1ee9ng \u0111\u1ee7 4 t\u00ednh ch\u1ea5t sau: T\u00ednh \u0111\u00f3ng g\u00f3i (Encapsulation) T\u00ednh tr\u1eebu t\u01b0\u1ee3ng (Abstraction) T\u00ednh k\u1ebf th\u1eeba (Inheritance) T\u00ednh \u0111a h\u00ecnh (Polymorphism) \u01afu \u0111i\u1ec3m l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng \u00b6 D\u1eef li\u1ec7u kh\u00f4ng b\u1ecb thay \u0111\u1ed5i t\u1ef1 do trong ch\u01b0\u01a1ng tr\u00ecnh nh\u01b0 l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac. Khi thay \u0111\u1ed5i c\u1ea5u tr\u00fac d\u1eef li\u1ec7u c\u1ee7a m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng, kh\u00f4ng c\u1ea7n thay \u0111\u1ed5i c\u00e1c m\u00e3 ngu\u1ed3n c\u1ee7a c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng kh\u00e1c m\u00e0 ch\u1ec9 c\u1ea7n thanh \u0111\u1ed5i m\u1ed9t m\u1ed9t s\u1ed1 h\u00e0m th\u00e0nh ph\u1ea7n C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng l\u1ea1i m\u00e3 ngu\u1ed3n qua k\u1ebf th\u1eeba Ph\u00f9 h\u1ee3p c\u00e1c ph\u1ea7n m\u1ec1m ph\u1ee9c t\u1ea1p, l\u1edbn. \u0110\u01b0\u1ee3c \u0111\u00e1nh gi\u00e1 l\u00e0 d\u1ec5 h\u1ecdc, n\u0103ng su\u1ea5t, \u0111\u01a1n gi\u1ea3n, d\u1ec5 b\u1ea3o tr\u00ec, d\u1ec5 m\u1edf r\u1ed9ng... Ph\u01b0\u01a1ng ph\u00e1p ph\u00e2n t\u00edch/thi\u1ebft k\u1ebf h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng: **Giai \u0111o\u1ea1n ph\u00e2n t\u00edch: c**huy\u1ec3n \u0111\u1ed5i b\u00e0i to\u00e1n t\u1eeb ng\u00f4n ng\u1eef t\u1ef1 nhi\u00ean sang ng\u00f4n ng\u1eef m\u00f4 h\u00ecnh. Giai \u0111o\u1ea1n thi\u1ebft k\u1ebf: chuy\u1ec3n t\u1eeb ng\u00f4n ng\u1eef m\u00f4 h\u00ecnh sang d\u1ea1ng c\u1ee5 th\u1ec3 c\u00f3 th\u1ec3 c\u00e0i \u0111\u1eb7t \u0111\u01b0\u1ee3c M\u00f4 t\u1ea3 b\u00e0i to\u00e1n \u0110\u1eb7c t\u1ea3 y\u00eau c\u1ea7u Tr\u00edch ch\u1ecdn \u0111\u1ed1i t\u01b0\u1ee3ng M\u00f4 h\u00ecnh h\u00f3a \u0111\u1ed1i t\u01b0\u1ee3ng Thi\u1ebft k\u1ebf t\u1ed5ng quan Thi\u1ebft k\u1ebf chi ti\u1ebft. Sau giai \u0111o\u1ea1n ph\u00e2n th\u00edch v\u00e0 thi\u1ebft k\u1ebf, l\u1eadp tr\u00ecnh vi\u00ean c\u00f3 th\u1ec3 nh\u00ecn v\u00e0o c\u00e1c t\u00e0i li\u1ec7u \u0111\u00e3 l\u1eadp v\u00e0 c\u00f3 th\u1ec3 vi\u1ebft code \u0111\u01b0\u1ee3c lu\u00f4n. N\u1ebfu v\u1eabn c\u00f3 nh\u1eefng tr\u01b0\u1eddng h\u1ee3p ch\u01b0a bi\u1ebft code nh\u01b0 n\u00e0o th\u00ec t\u1ee9c l\u00e0 pha thi\u1ebft k\u1ebf \u0111\u00e3 b\u1ecb b\u1ecf s\u00f3t ho\u1eb7c ch\u01b0a chi ti\u1ebft. (Ng\u00e0y tr\u01b0\u1edbc th\u1ea7y gi\u00e1o v\u1eabn k\u00eau l\u00e0 th\u1eb1ng vi\u1ebft code ch\u1ec9 l\u00e0 th\u1eb1ng c\u00f4ng nh\u00e2n lao \u0111\u1ed9ng theo b\u1ea3n thi\u1ebft k\u1ebf, mu\u1ed1n l\u01b0\u01a1ng cao th\u00ec ph\u1ea3i l\u00e0m ph\u00e2n t\u00edch thi\u1ebft k\u1ebf \ud83d\ude10 nh\u01b0ng ng\u00e0nh ph\u1ea7n m\u1ec1m \u1edf Vi\u1ec7t Nam th\u00ec \u00edt c\u00f3 c\u00f4ng ty n\u00e0o m\u00e0 c\u00e1c giai \u0111o\u1ea1n \u0111\u01b0\u1ee3c l\u00e0m chi ti\u1ebft nh\u01b0 th\u1ebf, l\u1eadp tr\u00ecnh vi\u00ean m\u1edbi \u0111i l\u00e0m s\u1ebd l\u00e0m t\u1ea5t c\u00e1c b\u01b0\u1edbc ho\u1eb7c m\u1ed9t s\u1ed1 b\u01b0\u1edbc, m\u1ed7i c\u00e1i m\u1ed9t \u00edt ) L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng l\u00e0 g\u00ec? \u01afu, nh\u01b0\u1ee3c \u0111i\u1ec3m \u00b6 References: https://vi.wikipedia.org...","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng l\u00e0 g\u00ec"},{"location":"programming/lap-trinh-huong-doi-tuong-la-gi-uu-nhuoc-diem/#lap-trinh-huong-oi-tuong-la-gi","text":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (Object Oriented Programming -- OOP): l\u00e0 m\u1ed9t k\u1ef9 thu\u1eadt l\u1eadp tr\u00ecnh, trong \u0111\u00f3 ch\u01b0\u01a1ng tr\u00ecnh s\u1ebd \u0111\u01b0\u1ee3c chia ra th\u00e0nh c\u00e1c ph\u1ea7n nh\u1ecf \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng (Object). \u0110\u1ed1i t\u01b0\u1ee3ng trong l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng s\u1ebd t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c th\u1ef1c th\u1ec3 trong b\u00e0i to\u00e1n, n\u00f3 s\u1ebd c\u00f3 c\u00e1c thu\u1ed9c t\u00ednh (attribute), c\u00e1c h\u00e0nh \u0111\u1ed9ng (method). C\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi nhau. C\u00e1c ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng: Java, C#, Python, Ruby, Swift, Object-C C\u00e1c t\u00ednh ch\u1ea5t c\u01a1 b\u1ea3n c\u1ee7a l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng: t\u00ednh tr\u1eebu t\u01b0\u1ee3ng, t\u00ednh \u0111\u00f3ng g\u00f3i, t\u00ednh \u0111a h\u00ecnh, t\u00ednh k\u1ebf th\u1eeba","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng l\u00e0 g\u00ec?"},{"location":"programming/lap-trinh-huong-doi-tuong-la-gi-uu-nhuoc-diem/#the-nao-la-ngon-ngu-lap-trinh","text":"M\u1ed9t ng\u00f4n ng\u1eef \u0111\u01b0\u1ee3c coi l\u00e0 ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng n\u1ebfu \u0111\u00e1p \u1ee9ng \u0111\u1ee7 4 t\u00ednh ch\u1ea5t sau: T\u00ednh \u0111\u00f3ng g\u00f3i (Encapsulation) T\u00ednh tr\u1eebu t\u01b0\u1ee3ng (Abstraction) T\u00ednh k\u1ebf th\u1eeba (Inheritance) T\u00ednh \u0111a h\u00ecnh (Polymorphism)","title":"Th\u1ebf n\u00e0o l\u00e0 ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh?"},{"location":"programming/lap-trinh-huong-doi-tuong-la-gi-uu-nhuoc-diem/#uu-iem-lap-trinh-huong-oi-tuong","text":"D\u1eef li\u1ec7u kh\u00f4ng b\u1ecb thay \u0111\u1ed5i t\u1ef1 do trong ch\u01b0\u01a1ng tr\u00ecnh nh\u01b0 l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac. Khi thay \u0111\u1ed5i c\u1ea5u tr\u00fac d\u1eef li\u1ec7u c\u1ee7a m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng, kh\u00f4ng c\u1ea7n thay \u0111\u1ed5i c\u00e1c m\u00e3 ngu\u1ed3n c\u1ee7a c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng kh\u00e1c m\u00e0 ch\u1ec9 c\u1ea7n thanh \u0111\u1ed5i m\u1ed9t m\u1ed9t s\u1ed1 h\u00e0m th\u00e0nh ph\u1ea7n C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng l\u1ea1i m\u00e3 ngu\u1ed3n qua k\u1ebf th\u1eeba Ph\u00f9 h\u1ee3p c\u00e1c ph\u1ea7n m\u1ec1m ph\u1ee9c t\u1ea1p, l\u1edbn. \u0110\u01b0\u1ee3c \u0111\u00e1nh gi\u00e1 l\u00e0 d\u1ec5 h\u1ecdc, n\u0103ng su\u1ea5t, \u0111\u01a1n gi\u1ea3n, d\u1ec5 b\u1ea3o tr\u00ec, d\u1ec5 m\u1edf r\u1ed9ng... Ph\u01b0\u01a1ng ph\u00e1p ph\u00e2n t\u00edch/thi\u1ebft k\u1ebf h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng: **Giai \u0111o\u1ea1n ph\u00e2n t\u00edch: c**huy\u1ec3n \u0111\u1ed5i b\u00e0i to\u00e1n t\u1eeb ng\u00f4n ng\u1eef t\u1ef1 nhi\u00ean sang ng\u00f4n ng\u1eef m\u00f4 h\u00ecnh. Giai \u0111o\u1ea1n thi\u1ebft k\u1ebf: chuy\u1ec3n t\u1eeb ng\u00f4n ng\u1eef m\u00f4 h\u00ecnh sang d\u1ea1ng c\u1ee5 th\u1ec3 c\u00f3 th\u1ec3 c\u00e0i \u0111\u1eb7t \u0111\u01b0\u1ee3c M\u00f4 t\u1ea3 b\u00e0i to\u00e1n \u0110\u1eb7c t\u1ea3 y\u00eau c\u1ea7u Tr\u00edch ch\u1ecdn \u0111\u1ed1i t\u01b0\u1ee3ng M\u00f4 h\u00ecnh h\u00f3a \u0111\u1ed1i t\u01b0\u1ee3ng Thi\u1ebft k\u1ebf t\u1ed5ng quan Thi\u1ebft k\u1ebf chi ti\u1ebft. Sau giai \u0111o\u1ea1n ph\u00e2n th\u00edch v\u00e0 thi\u1ebft k\u1ebf, l\u1eadp tr\u00ecnh vi\u00ean c\u00f3 th\u1ec3 nh\u00ecn v\u00e0o c\u00e1c t\u00e0i li\u1ec7u \u0111\u00e3 l\u1eadp v\u00e0 c\u00f3 th\u1ec3 vi\u1ebft code \u0111\u01b0\u1ee3c lu\u00f4n. N\u1ebfu v\u1eabn c\u00f3 nh\u1eefng tr\u01b0\u1eddng h\u1ee3p ch\u01b0a bi\u1ebft code nh\u01b0 n\u00e0o th\u00ec t\u1ee9c l\u00e0 pha thi\u1ebft k\u1ebf \u0111\u00e3 b\u1ecb b\u1ecf s\u00f3t ho\u1eb7c ch\u01b0a chi ti\u1ebft. (Ng\u00e0y tr\u01b0\u1edbc th\u1ea7y gi\u00e1o v\u1eabn k\u00eau l\u00e0 th\u1eb1ng vi\u1ebft code ch\u1ec9 l\u00e0 th\u1eb1ng c\u00f4ng nh\u00e2n lao \u0111\u1ed9ng theo b\u1ea3n thi\u1ebft k\u1ebf, mu\u1ed1n l\u01b0\u01a1ng cao th\u00ec ph\u1ea3i l\u00e0m ph\u00e2n t\u00edch thi\u1ebft k\u1ebf \ud83d\ude10 nh\u01b0ng ng\u00e0nh ph\u1ea7n m\u1ec1m \u1edf Vi\u1ec7t Nam th\u00ec \u00edt c\u00f3 c\u00f4ng ty n\u00e0o m\u00e0 c\u00e1c giai \u0111o\u1ea1n \u0111\u01b0\u1ee3c l\u00e0m chi ti\u1ebft nh\u01b0 th\u1ebf, l\u1eadp tr\u00ecnh vi\u00ean m\u1edbi \u0111i l\u00e0m s\u1ebd l\u00e0m t\u1ea5t c\u00e1c b\u01b0\u1edbc ho\u1eb7c m\u1ed9t s\u1ed1 b\u01b0\u1edbc, m\u1ed7i c\u00e1i m\u1ed9t \u00edt )","title":"\u01afu \u0111i\u1ec3m l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng"},{"location":"programming/lap-trinh-huong-doi-tuong-la-gi-uu-nhuoc-diem/#lap-trinh-huong-oi-tuong-la-gi-uu-nhuoc-iem","text":"References: https://vi.wikipedia.org...","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng l\u00e0 g\u00ec? \u01afu, nh\u01b0\u1ee3c \u0111i\u1ec3m"},{"location":"programming/lap-trinh-tuyen-tinh-la-gi-uu-nhuoc-diem/","text":"L\u1eadp tr\u00ecnh tuy\u1ebfn t\u00ednh l\u00e0 g\u00ec? \u00b6 L\u1eadp tr\u00ecnh tuy\u1ebfn t\u00ednh l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p, k\u1ef9 thu\u1eadt l\u1eadp tr\u00ecnh truy\u1ec1n th\u1ed1ng. Trong l\u1eadp tr\u00ecnh tuy\u1ebfn t\u00ednh, ch\u01b0\u01a1ng tr\u00ecnh s\u1ebd ch\u1ec9 c\u00f3 m\u1ed9t h\u00e0m v\u00e0 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tu\u1ea7n t\u1ef1 t\u1eeb \u0111\u1ea7u t\u1edbi cu\u1ed1i. \u0110\u1eb7c tr\u01b0ng c\u1ee7a l\u1eadp tr\u00ecnh tuy\u1ebfn t\u00ednh l\u00e0: \u0111\u01a1n gi\u1ea3n v\u00e0 \u0111\u01a1n lu\u1ed3ng \u01afu nh\u01b0\u1ee3c \u0111i\u1ec3m c\u1ee7a l\u1eadp tr\u00ecnh tuy\u1ebfn t\u00ednh \u00b6 \u01afu \u0111i\u1ec3m: \u0110\u01a1n gi\u1ea3n -> ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01a1n gi\u1ea3n, d\u1ec5 hi\u1ec3u Nh\u01b0\u1ee3c \u0111i\u1ec3m: Kh\u00f4ng th\u1ec3 \u00e1p d\u1ee5ng cho c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh ph\u1ee9c t\u1ea1p, kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng l\u1ea1i code.","title":"L\u1eadp tr\u00ecnh tuy\u1ebfn t\u00ednh l\u00e0 g\u00ec"},{"location":"programming/lap-trinh-tuyen-tinh-la-gi-uu-nhuoc-diem/#lap-trinh-tuyen-tinh-la-gi","text":"L\u1eadp tr\u00ecnh tuy\u1ebfn t\u00ednh l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p, k\u1ef9 thu\u1eadt l\u1eadp tr\u00ecnh truy\u1ec1n th\u1ed1ng. Trong l\u1eadp tr\u00ecnh tuy\u1ebfn t\u00ednh, ch\u01b0\u01a1ng tr\u00ecnh s\u1ebd ch\u1ec9 c\u00f3 m\u1ed9t h\u00e0m v\u00e0 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tu\u1ea7n t\u1ef1 t\u1eeb \u0111\u1ea7u t\u1edbi cu\u1ed1i. \u0110\u1eb7c tr\u01b0ng c\u1ee7a l\u1eadp tr\u00ecnh tuy\u1ebfn t\u00ednh l\u00e0: \u0111\u01a1n gi\u1ea3n v\u00e0 \u0111\u01a1n lu\u1ed3ng","title":"L\u1eadp tr\u00ecnh tuy\u1ebfn t\u00ednh l\u00e0 g\u00ec?"},{"location":"programming/lap-trinh-tuyen-tinh-la-gi-uu-nhuoc-diem/#uu-nhuoc-iem-cua-lap-trinh-tuyen-tinh","text":"\u01afu \u0111i\u1ec3m: \u0110\u01a1n gi\u1ea3n -> ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01a1n gi\u1ea3n, d\u1ec5 hi\u1ec3u Nh\u01b0\u1ee3c \u0111i\u1ec3m: Kh\u00f4ng th\u1ec3 \u00e1p d\u1ee5ng cho c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh ph\u1ee9c t\u1ea1p, kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng l\u1ea1i code.","title":"\u01afu nh\u01b0\u1ee3c \u0111i\u1ec3m c\u1ee7a l\u1eadp tr\u00ecnh tuy\u1ebfn t\u00ednh"},{"location":"programming/oop-vs-pop/","text":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng l\u00e0 g\u00ec? \u00b6 L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (Object Oriented Programming -- OOP): l\u00e0 m\u1ed9t k\u1ef9 thu\u1eadt l\u1eadp tr\u00ecnh, trong \u0111\u00f3 ch\u01b0\u01a1ng tr\u00ecnh s\u1ebd \u0111\u01b0\u1ee3c chia ra th\u00e0nh c\u00e1c ph\u1ea7n nh\u1ecf \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng (Object). \u0110\u1ed1i t\u01b0\u1ee3ng trong l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng s\u1ebd t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c th\u1ef1c th\u1ec3 trong b\u00e0i to\u00e1n, n\u00f3 s\u1ebd c\u00f3 c\u00e1c thu\u1ed9c t\u00ednh (attribute), c\u00e1c h\u00e0nh \u0111\u1ed9ng (method). C\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi nhau. C\u00e1c ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng: Java, C#, Python, Ruby, Swift, Object-C C\u00e1c t\u00ednh ch\u1ea5t c\u01a1 b\u1ea3n c\u1ee7a l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng: t\u00ednh tr\u1eebu t\u01b0\u1ee3ng, t\u00ednh \u0111\u00f3ng g\u00f3i, t\u00ednh \u0111a h\u00ecnh, t\u00ednh k\u1ebf th\u1eeba (Xem th\u00eam: C\u00e1c t\u00ednh ch\u1ea5t h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng c\u1ee7a Java ) L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u01b0\u1ee3c \u0111\u00e1nh gi\u00e1 l\u00e0 d\u1ec5 h\u1ecdc, n\u0103ng su\u1ea5t, \u0111\u01a1n gi\u1ea3n, d\u1ec5 b\u1ea3o tr\u00ec, d\u1ec5 m\u1edf r\u1ed9ng...\\ So s\u00e1nh l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac v\u1edbi h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng L\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac l\u00e0 g\u00ec? \u00b6 L\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac hay c\u00f2n g\u1ecdi l\u00e0 l\u1eadp tr\u00ecnh h\u01b0\u1edbng th\u1ee7 t\u1ee5c (Procedure Oriented Programming -- POP): l\u00e0 m\u1ed9t k\u1ef9 thu\u1eadt l\u1eadp tr\u00ecnh, trong \u0111\u00f3 ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c h\u00e0m (ch\u01b0\u01a1ng tr\u00ecnh con) M\u1ed7i ch\u01b0\u01a1ng tr\u00ecnh c\u00f2n c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c chia ra nhi\u1ec1u ch\u01b0\u01a1ng tr\u00ecnh con kh\u00e1c \u0111\u1ec3 \u0111\u01a1n gi\u1ea3n h\u00f3a c\u00f4ng vi\u1ec7c c\u1ee7a ch\u00fang. (Qu\u00e1 tr\u00ecnh l\u00e0m m\u1ecbn) -- V\u00ed d\u1ee5 ch\u01b0\u01a1ng tr\u00ecnh nh\u1eadp v\u00e0 hi\u1ec3n th\u1ecb th\u00f4ng tin ng\u01b0\u1eddi d\u00f9ng s\u1ebd chia th\u00e0nh hai ch\u01b0\u01a1ng tr\u00ecnh con l\u00e0 ch\u01b0\u01a1ng tr\u00ecnh nh\u1eadp v\u00e0 xu\u1ea5t, n\u1ebfu vi\u1ec7c nh\u1eadp th\u00f4ng tin ph\u1ee9c t\u1ea1p th\u00ec ch\u01b0\u01a1ng tr\u00ecnh nh\u1eadp th\u00f4ng tin c\u00f3 th\u1ec3 chia ra nhi\u1ec1u ch\u01b0\u01a1ng tr\u00ecnh con kh\u00e1c nhau... Trong l\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac ta th\u01b0\u1eddng quan t\u00e2m \u0111\u1ebfn vi\u1ec7c ph\u00e1t tri\u1ec3n c\u00e1c h\u00e0m m\u00e0 \u00edt quan t\u00e2m t\u1edbi d\u1eef li\u1ec7u -- th\u1ee9 m\u00e0 ch\u00fang d\u00f9ng \u0111\u1ec3 x\u1eed l\u00fd c\u00f4ng vi\u1ec7c. (\u0110i\u1ec1u n\u00e0y khi\u1ebfn cho d\u1eef li\u1ec7u kh\u00f3 ki\u1ec3m so\u00e1t) \u0110\u1ec3 li\u00ean k\u1ebft gi\u1eefa c\u00e1c h\u00e0m v\u1edbi nhau ta th\u01b0\u1eddng d\u00f9ng bi\u1ebfn to\u00e0n c\u1ee5c ho\u1eb7c con tr\u1ecf. C\u00e1c t\u00ednh ch\u1ea5t c\u01a1 b\u1ea3n c\u1ee7a l\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac l\u00e0: -- T\u1eadp chung v\u00e0o c\u00f4ng vi\u1ec7c c\u1ea7n th\u1ef1c hi\u1ec7n (thu\u1eadt to\u00e1n) -- Ch\u01b0\u01a1ng tr\u00ecnh l\u1edbn \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c h\u00e0m nh\u1ecf h\u01a1n -- Ph\u1ea7n l\u1edbn c\u00e1c h\u00e0m s\u1eed d\u1ee5ng d\u1eef li\u1ec7u chung -- D\u1eef li\u00eau trong h\u1ec7 th\u1ed1ng \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u1ed9ng t\u1eeb h\u00e0m n\u00e0y sang h\u00e0m kh\u00e1c. -- H\u00e0m bi\u1ebfn \u0111\u1ed5i d\u1eef li\u1ec7u t\u1eeb d\u1ea1ng n\u00e0y sang d\u1ea1ng kh\u00e1c -- S\u1eed d\u1ee5ng c\u00e1ch ti\u1ebfp c\u1eadn top-down trong thi\u1ebft k\u1ebf ch\u01b0\u01a1ng tr\u00ecnh C\u00e1c ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac: Pascal, C... S\u1ef1 kh\u00e1c nhau gi\u1eefa l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng v\u1edbi l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac (OOP vs POP) \u00b6 \u0110\u1ecbnh ngh\u0129a: OOP t\u1eadp trung v\u00e0o d\u1eef li\u1ec7u h\u01a1n l\u00e0 thu\u1eadt to\u00e1n c\u00f2n POP t\u1eadp trung v\u00e0o vi\u1ec7c x\u00e2y d\u1ef1ng c\u00e1c h\u00e0m, thu\u1eadt to\u00e1n h\u01a1n l\u00e0 d\u1eef li\u1ec7u. Ch\u01b0\u01a1ng tr\u00ecnh: OOP chia ch\u01b0\u01a1ng tr\u00ecnh th\u00e0nh c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f2n POP chia ch\u01b0\u01a1ng tr\u00ecnh th\u00e0nh c\u00e1c h\u00e0m. Kh\u1ea3 n\u0103ng truy c\u1eadp: OOP chia ra c\u00e1c modifier: Private, Public, Protected, Default c\u00f2n POP th\u00ec kh\u00f4ng. Th\u1ef1c thi: v\u1edbi OOP c\u00e1c ch\u1ee9c n\u0103ng c\u00f3 th\u1ec3 ch\u1ea1y \u0111\u1ed3ng th\u1eddi trong khi POP th\u00ec c\u00e1c h\u00e0m, ch\u1ee9c n\u0103ng ch\u1ea1y l\u1ea7n l\u01b0\u1ee3t. **\u0110i\u1ec1u khi\u1ec3n d\u1eef li\u1ec7u: **v\u1edbi OOP th\u00ec d\u1eef li\u1ec7u v\u00e0 h\u00e0m c\u1ee7a m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng gi\u1ed1ng nh\u01b0 m\u1ed9t th\u00e0nh ph\u1ea7n ri\u00eang bi\u1ec7t v\u00e0 b\u1ecb h\u1ea1n ch\u1ebf truy c\u1eadp b\u1edfi c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng kh\u00e1c. V\u1edbi POP, d\u1eef li\u1ec7u c\u00f3 th\u1ec3 truy c\u1eadp m\u1ed9t c\u00e1ch t\u1ef1 do gi\u1eefa c\u00e1c h\u00e0m. B\u1ea3o m\u1eadt: OOP b\u1ea3o m\u1eadt h\u01a1n POP nh\u1edd vi\u1ec7c gi\u1edbi h\u1ea1n truy c\u1eadp d\u1eef li\u1ec7u. Ch\u1ec9nh s\u1eeda: v\u1edbi OOP d\u1eef li\u1ec7u c\u00f3 th\u1ec3 th\u00eam m\u1edbi m\u1ed9t c\u00e1ch d\u1ec5 d\u00e0ng t\u1eeb c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng trong khi v\u1edbi POP th\u00ec r\u1ea5t kh\u00f3. So s\u00e1nh l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac v\u1edbi h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng \u00b6 References: http://www.differencebetween.net/technology/difference-between-oop-and-pop/ https://en.wikipedia.org/wiki/Top-down_and_bottom-up_design","title":"So s\u00e1nh POP v\u1edbi OOP"},{"location":"programming/oop-vs-pop/#lap-trinh-huong-oi-tuong-la-gi","text":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (Object Oriented Programming -- OOP): l\u00e0 m\u1ed9t k\u1ef9 thu\u1eadt l\u1eadp tr\u00ecnh, trong \u0111\u00f3 ch\u01b0\u01a1ng tr\u00ecnh s\u1ebd \u0111\u01b0\u1ee3c chia ra th\u00e0nh c\u00e1c ph\u1ea7n nh\u1ecf \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng (Object). \u0110\u1ed1i t\u01b0\u1ee3ng trong l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng s\u1ebd t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c th\u1ef1c th\u1ec3 trong b\u00e0i to\u00e1n, n\u00f3 s\u1ebd c\u00f3 c\u00e1c thu\u1ed9c t\u00ednh (attribute), c\u00e1c h\u00e0nh \u0111\u1ed9ng (method). C\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi nhau. C\u00e1c ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng: Java, C#, Python, Ruby, Swift, Object-C C\u00e1c t\u00ednh ch\u1ea5t c\u01a1 b\u1ea3n c\u1ee7a l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng: t\u00ednh tr\u1eebu t\u01b0\u1ee3ng, t\u00ednh \u0111\u00f3ng g\u00f3i, t\u00ednh \u0111a h\u00ecnh, t\u00ednh k\u1ebf th\u1eeba (Xem th\u00eam: C\u00e1c t\u00ednh ch\u1ea5t h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng c\u1ee7a Java ) L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u01b0\u1ee3c \u0111\u00e1nh gi\u00e1 l\u00e0 d\u1ec5 h\u1ecdc, n\u0103ng su\u1ea5t, \u0111\u01a1n gi\u1ea3n, d\u1ec5 b\u1ea3o tr\u00ec, d\u1ec5 m\u1edf r\u1ed9ng...\\ So s\u00e1nh l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac v\u1edbi h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng l\u00e0 g\u00ec?"},{"location":"programming/oop-vs-pop/#lap-trinh-huong-cau-truc-la-gi","text":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac hay c\u00f2n g\u1ecdi l\u00e0 l\u1eadp tr\u00ecnh h\u01b0\u1edbng th\u1ee7 t\u1ee5c (Procedure Oriented Programming -- POP): l\u00e0 m\u1ed9t k\u1ef9 thu\u1eadt l\u1eadp tr\u00ecnh, trong \u0111\u00f3 ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c h\u00e0m (ch\u01b0\u01a1ng tr\u00ecnh con) M\u1ed7i ch\u01b0\u01a1ng tr\u00ecnh c\u00f2n c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c chia ra nhi\u1ec1u ch\u01b0\u01a1ng tr\u00ecnh con kh\u00e1c \u0111\u1ec3 \u0111\u01a1n gi\u1ea3n h\u00f3a c\u00f4ng vi\u1ec7c c\u1ee7a ch\u00fang. (Qu\u00e1 tr\u00ecnh l\u00e0m m\u1ecbn) -- V\u00ed d\u1ee5 ch\u01b0\u01a1ng tr\u00ecnh nh\u1eadp v\u00e0 hi\u1ec3n th\u1ecb th\u00f4ng tin ng\u01b0\u1eddi d\u00f9ng s\u1ebd chia th\u00e0nh hai ch\u01b0\u01a1ng tr\u00ecnh con l\u00e0 ch\u01b0\u01a1ng tr\u00ecnh nh\u1eadp v\u00e0 xu\u1ea5t, n\u1ebfu vi\u1ec7c nh\u1eadp th\u00f4ng tin ph\u1ee9c t\u1ea1p th\u00ec ch\u01b0\u01a1ng tr\u00ecnh nh\u1eadp th\u00f4ng tin c\u00f3 th\u1ec3 chia ra nhi\u1ec1u ch\u01b0\u01a1ng tr\u00ecnh con kh\u00e1c nhau... Trong l\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac ta th\u01b0\u1eddng quan t\u00e2m \u0111\u1ebfn vi\u1ec7c ph\u00e1t tri\u1ec3n c\u00e1c h\u00e0m m\u00e0 \u00edt quan t\u00e2m t\u1edbi d\u1eef li\u1ec7u -- th\u1ee9 m\u00e0 ch\u00fang d\u00f9ng \u0111\u1ec3 x\u1eed l\u00fd c\u00f4ng vi\u1ec7c. (\u0110i\u1ec1u n\u00e0y khi\u1ebfn cho d\u1eef li\u1ec7u kh\u00f3 ki\u1ec3m so\u00e1t) \u0110\u1ec3 li\u00ean k\u1ebft gi\u1eefa c\u00e1c h\u00e0m v\u1edbi nhau ta th\u01b0\u1eddng d\u00f9ng bi\u1ebfn to\u00e0n c\u1ee5c ho\u1eb7c con tr\u1ecf. C\u00e1c t\u00ednh ch\u1ea5t c\u01a1 b\u1ea3n c\u1ee7a l\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac l\u00e0: -- T\u1eadp chung v\u00e0o c\u00f4ng vi\u1ec7c c\u1ea7n th\u1ef1c hi\u1ec7n (thu\u1eadt to\u00e1n) -- Ch\u01b0\u01a1ng tr\u00ecnh l\u1edbn \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c h\u00e0m nh\u1ecf h\u01a1n -- Ph\u1ea7n l\u1edbn c\u00e1c h\u00e0m s\u1eed d\u1ee5ng d\u1eef li\u1ec7u chung -- D\u1eef li\u00eau trong h\u1ec7 th\u1ed1ng \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u1ed9ng t\u1eeb h\u00e0m n\u00e0y sang h\u00e0m kh\u00e1c. -- H\u00e0m bi\u1ebfn \u0111\u1ed5i d\u1eef li\u1ec7u t\u1eeb d\u1ea1ng n\u00e0y sang d\u1ea1ng kh\u00e1c -- S\u1eed d\u1ee5ng c\u00e1ch ti\u1ebfp c\u1eadn top-down trong thi\u1ebft k\u1ebf ch\u01b0\u01a1ng tr\u00ecnh C\u00e1c ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac: Pascal, C...","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng c\u1ea5u tr\u00fac l\u00e0 g\u00ec?"},{"location":"programming/oop-vs-pop/#su-khac-nhau-giua-lap-trinh-huong-oi-tuong-voi-lap-trinh-cau-truc-oop-vs-pop","text":"\u0110\u1ecbnh ngh\u0129a: OOP t\u1eadp trung v\u00e0o d\u1eef li\u1ec7u h\u01a1n l\u00e0 thu\u1eadt to\u00e1n c\u00f2n POP t\u1eadp trung v\u00e0o vi\u1ec7c x\u00e2y d\u1ef1ng c\u00e1c h\u00e0m, thu\u1eadt to\u00e1n h\u01a1n l\u00e0 d\u1eef li\u1ec7u. Ch\u01b0\u01a1ng tr\u00ecnh: OOP chia ch\u01b0\u01a1ng tr\u00ecnh th\u00e0nh c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f2n POP chia ch\u01b0\u01a1ng tr\u00ecnh th\u00e0nh c\u00e1c h\u00e0m. Kh\u1ea3 n\u0103ng truy c\u1eadp: OOP chia ra c\u00e1c modifier: Private, Public, Protected, Default c\u00f2n POP th\u00ec kh\u00f4ng. Th\u1ef1c thi: v\u1edbi OOP c\u00e1c ch\u1ee9c n\u0103ng c\u00f3 th\u1ec3 ch\u1ea1y \u0111\u1ed3ng th\u1eddi trong khi POP th\u00ec c\u00e1c h\u00e0m, ch\u1ee9c n\u0103ng ch\u1ea1y l\u1ea7n l\u01b0\u1ee3t. **\u0110i\u1ec1u khi\u1ec3n d\u1eef li\u1ec7u: **v\u1edbi OOP th\u00ec d\u1eef li\u1ec7u v\u00e0 h\u00e0m c\u1ee7a m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng gi\u1ed1ng nh\u01b0 m\u1ed9t th\u00e0nh ph\u1ea7n ri\u00eang bi\u1ec7t v\u00e0 b\u1ecb h\u1ea1n ch\u1ebf truy c\u1eadp b\u1edfi c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng kh\u00e1c. V\u1edbi POP, d\u1eef li\u1ec7u c\u00f3 th\u1ec3 truy c\u1eadp m\u1ed9t c\u00e1ch t\u1ef1 do gi\u1eefa c\u00e1c h\u00e0m. B\u1ea3o m\u1eadt: OOP b\u1ea3o m\u1eadt h\u01a1n POP nh\u1edd vi\u1ec7c gi\u1edbi h\u1ea1n truy c\u1eadp d\u1eef li\u1ec7u. Ch\u1ec9nh s\u1eeda: v\u1edbi OOP d\u1eef li\u1ec7u c\u00f3 th\u1ec3 th\u00eam m\u1edbi m\u1ed9t c\u00e1ch d\u1ec5 d\u00e0ng t\u1eeb c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng trong khi v\u1edbi POP th\u00ec r\u1ea5t kh\u00f3.","title":"S\u1ef1 kh\u00e1c nhau gi\u1eefa l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng v\u1edbi l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac (OOP vs POP)"},{"location":"programming/oop-vs-pop/#so-sanh-lap-trinh-cau-truc-voi-huong-oi-tuong","text":"References: http://www.differencebetween.net/technology/difference-between-oop-and-pop/ https://en.wikipedia.org/wiki/Top-down_and_bottom-up_design","title":"So s\u00e1nh l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac v\u1edbi h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng"}]}