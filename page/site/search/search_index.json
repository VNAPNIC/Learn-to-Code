{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Th\u00f4ng tin c\u1ee7a t\u00f4i \u00b6 Name: Bui Hai Nam Date of birth: 25/09/1992 Skype: Connect I started my coding journey when I was 21 year old. As a Mobile programmer, working on both platform Android and IOS I have had numerous opportunity to use the programming languages C++ Java , Kotlin , Swift and Dart . No matter the route you take, it doesn\u2019t really matter as long as you practice a shit ton. Look through the popular languages and decide which one you want to start with. I\u2019d go with one of the following: Java, Swift, Kotlin, C, C++, Dart, PHP. It doesn\u2019t matter that much, and before you get a job doing it you\u2019ll probably want to have bounced around a little bit. Instead of giving step by step instructions, I'm going to give you a few pointers. Please pay attention to these, don't just be like \"yeah whatever.\" Following these tips will make you grow way faster, and if you actually follow these tips completely, you'll probably be the fastest learning programmer in history. **Nobody follows these rules until way later than they should have, and everyone regrets it a bit. **It's not a huge deal because everyone does it, but you can seriously make a huge difference. You could be job-ready in 3 months easy if you practice every day and do this stuff. If you don't, I'd say you're probably looking at about 1--3 years of practice at least before anyone hires you. So without further ado, and in somewhat of a loose order of most to least important, my guide to learning how to program: Practice way more than you study/read. Don't just read how to do things, try them. You'll find that most of the time, there's complexities that aren't mentioned in the text, and you'll learn way more. Just because you think you know how to make a class in C++ doesn't mean you even know how to get the code to compile. This is by far the most important point. Don't learn a programming language, learn to program. Sure, you'll use a programming language and get proficient with it, but it's just a tool. If you pick up a book from start to finish on a language, you'll have learned so much stuff you are never going to use. If you insist on using a textbook, use one that emphasizes examples, or teaches you a programming practice like web development or machine learning. Most programming language focused textbooks aren't good as anything but a reference. Furthermore, it's really important not to be tied to any one language, especially as a beginner. There's a ton of great material out there that is taught in a certain language, but is universally important. You should be able to learn from examples that are written in a language you've never used. Try random stuff. Try new frameworks, packages, languages, ideas, etc. just to see how they work. Never made an app? Try it. Never used a front end JS framework? Try it. Buy an arduino. Get a book on object oriented design. Try using a NoSQL database for your next project, or try using a hosted database on AWS. Don't take days off. Taking time off takes you 'out of the zone.' You want these problems in the back of your mind at all times. Taking days off forces you to get back in the zone, and remember things. I come up with solutions to problems or cool ideas all the time, whether I'm driving home from work or at the gym. Make programming a hobby. Learn to enjoy it. This comes with straying away from reading textbooks, and practicing more. Make cool shit. Get experience. Don't say \"I heard that's a bad idea.\" Say \"that's a bad idea, this is what happened to me when I tried that.\" Nobody gives a shit about what you read in a textbook, I promise. Well at least not nearly as much as they care about what you experienced firsthand. Finish proects 100%. Don't say 'eh it's pretty much done.' and move on. Finish it. Publish it. Tell your parents and friends to use it. You'll never know how much work was actually left. The very end of a project can introduce massive holes in your code. Even moreso, once you've launched it, your users will find plenty more. Get it published and get people using it. Network. Internet has introduced me to a lot of cool programmers that have tons of knowledge to give me. Work in a team as much as possible, it will teach you how companies do things at scale. Version control, task management, code documentation, code readability, loose coupling of objects, etc. are all way more important when working on projects with others. Read tech blogs and info sites. Techcrunch, Techmeme, Medium,quora, Stackoverflow, Linkedin, and facebook are the ones I use the most. My newsfeeds on all of those are filled with the newest info on the tech industry. If people read this I'll edit it as I think of more.","title":"About"},{"location":"#thong-tin-cua-toi","text":"Name: Bui Hai Nam Date of birth: 25/09/1992 Skype: Connect I started my coding journey when I was 21 year old. As a Mobile programmer, working on both platform Android and IOS I have had numerous opportunity to use the programming languages C++ Java , Kotlin , Swift and Dart . No matter the route you take, it doesn\u2019t really matter as long as you practice a shit ton. Look through the popular languages and decide which one you want to start with. I\u2019d go with one of the following: Java, Swift, Kotlin, C, C++, Dart, PHP. It doesn\u2019t matter that much, and before you get a job doing it you\u2019ll probably want to have bounced around a little bit. Instead of giving step by step instructions, I'm going to give you a few pointers. Please pay attention to these, don't just be like \"yeah whatever.\" Following these tips will make you grow way faster, and if you actually follow these tips completely, you'll probably be the fastest learning programmer in history. **Nobody follows these rules until way later than they should have, and everyone regrets it a bit. **It's not a huge deal because everyone does it, but you can seriously make a huge difference. You could be job-ready in 3 months easy if you practice every day and do this stuff. If you don't, I'd say you're probably looking at about 1--3 years of practice at least before anyone hires you. So without further ado, and in somewhat of a loose order of most to least important, my guide to learning how to program: Practice way more than you study/read. Don't just read how to do things, try them. You'll find that most of the time, there's complexities that aren't mentioned in the text, and you'll learn way more. Just because you think you know how to make a class in C++ doesn't mean you even know how to get the code to compile. This is by far the most important point. Don't learn a programming language, learn to program. Sure, you'll use a programming language and get proficient with it, but it's just a tool. If you pick up a book from start to finish on a language, you'll have learned so much stuff you are never going to use. If you insist on using a textbook, use one that emphasizes examples, or teaches you a programming practice like web development or machine learning. Most programming language focused textbooks aren't good as anything but a reference. Furthermore, it's really important not to be tied to any one language, especially as a beginner. There's a ton of great material out there that is taught in a certain language, but is universally important. You should be able to learn from examples that are written in a language you've never used. Try random stuff. Try new frameworks, packages, languages, ideas, etc. just to see how they work. Never made an app? Try it. Never used a front end JS framework? Try it. Buy an arduino. Get a book on object oriented design. Try using a NoSQL database for your next project, or try using a hosted database on AWS. Don't take days off. Taking time off takes you 'out of the zone.' You want these problems in the back of your mind at all times. Taking days off forces you to get back in the zone, and remember things. I come up with solutions to problems or cool ideas all the time, whether I'm driving home from work or at the gym. Make programming a hobby. Learn to enjoy it. This comes with straying away from reading textbooks, and practicing more. Make cool shit. Get experience. Don't say \"I heard that's a bad idea.\" Say \"that's a bad idea, this is what happened to me when I tried that.\" Nobody gives a shit about what you read in a textbook, I promise. Well at least not nearly as much as they care about what you experienced firsthand. Finish proects 100%. Don't say 'eh it's pretty much done.' and move on. Finish it. Publish it. Tell your parents and friends to use it. You'll never know how much work was actually left. The very end of a project can introduce massive holes in your code. Even moreso, once you've launched it, your users will find plenty more. Get it published and get people using it. Network. Internet has introduced me to a lot of cool programmers that have tons of knowledge to give me. Work in a team as much as possible, it will teach you how companies do things at scale. Version control, task management, code documentation, code readability, loose coupling of objects, etc. are all way more important when working on projects with others. Read tech blogs and info sites. Techcrunch, Techmeme, Medium,quora, Stackoverflow, Linkedin, and facebook are the ones I use the most. My newsfeeds on all of those are filled with the newest info on the tech industry. If people read this I'll edit it as I think of more.","title":"Th\u00f4ng tin c\u1ee7a t\u00f4i"},{"location":"dart/dart_core/","text":"Trong b\u00e0i vi\u1ebft Tr\u01b0\u1edbc m\u00ecnh \u0111\u00e3 h\u01b0\u1edbng d\u1eabn c\u00e1c b\u1ea1n c\u00e0i \u0111\u1eb7t m\u00f4i tr\u01b0\u1eddng v\u00e0 setup c\u00e1c ki\u1ec3u d\u1ef1 \u00e1n Dart tr\u00ean Intellij IDEA. \u1ede b\u00e0i vi\u1ebft n\u00e0y m\u00ecnh s\u1ebd m\u00f4 t\u1ea3 chi ti\u1ebft v\u1ec1 c\u00fa ph\u00e1p c\u0169ng nh\u01b0 c\u00e1c t\u00ednh n\u0103ng c\u1ee7a Dart . N\u1ebfu c\u00e1c b\u1ea1n v\u1eabn ch\u01b0a s\u1eb5n s\u00e0ng c\u00e0i Dart SDK l\u00ean m\u00e1y t\u00ednh th\u00ec d\u00f9ng t\u1ea1m Dartpad \u0111\u1ec3 ch\u1ea1y th\u1eed code nh\u00e9 B\u1ea5m v\u00e0o n\u00fat \u0111\u1ec3 compile v\u00e0 run code. // Define a function. printInteger ( int aNumber ) { print ( 'The number is $ aNumber .' ); // Print to console. } // This is where the app starts executing. main () { var number = 42 ; // Declare and initialize a variable. printInteger ( number ); // Call a function. } Important concepts \u00b6 Khi b\u1ea1n code Dart language, h\u00e3y lu\u00f4n ghi nh\u1edb nh\u1eefng kh\u00e1i ni\u1ec7m sau trong \u0111\u1ea7u: M\u1ecdi th\u1ee9 b\u1ea1n g\u00e1n v\u00e0o c\u00e1c bi\u1ebfn (variable) \u0111\u1ec1u l\u00e0 m\u1ed9t object , v\u00e0 m\u1ed7i object l\u00e0 m\u1ed9t instance c\u1ee7a class . Ngay c\u1ea3 numbers, functions, v\u00e0 null c\u0169ng l\u00e0 c\u00e1c objects . T\u1ea5t c\u1ea3 objects \u0111\u01b0\u1ee3c k\u1ebf th\u1eeba t\u1eeb [Object][] class. M\u1eb7c d\u00f9 Dart l\u00e0 ng\u00f4n ng\u1eef strongly typed (ch\u00fa tr\u1ecdng v\u00e0o ki\u1ec3u d\u1eef li\u1ec7u), nh\u01b0ng type annotations l\u1ea1i l\u00e0 tu\u1ef3 ch\u1ecdn v\u00ec Dart c\u00f3 th\u1ec3 t\u1ef1 suy ra ki\u1ec3u d\u1ef1a v\u00e0o gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn. V\u00ed d\u1ee5 trong \u0111o\u1ea1n code tr\u00ean, number s\u1ebd mang ki\u1ec3u int . Khi b\u1ea1n kh\u00f4ng mong \u0111\u1ee3i m\u1ed9t ki\u1ec3u nh\u1ea5t \u0111\u1ecbnh n\u00e0o, h\u00e3y s\u1eed d\u1ee5ng ki\u1ec3u dynamic . Dart h\u1ed7 tr\u1ee3 generic types, v\u00ed d\u1ee5 nh\u01b0 List<int> (m\u1ed9t danh s\u00e1ch c\u00e1c s\u1ed1 integers) ho\u1eb7c List<dynamic> (m\u1ed9t danh s\u00e1ch c\u00e1c objects mang ki\u1ec3u b\u1ea5t k\u1ef3). Dart h\u1ed7 tr\u1ee3 top-level functions (v\u00ed d\u1ee5 nh\u01b0 main() ), c\u0169ng nh\u01b0 c\u00e1c functions g\u1eafn li\u1ec1n v\u1edbi m\u1ed9t class ho\u1eb7c object (t\u01b0\u01a1ng \u1ee9ng v\u1edbi static v\u00e0 instance methods ). B\u1ea1n c\u0169ng c\u00f3 th\u1ec3 t\u1ea1o ra functions b\u00ean trong functions (g\u1ecdi l\u00e0 nested ho\u1eb7c local functions ). T\u01b0\u01a1ng t\u1ef1, Dart h\u1ed7 tr\u1ee3 top-level variables , c\u0169ng nh\u01b0 c\u00e1c variables g\u1eafn li\u1ec1n v\u1edbi m\u1ed9t class ho\u1eb7c object (st\u01b0\u01a1ng \u1ee9ng v\u1edbi static v\u00e0 instance variables ). Instance variables \u0111\u00f4i l\u00fac \u0111\u01b0\u1ee3c bi\u1ebft t\u1edbi v\u1edbi t\u00ean g\u1ecdi fields ho\u1eb7c properties . Kh\u00f4ng gi\u1ed1ng v\u1edbi Java, Dart kh\u00f4ng c\u00f3 keywords public , protected , private . N\u1ebfu m\u1ed9t bi\u1ebfn (identifier) b\u1eaft \u0111\u1ea7u v\u1edbi d\u1ea5u underscore (_), N\u00f3 s\u1ebd l\u00e0 private trong library c\u1ee7a n\u00f3 (V\u00ed d\u1ee5 khi b\u1ea1n import th\u01b0 vi\u1ec7n \u0111\u00f3 v\u00e0o th\u00ec ch\u00fang s\u1ebd ko th\u1ec3 d\u00f9ng b\u00ean ngo\u00e0i th\u01b0 vi\u1ec7n). Chi ti\u1ebft h\u01a1n t\u1ea1i Libraries and visibility . Identifiers c\u00f3 th\u1ec3 b\u1eaft \u0111\u1ea7u b\u1eb1ng ch\u1eef c\u00e1i ho\u1eb7c d\u1ea5u g\u1ea1ch d\u01b0\u1edbi (_), theo sau l\u00e0 b\u1ea5t k\u1ef3 s\u1ef1 k\u1ebft h\u1ee3p n\u00e0o c\u1ee7a c\u00e1c k\u00fd t\u1ef1 \u0111\u00f3 c\u00f9ng v\u1edbi ch\u1eef s\u1ed1.. \u0110\u00f4i khi, vi\u1ec7c nh\u00ecn nh\u1eadn m\u1ed9t th\u1ee9 n\u00e0o \u0111\u00f3 trong Dart l\u00e0 m\u1ed9t expression hay m\u1ed9t statement c\u00f3 th\u1ec3 tr\u1edf n\u00ean quan tr\u1ecdng, do \u0111\u00f3 vi\u1ec7c s\u1eed d\u1ee5ng 2 t\u1eeb ng\u1eef \u0111\u1ec3 m\u00f4 t\u1ea3 s\u1ebd r\u1ea5t h\u1eefu \u00edch. Dart tools c\u00f3 th\u1ec3 th\u00f4ng b\u00e1o 2 lo\u1ea1i v\u1ea5n \u0111\u1ec1 khi th\u1ef1c thi: warnings v\u00e0 errors . Warnings ch\u1ec9 \u0111\u01a1n gi\u1ea3n ch\u1ec9 ra nh\u1eefng \u0111o\u1ea1n code c\u00f3 th\u1ec3 kh\u00f4ng ch\u1ea1y \u0111\u00fang nh\u01b0ng ch\u00fang kh\u00f4ng ng\u0103n ch\u01b0\u01a1ng tr\u00ecnh c\u1ee7a b\u1ea1n th\u1ef1c thi. Errors c\u00f3 th\u1ec3 l\u00e0 l\u1ed7i x\u1ea3y ra l\u00fac compile-time ho\u1eb7c run-time . Compile-time hi\u1ec3n nhi\u00ean s\u1ebd khi\u1ebfn code b\u1ea1n kh\u00f4ng ch\u1ea1y \u0111\u01b0\u1ee3c; K\u1ebft qu\u1ea3 c\u1ee7a run-time error l\u1ea1i l\u00e0 nh\u1eefng exception \u0111\u01b0\u1ee3c throw ra khi ch\u1ea1y. Variables \u00b6 \u0110\u1ec3 khai b\u00e1o m\u1ed9t bi\u1ebfn name tham chi\u1ebfu t\u1edbi String object v\u1edbi gi\u00e1 tr\u1ecb \u201cBob\u201d, ta c\u00f3 th\u1ec3 d\u00f9ng 1 trong 3 c\u00e1ch sau: var name = 'Bob' ; dynamic name = 'Bob' ; String name = 'Bob' ; Default value \u00b6 Gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o c\u1ee7a m\u1ed9t bi\u1ebfn b\u1ea5t k\u1ef3 \u0111\u1ec1u l\u00e0 null . int lineCount ; assert ( lineCount == null ); Final and const \u00b6 N\u1ebfu b\u1ea1n kh\u00f4ng mu\u1ed1n gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn b\u1ecb thay \u0111\u1ed5i, h\u00e3y s\u1eed d\u1ee5ng final ho\u1eb7c const thay v\u00ec d\u00f9ng var/type ; Vi\u1ec7c hi\u1ec3u r\u00f5 nguy\u00ean l\u00fd ho\u1ea1t \u0111\u1ed9ng final v\u1edbi const kh\u00f4ng h\u1ec1 \u0111\u01a1n gi\u1ea3n m\u1ed9t ch\u00fat n\u00e0o final name = 'Bob' ; // Without a type annotation // name = 'Alice'; // Uncommenting this causes an error: Error: Setter not found: 'name'. final String nickname = 'Bobby' ; // With a type annotation const bar = 1000000 ; // Unit of pressure (dynes/cm2) const double atm = 1.01325 * bar ; // Standard atmosphere final ngh\u0129a l\u00e0 single-assignment M\u1ed7i m\u1ed9t bi\u1ebfn final ho\u1eb7c m\u1ed9t thu\u1ed9c t\u00ednh ph\u1ea3i c\u00f3 m\u1ed9t kh\u1edfi t\u1ea1o. V\u00e0 m\u1ed9t khi b\u1ea1n \u0111\u00e3 g\u00e1n gi\u00e1 tr\u1ecb cho bi\u1ebfn \u0111\u00f3 th\u00ec, b\u1ea1n s\u1ebd ko th\u1ec3 g\u00e1n l\u1ea1i cho n\u00f3 1 gi\u00e1 tr\u1ecb kh\u00e1c. final List finalList = new List (); finalList . addAll ([ 'one' , 'two' , 'three' ]); // Fail: can not assign new value/reference to final finalList finalList = new List (); // But you can change the content of the list finalList . clear (); finalList . forEach (( f ) => print ( f )); //empty const ngh\u0129a l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng b\u1ea5t bi\u1ebfn kh\u00f4ng \u0111\u1ed5i \u1edf th\u1eddi \u0111i\u1ec3m compile code. M\u1ed9t khi b\u1ea1n g\u00e1n gi\u00e1 tr\u1ecb t\u1edbi m\u1ed9t const object th\u00ec b\u1ea1n kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb \u0111\u00f3. V\u00e0 gi\u00e1 tr\u1ecb \u0111\u00f3 ph\u1ea3i \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o v\u00e0o th\u1eddi \u0111i\u1ec3m compile code, ch\u1ee9 ko ph\u1ea3i \u0111\u1ee3i t\u1edbi th\u1eddi \u0111i\u1ec3m run code. const List constList = const [ 'one' , 'two' , 'three' ]; constList . add ( 'four' ); // Can not add to immutable object constList = new List (); // Can not assign new value constList . clear (); // Can not change the content constList . forEach (( f ) => print ( \"const $ f \" )); N\u1ebfu const variable \u1edf class level, h\u00e3y s\u1eed d\u1ee5ng static const . Ngo\u00e0i ra, const kh\u00f4ng ch\u1ec9 \u0111\u01b0\u1ee3c d\u00f9ng trong \u0111\u1ecbnh ngh\u0129a h\u1eb1ng bi\u1ebfn (constant variables), m\u00e0 n\u00f3 c\u00f2n c\u00f3 th\u1ec3 t\u1ea1o ra h\u1eb1ng gi\u00e1 tr\u1ecb (constant values). // Note: [] t\u1ea1o ra m\u1ed9t list r\u1ed7ng. // const [] t\u1ea1o ra m\u1ed9t list r\u1ed7ng v\u00e0 kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i (EIL: empty, immutable list). var foo = const []; // foo \u0111ang l\u00e0 m\u1ed9t EIL. final bar = const []; // bar s\u1ebd lu\u00f4n lu\u00f4n l\u00e0 EIL. const baz = const []; // baz l\u00e0 m\u1ed9t compile-time constant EIL. // N\u1ebfu b\u1ea1n c\u1ed1 t\u00ecnh s\u1eeda gi\u00e1 tr\u1ecb c\u1ee7a const variable list s\u1ebd c\u00f3 l\u1ed7i // foo[0] = 1; // Cannot modify an unmodifiable list // B\u1ea1n c\u00f3 th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a m\u1ed9t non-final, non-const variable // Ngay c\u1ea3 khi n\u00f3 c\u00f3 gi\u00e1 tr\u1ecb = const value. foo = [ 1 , 2 ]; // B\u1ea1n kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a 2 bi\u1ebfn sau. // bar = []; // Unhandled exception. // baz = []; // Unhandled exception. Built-in types \u00b6 Dart h\u1ed7 tr\u1ee3 c\u00e1c ki\u1ec3u sau: numbers strings booleans lists (hay c\u00f2n g\u1ecdi l\u00e0 arrays) maps runes (bi\u1ec3u di\u1ec5n Unicode characters theo d\u1ea1ng chu\u1ed7i) symbols M\u00ecnh s\u1ebd ch\u1ec9 \u0111\u1ec1 c\u1eadp t\u1edbi c\u00e1c ki\u1ec3u m\u00e0 m\u00ecnh th\u00edch =)) Maps \u00b6 \u0110\u1ec3 kh\u1edfi t\u1ea1o m\u1ed9t Map object, ta c\u00f3 th\u1ec3 d\u00f9ng c\u00e1c c\u00e1ch sau: var gifts = { // Key: Value 'first' : 'partridge' , 'second' : 'turtledoves' , 'fifth' : 'golden rings' }; var gifts = Map (); gifts [ 'first' ] = 'partridge' ; gifts [ 'second' ] = 'turtledoves' ; gifts [ 'fifth' ] = 'golden rings' ; S\u1eed d\u1ee5ng .length s\u1ebd tr\u1ea3 v\u1ec1 s\u1ed1 l\u01b0\u1ee3ng c\u1eb7p key-value trong map: var gifts = { 'first' : 'partridge' }; gifts [ 'fourth' ] = 'calling birds' ; assert ( gifts . length == 2 ); Ch\u00fang ta c\u0169ng s\u1ebd g\u1eb7p l\u1ed7i n\u1ebfu c\u1ed1 t\u00ecnh thay \u0111\u1ed5i constant Map (constant values) final constantMap = const { 2 : 'helium' , 10 : 'neon' , 18 : 'argon' , }; // constantMap[2] = 'Helium'; // Uncommenting this causes an error: Cannot set value in unmodifiable Map. Runes \u00b6 Trong Dart, runes l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p m\u00e3 UTF-32 c\u1ee7a string. Unicode \u0111\u1ecbnh ngh\u0129a m\u1ed9t gi\u00e1 tr\u1ecb s\u1ed1 duy nh\u1ea5t cho m\u1ed7i k\u00fd t\u1ef1 g\u1ed3m ch\u1eef c\u00e1i, s\u1ed1 v\u00e0 k\u00fd hi\u1ec7u s\u1eed d\u1ee5ng trong h\u1ec7 th\u1ed1ng ch\u1eef vi\u1ebft tr\u00ean th\u1ebf gi\u1edbi. V\u00ec m\u1ed9t Dart string l\u00e0 s\u1ef1 n\u1ed1i ti\u1ebfp tu\u1ea7n t\u1ef1 c\u1ee7a c\u00e1c UTF-16 code units, bi\u1ec3u di\u1ec5n gi\u00e1 tr\u1ecb 32-bit Unicode trong m\u1ed9t string \u0111\u00f2i h\u1ecfi c\u00e1c c\u00fa ph\u00e1p \u0111\u1eb7c bi\u1ec7t. C\u00e1ch th\u00f4ng d\u1ee5ng \u0111\u1ec3 bi\u1ec3u di\u1ec5n m\u1ed9t m\u00e3 Unicode l\u00e0 \\uXXXX , \u1edf \u0111\u00e2y XXXX l\u00e0 m\u1ed9t chu\u1ed7i g\u1ed3m 4-ch\u1eef s\u1ed1 hexidecimal (h\u1ec7 th\u1eadp l\u1ee5c ph\u00e2n, c\u01a1 s\u1ed1 16). V\u00ed d\u1ee5, K\u00ed t\u1ef1 tr\u00e1i tim (\u2665) l\u00e0 \\u2665 . \u0110\u1ec3 bi\u1ec3u di\u1ec5n nhi\u1ec1u ho\u1eb7c \u00edt h\u01a1n 4 hex digits, ta \u0111\u1eb7t gi\u00e1 tr\u1ecb c\u1ee7a ch\u00fang trong d\u1ea5u ngo\u1eb7c nh\u1ecdn. V\u00ed d\u1ee5 v\u1edbi emoji ( ) s\u1ebd bi\u1ec3u di\u1ec5n l\u00e0 \\u{1f600} . String class c\u00f3 c\u00e1c thu\u1ed9c t\u00ednh m\u00e0 b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 l\u1ea5y th\u00f4ng v\u1ec1 rune. codeUnitAt v\u00e0 codeUnit properties tr\u1ea3 v\u1ec1 m\u00e3 16-bit. Ho\u1eb7c d\u00f9ng runes property \u0111\u1ec3 l\u1ea5y runes of a string . V\u00ed d\u1ee5 b\u00ean d\u01b0\u1edbi mi\u00eau t\u1ea3 m\u1ed1i quan h\u1ec7 gi\u1eefa runes, 16-bit code units, v\u00e0 32-bit code points. var clapping = ' \\u{1f44f} ' ; print ( clapping ); print ( clapping . codeUnits ); print ( clapping . runes . toList ()); Runes input = new Runes ( ' \\u2665 \\u{1f605} \\u{1f60e} \\u{1f47b} \\u{1f596} \\u{1f44d} ' ); print ( new String . fromCharCodes ( input )); S\u1ebd in ra \ud83d\udc4f [55357, 56399] [128079] \u2665 \ud83d\ude05 \ud83d\ude0e \ud83d\udc7b \ud83d\udd96 \ud83d\udc4d Functions \u00b6 V\u00ec Dart l\u00e0 true object-oriented language n\u00ean function c\u0169ng l\u00e0 object. B\u1ea1n c\u00f3 th\u1ec3 khai b\u00e1o 1 function theo c\u00e1c ki\u1ec3u b\u00ean d\u01b0\u1edbi: bool isNoble ( int atomicNumber ) { return _nobleGases [ atomicNumber ] != null ; } isNoble ( atomicNumber ) { return _nobleGases [ atomicNumber ] != null ; } bool isNoble ( int atomicNumber ) => _nobleGases [ atomicNumber ] != null ; Optional parameters \u00b6 Optional named parameters: S\u1eed d\u1ee5ng d\u1ea5u ngo\u1eb7c nh\u1ecdn {param1, param2, \u2026} Optional positional parameters: S\u1eed d\u1ee5ng d\u1ea5u ngo\u1eb7c vu\u00f4ng [param1, param2, \u2026] Default parameter values: S\u1eed d\u1ee5ng d\u1ea5u = \u0111\u1ec3 khai b\u00e1o gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho optional parameter String drink ({ String drinks = 'whisky' }) { return 'I am drink $ drinks ' ; } String say ( String from , String msg , [ String device ]) { var result = ' $ from says $ msg ' ; if ( device != null ) { result = ' $ result with a $ device ' ; } return result ; } print ( drink ()); print ( drink ( drinks: 'vodka' )); print ( say ( 'Bob' , 'Howdy' )); print ( say ( 'Bob' , 'Howdy' , 'smoke signal' )); s\u1ebd cho ra k\u1ebft qu\u1ea3: I am drink whisky I am drink vodka Bob says Howdy Bob says Howdy with a smoke signal The main() function \u00b6 T\u1ea5t c\u1ea3 c\u00e1c \u1ee9ng d\u1ee5ng \u0111\u1ec1u c\u00f3 m\u1ed9t h\u00e0m top-level main() . main() tr\u1ea3 v\u1ec3 ki\u1ec3u void v\u00e0 c\u00f3 tham s\u1ed1 tu\u1ef3 ch\u1ecdn l\u00e0 List<String> . void main ( List < String > arguments ) { print ( arguments ); assert ( arguments . length == 2 ); assert ( int . parse ( arguments [ 0 ]) == 1 ); assert ( arguments [ 1 ] == 'test' ); } Ch\u00fa \u00fd khi compile code n\u1ebfu mu\u1ed1n c\u00e1c c\u00e2u l\u1ec7nh assert c\u00f3 hi\u1ec7u l\u1ef1c th\u00ec b\u1ea1n nh\u1edb th\u00eam flag sau v\u00e0o nh\u00e9: $ dart --enable-asserts bin/main.dart 1 test Functions as first-class objects \u00b6 Dart cho ph\u00e9p truy\u1ec1n m\u1ed9t function v\u1edbi t\u01b0 c\u00e1ch l\u00e0 bi\u1ebfn c\u1ee7a m\u1ed9t function kh\u00e1c, v\u00e0 c\u0169ng c\u00f3 th\u1ec3 g\u00e1n m\u1ed9t function v\u00e0o m\u1ed9t bi\u1ebfn. void printElement ( int element ) { print ( element ); } var list = [ 1 , 2 , 3 ]; // Pass printElement as a parameter. list . forEach ( printElement ); var loudify = ( msg ) => '!!! ${ msg . toUpperCase () } !!!' ; assert ( loudify ( 'hello' ) == '!!! HELLO !!!' ); Anonymous functions \u00b6 B\u1ea1n c\u00f3 th\u1ec3 t\u1ea1o ra c\u00e1c h\u00e0m v\u00f4 danh ( anonymous function ) hay \u0111\u00f4i l\u00fac g\u1ecdi l\u00e0 lambda ho\u1eb7c closure . ([[ Type ] param1 [, \u2026 ]]) { codeBlock ; }; Closures \u00b6 Ch\u1ec9 c\u1ea7n ch\u00fa \u00fd ki\u1ec3u tr\u1ea3 v\u1ec1 c\u1ee7a wrap function l\u00e0 Function . /// Returns a function that adds [addBy] to the /// function's argument. Function makeAdder ( num addBy ) { return ( num i ) => addBy + i ; } // Create a function that adds 2. var add2 = makeAdder ( 2 ); // Create a function that adds 4. var add4 = makeAdder ( 4 ); assert ( add2 ( 3 ) == 5 ); assert ( add4 ( 3 ) == 7 ); Operators \u00b6 Arithmetic operators \u00b6 Th\u1ea5y c\u00f3 c\u00e1i to\u00e1n t\u1eed n\u00e0y l\u1ea1 l\u1ea1 assert ( 5 / 2 == 2.5 ); // Ph\u00e9p chia tr\u1ea3 v\u1ec1 ki\u1ec3u double assert ( 5 ~/ 2 == 2 ); // Ph\u00e9p chia tr\u1ea3 v\u1ec1 ki\u1ec3u int Type test operators \u00b6 M\u1ed9t to\u00e1n t\u1eed m\u00ecnh ngh\u0129 l\u00e0 r\u1ea5t m\u1edbi, d\u00f9ng \u0111\u1ec3 check ki\u1ec3u c\u1ee7a bi\u1ebfn l\u00fac runtime. Ph\u00e9p to\u00e1n \u00dd ngh\u0129a as \u00c9p ki\u1ec3u is True n\u1ebfu object c\u00f3 c\u00f9ng ki\u1ec3u \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh is! True n\u1ebfu object kh\u00f4ng c\u00f9ng ki\u1ec3u \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh M\u1ecdi th\u1ee9 trong dart \u0111\u1ec1u l\u00e0 Object String s = 'String is Object' ; assert ( s is Object == true ); Assignment operators \u00b6 // Assign value to a a = value ; // Assign value to b if b is null; otherwise, b stays the same b ??= value ; Ta d\u00f9ng to\u00e1n t\u1eed ??= khi mu\u1ed1n g\u00e1n gi\u00e1 tr\u1ecb cho bi\u1ebfn ch\u1ec9 khi bi\u1ebfn \u0111\u00f3 \u0111ang l\u00e0 null . Logical operators \u00b6 if ( ! done && ( col == 0 || col == 3 )) { // ...Do something... } Conditional expressions \u00b6 condition ? expr1 : expr2 N\u1ebfu condition l\u00e0 true, th\u1ef1c hi\u1ec7n expr1 (v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a n\u00f3); ng\u01b0\u1ee3c l\u1ea1i, th\u1ef1c hi\u1ec7n v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a expr2 . expr1 ?? expr2 N\u1ebfu expr1 kh\u00e1c null , tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a ch\u00ednh n\u00f3; ng\u01b0\u1ee3c l\u1ea1i, tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a expr2 . Cascade notation (..) \u00b6 Cascades d\u1ecbch n\u00f4m na l\u00e0 th\u00e1c n\u01b0\u1edbc =)) c\u00fa ph\u00e1p l\u00e0 d\u1ea5u .. , cho ph\u00e9p anh em th\u1ef1c hi\u1ec7n nhi\u1ec1u thao t\u00e1c tu\u1ea7n t\u1ef1 tr\u00ean 1 object. Nh\u00ecn th\u00ec gi\u1ed1ng v\u1edbi thu\u1eadt ng\u1eef chain method ( Fluent_interface ) nh\u01b0ng c\u01a1 ch\u1ebf c\u00f3 \u0111\u00f4i ph\u1ea7n kh\u00e1c bi\u1ec7t. querySelector ( '#confirm' ) // Get an object. .. text = 'Confirm' // Use its members. .. classes . add ( 'important' ) .. onClick . listen (( e ) => window . alert ( 'Confirmed!' )); Trong \u0111o\u1ea1n code tr\u00ean, th\u00ec d\u00f2ng \u0111\u1ea7u g\u1ecdi t\u1edbi method querySelector() , tr\u1ea3 v\u1ec1 m\u1ed9t selector object. C\u00e1c d\u00f2ng ti\u1ebfp theo th\u1ef1c hi\u1ec7n c\u00e1c thao t\u00e1c v\u1edbi selector object, ignore b\u1ea5t k\u1ef3 k\u1ebft qu\u1ea3 n\u00e0o m\u00e0 c\u00e1c method \u0111\u00f3 tr\u1ea3 v\u1ec1. Ch\u00fang ta c\u00f3 th\u1ec3 vi\u1ebft l\u1ea1i nh\u01b0 sau: var button = querySelector ( '#confirm' ); button . text = 'Confirm' ; button . classes . add ( 'important' ); button . onClick . listen (( e ) => window . alert ( 'Confirmed!' )); \u0110\u1eb7c bi\u1ec7t l\u01b0u \u00fd l\u00e0 method \u0111\u1ea7u ti\u00ean ho\u1eb7c function kh\u1edfi t\u1ea1o cascade ph\u1ea3i tr\u1ea3 v\u1ec1 m\u1ed9t object th\u1ef1c s\u1ef1. V\u00ed d\u1ee5 \u0111o\u1ea1n code sau s\u1ebd ko th\u1ef1c hi\u1ec7n \u0111c: var sb = StringBuffer (); sb . write ( 'foo' ) .. write ( 'bar' ); // Error: method 'write' isn't defined for 'void'. \u1ede d\u00f2ng tr\u00ean sb.write('foo') ch\u00ednh l\u00e0 gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o, tuy nhi\u00ean sb.write('foo') = void , do \u0111\u00f3 b\u1ea1n kh\u00f4ng th\u1ec3 b\u1eaft \u0111\u1ea7u m\u1ed9t cascade tr\u00ean void . Other operators \u00b6 H\u1ecdc th\u00eam m\u1ed9t to\u00e1n t\u1eed m\u1edbi: ?. , t\u01b0\u01a1ng t\u1ef1 nh\u01b0 . d\u00f9ng \u0111\u1ec3 truy xu\u1ea5t c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a m\u1ed9t object, nh\u01b0ng an to\u00e0n h\u01a1n ch\u00fat. V\u00ed d\u1ee5: foo?.bar s\u1ebd select ra thu\u1ed9c t\u00ednh bar t\u1eeb foo , v\u00e0 n\u1ebfu foo = null th\u00ec k\u1ebft qu\u1ea3 c\u1ee7a foo?.bar = null . Control flow statements \u00b6 Dart s\u1eed d\u1ee5ng c\u00e1c c\u00e2u l\u1ec7nh sau \u0111\u1ec3 control lu\u1ed3ng x\u1eed l\u00fd: \u0110i\u1ec1u ki\u1ec7n if v\u00e0 else V\u00f2ng l\u1eb7p for V\u00f2ng l\u1eb7p while v\u00e0 do-while C\u00e2u l\u1ec7nh break v\u00e0 continue C\u00e2u l\u1ec7nh switch v\u00e0 case C\u00e2u l\u1ec7nh assert If and else \u00b6 Bi\u1ec3u th\u1ee9c trong \u0111i\u1ec1u ki\u1ec7n if b\u1eaft bu\u1ed9c ph\u1ea3i l\u00e0 ki\u1ec3u bool . \u0110o\u1ea1n code sau s\u1ebd kh\u00f4ng th\u1ec3 ch\u1ea1y, do 1 c\u00f3 type l\u00e0 int . if ( 1 ) { print ( 'We can not execute this code!' ); } For loops \u00b6 Closure b\u00ean trong Dart's for loops c\u00f3 th\u1ec3 capture \u0111\u01b0\u1ee3c value v\u00e0 index \u1edf th\u1eddi \u0111i\u1ec3m compile-time, tr\u00e1nh \u0111\u01b0\u1ee3c c\u00e1c l\u1ed7i c\u01a1 b\u1ea3n hay x\u1ea3y ra trong Javascript. H\u00e3y th\u1eed so s\u00e1nh 2 \u0111o\u1ea1n code v\u00e0 k\u1ebft qu\u1ea3 output ra gi\u1eefa 2 ng\u00f4n ng\u1eef xem sao :hugs: Javascript var callbacks = []; for ( var i = 0 ; i < 2 ; i ++ ) { callbacks . push (() => console . log ( i )); } callbacks . forEach (( c ) => c ()); terminal 2 2 Dart var callbacks = []; for ( var i = 0 ; i < 2 ; i ++ ) { callbacks . add (() => print ( i )); } callbacks . forEach (( c ) => c ()); 0 1 Dart support l\u1ec7nh for-in v\u00e0 forEach var collection = [ 0 , 1 , 2 ]; for ( var x in collection ) { print ( x ); // 0 1 2 } candidates . forEach (( candidate ) => candidate . interview ()); Assert \u00b6 Dart h\u1ed7 tr\u1ee3 method assert , d\u00f9ng \u0111\u1ec3 ng\u0103n ch\u01b0\u01a1ng tr\u00ecnh ti\u1ebfp t\u1ee5c th\u1ef1c thi n\u1ebfu c\u00f3 b\u1ea5t k\u1ef3 \u0111i\u1ec1u ki\u1ec7n n\u00e0o b\u00ean trong n\u00f3 l\u00e0 false . // Make sure the variable has a non-null value. assert ( text != null ); // Make sure the value is less than 100. assert ( number < 100 ); // Make sure this is an https URL. assert ( urlString . startsWith ( 'https' )); \u0110\u1ec3 thay th\u1ebf n\u1ed9i dung hi\u1ec3n th\u1ecb khi assert th\u1ea5t b\u1ea1i, ch\u00fang ta th\u00eam message v\u00e0o tham s\u1ed1 th\u1ee9 hai. var urlString = 'www.google.com' ; assert ( urlString . startsWith ( 'https' ), 'URL ( $ urlString ) should start with \"https\".' ); Failed assertion: line 7 pos 8: 'urlString.startsWith('https')': URL (www.google.com) should start with \"https\". Exceptions \u00b6 Throw \u00b6 Th\u00f4ng th\u01b0\u1eddng ch\u00fang ta s\u1ebd raise m\u1ed9t exception nh\u01b0 sau throw new Exception ( \"message\" ); throw UnimplementedError (); throw FormatException ( 'Expected at least 1 section' ); \u0111\u00f4i khi c\u00f3 th\u1ec3 l\u00e0 1 objects throw 'Out of llamas!' ; \u0110\u1ec3 n\u00e2ng cao ch\u1ea5t l\u01b0\u1ee3ng, c\u0169ng nh\u01b0 \u00fd ngh\u0129a c\u1ee7a code th\u00ec b\u1ea1n n\u00ean nghi\u00ean c\u1ee9u implement exception l\u00e0 subtype c\u1ee7a c\u00e1c method/class t\u1eeb Error v\u00e0 Exception Catch \u00b6 try { breedMoreLlamas (); } on OutOfLlamasException { // A specific exception buyMoreLlamas (); } on Exception catch ( e ) { // Anything else that is an exception print ( 'Unknown exception: $ e ' ); } catch ( e ) { // No specified type, handles all print ( 'Something really unknown: $ e ' ); } B\u1ea1n c\u00f3 th\u1ec3 ch\u1ec9 \u0111\u1ecbnh 1 ho\u1eb7c 2 parameters cho method catch() . try { // \u00b7\u00b7\u00b7 } on Exception catch ( e ) { print ( 'Exception details: \\n $ e ' ); } catch ( e , s ) { print ( 'Exception details: \\n $ e ' ); print ( 'Stack trace: \\n $ s ' ); } Finally \u00b6 Ki\u1ebfn th\u1ee9c v\u00f4 c\u00f9ng c\u0103n b\u1ea3n Code block \u0111\u1eb7t trong finally s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi d\u00f9 c\u00f3 hay kh\u00f4ng c\u00f3 ngo\u1ea1i l\u1ec7. try { breedMoreLlamas (); } finally { // Always clean up, even if an exception is thrown. cleanLlamaStalls (); } try { breedMoreLlamas (); } catch ( e ) { print ( 'Error: $ e ' ); // Handle the exception first. } finally { cleanLlamaStalls (); // Then clean up. } Classes \u00b6 Dart l\u00e0 ng\u00f4n ng\u1eef h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng v\u1edbi class (m\u1ecdi object \u0111\u1ec1u l\u00e0 m\u1ed9t instance c\u1ee7a class) v\u00e0 mixin-based inheritance (m\u1eb7c d\u00f9 m\u1ed9t class ch\u1ec9 c\u00f3 duy nh\u1ea5t m\u1ed9t superclass, nh\u01b0ng m\u00e0 class body (c\u00e1c variable, method) c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u1ea1i nh\u01b0 multiple class hierarchies (\u0111a th\u1eeba k\u1ebf)). // Create a Point using Point(). var p1 = new Point ( 2 , 2 ); // Create a Point using Point.fromJson(). var p2 = new Point . fromJson ( jsonData ); T\u1eeb Dart 2 b\u1ea1n c\u00f3 th\u1ec3 b\u1ecf t\u1eeb kh\u00f3a new . V\u00ed d\u1ee5: var p1 = Point(2, 2) . Using class members \u00b6 S\u1eed d\u1ee5ng ?. thay cho . khi truy xu\u1ea5t members c\u1ee7a class gi\u00fap ta tr\u00e1nh \u0111\u01b0\u1ee3c c\u00e1c exception khi object c\u00f3 gi\u00e1 tr\u1ecb null: // If p is non-null, set its y value to 4. p ? . y = 4 ; Constructors \u00b6 class Point { num x , y ; Point ( num x , num y ) { // There's a better way to do this, stay tuned. this . x = x ; this . y = y ; } } this keyword \u0111\u1ec3 ch\u1ec9 current instance. Dart c\u00f2n h\u1ed7 tr\u1ee3 pattern constructor class Point { num x , y ; // Syntactic sugar for setting x and y // before the constructor body runs. Point ( this . x , this . y ); } Default constructors \u00b6 N\u1ebfu b\u1ea1n ko khai b\u00e1o constructor c\u0169ng m\u00e9o sao c\u1ea3 , m\u1eb7c \u0111\u1ecbnh Dart s\u1ebd t\u1ea1o ra constructor kh\u00f4ng tham s\u1ed1 cho class \u0111\u00f3. Constructors aren\u2019t inherited \u00b6 M\u1ed9t \u0111i\u1ec1u \u0111\u00e1ng l\u01b0u \u00fd l\u00e0 trong Dart th\u00ec subclasses kh\u00f4ng k\u1ebf th\u1eeba constructor t\u1eeb superclass Named constructors \u00b6 S\u1eed d\u1ee5ng named constructor \u0111\u1ec3 c\u00f3 th\u1ec3 implement nhi\u1ec1u constructors cho m\u1ed9t class: class Point { num x , y ; Point ( this . x , this . y ); // Named constructor Point . origin () { x = 0 ; y = 0 ; } } Invoking a non-default superclass constructor \u00b6 M\u1eb7c \u0111\u1ecbnh th\u00ec constructor c\u1ee7a subclass s\u1ebd g\u1ecdi t\u1edbi unnamed, no-argument constructor c\u1ee7a superclass. Constructor c\u1ee7a superclass s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi \u1edf \u0111i\u1ec3m b\u1eaft \u0111\u1ea7u c\u1ee7a constructor body. N\u1ebfu c\u00f3 m\u1ed9t initializer list \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng, n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi tr\u01b0\u1edbc khi g\u1ecdi t\u1edbi superclass. V\u1ec1 c\u01a1 b\u1ea3n th\u00ec th\u1ee9 t\u1ef1 th\u1ef1c thi constructor nh\u01b0 sau: initializer list superclass's no-arg constructor main class's no-arg constructor T\u01b0\u01a1ng t\u1ef1 ch\u00fang ta h\u00e3y th\u1eed xem c\u00e1c case sau: Superclass kh\u00f4ng khai b\u00e1o constructor: class Person { String firstName ; } class Employee extends Person { Employee ( Map data ) { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } in Employee Th\u1ebf l\u00e0 subclass kh\u00f4ng g\u1ecdi c\u00e1i default constructor, code v\u1eabn ch\u1ea1y v\u00f4 t\u01b0 Superclass khai b\u00e1o unnamed, no-agrument constructor, v\u00e0 subclass g\u1ecdi constructor \u0111\u00f3 (tr\u01b0\u1eddng h\u1ee3p kh\u00f4ng g\u1ecdi c\u0169ng th\u1ebf) class Person { String firstName ; Person () { print ( 'in Person' ); } } class Employee extends Person { Employee ( Map data ) : super () { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } in Person in Employee Ok, m\u1eb7c cho tham s\u1ed1 gi\u1eefa constructor c\u1ee7a super v\u00e0 subclass kh\u00e1c nhau, code v\u1eabn \u1ed5n Superclass khai b\u00e1o unamed constructor (constructor n\u00e0y c\u00f3 argument) v\u00e0 subclass kh\u00f4ng g\u1ecdi constructor \u0111\u00f3: class Person { String firstName ; Person ( num x ) { print ( 'in Person' ); } } class Employee extends Person { Employee ( Map data ) { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } Error: The unnamed constructor in 'Person' requires arguments. NG, ko g\u1ecdi ko \u0111\u01b0\u1ee3c Superclass khai b\u00e1o named constructor v\u00e0 subclass kh\u00f4ng g\u1ecdi constructor \u0111\u00f3 class Person { String firstName ; Person . fromJson () { print ( 'in Person' ); } } class Employee extends Person { Employee ( Map data ) { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } Error: 'Person' doesn't have an unnamed constructor. Tr\u01b0\u1eddng h\u1ee3p n\u00e0y cho ch\u00fang ta th\u1ea5y ngay m\u1ed9t \u0111i\u1ec1u l\u00e0 n\u1ebfu superclass c\u00f3 m\u1ed9t named constructor, \u0111\u1ed3ng ngh\u0129a v\u1edbi vi\u1ec7c c\u00e1c subclass c\u0169ng ph\u1ea3i t\u1ea1o ra constructor v\u00e0 g\u1ecdi l\u1ea1i construcor c\u1ee7a superclass \u0111\u00f3. Th\u1eed s\u1eeda l\u1ea1i code c\u1ee7a Employee , ta c\u00f3 k\u1ebft qu\u1ea3 sau: class Employee extends Person { Employee ( Map data ) : super . fromJson () { print ( 'in Employee' ); } } in Person in Employee Superclass khai b\u00e1o c\u1ea3 named & unnamed constructor th\u00ec sao ??? class Person { String firstName ; Person () { print ( 'in unnamed Person' ); } Person . fromJson ( Map data ) { print ( 'in fromJson Person' ); } } class Employee extends Person { Employee ( Map data ) : super () { // :super.fromJson(data) print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } in unnamed Person // in fromJson Person in Employee R\u00f5 r\u00e0ng \u1edf tr\u01b0\u1eddng h\u1ee3p superclass c\u00f3 m\u1ed9t unnamed, no-argument constructor th\u00ec g\u1ecdi hay ko g\u1ecdi c\u0169ng ko th\u00e0nh v\u1ea5n \u0111\u1ec1. V\u00e0 g\u1ecdi c\u00e1i n\u00e0o c\u0169ng \u0111c. Ch\u00fang ta c\u0169ng c\u00f3 th\u1ec3 truy\u1ec1n tham s\u1ed1 v\u00e0o superclass constructor th\u00f4ng qua k\u1ebft qu\u1ea3 t\u00ednh to\u00e1n c\u1ee7a m\u1ed9t method , tuy nhi\u00ean tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n n\u00e0y (hay n\u1ed9i t\u1ea1i trong method ) kh\u00f4ng \u0111\u01b0\u1ee3c access t\u1edbi this class Employee extends Person { Employee () : super . fromJson ( getDefaultData ()); // \u00b7\u00b7\u00b7 } Initializer list \u00b6 // Initializer list sets instance variables before // the constructor body runs. Point . fromJson ( Map < String , num > json ) : x = json [ 'x' ], y = json [ 'y' ] { print ( 'In Point.fromJson(): ( $ x , $ y )' ); } L\u01b0u \u00fd: Khi kh\u1edfi t\u1ea1o (\u1ede code tr\u00ean th\u00ec initializer l\u00e0 code block sau d\u1ea5u :) kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p truy c\u1eadp t\u1edbi bi\u1ebfn this . Trong qu\u00e1 tr\u00ecnh development, b\u1ea1n c\u00f3 th\u1ec3 validate inputs b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng assert trong initializer list. Point . withAssert ( this . x , this . y ) : assert ( x >= 0 ) { print ( 'In Point.withAssert(): ( $ x , $ y )' ); } Redirecting constructors \u00b6 \u0110\u00f4i l\u00fac nhi\u1ec7m v\u1ee5 duy nh\u1ea5t c\u1ee7a m\u1ed9t constructor ch\u1ec9 l\u00e0 chuy\u1ec3n h\u01b0\u1edbng sang m\u1ed9t constructor kh\u00e1c trong c\u00f9ng m\u1ed9t class. Redirecting constructor lu\u00f4n c\u00f3 body l\u00e0 r\u1ed7ng, v\u00e0 ch\u1ec9 sinh ra \u0111\u1ec3 g\u1ecdi t\u1edbi m\u1ed9t constructor kh\u00e1c sau d\u1ea5u : . class Point { num x , y ; // The main constructor for this class. Point ( this . x , this . y ) { print ( 'This coordinate: x= $ x y= $ y ' ); } // Delegates to the main constructor. Point . alongXAxis ( num x ) : this ( x , 0 ); } var p = Point . alongXAxis ( 1 ); This coordinate: x=1 y=0 Trong v\u00ed d\u1ee5 tr\u00ean th\u00ec Point1.alongXAxis ch\u00ednh l\u00e0 redirecting constructor . Constant constructors \u00b6 N\u1ebfu nh\u01b0 b\u1ea1n mu\u1ed1n t\u1ea1o ra m\u1ed9t object kh\u00f4ng \u0111\u1ed5i, h\u00e3y t\u1ea1o ra m\u1ed9t const constructor, v\u00e0 \u0111\u1ea3m b\u1ea3o r\u1eb1ng c\u00e1c variable l\u00e0 final: class ImmutablePoint { static final ImmutablePoint origin = const ImmutablePoint ( 0 , 0 ); final num x , y ; const ImmutablePoint ( this . x , this . y ); } Factory constructors \u00b6 Ch\u00fang ta s\u1eed d\u1ee5ng factory khi mu\u1ed1n implement constructor kh\u00f4ng ch\u1ec9 \u0111\u1ec3 t\u1ea1o ra m\u1ed9t instance m\u1edbi c\u1ee7a class m\u00e0 c\u00f2n c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t instance t\u1eeb cache, ho\u1eb7c m\u1ed9t subtype instance. V\u00ed d\u1ee5 sau implement Logger class l\u00e0m nhi\u1ec7m v\u1ee5 class Logger { final String name ; bool mute = false ; // _cache is library-private, thanks to // the _ in front of its name. static final Map < String , Logger > _cache = < String , Logger > {}; factory Logger ( String name ) { print ( 'Logger \\' s name: $ name ' ); print ( 'Logger \\' s cache: $ _cache ' ); if ( _cache . containsKey ( name )) { return _cache [ name ]; } else { final logger = Logger . _internal ( name ); _cache [ name ] = logger ; return logger ; } } Logger . _internal ( this . name ); void log ( String msg ) { if ( ! mute ) print ( 'Log message: $ msg ' ); } } main () { var loggerOne = Logger ( 'UI' ); loggerOne . log ( 'Button clicked' ); print ( '**************' ); var loggerTwo = Logger ( 'UI' ); loggerTwo . log ( 'Icon clicked' ); } Logger's name: UI Logger's cache: {} Log message: Button clicked ************** Logger's name: UI Logger's cache: {UI: Instance of 'Logger'} Log message: Icon clicked L\u01b0u \u00fd r\u1eb1ng Factory constructor kh\u00f4ng th\u1ec3 truy c\u1eadp v\u00e0o this . Methods \u00b6 Instance methods \u00b6 Ko c\u00f3 g\u00ec \u0111\u1eb7c s\u1eafc ngo\u00e0i vi\u1ec7c truy xu\u1ea5t t\u1edbi instance variables m\u00e0 ko c\u1ea7n this . import 'dart:math' ; class Point { num x , y ; Point ( this . x , this . y ); num distanceTo ( Point other ) { var dx = x - other . x ; var dy = y - other . y ; return sqrt ( dx * dx + dy * dy ); } } Getters and setters \u00b6 N\u1ebfu b\u1ea1n \u0111\u00e3 t\u1eebng code Typescript th\u00ec th\u1ea5y kh\u00f4ng kh\u00e1c m\u1ea5y class Rectangle { num left , top , width , height ; Rectangle ( this . left , this . top , this . width , this . height ); // Define two calculated properties: right and bottom. num get right => left + width ; set right ( num value ) => left = value - width ; num get bottom => top + height ; set bottom ( num value ) => top = value - height ; } void main () { var rect = Rectangle ( 3 , 4 , 20 , 15 ); assert ( rect . left == 3 ); rect . right = 12 ; assert ( rect . left == - 8 ); } Abstract methods \u00b6 Abstract methods ch\u1ec9 t\u1ed3n t\u1ea1i b\u00ean trong abstract classes . abstract class Doer { // Define instance variables and methods... void doSomething (); // Define an abstract method. } class EffectiveDoer extends Doer { void doSomething () { // Provide an implementation, so the method is not abstract here... } } Overridable operators \u00b6 Ph\u1ea7n n\u00e0y m\u00f4 t\u1ea3 c\u00e1ch implement ho\u1ea1t \u0111\u1ed9ng c\u1ee7a c\u00e1c to\u00e1n t\u1eed v\u1edbi 1 object. V\u00ed d\u1ee5 b\u1ea1n c\u00f3 Vector class, v\u00e0 b\u1ea1n c\u1ea7n \u0111\u1ecbnh ngh\u0129a th\u00eam ph\u00e9p + 2 vectors ch\u1eb3ng h\u1ea1n. . . . . < + | [] > / ^ []= <= ~/ & ~ >= * << == \u2013 % >> class Vector { final int x , y ; const Vector ( this . x , this . y ); /// Overrides + (a + b). Vector operator + ( Vector v ) { return Vector ( x + v . x , y + v . y ); } /// Overrides - (a - b). Vector operator - ( Vector v ) { return Vector ( x - v . x , y - v . y ); } } void main () { final v = Vector ( 2 , 3 ); final w = Vector ( 2 , 2 ); // v == (2, 3) assert ( v . x == 2 && v . y == 3 ); // v + w == (4, 5) assert (( v + w ). x == 4 && ( v + w ). y == 5 ); // v - w == (0, 1) assert (( v - w ). x == 0 && ( v - w ). y == 1 ); } Abstract classes \u00b6 S\u1eed d\u1ee5ng abstract modifier \u0111\u1ec3 khai b\u00e1o m\u1ed9t abstract class \u2014M\u1ed9t class kh\u00f4ng th\u1ec3 t\u1ea1o instance. Abstract classes th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a interfaces . Tuy nhi\u00ean n\u1ebfu b\u1ea1n mu\u1ed1n t\u1ea1o instance t\u1eebIf you want your abstract class to appear to be instantiable, define a factory constructor. // This class is declared abstract and thus // can't be instantiated. abstract class AbstractContainer { // Define constructors, fields, methods... void updateChildren (); // Abstract method. } Implicit interfaces \u00b6 M\u1ed7i class trong Dart ng\u1ea7m \u0111\u1ecbnh ngh\u0129a m\u1ed9t interface ch\u1ee9a to\u00e0n b\u1ed9 c\u00e1c instance member c\u1ee7a class \u0111\u00f3. D\u1ecb vl, abstract th\u00ec c\u00f3 keyword c\u00f2n interface th\u00ec m\u00e9o ko // A person. The implicit interface contains greet(). // A person. The implicit interface contains greet(). class Person { // In the interface, but visible only in this library. final _name ; // Not in the interface, since this is a constructor. Person ( this . _name ); // In the interface. String greet ( String who ) => 'Hello, $ who . I am $ _name .' ; } // An implementation of the Person interface. class Impostor implements Person { get _name => '' ; String greet ( String who ) => 'Hi $ who . Do you know who I am?' ; } String greetBob ( Person person ) => person . greet ( 'Bob' ); void main () { print ( greetBob ( Person ( 'Kathy' ))); print ( greetBob ( Impostor ())); } N\u1ebfu nh\u01b0 class Impostor kh\u00f4ng khai b\u00e1o method greet th\u00ec ch\u00fang ta s\u1ebd nh\u1eadn qu\u1ea3 \u0111\u1eafng sau Error: The non-abstract class 'Impostor' is missing implementations for these members: 'greet'. Dart h\u1ed7 tr\u1ee3 \u0111a k\u1ebf th\u1eeba class Point implements Comparable , Location {...} Extending a class \u00b6 S\u1eed d\u1ee5ng extends \u0111\u1ec3 t\u1ea1o ra subclass, v\u00e0 super \u0111\u1ec3 tr\u1ecf t\u1edbi superclass: class Television { void turnOn () { _illuminateDisplay (); _activateIrSensor (); } // \u00b7\u00b7\u00b7 } class SmartTelevision extends Television { void turnOn () { super . turnOn (); _bootNetworkInterface (); _initializeMemory (); _upgradeApps (); } // \u00b7\u00b7\u00b7 } Overriding members \u00b6 Subclasses c\u00f3 th\u1ec3 override (ghi \u0111\u00e8) instance methods, getters, v\u00e0 setters. Ch\u00fang ta s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 @override \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh methods, ... b\u1ecb ghi \u0111\u00e8: class SmartTelevision extends Television { @ override void turnOn () {...} // \u00b7\u00b7\u00b7 } \u0110\u1ec3 thu h\u1eb9p (si\u1ebft ch\u1eb7t) ki\u1ec3u c\u1ee7a method parameter ho\u1eb7c instance variable hay c\u00f2n g\u1ecdi l\u00e0 type safe , b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 covariant : class Animal { String name ; Animal ( this . name ); void chase ( Animal x ) { print ( ' $ name chase ${ x . name } ' ); } } class Dog extends Animal { Dog () : super ( 'Dog' ); } class Mouse extends Animal { Mouse () : super ( 'Mouse' ); } class Cat extends Animal { Cat () : super ( 'Cat' ); void chase ( covariant Mouse x ) { super . chase ( x ); } } void main () { Cat c = new Cat (); Dog d = new Dog (); Mouse m = new Mouse (); d . chase ( m ); // Dog chase Mouse c . chase ( m ); // Cat chase Mouse c . chase ( d ); // Error: A value of type '#lib1::Dog' can't be assigned to a variable of type '#lib1::Mouse'. } noSuchMethod() \u00b6 H\u00e3y ghi \u0111\u00e8 ph\u01b0\u01a1ng th\u1ee9c noSuchMethod() trong tr\u01b0\u1eddng h\u1ee3p b\u1ea1n mu\u1ed1n b\u1eaft c\u00e1c tr\u01b0\u1eddng h\u1ee3p ng\u01b0\u1eddi d\u00f9ng truy c\u1eadp method ho\u1eb7c variable kh\u00f4ng t\u1ed3n t\u1ea1i class A { // Unless you override noSuchMethod, using a // non-existent member results in a NoSuchMethodError. @ override void noSuchMethod ( Invocation invocation ) { print ( 'You tried to use a non-existent member: ' + ' ${ invocation . memberName } ' ); } } Enumerated types \u00b6 Using enums \u00b6 \u0110\u1ec3 khai b\u00e1o m\u1ed9t ki\u1ec3u enumerations , ta s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 enum : enum Color { red , green , blue } M\u1ed7i gi\u00e1 tr\u1ecb b\u00ean trong enum \u0111\u1ec1u c\u00f3 method index getter, tr\u1ea3 v\u1ec1 v\u1ecb tr\u00ed c\u1ee7a ch\u00fang (0-based array): assert ( Color . red . index == 0 ); assert ( Color . green . index == 1 ); assert ( Color . blue . index == 2 ); \u0110\u1ec3 l\u1ea5y ra to\u00e0n b\u1ed9 c\u00e1c gi\u00e1 tr\u1ecb trong enum, ch\u00fang ta s\u1eed d\u1ee5ng enum\u2019s values constant. List < Color > colors = Color . values ; assert ( colors [ 2 ] == Color . blue ); Adding features to a class: mixins \u00b6 Mixin l\u00e0 m\u1ed9t t\u00ednh n\u0103ng t\u01b0\u01a1ng t\u1ef1 v\u1edbi trait trong php, ta s\u1eed d\u1ee5ng withth keywords v\u00e0 theo sau n\u00f3 l\u00e0 m\u1ed9t ho\u1eb7c nhi\u1ec1u mixin names. class Musician extends Performer with Musical { // \u00b7\u00b7\u00b7 } class Maestro extends Person with Musical , Aggressive , Demented { Maestro ( String maestroName ) { name = maestroName ; canConduct = true ; } } \u0110\u1ec3 implement mixin c\u1ea7n t\u1ea1o m\u1ed9t class k\u1ebf th\u1eeba Object, kh\u00f4ng c\u00f3 constructor v\u00e0 kh\u00f4ng g\u1ecdi t\u1edbi super : abstract class Musical { bool canPlayPiano = false ; bool canCompose = false ; bool canConduct = false ; void entertainMe () { if ( canPlayPiano ) { print ( 'Playing piano' ); } else if ( canConduct ) { print ( 'Waving hands' ); } else { print ( 'Humming to self' ); } } } Class variables and methods \u00b6 S\u1eed d\u1ee5ng static keyword \u0111\u1ec3 implement class-wide variables v\u00e0 methods. Static variables \u00b6 class Queue { static const initialCapacity = 16 ; // \u00b7\u00b7\u00b7 } void main () { assert ( Queue . initialCapacity == 16 ); } Bi\u1ebfn static s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o cho t\u1edbi khi n\u00f3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Static methods \u00b6 import 'dart:math' ; class Point { num x , y ; Point ( this . x , this . y ); static num distanceBetween ( Point a , Point b ) { var dx = a . x - b . x ; var dy = a . y - b . y ; return sqrt ( dx * dx + dy * dy ); } } void main () { var a = Point ( 2 , 2 ); var b = Point ( 4 , 4 ); var distance = Point . distanceBetween ( a , b ); assert ( 2.8 < distance && distance < 2.9 ); print ( distance ); } B\u00ean trong static method kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p s\u1eed d\u1ee5ng this . Generics \u00b6 N\u1ebfu \u0111\u00e3 \u0111\u1ecdc c\u00e1c ghi ch\u00fa ph\u00eda tr\u00ean th\u00ec \u1eaft h\u1eb3n b\u1ea1n \u0111\u00e3 bi\u1ebft t\u1edbi List<E> v\u1edbi E l\u00e0 m\u1ed9t ki\u1ec3u (v\u00ed d\u1ee5: int ). V\u1ec1 m\u1eb7t quy \u01b0\u1edbc <\u2026> \u0111\u00e1nh d\u1ea5u List l\u00e0 m\u1ed9t ki\u1ec3u generic (ho\u1eb7c parameterized ). Why use generics? \u00b6 L\u1ee3i \u00edch: Code sinh ra t\u1ed1t h\u01a1n n\u1ebfu \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh \u0111\u00fang ki\u1ec3u c\u1ee7a k\u1ebft qu\u1ea3. var names = List < String > (); names . addAll ([ 'Seth' , 'Kathy' , 'Lars' ]); names . add ( 42 ); // Error S\u1eed d\u1ee5ng generic gi\u00fap gi\u1ea3m code duplication. abstract class ObjectCache { Object getByKey ( String key ); void setByKey ( String key , Object value ); } abstract class StringCache { String getByKey ( String key ); void setByKey ( String key , String value ); } 2 class tr\u00ean c\u00f3 th\u1ec3 thay b\u1eb1ng m\u1ed9t class t\u01b0\u01a1ng \u0111\u01b0\u01a1ng abstract class Cache < T > { T getByKey ( String key ); void setByKey ( String key , T value ); } Theo quy \u01b0\u1edbc, ki\u1ec3u b\u00ean trong <\u2026> l\u00e0 nh\u1eefng ch\u1eef c\u00e1i nh\u01b0: E, T, S, K, hay V. Using collection literals \u00b6 List v\u00e0 map \u0111\u1ec1u c\u00f3 th\u1ec3 parameterized. <type> (cho lists) v\u00e0 <keyType, valueType> (cho maps). var names = < String > [ 'Seth' , 'Kathy' , 'Lars' ]; var pages = < String , String > { 'index.html' : 'Homepage' , 'robots.txt' : 'Hints for web robots' , 'humans.txt' : 'We are people, not machines' }; Using parameterized types with constructors \u00b6 Dart h\u1ed7 tr\u1ee3 l\u1eadp tr\u00ecnh vi\u00ean ch\u1ec9 \u0111\u1ecbnh r\u00f5 m\u1ed9t ho\u1eb7c nhi\u1ec1u ki\u1ec3u khi s\u1eed d\u1ee5ng constructor: var names = List < String > (); names . addAll ([ 'Seth' , 'Kathy' , 'Lars' ]); var nameSet = Set < String > . from ( names ); class View { int x ; View ( this . x ); } var views = Map < int , View > (); views [ 0 ] = View ( 0 ); Generic collections and the types they contain \u00b6 var names = List < String > (); names . addAll ([ 'Seth' , 'Kathy' , 'Lars' ]); print ( names is List < String > ); // true M\u1ecdi ki\u1ec3u generic trong Dart \u0111\u1ec1u \u0111\u01b0\u1ee3c reified (c\u1ee5 th\u1ec3 ho\u00e1), \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 th\u00f4ng tin v\u1ec1 ki\u1ec3u d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c mang \u0111i ngay c\u1ea3 khi runtime . Ng\u01b0\u1ee3c l\u1ea1i, generic trong Java s\u1eed d\u1ee5ng erasure (xo\u00e1 b\u1ecf), \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 b\u1ea1n c\u00f3 th\u1ec3 ki\u1ec3m tra \u0111\u01b0\u1ee3c object l\u00e0 m\u1ed9t List, nh\u01b0ng b\u1ea1n kh\u00f4ng th\u1ec3 ki\u1ec3m tra chi ti\u1ebft t\u1edbi m\u1ee9c List<String> . Restricting the parameterized type \u00b6 Khi code m\u1ed9t generic type, b\u1ea1n c\u00f3 th\u1ec3 mu\u1ed1n gi\u1edbi h\u1ea1n c\u00e1c ki\u1ec3u parameters c\u1ee7a n\u00f3. Khi \u0111\u00f3 h\u00e3y s\u1eed d\u1ee5ng extends . class Foo < T extends SomeBaseClass > { // Implementation goes here... String toString () => \"Instance of 'Foo< $ T >'\" ; } class Extender extends SomeBaseClass {...} Ho\u00e0n to\u00e0n OK n\u1ebfu b\u1ea1n s\u1eed d\u1ee5ng SomeBaseClass ho\u1eb7c b\u1ea5t k\u1ef3 subclasses n\u00e0o c\u1ee7a n\u00f3: var someBaseClassFoo = Foo < SomeBaseClass > (); var extenderFoo = Foo < Extender > (); ho\u1eb7c kh\u00f4ng m\u1ed9t ki\u1ec3u n\u00e0o c\u1ea3: var foo = Foo (); print ( foo ); // Instance of 'Foo<SomeBaseClass>' N\u1ebfu b\u1ea1n ch\u1ec9 \u0111\u1ecbnh m\u1ed9t ki\u1ec3u non- SomeBaseClass s\u1ebd c\u00f3 l\u1ed7i: var foo = Foo < Object > (); Using generic methods \u00b6 V\u00e0o l\u00fac kh\u1edfi t\u1ea1o, Dart\u2019s generic gi\u1edbi h\u1ea1n trong classes. T first < T > ( List < T > ts ) { // Do some initial work or error checking, then... T tmp = ts [ 0 ]; // Do some additional checking or processing... return tmp ; } Ki\u1ec3u generic parameter trong first (<T>) cho ph\u00e9p b\u1ea1n s\u1eed ki\u1ec3u argument T \u1edf m\u1ed9t v\u00e0i n\u01a1i: Trong function\u2019s tr\u1ea3 v\u1ec1 ki\u1ec3u ( T ). Trong ki\u1ec3u c\u1ee7a tham s\u1ed1 ( List<T> ). Trong ki\u1ec3u c\u1ee7a bi\u1ebfn \u0111\u1ecba ph\u01b0\u01a1ng ( T tmp ). Chi ti\u1ebft h\u01a1n \u0111\u1ec3 khai b\u00e1o m\u1ed9t generic methods Ki\u1ec3u parameter c\u1ee7a generic methods \u0111\u01b0\u1ee3c li\u1ec7t k\u00ea ngay sau t\u00ean c\u1ee7a method/function v\u00e0 b\u00ean trong <> /// 2 ki\u1ec3u c\u1ee7a parameters, [K] v\u00e0 [V]. Map < K , V > singletonMap < K , V > ( K key , V value ) { return < K , V > { key , value }; } Trong tr\u01b0\u1eddng h\u1ee3p ki\u1ec3u l\u00e0 class, b\u1ea1n c\u00f3 th\u1ec3 th\u00eam gi\u1edbi h\u1ea1n cho n\u00f3 /// Danh s\u00e1ch 2 s\u1ed1 ki\u1ec3u [T] d\u1eabn xu\u1ea5t t\u1eeb ki\u1ec3u num. T sumPair < T extends num > ( List < T > items ) { return items [ 0 ] + items [ 1 ]; } Class methods ( instance v\u00e0 static ) c\u00f3 th\u1ec3 khai b\u00e1o generic parameters theo c\u00e1ch t\u01b0\u01a1ng t\u1ef1: class C { static int f < S , T > ( int x ) => 3 ; int m < S , T > ( int x ) => 3 ; } Generic method v\u1edbi t\u01b0 c\u00e1ch l\u00e0 function-typed parameters, local functions, v\u00e0 function expressions: /// Truy\u1ec1n v\u00e0o generic method l\u00e0 m\u1ed9t [callback] parameter. void functionTypedParameter ( T callback < T > ( T thing )) {} // Khai b\u00e1o local generic function `itself`. void localFunction () { T itself < T > ( T thing ) => thing ; } // G\u00e1n m\u1ed9t generic function expression cho m\u1ed9t local variable. void functionExpression () { var lambda = < T > ( T thing ) => thing ; } Chi ti\u1ebft h\u01a1n v\u1ec1 Generic method, c\u00e1c b\u1ea1n xem th\u00eam t\u1ea1i \u0111\u00e2y . Libraries and visibility \u00b6 \u0110\u1ec3 t\u1ea1o ra c\u00e1c shareable code base, ch\u00fang ta s\u1eed d\u1ee5ng 2 directives l\u00e0 import v\u00e0 library . Libraries ko ch\u1ec9 cung c\u1ea5p c\u00e1c APIs m\u00e0 c\u00f2n \u1ea9n ch\u1ee9a c\u00e1c member ch\u1ec9 t\u1ed3n t\u1ea1i v\u00e0 truy xu\u1ea5t \u0111\u01b0\u1ee3c (visible) b\u00ean trong ch\u00fang. V\u00ed d\u1ee5 c\u00e1c identifiers b\u1eaft \u0111\u1ea7u b\u1eb1ng d\u1ea5u g\u1ea1ch d\u01b0\u1edbi (_). M\u1ecdi \u1ee9ng d\u1ee5ng Dart \u0111\u1ec1u l\u00e0 c\u00e1c library ngay c\u1ea3 khi n\u00f3 kh\u00f4ng s\u1eed d\u1ee5ng library directive. Libraries c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i v\u00e0 s\u1eed d\u1ee5ng th\u00f4ng qua c\u00f4ng c\u1ee5 pub . Using libraries \u00b6 S\u1eed d\u1ee5ng t\u1eeb kho\u00e1 import \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh ph\u1ea1m vi namespace s\u1ebd s\u1eed d\u1ee5ng c\u1ee7a m\u1ed9t library import 'dart:html' ; V\u1edbi c\u00e1c th\u01b0 vi\u1ec7n built-in th\u00ec URI c\u00f3 scheme dart: , c\u00f2n v\u1edbi c\u00e1c th\u01b0 vi\u1ec7n kh\u00e1c ta s\u1eed d\u1ee5ng system path ho\u1eb7c scheme package: import 'package:test/test.dart' ; Specifying a library prefix \u00b6 \u0110\u1ec3 tr\u00e1nh conflict khi import, ta d\u00f9ng alias: If you import two libraries that have conflicting identifiers , then you can specify a prefix for one or both libraries . For example , if library1 and library2 both have an Element class , then you might have code like this : import 'package:lib1/lib1.dart' ; import 'package:lib2/lib2.dart' as lib2 ; // Uses Element from lib1. Element element1 = Element (); // Uses Element from lib2. lib2 . Element element2 = lib2 . Element (); Importing only part of a library \u00b6 Import m\u1ed9t ph\u1ea7n c\u1ee7a library: // Import only foo. import 'package:lib1/lib1.dart' show foo ; // Import all names EXCEPT foo. import 'package:lib2/lib2.dart' hide foo ; Lazily loading a library \u00b6 Deferred loading (hay c\u00f2n g\u1ecdi l\u00e0 lazy loading ) cho ph\u00e9p \u1ee9ng d\u1ee5ng load c\u00e1c library theo nhu c\u1ea7u (on demand) n\u1ebfu c\u1ea7n. M\u1ed9t v\u00e0i tr\u01b0\u1eddng h\u1ee3p sau c\u00f3 th\u1ec3 b\u1ea1n s\u1ebd mu\u1ed1n d\u00f9ng deferred loading: Gi\u1ea3m th\u1eddi gi\u1ea3n b\u1eaft \u0111\u1ea7u kh\u1edfi t\u1ea1o app. Th\u1ef1c hi\u1ec7n A/B testing. \u0110\u1ec3 load ch\u1ee9c n\u0103ng \u00edt s\u1eed d\u1ee5ng nh\u01b0 h\u1ed9p tho\u1ea1i dialog ho\u1eb7c m\u00e0n h\u00ecnh tu\u1ef3 ch\u1ecdn. \u0110\u1ec3 lazily load m\u1ed9t library, b\u1ea1n c\u1ea7n import ch\u00fang b\u1eb1ng c\u00fa ph\u00e1p deferred as . import 'package:greetings/hello.dart' deferred as hello ; Khi b\u1ea1n c\u1ea7n s\u1eed d\u1ee5ng library, g\u1ecdi h\u00e0m loadLibrary() qua \u0111\u1ecbnh danh c\u1ee7a ch\u00fang: Future greet () async { await hello . loadLibrary (); hello . printGreeting (); } Trong \u0111o\u1ea1n code tr\u00ean, await keyword d\u1eebng ch\u01b0\u01a1ng tr\u00ecnh l\u1ea1i cho t\u1edbi khi th\u01b0 vi\u1ec7n \u0111\u01b0\u1ee3c load xong. B\u1ea1n c\u00f3 th\u1ec3 g\u1ecdi loadLibrary() nhi\u1ec1u l\u1ea7n trong m\u1ed9t th\u01b0 vi\u1ec7n m\u00e0 kh\u00f4ng g\u1eb7p b\u1ea5t c\u1ee9 v\u1ea5n \u0111\u1ec1 g\u00ec, v\u00ec th\u01b0 vi\u1ec7n ch\u1ec9 load m\u1ed9t l\u1ea7n duy nh\u1ea5t. Lu\u00f4n ghi nh\u1edb r\u1eb1ng - C\u00e1c constant c\u1ee7a library kh\u00f4ng \u0111\u01b0\u1ee3c coi l\u00e0 constant trong file import. N\u00ean nh\u1edb r\u1eb1ng, constant kh\u00f4ng t\u00f4ng t\u1ea1i cho t\u1edbi khi library \u0111\u01b0\u1ee3c load. - B\u1ea1n ko th\u1ec3 s\u1eed d\u1ee5ng ki\u1ec3u t\u1eeb deferred library trong file import. Thay v\u00e0o \u0111\u00f3, h\u00e3y suy x\u00e9t c\u00e1c di chuy\u1ec3n n\u00f3 sang interface types \u0111\u1ec3 c\u00f3 th\u1ec3 import b\u1eb1ng c\u1ea3 deferred library v\u00e0 importing file. - Dart ng\u1ea7m th\u00eam loadLibrary() v\u00e0o namespace m\u00e0 b\u1ea1n khai b\u00e1o s\u1eed d\u1ee5ng deferred. loadLibrary() function tr\u1ea3 v\u1ec1 Future . Implementing libraries \u00b6 Tham kh\u1ea3o Create Library Packages n\u1ebfu b\u1ea1n mu\u1ed1n vi\u1ebft th\u01b0 vi\u1ec7n cho Dart. Asynchrony support \u00b6 Dart libraries l\u00e0 m\u1ed9t b\u1ed9 si\u00eau \u0111\u1ea7y \u0111\u1ee7 c\u00e1c functions tr\u1ea3 v\u1ec3 Future ho\u1eb7c Stream objects. Nh\u1eefng function n\u00e0y l\u00e0 b\u1ea5t \u0111\u1ed3ng b\u1ed9 ( asynchronous ), t\u01b0\u01a1ng t\u1ef1 Javascript ch\u00fang ta c\u00f3 1 c\u1eb7p t\u1eeb kho\u00e1 async v\u00e0 await . Handling Futures \u00b6 Khi b\u1ea1n mu\u1ed1n k\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c ho\u00e0n th\u00e0nh trong t\u01b0\u01a1ng lai (Future), b\u1ea1n c\u00f3 2 c\u00e1ch sau: - S\u1eed d\u1ee5ng async v\u00e0 await . - S\u1eed d\u1ee5ng Future API. Code s\u1eed d\u1ee5ng async v\u00e0 await l\u00e0 b\u1ea5t \u0111\u1ed3ng b\u1ed9, nh\u01b0ng h\u1ea7u nh\u01b0 ch\u00fang gi\u1ed1ng nh\u01b0 c\u00e1c \u0111o\u1ea1n code x\u1eed l\u00fd \u0111\u1ed3ng b\u1ed9. V\u00ed d\u1ee5, \u0111o\u1ea1n code sau s\u1eed d\u1ee5ng await \u0111\u1ec3 ch\u1edd k\u1ebft qu\u1ea3 c\u1ee7a x\u1eed l\u00fd t\u1eeb function b\u1ea5t \u0111\u1ed3ng b\u1ed9: await lookUpVersion (); \u0110\u1ec3 d\u00f9ng await th\u00ec code b\u1eaft bu\u1ed9c ph\u1ea3i n\u1eb1m trong async function Future checkVersion () async { var version = await lookUpVersion (); // Do something with version } S\u1eed d\u1ee5ng try , catch , v\u00e0 finally \u0111\u1ec3 x\u1eed l\u00fd errors & cleanup trong code c\u00f3 s\u1eed d\u1ee5ng await : try { version = await lookUpVersion (); } catch ( e ) { // React to inability to look up the version } L\u01b0u \u00fd : async function tr\u1ea3 v\u1ec1 Future object. Trong await expression , gi\u00e1 tr\u1ecb c\u1ee7a expression th\u01b0\u1eddng l\u00e0 Future ; v\u00e0 n\u1ebfu kh\u00f4ng ph\u1ea3i th\u00ec gi\u00e1 tr\u1ecb \u0111\u00f3 c\u0169ng s\u1ebd t\u1ef1 \u0111\u1ed9ng \u0111\u01b0\u1ee3c wrapp v\u00e0o trong Future object. Future object d\u1eabn t\u1edbi m\u1ed9t promise tr\u1ea3 v\u1ec1 object. Sau c\u00f9ng, gi\u00e1 tr\u1ecb c\u1ee7a await expression s\u1ebd tr\u1ea3 v\u1ec1 object \u0111\u00f3. await expression s\u1ebd d\u1eebng vi\u1ec7c th\u1ef1c thi l\u1ea1i cho t\u1edbi khi object s\u1eb5n s\u00e0ng. N\u1ebfu b\u1ea1n g\u1eb7p l\u1ed7i compile-time khi s\u1eed d\u1ee5ng await , h\u00e3y \u0111\u1ea3m b\u1ea3o r\u0103ng b\u1ea1n \u0111ang s\u1eed d\u1ee5ng await b\u00ean trong async function. V\u00ed d\u1ee5 sau s\u1eed d\u1ee5ng await trong app\u2019s main() function, body c\u1ee7a main() ph\u1ea3i \u0111i k\u00e8m v\u1edbi keyword async : Future main () async { checkVersion (); print ( 'In main: version is ${ await lookUpVersion () } ' ); } Declaring async functions \u00b6 V\u00ed d\u1ee5 chuy\u1ec3n t\u1eeb function \u0111\u1ed3ng b\u1ed9 sang function b\u1ea5t \u0111\u1ed3ng b\u1ed9: String lookUpVersion () => '1.0.0' ; Future < String > lookUpVersion () async => '1.0.0' ; Handling Streams \u00b6 Khi b\u1ea1n c\u1ea7n l\u1ea5y gi\u00e1 tr\u1ecb t\u1eeb m\u1ed9t Stream, b\u1ea1n c\u00f3 2 l\u1ef1a ch\u1ecdn - S\u1eed d\u1ee5ng async v\u00e0 asynchronous for loop ( await for ). - S\u1eed d\u1ee5ng Stream API. await for ( varOrType identifier in expression ) { // Executes each time the stream emits a value. } Gi\u00e1 tr\u1ecb c\u1ee7a expression ph\u1ea3i c\u00f3 ki\u1ec3u Stream . Qu\u00e1 tr\u00ecnh ch\u1ea1y nh\u01b0 sau: \u0110\u1ee3i cho t\u1edbi khi stream \u0111\u01b0a ra gi\u00e1 tr\u1ecb. Th\u1ef1c thi code b\u00ean trong for loop . L\u1eb7p l\u1ea1i 1 v\u00e0 2 cho t\u1edbi khi stream b\u1ecb close. \u0110\u1ec3 d\u1eebng vi\u1ec7c l\u1eafng nghe stream, b\u1ea1n c\u00f3 th\u1ec3 break ho\u1eb7c return , which breaks out of the for loop and unsubscribes from the stream. Generators \u00b6 Dart h\u1ed7 tr\u1ee3 2 lo\u1ea1i built-in generator functions: - Synchronous generator: Tr\u1ea3 v\u1ec1 Iterable object. Iterable < int > naturalsTo ( int n ) sync * { int k = 0 ; while ( k < n ) yield k ++ ; } - Asynchronous generator: Tr\u1ea3 v\u1ec1 Stream object. Stream < int > asynchronousNaturalsTo ( int n ) async * { int k = 0 ; while ( k < n ) yield k ++ ; } Callable classes \u00b6 \u0110\u1ec3 c\u00f3 th\u1ec3 g\u1ecdi Dart class nh\u01b0 function, ta implement ph\u01b0\u01a1ng th\u1ee9c call(). class WannabeFunction { call ( String a , String b , String c ) => ' $ a $ b $ c !' ; } main () { var wf = new WannabeFunction (); var out = wf ( \"Hi\" , \"there,\" , \"gang\" ); print ( ' $ out ' ); } Hi there, gang! Isolates \u00b6 H\u1ea7u h\u1ebft computers, ho\u1eb7c mobile platforms \u0111\u01b0\u1ee3c trang b\u1ecb multi-core CPUs. \u0110\u1ec3 t\u1eadn d\u1ee5ng t\u1ed1i \u0111a l\u1ee3i th\u1ebf \u0111\u00f3, th\u00f4ng developer c\u00f3 th\u1ec3 ch\u1ea1y \u0111\u1ed3ng th\u1eddi c\u00e1c shared-memory threads. Tuy nhi\u00ean, vi\u1ec7c chia s\u1ebb tr\u1ea1ng th\u00e1i (shared-state) c\u1ee7a c\u00e1c concurrency r\u1ea5t d\u1ec5 d\u1eabn t\u1edbi l\u1ed7i c\u0169ng nh\u01b0 l\u00e0m code tr\u1edf n\u00ean ph\u1ee9c t\u1ea1p. Thay v\u00ec s\u1ee7 d\u1ee5ng threads, t\u1ea5t c\u1ea3 Dart code \u0111\u01b0\u1ee3c th\u1ef1c thi \u1edf b\u00ean trong 1 v\u00f9ng c\u00f4 l\u1eadp. M\u1ed7i v\u00f9ng v\u00f4 l\u1eadp c\u00f3 memory heap ri\u00eang, \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng state c\u1ee7a v\u00f9ng isolate n\u00e0y kh\u00f4ng b\u1ecb truy c\u1eadp b\u1edfi v\u00f9ng isolate kh\u00e1c. Chi ti\u1ebft tham kh\u1ea3o dart:isolate . Typedefs \u00b6 Trong Dart, m\u1ecdi th\u1ee9 \u0111\u1ec1u l\u00e0 object. typedef , ho\u1eb7c function-type alias, \u0111\u1eb7t t\u00ean cho function m\u00e0 b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a c\u00e1c fields v\u00e0 tr\u1ea3 v\u1ec1 types. \u0110o\u1ea1n code sau kh\u00f4ng s\u1eed d\u1ee5ng typedef, v\u00e0 th\u00f4ng tin v\u1ec1 ki\u1ec3u s\u1ebd bi\u1ebfn m\u1ea5t khi b\u1ea1n g\u00e1n compare = f , trong khi ki\u1ec3u c\u1ee7a f l\u00e0 (Object, Object) \u2192 int . class SortedCollection { Function compare ; SortedCollection ( int f ( Object a , Object b )) { compare = f ; } } // Initial, broken implementation. int sort ( Object a , Object b ) => 0 ; void main () { SortedCollection coll = SortedCollection ( sort ); // All we know is that compare is a function, // but what type of function? assert ( coll . compare is Function ); } Hot fix s\u1eed d\u1ee5ng typedef typedef Compare = int Function ( Object a , Object b ); class SortedCollection { Compare compare ; SortedCollection ( this . compare ); } // Initial, broken implementation. int sort ( Object a , Object b ) => 0 ; void main () { SortedCollection coll = SortedCollection ( sort ); assert ( coll . compare is Function ); assert ( coll . compare is Compare ); } V\u1edbi phi\u00ean b\u1ea3n Dart 2 hi\u1ec7n t\u1ea1i th\u00ec typedefs ch\u1ec9 gi\u1edbi h\u1ea1n s\u1eed d\u1ee5ng v\u1edbi function . typedef c\u0169ng ch\u1ec9 \u0111\u01a1n gi\u1ea3n l\u00e0 m\u1ed9t alias, gi\u00fap ch\u00fang ta check ki\u1ec3u c\u1ee7a m\u1ed7i function: typedef Compare < T > = int Function ( T a , T b ); int sort ( int a , int b ) => a - b ; void main () { assert ( sort is Compare < int > ); // True! } Driving Deep \u00b6 \u0110\u1ec3 hi\u1ec3u s\u00e2u h\u01a1n v\u1ec1 Dart th\u00ec kh\u00f4ng c\u00f2n c\u00e1ch n\u00e0o kh\u00e1c ngo\u00e0i m\u1ea7n v\u00e0o core c\u1ee7a Dart. B\u1ea1n c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u s\u00e2u v\u1ec1 c\u01a1 ch\u1ebf ho\u1ea1t \u0111\u1ed9c v\u00e0 c\u00e1ch s\u1eed d\u1ee5ng c\u1ee7a Dart libraries t\u1ea1i A Tour of the Dart Libraries . V\u00e0 l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 code trong s\u00e1ng, convention chu\u1ea9n, hi\u1ec3u nh\u1eefng \u0111i\u1ec1u n\u00ean v\u00e0 kh\u00f4ng n\u00ean khi code Dart, th\u00ec b\u1ea1n n\u00ean \u0111\u1ecdc th\u00eam Effective Dart . References \u00b6 Dart Home Page A Tour of the Dart Language","title":"Dart Basic"},{"location":"dart/dart_core/#important-concepts","text":"Khi b\u1ea1n code Dart language, h\u00e3y lu\u00f4n ghi nh\u1edb nh\u1eefng kh\u00e1i ni\u1ec7m sau trong \u0111\u1ea7u: M\u1ecdi th\u1ee9 b\u1ea1n g\u00e1n v\u00e0o c\u00e1c bi\u1ebfn (variable) \u0111\u1ec1u l\u00e0 m\u1ed9t object , v\u00e0 m\u1ed7i object l\u00e0 m\u1ed9t instance c\u1ee7a class . Ngay c\u1ea3 numbers, functions, v\u00e0 null c\u0169ng l\u00e0 c\u00e1c objects . T\u1ea5t c\u1ea3 objects \u0111\u01b0\u1ee3c k\u1ebf th\u1eeba t\u1eeb [Object][] class. M\u1eb7c d\u00f9 Dart l\u00e0 ng\u00f4n ng\u1eef strongly typed (ch\u00fa tr\u1ecdng v\u00e0o ki\u1ec3u d\u1eef li\u1ec7u), nh\u01b0ng type annotations l\u1ea1i l\u00e0 tu\u1ef3 ch\u1ecdn v\u00ec Dart c\u00f3 th\u1ec3 t\u1ef1 suy ra ki\u1ec3u d\u1ef1a v\u00e0o gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn. V\u00ed d\u1ee5 trong \u0111o\u1ea1n code tr\u00ean, number s\u1ebd mang ki\u1ec3u int . Khi b\u1ea1n kh\u00f4ng mong \u0111\u1ee3i m\u1ed9t ki\u1ec3u nh\u1ea5t \u0111\u1ecbnh n\u00e0o, h\u00e3y s\u1eed d\u1ee5ng ki\u1ec3u dynamic . Dart h\u1ed7 tr\u1ee3 generic types, v\u00ed d\u1ee5 nh\u01b0 List<int> (m\u1ed9t danh s\u00e1ch c\u00e1c s\u1ed1 integers) ho\u1eb7c List<dynamic> (m\u1ed9t danh s\u00e1ch c\u00e1c objects mang ki\u1ec3u b\u1ea5t k\u1ef3). Dart h\u1ed7 tr\u1ee3 top-level functions (v\u00ed d\u1ee5 nh\u01b0 main() ), c\u0169ng nh\u01b0 c\u00e1c functions g\u1eafn li\u1ec1n v\u1edbi m\u1ed9t class ho\u1eb7c object (t\u01b0\u01a1ng \u1ee9ng v\u1edbi static v\u00e0 instance methods ). B\u1ea1n c\u0169ng c\u00f3 th\u1ec3 t\u1ea1o ra functions b\u00ean trong functions (g\u1ecdi l\u00e0 nested ho\u1eb7c local functions ). T\u01b0\u01a1ng t\u1ef1, Dart h\u1ed7 tr\u1ee3 top-level variables , c\u0169ng nh\u01b0 c\u00e1c variables g\u1eafn li\u1ec1n v\u1edbi m\u1ed9t class ho\u1eb7c object (st\u01b0\u01a1ng \u1ee9ng v\u1edbi static v\u00e0 instance variables ). Instance variables \u0111\u00f4i l\u00fac \u0111\u01b0\u1ee3c bi\u1ebft t\u1edbi v\u1edbi t\u00ean g\u1ecdi fields ho\u1eb7c properties . Kh\u00f4ng gi\u1ed1ng v\u1edbi Java, Dart kh\u00f4ng c\u00f3 keywords public , protected , private . N\u1ebfu m\u1ed9t bi\u1ebfn (identifier) b\u1eaft \u0111\u1ea7u v\u1edbi d\u1ea5u underscore (_), N\u00f3 s\u1ebd l\u00e0 private trong library c\u1ee7a n\u00f3 (V\u00ed d\u1ee5 khi b\u1ea1n import th\u01b0 vi\u1ec7n \u0111\u00f3 v\u00e0o th\u00ec ch\u00fang s\u1ebd ko th\u1ec3 d\u00f9ng b\u00ean ngo\u00e0i th\u01b0 vi\u1ec7n). Chi ti\u1ebft h\u01a1n t\u1ea1i Libraries and visibility . Identifiers c\u00f3 th\u1ec3 b\u1eaft \u0111\u1ea7u b\u1eb1ng ch\u1eef c\u00e1i ho\u1eb7c d\u1ea5u g\u1ea1ch d\u01b0\u1edbi (_), theo sau l\u00e0 b\u1ea5t k\u1ef3 s\u1ef1 k\u1ebft h\u1ee3p n\u00e0o c\u1ee7a c\u00e1c k\u00fd t\u1ef1 \u0111\u00f3 c\u00f9ng v\u1edbi ch\u1eef s\u1ed1.. \u0110\u00f4i khi, vi\u1ec7c nh\u00ecn nh\u1eadn m\u1ed9t th\u1ee9 n\u00e0o \u0111\u00f3 trong Dart l\u00e0 m\u1ed9t expression hay m\u1ed9t statement c\u00f3 th\u1ec3 tr\u1edf n\u00ean quan tr\u1ecdng, do \u0111\u00f3 vi\u1ec7c s\u1eed d\u1ee5ng 2 t\u1eeb ng\u1eef \u0111\u1ec3 m\u00f4 t\u1ea3 s\u1ebd r\u1ea5t h\u1eefu \u00edch. Dart tools c\u00f3 th\u1ec3 th\u00f4ng b\u00e1o 2 lo\u1ea1i v\u1ea5n \u0111\u1ec1 khi th\u1ef1c thi: warnings v\u00e0 errors . Warnings ch\u1ec9 \u0111\u01a1n gi\u1ea3n ch\u1ec9 ra nh\u1eefng \u0111o\u1ea1n code c\u00f3 th\u1ec3 kh\u00f4ng ch\u1ea1y \u0111\u00fang nh\u01b0ng ch\u00fang kh\u00f4ng ng\u0103n ch\u01b0\u01a1ng tr\u00ecnh c\u1ee7a b\u1ea1n th\u1ef1c thi. Errors c\u00f3 th\u1ec3 l\u00e0 l\u1ed7i x\u1ea3y ra l\u00fac compile-time ho\u1eb7c run-time . Compile-time hi\u1ec3n nhi\u00ean s\u1ebd khi\u1ebfn code b\u1ea1n kh\u00f4ng ch\u1ea1y \u0111\u01b0\u1ee3c; K\u1ebft qu\u1ea3 c\u1ee7a run-time error l\u1ea1i l\u00e0 nh\u1eefng exception \u0111\u01b0\u1ee3c throw ra khi ch\u1ea1y.","title":"Important concepts"},{"location":"dart/dart_core/#variables","text":"\u0110\u1ec3 khai b\u00e1o m\u1ed9t bi\u1ebfn name tham chi\u1ebfu t\u1edbi String object v\u1edbi gi\u00e1 tr\u1ecb \u201cBob\u201d, ta c\u00f3 th\u1ec3 d\u00f9ng 1 trong 3 c\u00e1ch sau: var name = 'Bob' ; dynamic name = 'Bob' ; String name = 'Bob' ;","title":"Variables"},{"location":"dart/dart_core/#default-value","text":"Gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o c\u1ee7a m\u1ed9t bi\u1ebfn b\u1ea5t k\u1ef3 \u0111\u1ec1u l\u00e0 null . int lineCount ; assert ( lineCount == null );","title":"Default value"},{"location":"dart/dart_core/#final-and-const","text":"N\u1ebfu b\u1ea1n kh\u00f4ng mu\u1ed1n gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn b\u1ecb thay \u0111\u1ed5i, h\u00e3y s\u1eed d\u1ee5ng final ho\u1eb7c const thay v\u00ec d\u00f9ng var/type ; Vi\u1ec7c hi\u1ec3u r\u00f5 nguy\u00ean l\u00fd ho\u1ea1t \u0111\u1ed9ng final v\u1edbi const kh\u00f4ng h\u1ec1 \u0111\u01a1n gi\u1ea3n m\u1ed9t ch\u00fat n\u00e0o final name = 'Bob' ; // Without a type annotation // name = 'Alice'; // Uncommenting this causes an error: Error: Setter not found: 'name'. final String nickname = 'Bobby' ; // With a type annotation const bar = 1000000 ; // Unit of pressure (dynes/cm2) const double atm = 1.01325 * bar ; // Standard atmosphere final ngh\u0129a l\u00e0 single-assignment M\u1ed7i m\u1ed9t bi\u1ebfn final ho\u1eb7c m\u1ed9t thu\u1ed9c t\u00ednh ph\u1ea3i c\u00f3 m\u1ed9t kh\u1edfi t\u1ea1o. V\u00e0 m\u1ed9t khi b\u1ea1n \u0111\u00e3 g\u00e1n gi\u00e1 tr\u1ecb cho bi\u1ebfn \u0111\u00f3 th\u00ec, b\u1ea1n s\u1ebd ko th\u1ec3 g\u00e1n l\u1ea1i cho n\u00f3 1 gi\u00e1 tr\u1ecb kh\u00e1c. final List finalList = new List (); finalList . addAll ([ 'one' , 'two' , 'three' ]); // Fail: can not assign new value/reference to final finalList finalList = new List (); // But you can change the content of the list finalList . clear (); finalList . forEach (( f ) => print ( f )); //empty const ngh\u0129a l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng b\u1ea5t bi\u1ebfn kh\u00f4ng \u0111\u1ed5i \u1edf th\u1eddi \u0111i\u1ec3m compile code. M\u1ed9t khi b\u1ea1n g\u00e1n gi\u00e1 tr\u1ecb t\u1edbi m\u1ed9t const object th\u00ec b\u1ea1n kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb \u0111\u00f3. V\u00e0 gi\u00e1 tr\u1ecb \u0111\u00f3 ph\u1ea3i \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o v\u00e0o th\u1eddi \u0111i\u1ec3m compile code, ch\u1ee9 ko ph\u1ea3i \u0111\u1ee3i t\u1edbi th\u1eddi \u0111i\u1ec3m run code. const List constList = const [ 'one' , 'two' , 'three' ]; constList . add ( 'four' ); // Can not add to immutable object constList = new List (); // Can not assign new value constList . clear (); // Can not change the content constList . forEach (( f ) => print ( \"const $ f \" )); N\u1ebfu const variable \u1edf class level, h\u00e3y s\u1eed d\u1ee5ng static const . Ngo\u00e0i ra, const kh\u00f4ng ch\u1ec9 \u0111\u01b0\u1ee3c d\u00f9ng trong \u0111\u1ecbnh ngh\u0129a h\u1eb1ng bi\u1ebfn (constant variables), m\u00e0 n\u00f3 c\u00f2n c\u00f3 th\u1ec3 t\u1ea1o ra h\u1eb1ng gi\u00e1 tr\u1ecb (constant values). // Note: [] t\u1ea1o ra m\u1ed9t list r\u1ed7ng. // const [] t\u1ea1o ra m\u1ed9t list r\u1ed7ng v\u00e0 kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i (EIL: empty, immutable list). var foo = const []; // foo \u0111ang l\u00e0 m\u1ed9t EIL. final bar = const []; // bar s\u1ebd lu\u00f4n lu\u00f4n l\u00e0 EIL. const baz = const []; // baz l\u00e0 m\u1ed9t compile-time constant EIL. // N\u1ebfu b\u1ea1n c\u1ed1 t\u00ecnh s\u1eeda gi\u00e1 tr\u1ecb c\u1ee7a const variable list s\u1ebd c\u00f3 l\u1ed7i // foo[0] = 1; // Cannot modify an unmodifiable list // B\u1ea1n c\u00f3 th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a m\u1ed9t non-final, non-const variable // Ngay c\u1ea3 khi n\u00f3 c\u00f3 gi\u00e1 tr\u1ecb = const value. foo = [ 1 , 2 ]; // B\u1ea1n kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a 2 bi\u1ebfn sau. // bar = []; // Unhandled exception. // baz = []; // Unhandled exception.","title":"Final and const"},{"location":"dart/dart_core/#built-in-types","text":"Dart h\u1ed7 tr\u1ee3 c\u00e1c ki\u1ec3u sau: numbers strings booleans lists (hay c\u00f2n g\u1ecdi l\u00e0 arrays) maps runes (bi\u1ec3u di\u1ec5n Unicode characters theo d\u1ea1ng chu\u1ed7i) symbols M\u00ecnh s\u1ebd ch\u1ec9 \u0111\u1ec1 c\u1eadp t\u1edbi c\u00e1c ki\u1ec3u m\u00e0 m\u00ecnh th\u00edch =))","title":"Built-in types"},{"location":"dart/dart_core/#maps","text":"\u0110\u1ec3 kh\u1edfi t\u1ea1o m\u1ed9t Map object, ta c\u00f3 th\u1ec3 d\u00f9ng c\u00e1c c\u00e1ch sau: var gifts = { // Key: Value 'first' : 'partridge' , 'second' : 'turtledoves' , 'fifth' : 'golden rings' }; var gifts = Map (); gifts [ 'first' ] = 'partridge' ; gifts [ 'second' ] = 'turtledoves' ; gifts [ 'fifth' ] = 'golden rings' ; S\u1eed d\u1ee5ng .length s\u1ebd tr\u1ea3 v\u1ec1 s\u1ed1 l\u01b0\u1ee3ng c\u1eb7p key-value trong map: var gifts = { 'first' : 'partridge' }; gifts [ 'fourth' ] = 'calling birds' ; assert ( gifts . length == 2 ); Ch\u00fang ta c\u0169ng s\u1ebd g\u1eb7p l\u1ed7i n\u1ebfu c\u1ed1 t\u00ecnh thay \u0111\u1ed5i constant Map (constant values) final constantMap = const { 2 : 'helium' , 10 : 'neon' , 18 : 'argon' , }; // constantMap[2] = 'Helium'; // Uncommenting this causes an error: Cannot set value in unmodifiable Map.","title":"Maps"},{"location":"dart/dart_core/#runes","text":"Trong Dart, runes l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p m\u00e3 UTF-32 c\u1ee7a string. Unicode \u0111\u1ecbnh ngh\u0129a m\u1ed9t gi\u00e1 tr\u1ecb s\u1ed1 duy nh\u1ea5t cho m\u1ed7i k\u00fd t\u1ef1 g\u1ed3m ch\u1eef c\u00e1i, s\u1ed1 v\u00e0 k\u00fd hi\u1ec7u s\u1eed d\u1ee5ng trong h\u1ec7 th\u1ed1ng ch\u1eef vi\u1ebft tr\u00ean th\u1ebf gi\u1edbi. V\u00ec m\u1ed9t Dart string l\u00e0 s\u1ef1 n\u1ed1i ti\u1ebfp tu\u1ea7n t\u1ef1 c\u1ee7a c\u00e1c UTF-16 code units, bi\u1ec3u di\u1ec5n gi\u00e1 tr\u1ecb 32-bit Unicode trong m\u1ed9t string \u0111\u00f2i h\u1ecfi c\u00e1c c\u00fa ph\u00e1p \u0111\u1eb7c bi\u1ec7t. C\u00e1ch th\u00f4ng d\u1ee5ng \u0111\u1ec3 bi\u1ec3u di\u1ec5n m\u1ed9t m\u00e3 Unicode l\u00e0 \\uXXXX , \u1edf \u0111\u00e2y XXXX l\u00e0 m\u1ed9t chu\u1ed7i g\u1ed3m 4-ch\u1eef s\u1ed1 hexidecimal (h\u1ec7 th\u1eadp l\u1ee5c ph\u00e2n, c\u01a1 s\u1ed1 16). V\u00ed d\u1ee5, K\u00ed t\u1ef1 tr\u00e1i tim (\u2665) l\u00e0 \\u2665 . \u0110\u1ec3 bi\u1ec3u di\u1ec5n nhi\u1ec1u ho\u1eb7c \u00edt h\u01a1n 4 hex digits, ta \u0111\u1eb7t gi\u00e1 tr\u1ecb c\u1ee7a ch\u00fang trong d\u1ea5u ngo\u1eb7c nh\u1ecdn. V\u00ed d\u1ee5 v\u1edbi emoji ( ) s\u1ebd bi\u1ec3u di\u1ec5n l\u00e0 \\u{1f600} . String class c\u00f3 c\u00e1c thu\u1ed9c t\u00ednh m\u00e0 b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 l\u1ea5y th\u00f4ng v\u1ec1 rune. codeUnitAt v\u00e0 codeUnit properties tr\u1ea3 v\u1ec1 m\u00e3 16-bit. Ho\u1eb7c d\u00f9ng runes property \u0111\u1ec3 l\u1ea5y runes of a string . V\u00ed d\u1ee5 b\u00ean d\u01b0\u1edbi mi\u00eau t\u1ea3 m\u1ed1i quan h\u1ec7 gi\u1eefa runes, 16-bit code units, v\u00e0 32-bit code points. var clapping = ' \\u{1f44f} ' ; print ( clapping ); print ( clapping . codeUnits ); print ( clapping . runes . toList ()); Runes input = new Runes ( ' \\u2665 \\u{1f605} \\u{1f60e} \\u{1f47b} \\u{1f596} \\u{1f44d} ' ); print ( new String . fromCharCodes ( input )); S\u1ebd in ra \ud83d\udc4f [55357, 56399] [128079] \u2665 \ud83d\ude05 \ud83d\ude0e \ud83d\udc7b \ud83d\udd96 \ud83d\udc4d","title":"Runes"},{"location":"dart/dart_core/#functions","text":"V\u00ec Dart l\u00e0 true object-oriented language n\u00ean function c\u0169ng l\u00e0 object. B\u1ea1n c\u00f3 th\u1ec3 khai b\u00e1o 1 function theo c\u00e1c ki\u1ec3u b\u00ean d\u01b0\u1edbi: bool isNoble ( int atomicNumber ) { return _nobleGases [ atomicNumber ] != null ; } isNoble ( atomicNumber ) { return _nobleGases [ atomicNumber ] != null ; } bool isNoble ( int atomicNumber ) => _nobleGases [ atomicNumber ] != null ;","title":"Functions"},{"location":"dart/dart_core/#optional-parameters","text":"Optional named parameters: S\u1eed d\u1ee5ng d\u1ea5u ngo\u1eb7c nh\u1ecdn {param1, param2, \u2026} Optional positional parameters: S\u1eed d\u1ee5ng d\u1ea5u ngo\u1eb7c vu\u00f4ng [param1, param2, \u2026] Default parameter values: S\u1eed d\u1ee5ng d\u1ea5u = \u0111\u1ec3 khai b\u00e1o gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho optional parameter String drink ({ String drinks = 'whisky' }) { return 'I am drink $ drinks ' ; } String say ( String from , String msg , [ String device ]) { var result = ' $ from says $ msg ' ; if ( device != null ) { result = ' $ result with a $ device ' ; } return result ; } print ( drink ()); print ( drink ( drinks: 'vodka' )); print ( say ( 'Bob' , 'Howdy' )); print ( say ( 'Bob' , 'Howdy' , 'smoke signal' )); s\u1ebd cho ra k\u1ebft qu\u1ea3: I am drink whisky I am drink vodka Bob says Howdy Bob says Howdy with a smoke signal","title":"Optional parameters"},{"location":"dart/dart_core/#the-main-function","text":"T\u1ea5t c\u1ea3 c\u00e1c \u1ee9ng d\u1ee5ng \u0111\u1ec1u c\u00f3 m\u1ed9t h\u00e0m top-level main() . main() tr\u1ea3 v\u1ec3 ki\u1ec3u void v\u00e0 c\u00f3 tham s\u1ed1 tu\u1ef3 ch\u1ecdn l\u00e0 List<String> . void main ( List < String > arguments ) { print ( arguments ); assert ( arguments . length == 2 ); assert ( int . parse ( arguments [ 0 ]) == 1 ); assert ( arguments [ 1 ] == 'test' ); } Ch\u00fa \u00fd khi compile code n\u1ebfu mu\u1ed1n c\u00e1c c\u00e2u l\u1ec7nh assert c\u00f3 hi\u1ec7u l\u1ef1c th\u00ec b\u1ea1n nh\u1edb th\u00eam flag sau v\u00e0o nh\u00e9: $ dart --enable-asserts bin/main.dart 1 test","title":"The main() function"},{"location":"dart/dart_core/#functions-as-first-class-objects","text":"Dart cho ph\u00e9p truy\u1ec1n m\u1ed9t function v\u1edbi t\u01b0 c\u00e1ch l\u00e0 bi\u1ebfn c\u1ee7a m\u1ed9t function kh\u00e1c, v\u00e0 c\u0169ng c\u00f3 th\u1ec3 g\u00e1n m\u1ed9t function v\u00e0o m\u1ed9t bi\u1ebfn. void printElement ( int element ) { print ( element ); } var list = [ 1 , 2 , 3 ]; // Pass printElement as a parameter. list . forEach ( printElement ); var loudify = ( msg ) => '!!! ${ msg . toUpperCase () } !!!' ; assert ( loudify ( 'hello' ) == '!!! HELLO !!!' );","title":"Functions as first-class objects"},{"location":"dart/dart_core/#anonymous-functions","text":"B\u1ea1n c\u00f3 th\u1ec3 t\u1ea1o ra c\u00e1c h\u00e0m v\u00f4 danh ( anonymous function ) hay \u0111\u00f4i l\u00fac g\u1ecdi l\u00e0 lambda ho\u1eb7c closure . ([[ Type ] param1 [, \u2026 ]]) { codeBlock ; };","title":"Anonymous functions"},{"location":"dart/dart_core/#closures","text":"Ch\u1ec9 c\u1ea7n ch\u00fa \u00fd ki\u1ec3u tr\u1ea3 v\u1ec1 c\u1ee7a wrap function l\u00e0 Function . /// Returns a function that adds [addBy] to the /// function's argument. Function makeAdder ( num addBy ) { return ( num i ) => addBy + i ; } // Create a function that adds 2. var add2 = makeAdder ( 2 ); // Create a function that adds 4. var add4 = makeAdder ( 4 ); assert ( add2 ( 3 ) == 5 ); assert ( add4 ( 3 ) == 7 );","title":"Closures"},{"location":"dart/dart_core/#operators","text":"","title":"Operators"},{"location":"dart/dart_core/#arithmetic-operators","text":"Th\u1ea5y c\u00f3 c\u00e1i to\u00e1n t\u1eed n\u00e0y l\u1ea1 l\u1ea1 assert ( 5 / 2 == 2.5 ); // Ph\u00e9p chia tr\u1ea3 v\u1ec1 ki\u1ec3u double assert ( 5 ~/ 2 == 2 ); // Ph\u00e9p chia tr\u1ea3 v\u1ec1 ki\u1ec3u int","title":"Arithmetic operators"},{"location":"dart/dart_core/#type-test-operators","text":"M\u1ed9t to\u00e1n t\u1eed m\u00ecnh ngh\u0129 l\u00e0 r\u1ea5t m\u1edbi, d\u00f9ng \u0111\u1ec3 check ki\u1ec3u c\u1ee7a bi\u1ebfn l\u00fac runtime. Ph\u00e9p to\u00e1n \u00dd ngh\u0129a as \u00c9p ki\u1ec3u is True n\u1ebfu object c\u00f3 c\u00f9ng ki\u1ec3u \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh is! True n\u1ebfu object kh\u00f4ng c\u00f9ng ki\u1ec3u \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh M\u1ecdi th\u1ee9 trong dart \u0111\u1ec1u l\u00e0 Object String s = 'String is Object' ; assert ( s is Object == true );","title":"Type test operators"},{"location":"dart/dart_core/#assignment-operators","text":"// Assign value to a a = value ; // Assign value to b if b is null; otherwise, b stays the same b ??= value ; Ta d\u00f9ng to\u00e1n t\u1eed ??= khi mu\u1ed1n g\u00e1n gi\u00e1 tr\u1ecb cho bi\u1ebfn ch\u1ec9 khi bi\u1ebfn \u0111\u00f3 \u0111ang l\u00e0 null .","title":"Assignment operators"},{"location":"dart/dart_core/#logical-operators","text":"if ( ! done && ( col == 0 || col == 3 )) { // ...Do something... }","title":"Logical operators"},{"location":"dart/dart_core/#conditional-expressions","text":"condition ? expr1 : expr2 N\u1ebfu condition l\u00e0 true, th\u1ef1c hi\u1ec7n expr1 (v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a n\u00f3); ng\u01b0\u1ee3c l\u1ea1i, th\u1ef1c hi\u1ec7n v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a expr2 . expr1 ?? expr2 N\u1ebfu expr1 kh\u00e1c null , tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a ch\u00ednh n\u00f3; ng\u01b0\u1ee3c l\u1ea1i, tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a expr2 .","title":"Conditional expressions"},{"location":"dart/dart_core/#cascade-notation","text":"Cascades d\u1ecbch n\u00f4m na l\u00e0 th\u00e1c n\u01b0\u1edbc =)) c\u00fa ph\u00e1p l\u00e0 d\u1ea5u .. , cho ph\u00e9p anh em th\u1ef1c hi\u1ec7n nhi\u1ec1u thao t\u00e1c tu\u1ea7n t\u1ef1 tr\u00ean 1 object. Nh\u00ecn th\u00ec gi\u1ed1ng v\u1edbi thu\u1eadt ng\u1eef chain method ( Fluent_interface ) nh\u01b0ng c\u01a1 ch\u1ebf c\u00f3 \u0111\u00f4i ph\u1ea7n kh\u00e1c bi\u1ec7t. querySelector ( '#confirm' ) // Get an object. .. text = 'Confirm' // Use its members. .. classes . add ( 'important' ) .. onClick . listen (( e ) => window . alert ( 'Confirmed!' )); Trong \u0111o\u1ea1n code tr\u00ean, th\u00ec d\u00f2ng \u0111\u1ea7u g\u1ecdi t\u1edbi method querySelector() , tr\u1ea3 v\u1ec1 m\u1ed9t selector object. C\u00e1c d\u00f2ng ti\u1ebfp theo th\u1ef1c hi\u1ec7n c\u00e1c thao t\u00e1c v\u1edbi selector object, ignore b\u1ea5t k\u1ef3 k\u1ebft qu\u1ea3 n\u00e0o m\u00e0 c\u00e1c method \u0111\u00f3 tr\u1ea3 v\u1ec1. Ch\u00fang ta c\u00f3 th\u1ec3 vi\u1ebft l\u1ea1i nh\u01b0 sau: var button = querySelector ( '#confirm' ); button . text = 'Confirm' ; button . classes . add ( 'important' ); button . onClick . listen (( e ) => window . alert ( 'Confirmed!' )); \u0110\u1eb7c bi\u1ec7t l\u01b0u \u00fd l\u00e0 method \u0111\u1ea7u ti\u00ean ho\u1eb7c function kh\u1edfi t\u1ea1o cascade ph\u1ea3i tr\u1ea3 v\u1ec1 m\u1ed9t object th\u1ef1c s\u1ef1. V\u00ed d\u1ee5 \u0111o\u1ea1n code sau s\u1ebd ko th\u1ef1c hi\u1ec7n \u0111c: var sb = StringBuffer (); sb . write ( 'foo' ) .. write ( 'bar' ); // Error: method 'write' isn't defined for 'void'. \u1ede d\u00f2ng tr\u00ean sb.write('foo') ch\u00ednh l\u00e0 gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o, tuy nhi\u00ean sb.write('foo') = void , do \u0111\u00f3 b\u1ea1n kh\u00f4ng th\u1ec3 b\u1eaft \u0111\u1ea7u m\u1ed9t cascade tr\u00ean void .","title":"Cascade notation (..)"},{"location":"dart/dart_core/#other-operators","text":"H\u1ecdc th\u00eam m\u1ed9t to\u00e1n t\u1eed m\u1edbi: ?. , t\u01b0\u01a1ng t\u1ef1 nh\u01b0 . d\u00f9ng \u0111\u1ec3 truy xu\u1ea5t c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a m\u1ed9t object, nh\u01b0ng an to\u00e0n h\u01a1n ch\u00fat. V\u00ed d\u1ee5: foo?.bar s\u1ebd select ra thu\u1ed9c t\u00ednh bar t\u1eeb foo , v\u00e0 n\u1ebfu foo = null th\u00ec k\u1ebft qu\u1ea3 c\u1ee7a foo?.bar = null .","title":"Other operators"},{"location":"dart/dart_core/#control-flow-statements","text":"Dart s\u1eed d\u1ee5ng c\u00e1c c\u00e2u l\u1ec7nh sau \u0111\u1ec3 control lu\u1ed3ng x\u1eed l\u00fd: \u0110i\u1ec1u ki\u1ec7n if v\u00e0 else V\u00f2ng l\u1eb7p for V\u00f2ng l\u1eb7p while v\u00e0 do-while C\u00e2u l\u1ec7nh break v\u00e0 continue C\u00e2u l\u1ec7nh switch v\u00e0 case C\u00e2u l\u1ec7nh assert","title":"Control flow statements"},{"location":"dart/dart_core/#if-and-else","text":"Bi\u1ec3u th\u1ee9c trong \u0111i\u1ec1u ki\u1ec7n if b\u1eaft bu\u1ed9c ph\u1ea3i l\u00e0 ki\u1ec3u bool . \u0110o\u1ea1n code sau s\u1ebd kh\u00f4ng th\u1ec3 ch\u1ea1y, do 1 c\u00f3 type l\u00e0 int . if ( 1 ) { print ( 'We can not execute this code!' ); }","title":"If and else"},{"location":"dart/dart_core/#for-loops","text":"Closure b\u00ean trong Dart's for loops c\u00f3 th\u1ec3 capture \u0111\u01b0\u1ee3c value v\u00e0 index \u1edf th\u1eddi \u0111i\u1ec3m compile-time, tr\u00e1nh \u0111\u01b0\u1ee3c c\u00e1c l\u1ed7i c\u01a1 b\u1ea3n hay x\u1ea3y ra trong Javascript. H\u00e3y th\u1eed so s\u00e1nh 2 \u0111o\u1ea1n code v\u00e0 k\u1ebft qu\u1ea3 output ra gi\u1eefa 2 ng\u00f4n ng\u1eef xem sao :hugs: Javascript var callbacks = []; for ( var i = 0 ; i < 2 ; i ++ ) { callbacks . push (() => console . log ( i )); } callbacks . forEach (( c ) => c ()); terminal 2 2 Dart var callbacks = []; for ( var i = 0 ; i < 2 ; i ++ ) { callbacks . add (() => print ( i )); } callbacks . forEach (( c ) => c ()); 0 1 Dart support l\u1ec7nh for-in v\u00e0 forEach var collection = [ 0 , 1 , 2 ]; for ( var x in collection ) { print ( x ); // 0 1 2 } candidates . forEach (( candidate ) => candidate . interview ());","title":"For loops"},{"location":"dart/dart_core/#assert","text":"Dart h\u1ed7 tr\u1ee3 method assert , d\u00f9ng \u0111\u1ec3 ng\u0103n ch\u01b0\u01a1ng tr\u00ecnh ti\u1ebfp t\u1ee5c th\u1ef1c thi n\u1ebfu c\u00f3 b\u1ea5t k\u1ef3 \u0111i\u1ec1u ki\u1ec7n n\u00e0o b\u00ean trong n\u00f3 l\u00e0 false . // Make sure the variable has a non-null value. assert ( text != null ); // Make sure the value is less than 100. assert ( number < 100 ); // Make sure this is an https URL. assert ( urlString . startsWith ( 'https' )); \u0110\u1ec3 thay th\u1ebf n\u1ed9i dung hi\u1ec3n th\u1ecb khi assert th\u1ea5t b\u1ea1i, ch\u00fang ta th\u00eam message v\u00e0o tham s\u1ed1 th\u1ee9 hai. var urlString = 'www.google.com' ; assert ( urlString . startsWith ( 'https' ), 'URL ( $ urlString ) should start with \"https\".' ); Failed assertion: line 7 pos 8: 'urlString.startsWith('https')': URL (www.google.com) should start with \"https\".","title":"Assert"},{"location":"dart/dart_core/#exceptions","text":"","title":"Exceptions"},{"location":"dart/dart_core/#throw","text":"Th\u00f4ng th\u01b0\u1eddng ch\u00fang ta s\u1ebd raise m\u1ed9t exception nh\u01b0 sau throw new Exception ( \"message\" ); throw UnimplementedError (); throw FormatException ( 'Expected at least 1 section' ); \u0111\u00f4i khi c\u00f3 th\u1ec3 l\u00e0 1 objects throw 'Out of llamas!' ; \u0110\u1ec3 n\u00e2ng cao ch\u1ea5t l\u01b0\u1ee3ng, c\u0169ng nh\u01b0 \u00fd ngh\u0129a c\u1ee7a code th\u00ec b\u1ea1n n\u00ean nghi\u00ean c\u1ee9u implement exception l\u00e0 subtype c\u1ee7a c\u00e1c method/class t\u1eeb Error v\u00e0 Exception","title":"Throw"},{"location":"dart/dart_core/#catch","text":"try { breedMoreLlamas (); } on OutOfLlamasException { // A specific exception buyMoreLlamas (); } on Exception catch ( e ) { // Anything else that is an exception print ( 'Unknown exception: $ e ' ); } catch ( e ) { // No specified type, handles all print ( 'Something really unknown: $ e ' ); } B\u1ea1n c\u00f3 th\u1ec3 ch\u1ec9 \u0111\u1ecbnh 1 ho\u1eb7c 2 parameters cho method catch() . try { // \u00b7\u00b7\u00b7 } on Exception catch ( e ) { print ( 'Exception details: \\n $ e ' ); } catch ( e , s ) { print ( 'Exception details: \\n $ e ' ); print ( 'Stack trace: \\n $ s ' ); }","title":"Catch"},{"location":"dart/dart_core/#finally","text":"Ki\u1ebfn th\u1ee9c v\u00f4 c\u00f9ng c\u0103n b\u1ea3n Code block \u0111\u1eb7t trong finally s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi d\u00f9 c\u00f3 hay kh\u00f4ng c\u00f3 ngo\u1ea1i l\u1ec7. try { breedMoreLlamas (); } finally { // Always clean up, even if an exception is thrown. cleanLlamaStalls (); } try { breedMoreLlamas (); } catch ( e ) { print ( 'Error: $ e ' ); // Handle the exception first. } finally { cleanLlamaStalls (); // Then clean up. }","title":"Finally"},{"location":"dart/dart_core/#classes","text":"Dart l\u00e0 ng\u00f4n ng\u1eef h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng v\u1edbi class (m\u1ecdi object \u0111\u1ec1u l\u00e0 m\u1ed9t instance c\u1ee7a class) v\u00e0 mixin-based inheritance (m\u1eb7c d\u00f9 m\u1ed9t class ch\u1ec9 c\u00f3 duy nh\u1ea5t m\u1ed9t superclass, nh\u01b0ng m\u00e0 class body (c\u00e1c variable, method) c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u1ea1i nh\u01b0 multiple class hierarchies (\u0111a th\u1eeba k\u1ebf)). // Create a Point using Point(). var p1 = new Point ( 2 , 2 ); // Create a Point using Point.fromJson(). var p2 = new Point . fromJson ( jsonData ); T\u1eeb Dart 2 b\u1ea1n c\u00f3 th\u1ec3 b\u1ecf t\u1eeb kh\u00f3a new . V\u00ed d\u1ee5: var p1 = Point(2, 2) .","title":"Classes"},{"location":"dart/dart_core/#using-class-members","text":"S\u1eed d\u1ee5ng ?. thay cho . khi truy xu\u1ea5t members c\u1ee7a class gi\u00fap ta tr\u00e1nh \u0111\u01b0\u1ee3c c\u00e1c exception khi object c\u00f3 gi\u00e1 tr\u1ecb null: // If p is non-null, set its y value to 4. p ? . y = 4 ;","title":"Using class members"},{"location":"dart/dart_core/#constructors","text":"class Point { num x , y ; Point ( num x , num y ) { // There's a better way to do this, stay tuned. this . x = x ; this . y = y ; } } this keyword \u0111\u1ec3 ch\u1ec9 current instance. Dart c\u00f2n h\u1ed7 tr\u1ee3 pattern constructor class Point { num x , y ; // Syntactic sugar for setting x and y // before the constructor body runs. Point ( this . x , this . y ); }","title":"Constructors"},{"location":"dart/dart_core/#default-constructors","text":"N\u1ebfu b\u1ea1n ko khai b\u00e1o constructor c\u0169ng m\u00e9o sao c\u1ea3 , m\u1eb7c \u0111\u1ecbnh Dart s\u1ebd t\u1ea1o ra constructor kh\u00f4ng tham s\u1ed1 cho class \u0111\u00f3.","title":"Default constructors"},{"location":"dart/dart_core/#constructors-arent-inherited","text":"M\u1ed9t \u0111i\u1ec1u \u0111\u00e1ng l\u01b0u \u00fd l\u00e0 trong Dart th\u00ec subclasses kh\u00f4ng k\u1ebf th\u1eeba constructor t\u1eeb superclass","title":"Constructors aren\u2019t inherited"},{"location":"dart/dart_core/#named-constructors","text":"S\u1eed d\u1ee5ng named constructor \u0111\u1ec3 c\u00f3 th\u1ec3 implement nhi\u1ec1u constructors cho m\u1ed9t class: class Point { num x , y ; Point ( this . x , this . y ); // Named constructor Point . origin () { x = 0 ; y = 0 ; } }","title":"Named constructors"},{"location":"dart/dart_core/#invoking-a-non-default-superclass-constructor","text":"M\u1eb7c \u0111\u1ecbnh th\u00ec constructor c\u1ee7a subclass s\u1ebd g\u1ecdi t\u1edbi unnamed, no-argument constructor c\u1ee7a superclass. Constructor c\u1ee7a superclass s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi \u1edf \u0111i\u1ec3m b\u1eaft \u0111\u1ea7u c\u1ee7a constructor body. N\u1ebfu c\u00f3 m\u1ed9t initializer list \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng, n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi tr\u01b0\u1edbc khi g\u1ecdi t\u1edbi superclass. V\u1ec1 c\u01a1 b\u1ea3n th\u00ec th\u1ee9 t\u1ef1 th\u1ef1c thi constructor nh\u01b0 sau: initializer list superclass's no-arg constructor main class's no-arg constructor T\u01b0\u01a1ng t\u1ef1 ch\u00fang ta h\u00e3y th\u1eed xem c\u00e1c case sau: Superclass kh\u00f4ng khai b\u00e1o constructor: class Person { String firstName ; } class Employee extends Person { Employee ( Map data ) { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } in Employee Th\u1ebf l\u00e0 subclass kh\u00f4ng g\u1ecdi c\u00e1i default constructor, code v\u1eabn ch\u1ea1y v\u00f4 t\u01b0 Superclass khai b\u00e1o unnamed, no-agrument constructor, v\u00e0 subclass g\u1ecdi constructor \u0111\u00f3 (tr\u01b0\u1eddng h\u1ee3p kh\u00f4ng g\u1ecdi c\u0169ng th\u1ebf) class Person { String firstName ; Person () { print ( 'in Person' ); } } class Employee extends Person { Employee ( Map data ) : super () { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } in Person in Employee Ok, m\u1eb7c cho tham s\u1ed1 gi\u1eefa constructor c\u1ee7a super v\u00e0 subclass kh\u00e1c nhau, code v\u1eabn \u1ed5n Superclass khai b\u00e1o unamed constructor (constructor n\u00e0y c\u00f3 argument) v\u00e0 subclass kh\u00f4ng g\u1ecdi constructor \u0111\u00f3: class Person { String firstName ; Person ( num x ) { print ( 'in Person' ); } } class Employee extends Person { Employee ( Map data ) { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } Error: The unnamed constructor in 'Person' requires arguments. NG, ko g\u1ecdi ko \u0111\u01b0\u1ee3c Superclass khai b\u00e1o named constructor v\u00e0 subclass kh\u00f4ng g\u1ecdi constructor \u0111\u00f3 class Person { String firstName ; Person . fromJson () { print ( 'in Person' ); } } class Employee extends Person { Employee ( Map data ) { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } Error: 'Person' doesn't have an unnamed constructor. Tr\u01b0\u1eddng h\u1ee3p n\u00e0y cho ch\u00fang ta th\u1ea5y ngay m\u1ed9t \u0111i\u1ec1u l\u00e0 n\u1ebfu superclass c\u00f3 m\u1ed9t named constructor, \u0111\u1ed3ng ngh\u0129a v\u1edbi vi\u1ec7c c\u00e1c subclass c\u0169ng ph\u1ea3i t\u1ea1o ra constructor v\u00e0 g\u1ecdi l\u1ea1i construcor c\u1ee7a superclass \u0111\u00f3. Th\u1eed s\u1eeda l\u1ea1i code c\u1ee7a Employee , ta c\u00f3 k\u1ebft qu\u1ea3 sau: class Employee extends Person { Employee ( Map data ) : super . fromJson () { print ( 'in Employee' ); } } in Person in Employee Superclass khai b\u00e1o c\u1ea3 named & unnamed constructor th\u00ec sao ??? class Person { String firstName ; Person () { print ( 'in unnamed Person' ); } Person . fromJson ( Map data ) { print ( 'in fromJson Person' ); } } class Employee extends Person { Employee ( Map data ) : super () { // :super.fromJson(data) print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } in unnamed Person // in fromJson Person in Employee R\u00f5 r\u00e0ng \u1edf tr\u01b0\u1eddng h\u1ee3p superclass c\u00f3 m\u1ed9t unnamed, no-argument constructor th\u00ec g\u1ecdi hay ko g\u1ecdi c\u0169ng ko th\u00e0nh v\u1ea5n \u0111\u1ec1. V\u00e0 g\u1ecdi c\u00e1i n\u00e0o c\u0169ng \u0111c. Ch\u00fang ta c\u0169ng c\u00f3 th\u1ec3 truy\u1ec1n tham s\u1ed1 v\u00e0o superclass constructor th\u00f4ng qua k\u1ebft qu\u1ea3 t\u00ednh to\u00e1n c\u1ee7a m\u1ed9t method , tuy nhi\u00ean tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n n\u00e0y (hay n\u1ed9i t\u1ea1i trong method ) kh\u00f4ng \u0111\u01b0\u1ee3c access t\u1edbi this class Employee extends Person { Employee () : super . fromJson ( getDefaultData ()); // \u00b7\u00b7\u00b7 }","title":"Invoking a non-default superclass constructor"},{"location":"dart/dart_core/#initializer-list","text":"// Initializer list sets instance variables before // the constructor body runs. Point . fromJson ( Map < String , num > json ) : x = json [ 'x' ], y = json [ 'y' ] { print ( 'In Point.fromJson(): ( $ x , $ y )' ); } L\u01b0u \u00fd: Khi kh\u1edfi t\u1ea1o (\u1ede code tr\u00ean th\u00ec initializer l\u00e0 code block sau d\u1ea5u :) kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p truy c\u1eadp t\u1edbi bi\u1ebfn this . Trong qu\u00e1 tr\u00ecnh development, b\u1ea1n c\u00f3 th\u1ec3 validate inputs b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng assert trong initializer list. Point . withAssert ( this . x , this . y ) : assert ( x >= 0 ) { print ( 'In Point.withAssert(): ( $ x , $ y )' ); }","title":"Initializer list"},{"location":"dart/dart_core/#redirecting-constructors","text":"\u0110\u00f4i l\u00fac nhi\u1ec7m v\u1ee5 duy nh\u1ea5t c\u1ee7a m\u1ed9t constructor ch\u1ec9 l\u00e0 chuy\u1ec3n h\u01b0\u1edbng sang m\u1ed9t constructor kh\u00e1c trong c\u00f9ng m\u1ed9t class. Redirecting constructor lu\u00f4n c\u00f3 body l\u00e0 r\u1ed7ng, v\u00e0 ch\u1ec9 sinh ra \u0111\u1ec3 g\u1ecdi t\u1edbi m\u1ed9t constructor kh\u00e1c sau d\u1ea5u : . class Point { num x , y ; // The main constructor for this class. Point ( this . x , this . y ) { print ( 'This coordinate: x= $ x y= $ y ' ); } // Delegates to the main constructor. Point . alongXAxis ( num x ) : this ( x , 0 ); } var p = Point . alongXAxis ( 1 ); This coordinate: x=1 y=0 Trong v\u00ed d\u1ee5 tr\u00ean th\u00ec Point1.alongXAxis ch\u00ednh l\u00e0 redirecting constructor .","title":"Redirecting constructors"},{"location":"dart/dart_core/#constant-constructors","text":"N\u1ebfu nh\u01b0 b\u1ea1n mu\u1ed1n t\u1ea1o ra m\u1ed9t object kh\u00f4ng \u0111\u1ed5i, h\u00e3y t\u1ea1o ra m\u1ed9t const constructor, v\u00e0 \u0111\u1ea3m b\u1ea3o r\u1eb1ng c\u00e1c variable l\u00e0 final: class ImmutablePoint { static final ImmutablePoint origin = const ImmutablePoint ( 0 , 0 ); final num x , y ; const ImmutablePoint ( this . x , this . y ); }","title":"Constant constructors"},{"location":"dart/dart_core/#factory-constructors","text":"Ch\u00fang ta s\u1eed d\u1ee5ng factory khi mu\u1ed1n implement constructor kh\u00f4ng ch\u1ec9 \u0111\u1ec3 t\u1ea1o ra m\u1ed9t instance m\u1edbi c\u1ee7a class m\u00e0 c\u00f2n c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t instance t\u1eeb cache, ho\u1eb7c m\u1ed9t subtype instance. V\u00ed d\u1ee5 sau implement Logger class l\u00e0m nhi\u1ec7m v\u1ee5 class Logger { final String name ; bool mute = false ; // _cache is library-private, thanks to // the _ in front of its name. static final Map < String , Logger > _cache = < String , Logger > {}; factory Logger ( String name ) { print ( 'Logger \\' s name: $ name ' ); print ( 'Logger \\' s cache: $ _cache ' ); if ( _cache . containsKey ( name )) { return _cache [ name ]; } else { final logger = Logger . _internal ( name ); _cache [ name ] = logger ; return logger ; } } Logger . _internal ( this . name ); void log ( String msg ) { if ( ! mute ) print ( 'Log message: $ msg ' ); } } main () { var loggerOne = Logger ( 'UI' ); loggerOne . log ( 'Button clicked' ); print ( '**************' ); var loggerTwo = Logger ( 'UI' ); loggerTwo . log ( 'Icon clicked' ); } Logger's name: UI Logger's cache: {} Log message: Button clicked ************** Logger's name: UI Logger's cache: {UI: Instance of 'Logger'} Log message: Icon clicked L\u01b0u \u00fd r\u1eb1ng Factory constructor kh\u00f4ng th\u1ec3 truy c\u1eadp v\u00e0o this .","title":"Factory constructors"},{"location":"dart/dart_core/#methods","text":"","title":"Methods"},{"location":"dart/dart_core/#instance-methods","text":"Ko c\u00f3 g\u00ec \u0111\u1eb7c s\u1eafc ngo\u00e0i vi\u1ec7c truy xu\u1ea5t t\u1edbi instance variables m\u00e0 ko c\u1ea7n this . import 'dart:math' ; class Point { num x , y ; Point ( this . x , this . y ); num distanceTo ( Point other ) { var dx = x - other . x ; var dy = y - other . y ; return sqrt ( dx * dx + dy * dy ); } }","title":"Instance methods"},{"location":"dart/dart_core/#getters-and-setters","text":"N\u1ebfu b\u1ea1n \u0111\u00e3 t\u1eebng code Typescript th\u00ec th\u1ea5y kh\u00f4ng kh\u00e1c m\u1ea5y class Rectangle { num left , top , width , height ; Rectangle ( this . left , this . top , this . width , this . height ); // Define two calculated properties: right and bottom. num get right => left + width ; set right ( num value ) => left = value - width ; num get bottom => top + height ; set bottom ( num value ) => top = value - height ; } void main () { var rect = Rectangle ( 3 , 4 , 20 , 15 ); assert ( rect . left == 3 ); rect . right = 12 ; assert ( rect . left == - 8 ); }","title":"Getters and setters"},{"location":"dart/dart_core/#abstract-methods","text":"Abstract methods ch\u1ec9 t\u1ed3n t\u1ea1i b\u00ean trong abstract classes . abstract class Doer { // Define instance variables and methods... void doSomething (); // Define an abstract method. } class EffectiveDoer extends Doer { void doSomething () { // Provide an implementation, so the method is not abstract here... } }","title":"Abstract methods"},{"location":"dart/dart_core/#overridable-operators","text":"Ph\u1ea7n n\u00e0y m\u00f4 t\u1ea3 c\u00e1ch implement ho\u1ea1t \u0111\u1ed9ng c\u1ee7a c\u00e1c to\u00e1n t\u1eed v\u1edbi 1 object. V\u00ed d\u1ee5 b\u1ea1n c\u00f3 Vector class, v\u00e0 b\u1ea1n c\u1ea7n \u0111\u1ecbnh ngh\u0129a th\u00eam ph\u00e9p + 2 vectors ch\u1eb3ng h\u1ea1n. . . . . < + | [] > / ^ []= <= ~/ & ~ >= * << == \u2013 % >> class Vector { final int x , y ; const Vector ( this . x , this . y ); /// Overrides + (a + b). Vector operator + ( Vector v ) { return Vector ( x + v . x , y + v . y ); } /// Overrides - (a - b). Vector operator - ( Vector v ) { return Vector ( x - v . x , y - v . y ); } } void main () { final v = Vector ( 2 , 3 ); final w = Vector ( 2 , 2 ); // v == (2, 3) assert ( v . x == 2 && v . y == 3 ); // v + w == (4, 5) assert (( v + w ). x == 4 && ( v + w ). y == 5 ); // v - w == (0, 1) assert (( v - w ). x == 0 && ( v - w ). y == 1 ); }","title":"Overridable operators"},{"location":"dart/dart_core/#abstract-classes","text":"S\u1eed d\u1ee5ng abstract modifier \u0111\u1ec3 khai b\u00e1o m\u1ed9t abstract class \u2014M\u1ed9t class kh\u00f4ng th\u1ec3 t\u1ea1o instance. Abstract classes th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a interfaces . Tuy nhi\u00ean n\u1ebfu b\u1ea1n mu\u1ed1n t\u1ea1o instance t\u1eebIf you want your abstract class to appear to be instantiable, define a factory constructor. // This class is declared abstract and thus // can't be instantiated. abstract class AbstractContainer { // Define constructors, fields, methods... void updateChildren (); // Abstract method. }","title":"Abstract classes"},{"location":"dart/dart_core/#implicit-interfaces","text":"M\u1ed7i class trong Dart ng\u1ea7m \u0111\u1ecbnh ngh\u0129a m\u1ed9t interface ch\u1ee9a to\u00e0n b\u1ed9 c\u00e1c instance member c\u1ee7a class \u0111\u00f3. D\u1ecb vl, abstract th\u00ec c\u00f3 keyword c\u00f2n interface th\u00ec m\u00e9o ko // A person. The implicit interface contains greet(). // A person. The implicit interface contains greet(). class Person { // In the interface, but visible only in this library. final _name ; // Not in the interface, since this is a constructor. Person ( this . _name ); // In the interface. String greet ( String who ) => 'Hello, $ who . I am $ _name .' ; } // An implementation of the Person interface. class Impostor implements Person { get _name => '' ; String greet ( String who ) => 'Hi $ who . Do you know who I am?' ; } String greetBob ( Person person ) => person . greet ( 'Bob' ); void main () { print ( greetBob ( Person ( 'Kathy' ))); print ( greetBob ( Impostor ())); } N\u1ebfu nh\u01b0 class Impostor kh\u00f4ng khai b\u00e1o method greet th\u00ec ch\u00fang ta s\u1ebd nh\u1eadn qu\u1ea3 \u0111\u1eafng sau Error: The non-abstract class 'Impostor' is missing implementations for these members: 'greet'. Dart h\u1ed7 tr\u1ee3 \u0111a k\u1ebf th\u1eeba class Point implements Comparable , Location {...}","title":"Implicit interfaces"},{"location":"dart/dart_core/#extending-a-class","text":"S\u1eed d\u1ee5ng extends \u0111\u1ec3 t\u1ea1o ra subclass, v\u00e0 super \u0111\u1ec3 tr\u1ecf t\u1edbi superclass: class Television { void turnOn () { _illuminateDisplay (); _activateIrSensor (); } // \u00b7\u00b7\u00b7 } class SmartTelevision extends Television { void turnOn () { super . turnOn (); _bootNetworkInterface (); _initializeMemory (); _upgradeApps (); } // \u00b7\u00b7\u00b7 }","title":"Extending a class"},{"location":"dart/dart_core/#overriding-members","text":"Subclasses c\u00f3 th\u1ec3 override (ghi \u0111\u00e8) instance methods, getters, v\u00e0 setters. Ch\u00fang ta s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 @override \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh methods, ... b\u1ecb ghi \u0111\u00e8: class SmartTelevision extends Television { @ override void turnOn () {...} // \u00b7\u00b7\u00b7 } \u0110\u1ec3 thu h\u1eb9p (si\u1ebft ch\u1eb7t) ki\u1ec3u c\u1ee7a method parameter ho\u1eb7c instance variable hay c\u00f2n g\u1ecdi l\u00e0 type safe , b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 covariant : class Animal { String name ; Animal ( this . name ); void chase ( Animal x ) { print ( ' $ name chase ${ x . name } ' ); } } class Dog extends Animal { Dog () : super ( 'Dog' ); } class Mouse extends Animal { Mouse () : super ( 'Mouse' ); } class Cat extends Animal { Cat () : super ( 'Cat' ); void chase ( covariant Mouse x ) { super . chase ( x ); } } void main () { Cat c = new Cat (); Dog d = new Dog (); Mouse m = new Mouse (); d . chase ( m ); // Dog chase Mouse c . chase ( m ); // Cat chase Mouse c . chase ( d ); // Error: A value of type '#lib1::Dog' can't be assigned to a variable of type '#lib1::Mouse'. }","title":"Overriding members"},{"location":"dart/dart_core/#nosuchmethod","text":"H\u00e3y ghi \u0111\u00e8 ph\u01b0\u01a1ng th\u1ee9c noSuchMethod() trong tr\u01b0\u1eddng h\u1ee3p b\u1ea1n mu\u1ed1n b\u1eaft c\u00e1c tr\u01b0\u1eddng h\u1ee3p ng\u01b0\u1eddi d\u00f9ng truy c\u1eadp method ho\u1eb7c variable kh\u00f4ng t\u1ed3n t\u1ea1i class A { // Unless you override noSuchMethod, using a // non-existent member results in a NoSuchMethodError. @ override void noSuchMethod ( Invocation invocation ) { print ( 'You tried to use a non-existent member: ' + ' ${ invocation . memberName } ' ); } }","title":"noSuchMethod()"},{"location":"dart/dart_core/#enumerated-types","text":"","title":"Enumerated types"},{"location":"dart/dart_core/#using-enums","text":"\u0110\u1ec3 khai b\u00e1o m\u1ed9t ki\u1ec3u enumerations , ta s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 enum : enum Color { red , green , blue } M\u1ed7i gi\u00e1 tr\u1ecb b\u00ean trong enum \u0111\u1ec1u c\u00f3 method index getter, tr\u1ea3 v\u1ec1 v\u1ecb tr\u00ed c\u1ee7a ch\u00fang (0-based array): assert ( Color . red . index == 0 ); assert ( Color . green . index == 1 ); assert ( Color . blue . index == 2 ); \u0110\u1ec3 l\u1ea5y ra to\u00e0n b\u1ed9 c\u00e1c gi\u00e1 tr\u1ecb trong enum, ch\u00fang ta s\u1eed d\u1ee5ng enum\u2019s values constant. List < Color > colors = Color . values ; assert ( colors [ 2 ] == Color . blue );","title":"Using enums"},{"location":"dart/dart_core/#adding-features-to-a-class-mixins","text":"Mixin l\u00e0 m\u1ed9t t\u00ednh n\u0103ng t\u01b0\u01a1ng t\u1ef1 v\u1edbi trait trong php, ta s\u1eed d\u1ee5ng withth keywords v\u00e0 theo sau n\u00f3 l\u00e0 m\u1ed9t ho\u1eb7c nhi\u1ec1u mixin names. class Musician extends Performer with Musical { // \u00b7\u00b7\u00b7 } class Maestro extends Person with Musical , Aggressive , Demented { Maestro ( String maestroName ) { name = maestroName ; canConduct = true ; } } \u0110\u1ec3 implement mixin c\u1ea7n t\u1ea1o m\u1ed9t class k\u1ebf th\u1eeba Object, kh\u00f4ng c\u00f3 constructor v\u00e0 kh\u00f4ng g\u1ecdi t\u1edbi super : abstract class Musical { bool canPlayPiano = false ; bool canCompose = false ; bool canConduct = false ; void entertainMe () { if ( canPlayPiano ) { print ( 'Playing piano' ); } else if ( canConduct ) { print ( 'Waving hands' ); } else { print ( 'Humming to self' ); } } }","title":"Adding features to a class: mixins"},{"location":"dart/dart_core/#class-variables-and-methods","text":"S\u1eed d\u1ee5ng static keyword \u0111\u1ec3 implement class-wide variables v\u00e0 methods.","title":"Class variables and methods"},{"location":"dart/dart_core/#static-variables","text":"class Queue { static const initialCapacity = 16 ; // \u00b7\u00b7\u00b7 } void main () { assert ( Queue . initialCapacity == 16 ); } Bi\u1ebfn static s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o cho t\u1edbi khi n\u00f3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng.","title":"Static variables"},{"location":"dart/dart_core/#static-methods","text":"import 'dart:math' ; class Point { num x , y ; Point ( this . x , this . y ); static num distanceBetween ( Point a , Point b ) { var dx = a . x - b . x ; var dy = a . y - b . y ; return sqrt ( dx * dx + dy * dy ); } } void main () { var a = Point ( 2 , 2 ); var b = Point ( 4 , 4 ); var distance = Point . distanceBetween ( a , b ); assert ( 2.8 < distance && distance < 2.9 ); print ( distance ); } B\u00ean trong static method kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p s\u1eed d\u1ee5ng this .","title":"Static methods"},{"location":"dart/dart_core/#generics","text":"N\u1ebfu \u0111\u00e3 \u0111\u1ecdc c\u00e1c ghi ch\u00fa ph\u00eda tr\u00ean th\u00ec \u1eaft h\u1eb3n b\u1ea1n \u0111\u00e3 bi\u1ebft t\u1edbi List<E> v\u1edbi E l\u00e0 m\u1ed9t ki\u1ec3u (v\u00ed d\u1ee5: int ). V\u1ec1 m\u1eb7t quy \u01b0\u1edbc <\u2026> \u0111\u00e1nh d\u1ea5u List l\u00e0 m\u1ed9t ki\u1ec3u generic (ho\u1eb7c parameterized ).","title":"Generics"},{"location":"dart/dart_core/#why-use-generics","text":"L\u1ee3i \u00edch: Code sinh ra t\u1ed1t h\u01a1n n\u1ebfu \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh \u0111\u00fang ki\u1ec3u c\u1ee7a k\u1ebft qu\u1ea3. var names = List < String > (); names . addAll ([ 'Seth' , 'Kathy' , 'Lars' ]); names . add ( 42 ); // Error S\u1eed d\u1ee5ng generic gi\u00fap gi\u1ea3m code duplication. abstract class ObjectCache { Object getByKey ( String key ); void setByKey ( String key , Object value ); } abstract class StringCache { String getByKey ( String key ); void setByKey ( String key , String value ); } 2 class tr\u00ean c\u00f3 th\u1ec3 thay b\u1eb1ng m\u1ed9t class t\u01b0\u01a1ng \u0111\u01b0\u01a1ng abstract class Cache < T > { T getByKey ( String key ); void setByKey ( String key , T value ); } Theo quy \u01b0\u1edbc, ki\u1ec3u b\u00ean trong <\u2026> l\u00e0 nh\u1eefng ch\u1eef c\u00e1i nh\u01b0: E, T, S, K, hay V.","title":"Why use generics?"},{"location":"dart/dart_core/#using-collection-literals","text":"List v\u00e0 map \u0111\u1ec1u c\u00f3 th\u1ec3 parameterized. <type> (cho lists) v\u00e0 <keyType, valueType> (cho maps). var names = < String > [ 'Seth' , 'Kathy' , 'Lars' ]; var pages = < String , String > { 'index.html' : 'Homepage' , 'robots.txt' : 'Hints for web robots' , 'humans.txt' : 'We are people, not machines' };","title":"Using collection literals"},{"location":"dart/dart_core/#using-parameterized-types-with-constructors","text":"Dart h\u1ed7 tr\u1ee3 l\u1eadp tr\u00ecnh vi\u00ean ch\u1ec9 \u0111\u1ecbnh r\u00f5 m\u1ed9t ho\u1eb7c nhi\u1ec1u ki\u1ec3u khi s\u1eed d\u1ee5ng constructor: var names = List < String > (); names . addAll ([ 'Seth' , 'Kathy' , 'Lars' ]); var nameSet = Set < String > . from ( names ); class View { int x ; View ( this . x ); } var views = Map < int , View > (); views [ 0 ] = View ( 0 );","title":"Using parameterized types with constructors"},{"location":"dart/dart_core/#generic-collections-and-the-types-they-contain","text":"var names = List < String > (); names . addAll ([ 'Seth' , 'Kathy' , 'Lars' ]); print ( names is List < String > ); // true M\u1ecdi ki\u1ec3u generic trong Dart \u0111\u1ec1u \u0111\u01b0\u1ee3c reified (c\u1ee5 th\u1ec3 ho\u00e1), \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 th\u00f4ng tin v\u1ec1 ki\u1ec3u d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c mang \u0111i ngay c\u1ea3 khi runtime . Ng\u01b0\u1ee3c l\u1ea1i, generic trong Java s\u1eed d\u1ee5ng erasure (xo\u00e1 b\u1ecf), \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 b\u1ea1n c\u00f3 th\u1ec3 ki\u1ec3m tra \u0111\u01b0\u1ee3c object l\u00e0 m\u1ed9t List, nh\u01b0ng b\u1ea1n kh\u00f4ng th\u1ec3 ki\u1ec3m tra chi ti\u1ebft t\u1edbi m\u1ee9c List<String> .","title":"Generic collections and the types they contain"},{"location":"dart/dart_core/#restricting-the-parameterized-type","text":"Khi code m\u1ed9t generic type, b\u1ea1n c\u00f3 th\u1ec3 mu\u1ed1n gi\u1edbi h\u1ea1n c\u00e1c ki\u1ec3u parameters c\u1ee7a n\u00f3. Khi \u0111\u00f3 h\u00e3y s\u1eed d\u1ee5ng extends . class Foo < T extends SomeBaseClass > { // Implementation goes here... String toString () => \"Instance of 'Foo< $ T >'\" ; } class Extender extends SomeBaseClass {...} Ho\u00e0n to\u00e0n OK n\u1ebfu b\u1ea1n s\u1eed d\u1ee5ng SomeBaseClass ho\u1eb7c b\u1ea5t k\u1ef3 subclasses n\u00e0o c\u1ee7a n\u00f3: var someBaseClassFoo = Foo < SomeBaseClass > (); var extenderFoo = Foo < Extender > (); ho\u1eb7c kh\u00f4ng m\u1ed9t ki\u1ec3u n\u00e0o c\u1ea3: var foo = Foo (); print ( foo ); // Instance of 'Foo<SomeBaseClass>' N\u1ebfu b\u1ea1n ch\u1ec9 \u0111\u1ecbnh m\u1ed9t ki\u1ec3u non- SomeBaseClass s\u1ebd c\u00f3 l\u1ed7i: var foo = Foo < Object > ();","title":"Restricting the parameterized type"},{"location":"dart/dart_core/#using-generic-methods","text":"V\u00e0o l\u00fac kh\u1edfi t\u1ea1o, Dart\u2019s generic gi\u1edbi h\u1ea1n trong classes. T first < T > ( List < T > ts ) { // Do some initial work or error checking, then... T tmp = ts [ 0 ]; // Do some additional checking or processing... return tmp ; } Ki\u1ec3u generic parameter trong first (<T>) cho ph\u00e9p b\u1ea1n s\u1eed ki\u1ec3u argument T \u1edf m\u1ed9t v\u00e0i n\u01a1i: Trong function\u2019s tr\u1ea3 v\u1ec1 ki\u1ec3u ( T ). Trong ki\u1ec3u c\u1ee7a tham s\u1ed1 ( List<T> ). Trong ki\u1ec3u c\u1ee7a bi\u1ebfn \u0111\u1ecba ph\u01b0\u01a1ng ( T tmp ). Chi ti\u1ebft h\u01a1n \u0111\u1ec3 khai b\u00e1o m\u1ed9t generic methods Ki\u1ec3u parameter c\u1ee7a generic methods \u0111\u01b0\u1ee3c li\u1ec7t k\u00ea ngay sau t\u00ean c\u1ee7a method/function v\u00e0 b\u00ean trong <> /// 2 ki\u1ec3u c\u1ee7a parameters, [K] v\u00e0 [V]. Map < K , V > singletonMap < K , V > ( K key , V value ) { return < K , V > { key , value }; } Trong tr\u01b0\u1eddng h\u1ee3p ki\u1ec3u l\u00e0 class, b\u1ea1n c\u00f3 th\u1ec3 th\u00eam gi\u1edbi h\u1ea1n cho n\u00f3 /// Danh s\u00e1ch 2 s\u1ed1 ki\u1ec3u [T] d\u1eabn xu\u1ea5t t\u1eeb ki\u1ec3u num. T sumPair < T extends num > ( List < T > items ) { return items [ 0 ] + items [ 1 ]; } Class methods ( instance v\u00e0 static ) c\u00f3 th\u1ec3 khai b\u00e1o generic parameters theo c\u00e1ch t\u01b0\u01a1ng t\u1ef1: class C { static int f < S , T > ( int x ) => 3 ; int m < S , T > ( int x ) => 3 ; } Generic method v\u1edbi t\u01b0 c\u00e1ch l\u00e0 function-typed parameters, local functions, v\u00e0 function expressions: /// Truy\u1ec1n v\u00e0o generic method l\u00e0 m\u1ed9t [callback] parameter. void functionTypedParameter ( T callback < T > ( T thing )) {} // Khai b\u00e1o local generic function `itself`. void localFunction () { T itself < T > ( T thing ) => thing ; } // G\u00e1n m\u1ed9t generic function expression cho m\u1ed9t local variable. void functionExpression () { var lambda = < T > ( T thing ) => thing ; } Chi ti\u1ebft h\u01a1n v\u1ec1 Generic method, c\u00e1c b\u1ea1n xem th\u00eam t\u1ea1i \u0111\u00e2y .","title":"Using generic methods"},{"location":"dart/dart_core/#libraries-and-visibility","text":"\u0110\u1ec3 t\u1ea1o ra c\u00e1c shareable code base, ch\u00fang ta s\u1eed d\u1ee5ng 2 directives l\u00e0 import v\u00e0 library . Libraries ko ch\u1ec9 cung c\u1ea5p c\u00e1c APIs m\u00e0 c\u00f2n \u1ea9n ch\u1ee9a c\u00e1c member ch\u1ec9 t\u1ed3n t\u1ea1i v\u00e0 truy xu\u1ea5t \u0111\u01b0\u1ee3c (visible) b\u00ean trong ch\u00fang. V\u00ed d\u1ee5 c\u00e1c identifiers b\u1eaft \u0111\u1ea7u b\u1eb1ng d\u1ea5u g\u1ea1ch d\u01b0\u1edbi (_). M\u1ecdi \u1ee9ng d\u1ee5ng Dart \u0111\u1ec1u l\u00e0 c\u00e1c library ngay c\u1ea3 khi n\u00f3 kh\u00f4ng s\u1eed d\u1ee5ng library directive. Libraries c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i v\u00e0 s\u1eed d\u1ee5ng th\u00f4ng qua c\u00f4ng c\u1ee5 pub .","title":"Libraries and visibility"},{"location":"dart/dart_core/#using-libraries","text":"S\u1eed d\u1ee5ng t\u1eeb kho\u00e1 import \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh ph\u1ea1m vi namespace s\u1ebd s\u1eed d\u1ee5ng c\u1ee7a m\u1ed9t library import 'dart:html' ; V\u1edbi c\u00e1c th\u01b0 vi\u1ec7n built-in th\u00ec URI c\u00f3 scheme dart: , c\u00f2n v\u1edbi c\u00e1c th\u01b0 vi\u1ec7n kh\u00e1c ta s\u1eed d\u1ee5ng system path ho\u1eb7c scheme package: import 'package:test/test.dart' ;","title":"Using libraries"},{"location":"dart/dart_core/#specifying-a-library-prefix","text":"\u0110\u1ec3 tr\u00e1nh conflict khi import, ta d\u00f9ng alias: If you import two libraries that have conflicting identifiers , then you can specify a prefix for one or both libraries . For example , if library1 and library2 both have an Element class , then you might have code like this : import 'package:lib1/lib1.dart' ; import 'package:lib2/lib2.dart' as lib2 ; // Uses Element from lib1. Element element1 = Element (); // Uses Element from lib2. lib2 . Element element2 = lib2 . Element ();","title":"Specifying a library prefix"},{"location":"dart/dart_core/#importing-only-part-of-a-library","text":"Import m\u1ed9t ph\u1ea7n c\u1ee7a library: // Import only foo. import 'package:lib1/lib1.dart' show foo ; // Import all names EXCEPT foo. import 'package:lib2/lib2.dart' hide foo ;","title":"Importing only part of a library"},{"location":"dart/dart_core/#lazily-loading-a-library","text":"Deferred loading (hay c\u00f2n g\u1ecdi l\u00e0 lazy loading ) cho ph\u00e9p \u1ee9ng d\u1ee5ng load c\u00e1c library theo nhu c\u1ea7u (on demand) n\u1ebfu c\u1ea7n. M\u1ed9t v\u00e0i tr\u01b0\u1eddng h\u1ee3p sau c\u00f3 th\u1ec3 b\u1ea1n s\u1ebd mu\u1ed1n d\u00f9ng deferred loading: Gi\u1ea3m th\u1eddi gi\u1ea3n b\u1eaft \u0111\u1ea7u kh\u1edfi t\u1ea1o app. Th\u1ef1c hi\u1ec7n A/B testing. \u0110\u1ec3 load ch\u1ee9c n\u0103ng \u00edt s\u1eed d\u1ee5ng nh\u01b0 h\u1ed9p tho\u1ea1i dialog ho\u1eb7c m\u00e0n h\u00ecnh tu\u1ef3 ch\u1ecdn. \u0110\u1ec3 lazily load m\u1ed9t library, b\u1ea1n c\u1ea7n import ch\u00fang b\u1eb1ng c\u00fa ph\u00e1p deferred as . import 'package:greetings/hello.dart' deferred as hello ; Khi b\u1ea1n c\u1ea7n s\u1eed d\u1ee5ng library, g\u1ecdi h\u00e0m loadLibrary() qua \u0111\u1ecbnh danh c\u1ee7a ch\u00fang: Future greet () async { await hello . loadLibrary (); hello . printGreeting (); } Trong \u0111o\u1ea1n code tr\u00ean, await keyword d\u1eebng ch\u01b0\u01a1ng tr\u00ecnh l\u1ea1i cho t\u1edbi khi th\u01b0 vi\u1ec7n \u0111\u01b0\u1ee3c load xong. B\u1ea1n c\u00f3 th\u1ec3 g\u1ecdi loadLibrary() nhi\u1ec1u l\u1ea7n trong m\u1ed9t th\u01b0 vi\u1ec7n m\u00e0 kh\u00f4ng g\u1eb7p b\u1ea5t c\u1ee9 v\u1ea5n \u0111\u1ec1 g\u00ec, v\u00ec th\u01b0 vi\u1ec7n ch\u1ec9 load m\u1ed9t l\u1ea7n duy nh\u1ea5t. Lu\u00f4n ghi nh\u1edb r\u1eb1ng - C\u00e1c constant c\u1ee7a library kh\u00f4ng \u0111\u01b0\u1ee3c coi l\u00e0 constant trong file import. N\u00ean nh\u1edb r\u1eb1ng, constant kh\u00f4ng t\u00f4ng t\u1ea1i cho t\u1edbi khi library \u0111\u01b0\u1ee3c load. - B\u1ea1n ko th\u1ec3 s\u1eed d\u1ee5ng ki\u1ec3u t\u1eeb deferred library trong file import. Thay v\u00e0o \u0111\u00f3, h\u00e3y suy x\u00e9t c\u00e1c di chuy\u1ec3n n\u00f3 sang interface types \u0111\u1ec3 c\u00f3 th\u1ec3 import b\u1eb1ng c\u1ea3 deferred library v\u00e0 importing file. - Dart ng\u1ea7m th\u00eam loadLibrary() v\u00e0o namespace m\u00e0 b\u1ea1n khai b\u00e1o s\u1eed d\u1ee5ng deferred. loadLibrary() function tr\u1ea3 v\u1ec1 Future .","title":"Lazily loading a library"},{"location":"dart/dart_core/#implementing-libraries","text":"Tham kh\u1ea3o Create Library Packages n\u1ebfu b\u1ea1n mu\u1ed1n vi\u1ebft th\u01b0 vi\u1ec7n cho Dart.","title":"Implementing libraries"},{"location":"dart/dart_core/#asynchrony-support","text":"Dart libraries l\u00e0 m\u1ed9t b\u1ed9 si\u00eau \u0111\u1ea7y \u0111\u1ee7 c\u00e1c functions tr\u1ea3 v\u1ec3 Future ho\u1eb7c Stream objects. Nh\u1eefng function n\u00e0y l\u00e0 b\u1ea5t \u0111\u1ed3ng b\u1ed9 ( asynchronous ), t\u01b0\u01a1ng t\u1ef1 Javascript ch\u00fang ta c\u00f3 1 c\u1eb7p t\u1eeb kho\u00e1 async v\u00e0 await .","title":"Asynchrony support"},{"location":"dart/dart_core/#handling-futures","text":"Khi b\u1ea1n mu\u1ed1n k\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c ho\u00e0n th\u00e0nh trong t\u01b0\u01a1ng lai (Future), b\u1ea1n c\u00f3 2 c\u00e1ch sau: - S\u1eed d\u1ee5ng async v\u00e0 await . - S\u1eed d\u1ee5ng Future API. Code s\u1eed d\u1ee5ng async v\u00e0 await l\u00e0 b\u1ea5t \u0111\u1ed3ng b\u1ed9, nh\u01b0ng h\u1ea7u nh\u01b0 ch\u00fang gi\u1ed1ng nh\u01b0 c\u00e1c \u0111o\u1ea1n code x\u1eed l\u00fd \u0111\u1ed3ng b\u1ed9. V\u00ed d\u1ee5, \u0111o\u1ea1n code sau s\u1eed d\u1ee5ng await \u0111\u1ec3 ch\u1edd k\u1ebft qu\u1ea3 c\u1ee7a x\u1eed l\u00fd t\u1eeb function b\u1ea5t \u0111\u1ed3ng b\u1ed9: await lookUpVersion (); \u0110\u1ec3 d\u00f9ng await th\u00ec code b\u1eaft bu\u1ed9c ph\u1ea3i n\u1eb1m trong async function Future checkVersion () async { var version = await lookUpVersion (); // Do something with version } S\u1eed d\u1ee5ng try , catch , v\u00e0 finally \u0111\u1ec3 x\u1eed l\u00fd errors & cleanup trong code c\u00f3 s\u1eed d\u1ee5ng await : try { version = await lookUpVersion (); } catch ( e ) { // React to inability to look up the version } L\u01b0u \u00fd : async function tr\u1ea3 v\u1ec1 Future object. Trong await expression , gi\u00e1 tr\u1ecb c\u1ee7a expression th\u01b0\u1eddng l\u00e0 Future ; v\u00e0 n\u1ebfu kh\u00f4ng ph\u1ea3i th\u00ec gi\u00e1 tr\u1ecb \u0111\u00f3 c\u0169ng s\u1ebd t\u1ef1 \u0111\u1ed9ng \u0111\u01b0\u1ee3c wrapp v\u00e0o trong Future object. Future object d\u1eabn t\u1edbi m\u1ed9t promise tr\u1ea3 v\u1ec1 object. Sau c\u00f9ng, gi\u00e1 tr\u1ecb c\u1ee7a await expression s\u1ebd tr\u1ea3 v\u1ec1 object \u0111\u00f3. await expression s\u1ebd d\u1eebng vi\u1ec7c th\u1ef1c thi l\u1ea1i cho t\u1edbi khi object s\u1eb5n s\u00e0ng. N\u1ebfu b\u1ea1n g\u1eb7p l\u1ed7i compile-time khi s\u1eed d\u1ee5ng await , h\u00e3y \u0111\u1ea3m b\u1ea3o r\u0103ng b\u1ea1n \u0111ang s\u1eed d\u1ee5ng await b\u00ean trong async function. V\u00ed d\u1ee5 sau s\u1eed d\u1ee5ng await trong app\u2019s main() function, body c\u1ee7a main() ph\u1ea3i \u0111i k\u00e8m v\u1edbi keyword async : Future main () async { checkVersion (); print ( 'In main: version is ${ await lookUpVersion () } ' ); }","title":"Handling Futures"},{"location":"dart/dart_core/#declaring-async-functions","text":"V\u00ed d\u1ee5 chuy\u1ec3n t\u1eeb function \u0111\u1ed3ng b\u1ed9 sang function b\u1ea5t \u0111\u1ed3ng b\u1ed9: String lookUpVersion () => '1.0.0' ; Future < String > lookUpVersion () async => '1.0.0' ;","title":"Declaring async functions"},{"location":"dart/dart_core/#handling-streams","text":"Khi b\u1ea1n c\u1ea7n l\u1ea5y gi\u00e1 tr\u1ecb t\u1eeb m\u1ed9t Stream, b\u1ea1n c\u00f3 2 l\u1ef1a ch\u1ecdn - S\u1eed d\u1ee5ng async v\u00e0 asynchronous for loop ( await for ). - S\u1eed d\u1ee5ng Stream API. await for ( varOrType identifier in expression ) { // Executes each time the stream emits a value. } Gi\u00e1 tr\u1ecb c\u1ee7a expression ph\u1ea3i c\u00f3 ki\u1ec3u Stream . Qu\u00e1 tr\u00ecnh ch\u1ea1y nh\u01b0 sau: \u0110\u1ee3i cho t\u1edbi khi stream \u0111\u01b0a ra gi\u00e1 tr\u1ecb. Th\u1ef1c thi code b\u00ean trong for loop . L\u1eb7p l\u1ea1i 1 v\u00e0 2 cho t\u1edbi khi stream b\u1ecb close. \u0110\u1ec3 d\u1eebng vi\u1ec7c l\u1eafng nghe stream, b\u1ea1n c\u00f3 th\u1ec3 break ho\u1eb7c return , which breaks out of the for loop and unsubscribes from the stream.","title":"Handling Streams"},{"location":"dart/dart_core/#generators","text":"Dart h\u1ed7 tr\u1ee3 2 lo\u1ea1i built-in generator functions: - Synchronous generator: Tr\u1ea3 v\u1ec1 Iterable object. Iterable < int > naturalsTo ( int n ) sync * { int k = 0 ; while ( k < n ) yield k ++ ; } - Asynchronous generator: Tr\u1ea3 v\u1ec1 Stream object. Stream < int > asynchronousNaturalsTo ( int n ) async * { int k = 0 ; while ( k < n ) yield k ++ ; }","title":"Generators"},{"location":"dart/dart_core/#callable-classes","text":"\u0110\u1ec3 c\u00f3 th\u1ec3 g\u1ecdi Dart class nh\u01b0 function, ta implement ph\u01b0\u01a1ng th\u1ee9c call(). class WannabeFunction { call ( String a , String b , String c ) => ' $ a $ b $ c !' ; } main () { var wf = new WannabeFunction (); var out = wf ( \"Hi\" , \"there,\" , \"gang\" ); print ( ' $ out ' ); } Hi there, gang!","title":"Callable classes"},{"location":"dart/dart_core/#isolates","text":"H\u1ea7u h\u1ebft computers, ho\u1eb7c mobile platforms \u0111\u01b0\u1ee3c trang b\u1ecb multi-core CPUs. \u0110\u1ec3 t\u1eadn d\u1ee5ng t\u1ed1i \u0111a l\u1ee3i th\u1ebf \u0111\u00f3, th\u00f4ng developer c\u00f3 th\u1ec3 ch\u1ea1y \u0111\u1ed3ng th\u1eddi c\u00e1c shared-memory threads. Tuy nhi\u00ean, vi\u1ec7c chia s\u1ebb tr\u1ea1ng th\u00e1i (shared-state) c\u1ee7a c\u00e1c concurrency r\u1ea5t d\u1ec5 d\u1eabn t\u1edbi l\u1ed7i c\u0169ng nh\u01b0 l\u00e0m code tr\u1edf n\u00ean ph\u1ee9c t\u1ea1p. Thay v\u00ec s\u1ee7 d\u1ee5ng threads, t\u1ea5t c\u1ea3 Dart code \u0111\u01b0\u1ee3c th\u1ef1c thi \u1edf b\u00ean trong 1 v\u00f9ng c\u00f4 l\u1eadp. M\u1ed7i v\u00f9ng v\u00f4 l\u1eadp c\u00f3 memory heap ri\u00eang, \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng state c\u1ee7a v\u00f9ng isolate n\u00e0y kh\u00f4ng b\u1ecb truy c\u1eadp b\u1edfi v\u00f9ng isolate kh\u00e1c. Chi ti\u1ebft tham kh\u1ea3o dart:isolate .","title":"Isolates"},{"location":"dart/dart_core/#typedefs","text":"Trong Dart, m\u1ecdi th\u1ee9 \u0111\u1ec1u l\u00e0 object. typedef , ho\u1eb7c function-type alias, \u0111\u1eb7t t\u00ean cho function m\u00e0 b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a c\u00e1c fields v\u00e0 tr\u1ea3 v\u1ec1 types. \u0110o\u1ea1n code sau kh\u00f4ng s\u1eed d\u1ee5ng typedef, v\u00e0 th\u00f4ng tin v\u1ec1 ki\u1ec3u s\u1ebd bi\u1ebfn m\u1ea5t khi b\u1ea1n g\u00e1n compare = f , trong khi ki\u1ec3u c\u1ee7a f l\u00e0 (Object, Object) \u2192 int . class SortedCollection { Function compare ; SortedCollection ( int f ( Object a , Object b )) { compare = f ; } } // Initial, broken implementation. int sort ( Object a , Object b ) => 0 ; void main () { SortedCollection coll = SortedCollection ( sort ); // All we know is that compare is a function, // but what type of function? assert ( coll . compare is Function ); } Hot fix s\u1eed d\u1ee5ng typedef typedef Compare = int Function ( Object a , Object b ); class SortedCollection { Compare compare ; SortedCollection ( this . compare ); } // Initial, broken implementation. int sort ( Object a , Object b ) => 0 ; void main () { SortedCollection coll = SortedCollection ( sort ); assert ( coll . compare is Function ); assert ( coll . compare is Compare ); } V\u1edbi phi\u00ean b\u1ea3n Dart 2 hi\u1ec7n t\u1ea1i th\u00ec typedefs ch\u1ec9 gi\u1edbi h\u1ea1n s\u1eed d\u1ee5ng v\u1edbi function . typedef c\u0169ng ch\u1ec9 \u0111\u01a1n gi\u1ea3n l\u00e0 m\u1ed9t alias, gi\u00fap ch\u00fang ta check ki\u1ec3u c\u1ee7a m\u1ed7i function: typedef Compare < T > = int Function ( T a , T b ); int sort ( int a , int b ) => a - b ; void main () { assert ( sort is Compare < int > ); // True! }","title":"Typedefs"},{"location":"dart/dart_core/#driving-deep","text":"\u0110\u1ec3 hi\u1ec3u s\u00e2u h\u01a1n v\u1ec1 Dart th\u00ec kh\u00f4ng c\u00f2n c\u00e1ch n\u00e0o kh\u00e1c ngo\u00e0i m\u1ea7n v\u00e0o core c\u1ee7a Dart. B\u1ea1n c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u s\u00e2u v\u1ec1 c\u01a1 ch\u1ebf ho\u1ea1t \u0111\u1ed9c v\u00e0 c\u00e1ch s\u1eed d\u1ee5ng c\u1ee7a Dart libraries t\u1ea1i A Tour of the Dart Libraries . V\u00e0 l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 code trong s\u00e1ng, convention chu\u1ea9n, hi\u1ec3u nh\u1eefng \u0111i\u1ec1u n\u00ean v\u00e0 kh\u00f4ng n\u00ean khi code Dart, th\u00ec b\u1ea1n n\u00ean \u0111\u1ecdc th\u00eam Effective Dart .","title":"Driving Deep"},{"location":"dart/dart_core/#references","text":"Dart Home Page A Tour of the Dart Language","title":"References"},{"location":"dart/dart_dart_vs_swift_a_comparison/","text":"Dart v\u00e0 Swift l\u00e0 hai ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh y\u00eau th\u00edch c\u1ee7a t\u00f4i, v\u00e0 b\u00e0i vi\u1ebft n\u00e0y t\u00f4i s\u1ebd s\u00f3 s\u00e1nh \u0111i\u1ec3m gi\u1ed1ng v\u00e0 kh\u00e1c nhau gi\u1eefa Dart v\u00e0 Swift nh\u1eb1m m\u00fac \u0111\u00edch: Ch\u1ec9 ra chi ti\u1ebft c\u00e1c \u0111i\u1ec3m kh\u00e1c bi\u1ec7t gi\u1eefa 2 ng\u00f4n ng\u1eef \u0110\u1ec3 cho c\u00e1c b\u1ea1n c\u00f3 th\u1ec3 chuy\u1ec3n t\u1eeb ng\u00f4n ng\u1eef n\u00e0y sang ng\u00f4n ng\u1eef kh\u00e1c (ho\u1eb7c s\u1eed d\u1ee5ng c\u1ea3 hai). M\u1ed9t s\u1ed1 \u0111inh ngh\u0129a \u00b6 Dart th\u01b0\u1eddng \u0111\u01b0\u1ee3c d\u00f9ng cho Flutter (M\u1ed9t Framework c\u1ee7a Google \u0111\u1ec3 x\u00e2y d\u1ef1ng c\u00e1c \u1ee9ng d\u1ee5ng native tuy\u1ec7t \u0111\u1eb9p ch\u1ec9 b\u1eb1ng 1 m\u00e3 duy nh\u1ea5t) Swift th\u01b0\u1eddng \u0111\u01b0\u1ee3c d\u00f9ng cho SDK c\u1ee7a Apple \u0111\u1ec3 ph\u00e1t tri\u1ec3n c\u00e1c \u01b0ng d\u1ee5ng tr\u00ean IOS, macOS, tvOS v\u00e0 watchOS. C\u00e1c so s\u00e1nh sau \u0111\u00e2y \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tr\u00ean c\u00e1c t\u00ednh n\u0103ng ch\u00ednh c\u1ee7a c\u1ea3 hai ng\u00f4n ng\u1eef (t\u1eeb Dart 2.1 v\u00e0 Swift 4.2) Khi c\u00f3 c\u00e1c ph\u1ea7n li\u00ean quan \u0111\u1ebfn t\u1eebng t\u00ednh n\u0103ng chuy\u00ean s\u00e2u n\u1eb1m ngo\u00e0i ph\u1ea1m vi c\u1ee7a b\u00e0i vi\u1ebft n\u00e0y, t\u00f4i s\u1ebd \u0111\u00ednh k\u00e8m c\u00e1c t\u00e0i li\u1ec7u tham kh\u1ea3o \u0111\u1ec3 c\u00e1c b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ecdc th\u00eam. 1. B\u1ea3ng so s\u00e1nh \u00b6 2. Variables \u00b6 Variable declaration \u00b6 Dart: String name ; int age ; double height ; Switf: var name = 'Andrea'; var age = 34; var height = 1.84; Variable initialization \u00b6 Dart: var name = 'Andrea' ; var age = 34 ; var height = 1.84 ; Switf: var name = \"Andrea\" var age = 34 var height = 1.84 3. Type inference \u00b6 Type inference \u00b6 C\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c vi\u1ebft nh\u01b0 n\u00e0y trong Dart: var arguments = { 'argA' : 'hello' , 'argB' : 42 }; // Map<String, Object> V\u00e0 ki\u1ec3u c\u1ee7a arguments s\u1ebd t\u1ef1 \u0111\u1ed9ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1edf compiler. Trong Swift \u0111\u01b0\u1ee3c vi\u1ebft t\u01b0ng t\u1ef1: var arguments = [ \"argA\" : \"hello\" , \"argB\" : 42 ] // [ String : Any ] M\u1ed9t s\u1ed1 chi ti\u1ebft Dart documentation : The analyzer can infer types for fields, methods, local variables, and most generic type arguments. When the analyzer doesn't have enough information to infer a specific type, it uses the dynamic type. V\u00e0 c\u1ee7a Swift : Swift uses type inference extensively, allowing you to omit the type or part of the type of many variables and expressions in your code. For example, instead of writing var x: Int = 0 , you can write var x = 0 , omitting the type completely---the compiler correctly infers that x names a value of type Int . Dynamic types \u00b6 M\u1ed9t variable c\u00f3 th\u1ec3 l\u00e0 b\u1ea5t k\u1ef3 ki\u1ec3u d\u1eef li\u1ec7u n\u00e0o khi \u0111\u01b0\u1ee3c khai b\u00e1o v\u1edbi t\u1eeb kh\u00f3a dynamic v\u1edbi Dart v\u00e0 Any \u0111\u1ed1i v\u1edbi Switf Ki\u1ec3u Dynamic th\u01b0\u1eddng \u0111\u01b0\u1ee3c d\u00f9ng khi \u0111\u1ecdc data t\u1eeb SON 4. Mutable / immutable variables \u00b6 Variables c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c khai b\u00e1o l\u00e0 mutable ho\u1eb7c immutable . Mutable \u00b6 Khi khai b\u00e1o variables ki\u1ec3u Mutable, th\u00ec c\u1ea3 hai ng\u00f4n ng\u1eef \u0111\u1ec1u s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a var Dart var a = 10 ; // int a = 20 ; // ok Swift var a = 10 // Int a = 20 // ok Immutable \u00b6 Khi khai b\u00e1o variables ki\u1ec3u Immutable, Dart s\u1eed d\u1ee5ng final , v\u00e0 Swift s\u1eed d\u1ee5ng let . Dart final a = 10 ; a = 20 ; // 'a': a final variable, can only be set once. Swift let a = 10 a = 20 // Cannot assign to value: 'a' is a 'let' constant Trong Dart documentation c\u00f3 \u0111\u1ecbnh ngh\u0129a hai t\u1eeb kh\u00f3a, final v\u00e0 cost , ho\u1ea1t \u0111\u1ed9ng nh\u01b0 sau: If you never intend to change a variable, use final or const, either instead of var or in addition to a type. A final variable can be set only once; a const variable is a compile-time constant. (Const variables are implicitly final.) A final top-level or class variable is initialized the first time it\u2019s used. V\u00e0 \u0111\u01b0\u1ee3c gi\u1ea3i th\u00edch k\u1ef9 h\u01a1n trong b\u00e0i vi\u1ebft tr\u00ean website c\u1ee7a Dart final means single-assignment. A final variable or field must have an initializer. Once assigned a value, a final variable\u2019s value cannot be changed. final modifies variables. S\u1eed d\u1ee5ng final \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a Immutable variables trong Dart Trong Swift, ch\u00fang \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a constants v\u1edbi t\u1eeb kh\u00f3a let A constant declaration introduces a constant named value into your program. Constant declarations are declared using the let keyword and have the following form: let constant name : type = expression A constant declaration defines an immutable binding between the constant name and the value of the initializer expression; after the value of a constant is set, it cannot be changed. \u0110\u1ecdc th\u00eam: Swift Declarations 5. Functions \u00b6 Functions l\u00e0 first-class citizens trong Swift v\u00e0 Dart \u0110i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 gi\u1ed1ng nh\u01b0 c\u00e1c objecs, functions c\u00f3 th\u1ec3 truy\u1ec1n d\u01b0\u1edbi d\u1ea1ng arguments v\u00e0 \u0111\u01b0\u1ee3c l\u01b0u d\u01b0\u1edbi d\u1ea1ng properties ho\u1eb7c k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1. B\u01b0\u1edbc \u0111\u1ea7u so s\u00e1nh, ch\u00fang ta s\u1ebd kh\u1edfi t\u1ea1o c\u00e1c functions kh\u00f4ng c\u00f3 arguments. Trong Dart, c\u00e1c ki\u1ec3u tr\u1ea3 v\u1ec1 \u0111\u01b0\u1ee3c \u0111\u1eb7t tr\u01b0\u1edbc t\u00ean c\u1ee7a method: void foo (); int bar (); Trong Swift, ch\u00fang ta s\u1eed d\u1ee5ng -> T l\u00e0m k\u00fd hi\u1ec7u h\u1eadu t\u1ed1. \u0110i\u1ec1u n\u00e0y kh\u00f4ng b\u1eaft bu\u1ed9c n\u1ebfu n\u00f3 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb void : func foo () func bar () -> Int \u0110\u1ecdc th\u00eam: Dart Functions Swift Functions 6. Named v\u00e0 un-named parameters \u00b6 C\u1ea3 hai ng\u00f4n ng\u1eef \u0111\u1ec1u h\u1ed7 tr\u1ee3 named v\u00e0 un-named parameters Named \u00b6 Trong Dart, ch\u00fang ta \u0111\u1ecbnh ngh\u0129a named parameters trong d\u1ea5u ( {} ): void foo ({ String name , int age , double height }); foo ( name: 'Andrea' , age: 34 , height: 1.84 ); Trong Swift, named parameters l\u00e0 m\u1eb7c \u0111\u1ecbnh: func foo ( name : String , age : Int , height : Double ) foo ( name : \"Andrea\" , age : 34 , height : 1.84 ) Un-named \u00b6 Trong Dart, ch\u00fang ta \u0111\u1ecbnh ngh\u0129a un-named parameters b\u1eb1ng c\u00e1ch b\u1ecf d\u1ea5u ( {} ): void foo ( String name , int age , double height ); foo ( 'Andrea' , 34 , 1.84 ); Trong Swift, ch\u00fang ta \u0111\u1ecbnh ngh\u0129a un-named parameters b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng d\u1ea5u ( _ ): func foo ( _ name : String , _ age : Int , _ height : Double ) foo ( \"Andrea\" , 34 , 1.84 ) \u0110\u1ecdc th\u00eam: Function Argument Labels and Parameter Names trong Swift. 7. Optional v\u00e0 default parameters \u00b6 C\u1ea3 hai ng\u00f4n ng\u1eef \u0111\u1ec1u h\u1ed7 tr\u1ee3 default parameters Trong Swift, b\u1ea1n c\u00f3 th\u1ec3 x\u00e1c \u0111\u1ecbnh m\u1ed9t gi\u00e1 tr\u1ecb default cho b\u1ea5t k\u1ef3 parameter trong m\u1ed9t function b\u1eb1ng c\u00e1c","title":"So s\u00e1nh Dart v\u00e0 Swift"},{"location":"dart/dart_dart_vs_swift_a_comparison/#mot-so-inh-nghia","text":"Dart th\u01b0\u1eddng \u0111\u01b0\u1ee3c d\u00f9ng cho Flutter (M\u1ed9t Framework c\u1ee7a Google \u0111\u1ec3 x\u00e2y d\u1ef1ng c\u00e1c \u1ee9ng d\u1ee5ng native tuy\u1ec7t \u0111\u1eb9p ch\u1ec9 b\u1eb1ng 1 m\u00e3 duy nh\u1ea5t) Swift th\u01b0\u1eddng \u0111\u01b0\u1ee3c d\u00f9ng cho SDK c\u1ee7a Apple \u0111\u1ec3 ph\u00e1t tri\u1ec3n c\u00e1c \u01b0ng d\u1ee5ng tr\u00ean IOS, macOS, tvOS v\u00e0 watchOS. C\u00e1c so s\u00e1nh sau \u0111\u00e2y \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tr\u00ean c\u00e1c t\u00ednh n\u0103ng ch\u00ednh c\u1ee7a c\u1ea3 hai ng\u00f4n ng\u1eef (t\u1eeb Dart 2.1 v\u00e0 Swift 4.2) Khi c\u00f3 c\u00e1c ph\u1ea7n li\u00ean quan \u0111\u1ebfn t\u1eebng t\u00ednh n\u0103ng chuy\u00ean s\u00e2u n\u1eb1m ngo\u00e0i ph\u1ea1m vi c\u1ee7a b\u00e0i vi\u1ebft n\u00e0y, t\u00f4i s\u1ebd \u0111\u00ednh k\u00e8m c\u00e1c t\u00e0i li\u1ec7u tham kh\u1ea3o \u0111\u1ec3 c\u00e1c b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ecdc th\u00eam.","title":"M\u1ed9t s\u1ed1 \u0111inh ngh\u0129a"},{"location":"dart/dart_dart_vs_swift_a_comparison/#1-bang-so-sanh","text":"","title":"1. B\u1ea3ng so s\u00e1nh"},{"location":"dart/dart_dart_vs_swift_a_comparison/#2-variables","text":"","title":"2. Variables"},{"location":"dart/dart_dart_vs_swift_a_comparison/#variable-declaration","text":"Dart: String name ; int age ; double height ; Switf: var name = 'Andrea'; var age = 34; var height = 1.84;","title":"Variable declaration"},{"location":"dart/dart_dart_vs_swift_a_comparison/#variable-initialization","text":"Dart: var name = 'Andrea' ; var age = 34 ; var height = 1.84 ; Switf: var name = \"Andrea\" var age = 34 var height = 1.84","title":"Variable initialization"},{"location":"dart/dart_dart_vs_swift_a_comparison/#3-type-inference","text":"","title":"3. Type inference"},{"location":"dart/dart_dart_vs_swift_a_comparison/#type-inference","text":"C\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c vi\u1ebft nh\u01b0 n\u00e0y trong Dart: var arguments = { 'argA' : 'hello' , 'argB' : 42 }; // Map<String, Object> V\u00e0 ki\u1ec3u c\u1ee7a arguments s\u1ebd t\u1ef1 \u0111\u1ed9ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1edf compiler. Trong Swift \u0111\u01b0\u1ee3c vi\u1ebft t\u01b0ng t\u1ef1: var arguments = [ \"argA\" : \"hello\" , \"argB\" : 42 ] // [ String : Any ] M\u1ed9t s\u1ed1 chi ti\u1ebft Dart documentation : The analyzer can infer types for fields, methods, local variables, and most generic type arguments. When the analyzer doesn't have enough information to infer a specific type, it uses the dynamic type. V\u00e0 c\u1ee7a Swift : Swift uses type inference extensively, allowing you to omit the type or part of the type of many variables and expressions in your code. For example, instead of writing var x: Int = 0 , you can write var x = 0 , omitting the type completely---the compiler correctly infers that x names a value of type Int .","title":"Type inference"},{"location":"dart/dart_dart_vs_swift_a_comparison/#dynamic-types","text":"M\u1ed9t variable c\u00f3 th\u1ec3 l\u00e0 b\u1ea5t k\u1ef3 ki\u1ec3u d\u1eef li\u1ec7u n\u00e0o khi \u0111\u01b0\u1ee3c khai b\u00e1o v\u1edbi t\u1eeb kh\u00f3a dynamic v\u1edbi Dart v\u00e0 Any \u0111\u1ed1i v\u1edbi Switf Ki\u1ec3u Dynamic th\u01b0\u1eddng \u0111\u01b0\u1ee3c d\u00f9ng khi \u0111\u1ecdc data t\u1eeb SON","title":"Dynamic types"},{"location":"dart/dart_dart_vs_swift_a_comparison/#4-mutable-immutable-variables","text":"Variables c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c khai b\u00e1o l\u00e0 mutable ho\u1eb7c immutable .","title":"4. Mutable / immutable variables"},{"location":"dart/dart_dart_vs_swift_a_comparison/#mutable","text":"Khi khai b\u00e1o variables ki\u1ec3u Mutable, th\u00ec c\u1ea3 hai ng\u00f4n ng\u1eef \u0111\u1ec1u s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a var Dart var a = 10 ; // int a = 20 ; // ok Swift var a = 10 // Int a = 20 // ok","title":"Mutable"},{"location":"dart/dart_dart_vs_swift_a_comparison/#immutable","text":"Khi khai b\u00e1o variables ki\u1ec3u Immutable, Dart s\u1eed d\u1ee5ng final , v\u00e0 Swift s\u1eed d\u1ee5ng let . Dart final a = 10 ; a = 20 ; // 'a': a final variable, can only be set once. Swift let a = 10 a = 20 // Cannot assign to value: 'a' is a 'let' constant Trong Dart documentation c\u00f3 \u0111\u1ecbnh ngh\u0129a hai t\u1eeb kh\u00f3a, final v\u00e0 cost , ho\u1ea1t \u0111\u1ed9ng nh\u01b0 sau: If you never intend to change a variable, use final or const, either instead of var or in addition to a type. A final variable can be set only once; a const variable is a compile-time constant. (Const variables are implicitly final.) A final top-level or class variable is initialized the first time it\u2019s used. V\u00e0 \u0111\u01b0\u1ee3c gi\u1ea3i th\u00edch k\u1ef9 h\u01a1n trong b\u00e0i vi\u1ebft tr\u00ean website c\u1ee7a Dart final means single-assignment. A final variable or field must have an initializer. Once assigned a value, a final variable\u2019s value cannot be changed. final modifies variables. S\u1eed d\u1ee5ng final \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a Immutable variables trong Dart Trong Swift, ch\u00fang \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a constants v\u1edbi t\u1eeb kh\u00f3a let A constant declaration introduces a constant named value into your program. Constant declarations are declared using the let keyword and have the following form: let constant name : type = expression A constant declaration defines an immutable binding between the constant name and the value of the initializer expression; after the value of a constant is set, it cannot be changed. \u0110\u1ecdc th\u00eam: Swift Declarations","title":"Immutable"},{"location":"dart/dart_dart_vs_swift_a_comparison/#5-functions","text":"Functions l\u00e0 first-class citizens trong Swift v\u00e0 Dart \u0110i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 gi\u1ed1ng nh\u01b0 c\u00e1c objecs, functions c\u00f3 th\u1ec3 truy\u1ec1n d\u01b0\u1edbi d\u1ea1ng arguments v\u00e0 \u0111\u01b0\u1ee3c l\u01b0u d\u01b0\u1edbi d\u1ea1ng properties ho\u1eb7c k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1. B\u01b0\u1edbc \u0111\u1ea7u so s\u00e1nh, ch\u00fang ta s\u1ebd kh\u1edfi t\u1ea1o c\u00e1c functions kh\u00f4ng c\u00f3 arguments. Trong Dart, c\u00e1c ki\u1ec3u tr\u1ea3 v\u1ec1 \u0111\u01b0\u1ee3c \u0111\u1eb7t tr\u01b0\u1edbc t\u00ean c\u1ee7a method: void foo (); int bar (); Trong Swift, ch\u00fang ta s\u1eed d\u1ee5ng -> T l\u00e0m k\u00fd hi\u1ec7u h\u1eadu t\u1ed1. \u0110i\u1ec1u n\u00e0y kh\u00f4ng b\u1eaft bu\u1ed9c n\u1ebfu n\u00f3 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb void : func foo () func bar () -> Int \u0110\u1ecdc th\u00eam: Dart Functions Swift Functions","title":"5. Functions"},{"location":"dart/dart_dart_vs_swift_a_comparison/#6-named-va-un-named-parameters","text":"C\u1ea3 hai ng\u00f4n ng\u1eef \u0111\u1ec1u h\u1ed7 tr\u1ee3 named v\u00e0 un-named parameters","title":"6. Named v\u00e0 un-named parameters"},{"location":"dart/dart_dart_vs_swift_a_comparison/#named","text":"Trong Dart, ch\u00fang ta \u0111\u1ecbnh ngh\u0129a named parameters trong d\u1ea5u ( {} ): void foo ({ String name , int age , double height }); foo ( name: 'Andrea' , age: 34 , height: 1.84 ); Trong Swift, named parameters l\u00e0 m\u1eb7c \u0111\u1ecbnh: func foo ( name : String , age : Int , height : Double ) foo ( name : \"Andrea\" , age : 34 , height : 1.84 )","title":"Named"},{"location":"dart/dart_dart_vs_swift_a_comparison/#un-named","text":"Trong Dart, ch\u00fang ta \u0111\u1ecbnh ngh\u0129a un-named parameters b\u1eb1ng c\u00e1ch b\u1ecf d\u1ea5u ( {} ): void foo ( String name , int age , double height ); foo ( 'Andrea' , 34 , 1.84 ); Trong Swift, ch\u00fang ta \u0111\u1ecbnh ngh\u0129a un-named parameters b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng d\u1ea5u ( _ ): func foo ( _ name : String , _ age : Int , _ height : Double ) foo ( \"Andrea\" , 34 , 1.84 ) \u0110\u1ecdc th\u00eam: Function Argument Labels and Parameter Names trong Swift.","title":"Un-named"},{"location":"dart/dart_dart_vs_swift_a_comparison/#7-optional-va-default-parameters","text":"C\u1ea3 hai ng\u00f4n ng\u1eef \u0111\u1ec1u h\u1ed7 tr\u1ee3 default parameters Trong Swift, b\u1ea1n c\u00f3 th\u1ec3 x\u00e1c \u0111\u1ecbnh m\u1ed9t gi\u00e1 tr\u1ecb default cho b\u1ea5t k\u1ef3 parameter trong m\u1ed9t function b\u1eb1ng c\u00e1c","title":"7. Optional v\u00e0 default parameters"},{"location":"dart/dart_environment_settings/","text":"C\u00e1ch \u0111\u00e2y 4 n\u0103m m\u00ecnh \u0111\u00e3 t\u1eebng code th\u1eed Dart , v\u00e0 th\u1ef1c s\u1ef1 th\u1ea5y n\u00f3 ch\u1eb3ng c\u00f3 g\u00ec n\u1ed5i tr\u1ed9i, n\u00ean quy\u1ebft \u0111\u1ecbnh t\u1eeb b\u1ecf v\u00e0 ko h\u1ecdc. M\u1ed9t th\u1eddi gian b\u1eb5ng \u0111i, sau s\u1ef1 ki\u1ec7n Google I/O di\u1ec5n ra v\u00e0o th\u00e1ng 6 n\u0103m 2018, khi Google ch\u00ednh th\u1ee9c release b\u1ea3n beta#3 c\u1ee7a Flutter th\u00ec Dart \u0111\u00e3 quay tr\u1edf l\u1ea1i v\u00e0 \u0103n h\u1ea1i g\u1ea5p \u0111\u00f4i Th\u1eddi th\u1ebf thay \u0111\u1ed5i, m\u00e0 d\u00f9 ng\u00f4n ng\u1eef ch\u1ec9 l\u00e0 c\u00f4ng c\u1ee5 nh\u01b0ng kh\u00f4ng h\u1ecdc th\u00ec kh\u00f4ng bi\u1ebft n\u00ean quy\u1ebft \u0111\u1ecbnh \u0111\u1ea7u t\u01b0 th\u1eddi gian h\u1ecdc Dart v\u1edbi hi v\u1ecdng m\u1ed9t ng\u00e0y kh\u00f4ng xa s\u1ebd build \u0111\u01b0\u1ee3c app cho Android/iOS tr\u00ean Flutter . Trong b\u00e0i vi\u1ebft n\u00e0y m\u00ecnh note l\u1ea1i nh\u1eefng \u0111i\u1ec1u quan tr\u1ecdng t\u1eeb l\u00fac c\u00e0i \u0111\u1eb7t m\u00f4i tr\u01b0\u1eddng t\u1edbi l\u00fac b\u1eaft tay v\u00e0o code nh\u1eefng d\u00f2ng Dart-lang \u0111\u1ea7u ti\u00ean . Chu\u1ea9n b\u1ecb \u00b6 M\u00ecnh \u0111ang s\u1eed d\u1ee5ng Macbook n\u00ean s\u1ebd ch\u1ec9 m\u00f4 t\u1ea3 c\u00e1ch c\u00e0i \u0111\u1eb7t tr\u00ean Mac, n\u1ebfu b\u1ea1n d\u00f9ng Linux ho\u1eb7c Windows th\u00ec ch\u1ecbu kh\u00f3 t\u00ecm c\u00e1ch c\u00e0i \u0111\u1eb7t t\u01b0\u01a1ng \u1ee9ng tr\u00ean OS \u0111\u00f3 nh\u00e9. Install IDE: IntelliJ IDEA Community . Sau khi c\u00e0i \u0111\u1eb7t, c\u00e1c b\u1ea1n m\u1edf IntelliJ IDEA > Configure > Preferences > Plugins v\u00e0 c\u00e0i th\u00eam Dart & Flutter v\u00e0o nh\u00e9. Install Dart SDK: L\u00e0m theo c\u00e1c b\u01b0\u1edbc sau \u0111\u1ec3 s\u1eed d\u1ee5ng Dart phi\u00ean b\u1ea3n 2 (V\u00ec c\u00f2n trong giai \u0111o\u1ea1n dev, n\u00ean n\u1ebfu ch\u1ec9 c\u00e0i \u0111\u1eb7t theo c\u00e1ch th\u00f4ng th\u01b0\u1eddng s\u1ebd c\u00e0i phi\u00ean b\u1ea3n 1 - stable) Important: The Dart 2 SDK is available from the dev channel only. $ brew tap dart-lang/dart $ brew install dart $ brew upgrade dart --devel --force $ brew switch dart 2.0.0-dev.65.0 - Install Flutter SDK: (N\u1ebfu b\u1ea1n kh\u00f4ng code Flutter th\u00ec c\u00f3 th\u1ec3 b\u1ecf qua) - T\u1ea3i phi\u00ean b\u1ea3n SDK m\u1edbi nh\u1ea5t t\u1ea1i SDK Archive - Gi\u1ea3i n\u00e9n v\u00e0o th\u01b0 m\u1ee5c xyz n\u00e0o \u0111\u00f3 tr\u00ean m\u00e1y b\u1ea1n. (D\u00f9ng l\u1ec7nh unzip ho\u1eb7c thao t\u00e1c tr\u1ef1c ti\u1ebfp b\u1eb1ng tay ). V\u00ed d\u1ee5 \u1edf \u0111\u00e2y m\u00ecnh gi\u1ea3i n\u00e9n v\u00e0o th\u01b0 m\u1ee5c Mobile : $ pwd /Users/euclid/Data/Mobile $ ls -la total 16 drwxr-xr-x 4 euclid staff 136 Jun 27 09:54 . drwxr-xr-x@ 13 euclid staff 442 Jun 27 09:54 .. -rw-r--r--@ 1 euclid staff 6148 Jun 27 09:54 .DS_Store drwxr-xr-x@ 25 euclid staff 850 Jun 19 09:31 flutter - Th\u00eam flutter v\u00e0o system path. M\u00ecnh d\u00f9ng \u201cOh My ZSH!\u201d n\u00ean s\u1ebd s\u1eed file .zshrc , n\u1ebfu c\u00e1c b\u1ea1n kh\u00f4ng d\u00f9ng th\u00ec s\u1eeda file .bashrc . $ vim ~/.zshrc export FLUTTER = /Volumes/MACOS/Users/euclid/Data/Mobile/flutter/bin export PATH = $FLUTTER : $PATH - Kh\u1edfi \u0111\u1ed9ng l\u1ea1i Terminal v\u00e0 ki\u1ec3m tra th\u00f4ng tin: $ flutter doctor - Platform setup: (N\u1ebfu b\u1ea1n kh\u00f4ng code Flutter th\u00ec c\u00f3 th\u1ec3 b\u1ecf qua) - Android Setup 1. N\u1ebfu b\u1ea1n \u0111\u00e3 c\u00e0i Android Studio, th\u00ec r\u1ea5t c\u00f3 th\u1ec3 b\u1ea1n s\u1ebd kh\u00f4ng ph\u1ea3i l\u00e0m b\u01b0\u1edbc n\u00e0y. 1. N\u1ebfu Intellij IDEA kh\u00f4ng t\u1ef1 nh\u1eadn Android SDK th\u00ec b\u1ea1n ph\u1ea3i t\u1ef1 c\u1ea5u h\u00ecnh SDK theo c\u00e1c b\u01b0\u1edbc trong \u1ea3nh nh\u01b0 sau: \u1ede 2 b\u01b0\u1edbc tr\u00ean, ch\u00fang ta hi\u1ec7n th\u01b0 m\u1ee5c Library tr\u00ean m\u00e1y l\u00ean, do SDK m\u1eb7c \u0111\u1ecbnh c\u00e0i b\u1edfi Android Studio s\u1ebd \u1edf th\u01b0 m\u1ee5c /Users/<name>/Library/Android/sdk . Ti\u1ebfp \u0111\u00f3 ta s\u1ebd c\u1ea5u h\u00ecnh SDK nh\u01b0 sau: 1. Sau khi c\u1ea5u h\u00ecnh xong SDK c\u00e1c b\u1ea1n v\u00e0o AVD Manager v\u00e0 t\u1ea1o Virtual Device nh\u1eb1m debug tr\u00ean m\u00e1y \u1ea3o Android nh\u00e9 1. N\u1ebfu sau khi c\u00e0i \u0111\u1eb7t m\u00e0 kh\u00f4ng c\u00f3 [Flutter Device Selection] nh\u01b0 h\u00ecnh b\u00ean d\u01b0\u1edbi trong c\u00e1c Flutter Project: Th\u00ec c\u00f3 th\u1ec3 ph\u1ea3i update l\u1ea1i SDK & Kh\u1edfi \u0111\u1ed9ng l\u1ea1i m\u00e1y t\u00ednh sdkmanager --update Xem th\u00eam gi\u1ea3i ph\u00e1p t\u1ea1i [1] [2] . - iOS Setup 1. C\u00e0i \u0111\u1eb7t Xcode 9.0 ho\u1eb7c b\u1ea3n m\u1edbi h\u01a1n ( web download ho\u1eb7c Mac App Store ) 1. C\u1ea5u h\u00ecnh l\u1ea1i Xcode command-line tools: $ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer C\u00f3 th\u1ec3 \u0111\u1ed5i l\u1ea1i \u0111\u01b0\u1eddng d\u1eabn t\u1edbi Xcode tr\u00ean m\u00e1y b\u1ea1n cho ph\u00f9 h\u1ee3p. Confirm l\u1ea1i ho\u1ea1t \u0111\u1ed9ng ta ch\u1ea1y c\u00e2u l\u1ec7nh sau: $ sudo xcodebuild -license 1. C\u1ea5u h\u00ecnh iOS simulator: $ open -a Simulator Hardware > Device v\u00e0 Window > Scale . 1. Deploy to iOS devices - C\u00e0i \u0111\u1eb7t Homebrew . - Ch\u1ea1y c\u00e1c c\u00e2u l\u1ec7nh sau: $ brew update $ brew install --HEAD libimobiledevice $ brew install ideviceinstaller ios-deploy cocoapods $ pod setup Trong qu\u00e1 tr\u00ecnh c\u00e0i libimobiledevice n\u1ebfu b\u1ea1n g\u1eb7p l\u1ed7i: ./configure: line 15993: syntax error near unexpected token \\`libusbmuxd,' ./configure: line 15993: `PKG_CHECK_MODULES(libusbmuxd, libusbmuxd >= $LIBUSBMUXD_VERSION)' H\u00e3y ch\u1ea1y c\u00e1c l\u1ec7nh sau: $ sudo chmod 777 /usr/local/share/aclocal $ brew install pkg-config $ brew link pkg-config r\u1ed3i ti\u1ebfp t\u1ee5c c\u00e0i l\u1ea1i xem sao nh\u00e9 C\u00e0i \u0111\u1eb7t pod m\u1ea5t c\u1ee1 ~ 500mb n\u00ean h\u00e3y check l\u1ea1i dung l\u01b0\u1ee3ng \u1ed5 SSD tr\u01b0\u1edbc nh\u00e9. M\u00e1y m\u00ecnh ch\u1ec9 c\u00f3 128Gb th\u00f4i - Install Webdev $ pub global activate webdev Th\u00eam pub executables v\u00e0o system path: $ vim ~/.zshrc export PUB=/Volumes/MACOS/Users/euclid/.pub-cache/bin export PATH=$PUB:$PATH Angular Dart project \u00b6 N\u1ebfu b\u1ea1n mu\u1ed1n b\u1eaft tay t\u1ea1o \u1ee9ng d\u1ee5ng web v\u1edbi AngularDart th\u00ec h\u00e3y l\u00e0m c\u00e1c b\u01b0\u1edbc sau. M\u1edf IntelliJ IDEA l\u00ean v\u00e0 b\u1eaft \u0111\u1ea7u t\u1ea1o 1 project m\u1edbi s\u1eed d\u1ee5ng Dart th\u00f4i > Create New Project Kh\u1edfi \u0111\u1ed9ng web server tr\u00ean Terminal $ cd <path_to_angular_dart_project> $ webdev serve [INFO] Setting up file watchers completed, took 54ms [INFO] Waiting for all file watchers to be ready completed, took 338ms [INFO] Reading cached asset graph completed, took 1.0s [INFO] Checking for updates since last build completed, took 847ms [WARNING] No actions completed for 17.4s, waiting on: - build_modules|modules on package:test/$lib$ - build_modules|modules on package:test/bootstrap/browser.dart - angular on package:angular_test/src/frontend.dart - angular on package:angular_test/angular_test.dart - build_modules|modules on package:angular_test/$lib$ .. and 5 more [INFO] Running build completed, took 2m 26s [INFO] Caching finalized dependency graph completed, took 561ms [INFO] Succeeded after 2m 27s with 2230 outputs (6459 actions) Serving `web` on http://localhost:8080 Serving `test` on http://localhost:8081 Ho\u1eb7c right-click v\u00e0o HTML file v\u00e0 ch\u1ecdn Open in Browser N\u1ebfu c\u00f3 l\u1ed7i /usr/local/opt/dart/libexec/bin/pub global run webdev serve web:50858 webdev could not run for this project. No pubspec.lock file found, please run \"pub get\" first. Dart Dev Server terminated H\u00e3y ch\u1ea1y l\u1ec7nh $ pub get (Ho\u1eb7c right-click v\u00e0o pubspec.yaml v\u00e0 ch\u1ecdn Pub: Get Dependencies ). Sau \u0111\u00f3 Open in Browser l\u1ea1i file index.html v\u00e0 ch\u1edd Dart Dev Server ch\u1ea1y xong tr\u00ean c\u1eeda s\u1ed5 Log. Truy c\u1eadp \u0111\u1ecba ch\u1ec9 http://localhost:8080 \u0111\u1ec3 xem k\u1ebft qu\u1ea3: DONE ! Note: T\u1eeb Dart 1.x \u0111\u1ebfn Dart 2 m\u1ecdi th\u1ee9 \u0111\u00e3 thay \u0111\u1ed5i: | Dart 1.x | Dart 2 | | Dartium, content shell | Chrome and dartdevc | | pub build | webdev build | | pub serve | webdev serve | | pub run angular_test | pub run build_runner test -- -p chrome . See: Running tests | | pub transformers | build package transformers. See: Transforming code | Console dart project \u00b6 \u0110\u1ec3 b\u1eaft \u0111\u1ea7u h\u1ecdc Dart , m\u00ecnh khuy\u00ean c\u00e1c b\u1ea1n n\u00ean t\u1ea1o Command-line application , v\u1eeba nh\u1eb9 nh\u00e0ng l\u1ea1i t\u0103ng m\u1ee9c \u0111\u1ed9 t\u1eadp trung v\u00e0o ng\u00f4n ng\u1eef h\u01a1n. Ch\u1ec9 c\u1ea7n ch\u00fa \u00fd khi t\u1ea1o Project nh\u1edb l\u1ea1i ki\u1ec3u d\u1ef1 \u00e1n l\u00e0 \u0111\u01b0\u1ee3c: Learn dart 2 \u00b6 N\u1ebfu b\u1ea1n \u0111\u00e3 c\u00f3 ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh th\u00ec vi\u1ec7c h\u1ecdc Dart 2 kh\u00f4ng h\u1ec1 kh\u00f3. Dart v\u00e0 Java theo m\u00ecnh ch\u1eafc ph\u1ea3i gi\u1ed1ng nhau t\u1edbi 99,99% m\u1ea5t tuy nhi\u00ean 0,01% \u0111\u00f3 c\u0169ng r\u1ea5t nhi\u1ec1u th\u1ee9c c\u1ea7n h\u1ecdc. \u0110\u1ecdc b\u00e0i vi\u1ebft n\u00e0y n\u1ebfu b\u1ea1n mu\u1ed1n c\u00f3 c\u00e1i nh\u00ecn to\u00e0n c\u1ea3nh v\u1ec1 Dart 2 nh\u00e9. References \u00b6 Dart Home Page IntelliJ IDEA supports developing, running, and debugging Dart Dart 2 Migration Guide for Web Apps","title":"Dart C\u00e0i \u0111\u1eb7t m\u00f4i tr\u01b0\u1eddng"},{"location":"dart/dart_environment_settings/#chuan-bi","text":"M\u00ecnh \u0111ang s\u1eed d\u1ee5ng Macbook n\u00ean s\u1ebd ch\u1ec9 m\u00f4 t\u1ea3 c\u00e1ch c\u00e0i \u0111\u1eb7t tr\u00ean Mac, n\u1ebfu b\u1ea1n d\u00f9ng Linux ho\u1eb7c Windows th\u00ec ch\u1ecbu kh\u00f3 t\u00ecm c\u00e1ch c\u00e0i \u0111\u1eb7t t\u01b0\u01a1ng \u1ee9ng tr\u00ean OS \u0111\u00f3 nh\u00e9. Install IDE: IntelliJ IDEA Community . Sau khi c\u00e0i \u0111\u1eb7t, c\u00e1c b\u1ea1n m\u1edf IntelliJ IDEA > Configure > Preferences > Plugins v\u00e0 c\u00e0i th\u00eam Dart & Flutter v\u00e0o nh\u00e9. Install Dart SDK: L\u00e0m theo c\u00e1c b\u01b0\u1edbc sau \u0111\u1ec3 s\u1eed d\u1ee5ng Dart phi\u00ean b\u1ea3n 2 (V\u00ec c\u00f2n trong giai \u0111o\u1ea1n dev, n\u00ean n\u1ebfu ch\u1ec9 c\u00e0i \u0111\u1eb7t theo c\u00e1ch th\u00f4ng th\u01b0\u1eddng s\u1ebd c\u00e0i phi\u00ean b\u1ea3n 1 - stable) Important: The Dart 2 SDK is available from the dev channel only. $ brew tap dart-lang/dart $ brew install dart $ brew upgrade dart --devel --force $ brew switch dart 2.0.0-dev.65.0 - Install Flutter SDK: (N\u1ebfu b\u1ea1n kh\u00f4ng code Flutter th\u00ec c\u00f3 th\u1ec3 b\u1ecf qua) - T\u1ea3i phi\u00ean b\u1ea3n SDK m\u1edbi nh\u1ea5t t\u1ea1i SDK Archive - Gi\u1ea3i n\u00e9n v\u00e0o th\u01b0 m\u1ee5c xyz n\u00e0o \u0111\u00f3 tr\u00ean m\u00e1y b\u1ea1n. (D\u00f9ng l\u1ec7nh unzip ho\u1eb7c thao t\u00e1c tr\u1ef1c ti\u1ebfp b\u1eb1ng tay ). V\u00ed d\u1ee5 \u1edf \u0111\u00e2y m\u00ecnh gi\u1ea3i n\u00e9n v\u00e0o th\u01b0 m\u1ee5c Mobile : $ pwd /Users/euclid/Data/Mobile $ ls -la total 16 drwxr-xr-x 4 euclid staff 136 Jun 27 09:54 . drwxr-xr-x@ 13 euclid staff 442 Jun 27 09:54 .. -rw-r--r--@ 1 euclid staff 6148 Jun 27 09:54 .DS_Store drwxr-xr-x@ 25 euclid staff 850 Jun 19 09:31 flutter - Th\u00eam flutter v\u00e0o system path. M\u00ecnh d\u00f9ng \u201cOh My ZSH!\u201d n\u00ean s\u1ebd s\u1eed file .zshrc , n\u1ebfu c\u00e1c b\u1ea1n kh\u00f4ng d\u00f9ng th\u00ec s\u1eeda file .bashrc . $ vim ~/.zshrc export FLUTTER = /Volumes/MACOS/Users/euclid/Data/Mobile/flutter/bin export PATH = $FLUTTER : $PATH - Kh\u1edfi \u0111\u1ed9ng l\u1ea1i Terminal v\u00e0 ki\u1ec3m tra th\u00f4ng tin: $ flutter doctor - Platform setup: (N\u1ebfu b\u1ea1n kh\u00f4ng code Flutter th\u00ec c\u00f3 th\u1ec3 b\u1ecf qua) - Android Setup 1. N\u1ebfu b\u1ea1n \u0111\u00e3 c\u00e0i Android Studio, th\u00ec r\u1ea5t c\u00f3 th\u1ec3 b\u1ea1n s\u1ebd kh\u00f4ng ph\u1ea3i l\u00e0m b\u01b0\u1edbc n\u00e0y. 1. N\u1ebfu Intellij IDEA kh\u00f4ng t\u1ef1 nh\u1eadn Android SDK th\u00ec b\u1ea1n ph\u1ea3i t\u1ef1 c\u1ea5u h\u00ecnh SDK theo c\u00e1c b\u01b0\u1edbc trong \u1ea3nh nh\u01b0 sau: \u1ede 2 b\u01b0\u1edbc tr\u00ean, ch\u00fang ta hi\u1ec7n th\u01b0 m\u1ee5c Library tr\u00ean m\u00e1y l\u00ean, do SDK m\u1eb7c \u0111\u1ecbnh c\u00e0i b\u1edfi Android Studio s\u1ebd \u1edf th\u01b0 m\u1ee5c /Users/<name>/Library/Android/sdk . Ti\u1ebfp \u0111\u00f3 ta s\u1ebd c\u1ea5u h\u00ecnh SDK nh\u01b0 sau: 1. Sau khi c\u1ea5u h\u00ecnh xong SDK c\u00e1c b\u1ea1n v\u00e0o AVD Manager v\u00e0 t\u1ea1o Virtual Device nh\u1eb1m debug tr\u00ean m\u00e1y \u1ea3o Android nh\u00e9 1. N\u1ebfu sau khi c\u00e0i \u0111\u1eb7t m\u00e0 kh\u00f4ng c\u00f3 [Flutter Device Selection] nh\u01b0 h\u00ecnh b\u00ean d\u01b0\u1edbi trong c\u00e1c Flutter Project: Th\u00ec c\u00f3 th\u1ec3 ph\u1ea3i update l\u1ea1i SDK & Kh\u1edfi \u0111\u1ed9ng l\u1ea1i m\u00e1y t\u00ednh sdkmanager --update Xem th\u00eam gi\u1ea3i ph\u00e1p t\u1ea1i [1] [2] . - iOS Setup 1. C\u00e0i \u0111\u1eb7t Xcode 9.0 ho\u1eb7c b\u1ea3n m\u1edbi h\u01a1n ( web download ho\u1eb7c Mac App Store ) 1. C\u1ea5u h\u00ecnh l\u1ea1i Xcode command-line tools: $ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer C\u00f3 th\u1ec3 \u0111\u1ed5i l\u1ea1i \u0111\u01b0\u1eddng d\u1eabn t\u1edbi Xcode tr\u00ean m\u00e1y b\u1ea1n cho ph\u00f9 h\u1ee3p. Confirm l\u1ea1i ho\u1ea1t \u0111\u1ed9ng ta ch\u1ea1y c\u00e2u l\u1ec7nh sau: $ sudo xcodebuild -license 1. C\u1ea5u h\u00ecnh iOS simulator: $ open -a Simulator Hardware > Device v\u00e0 Window > Scale . 1. Deploy to iOS devices - C\u00e0i \u0111\u1eb7t Homebrew . - Ch\u1ea1y c\u00e1c c\u00e2u l\u1ec7nh sau: $ brew update $ brew install --HEAD libimobiledevice $ brew install ideviceinstaller ios-deploy cocoapods $ pod setup Trong qu\u00e1 tr\u00ecnh c\u00e0i libimobiledevice n\u1ebfu b\u1ea1n g\u1eb7p l\u1ed7i: ./configure: line 15993: syntax error near unexpected token \\`libusbmuxd,' ./configure: line 15993: `PKG_CHECK_MODULES(libusbmuxd, libusbmuxd >= $LIBUSBMUXD_VERSION)' H\u00e3y ch\u1ea1y c\u00e1c l\u1ec7nh sau: $ sudo chmod 777 /usr/local/share/aclocal $ brew install pkg-config $ brew link pkg-config r\u1ed3i ti\u1ebfp t\u1ee5c c\u00e0i l\u1ea1i xem sao nh\u00e9 C\u00e0i \u0111\u1eb7t pod m\u1ea5t c\u1ee1 ~ 500mb n\u00ean h\u00e3y check l\u1ea1i dung l\u01b0\u1ee3ng \u1ed5 SSD tr\u01b0\u1edbc nh\u00e9. M\u00e1y m\u00ecnh ch\u1ec9 c\u00f3 128Gb th\u00f4i - Install Webdev $ pub global activate webdev Th\u00eam pub executables v\u00e0o system path: $ vim ~/.zshrc export PUB=/Volumes/MACOS/Users/euclid/.pub-cache/bin export PATH=$PUB:$PATH","title":"Chu\u1ea9n b\u1ecb"},{"location":"dart/dart_environment_settings/#angular-dart-project","text":"N\u1ebfu b\u1ea1n mu\u1ed1n b\u1eaft tay t\u1ea1o \u1ee9ng d\u1ee5ng web v\u1edbi AngularDart th\u00ec h\u00e3y l\u00e0m c\u00e1c b\u01b0\u1edbc sau. M\u1edf IntelliJ IDEA l\u00ean v\u00e0 b\u1eaft \u0111\u1ea7u t\u1ea1o 1 project m\u1edbi s\u1eed d\u1ee5ng Dart th\u00f4i > Create New Project Kh\u1edfi \u0111\u1ed9ng web server tr\u00ean Terminal $ cd <path_to_angular_dart_project> $ webdev serve [INFO] Setting up file watchers completed, took 54ms [INFO] Waiting for all file watchers to be ready completed, took 338ms [INFO] Reading cached asset graph completed, took 1.0s [INFO] Checking for updates since last build completed, took 847ms [WARNING] No actions completed for 17.4s, waiting on: - build_modules|modules on package:test/$lib$ - build_modules|modules on package:test/bootstrap/browser.dart - angular on package:angular_test/src/frontend.dart - angular on package:angular_test/angular_test.dart - build_modules|modules on package:angular_test/$lib$ .. and 5 more [INFO] Running build completed, took 2m 26s [INFO] Caching finalized dependency graph completed, took 561ms [INFO] Succeeded after 2m 27s with 2230 outputs (6459 actions) Serving `web` on http://localhost:8080 Serving `test` on http://localhost:8081 Ho\u1eb7c right-click v\u00e0o HTML file v\u00e0 ch\u1ecdn Open in Browser N\u1ebfu c\u00f3 l\u1ed7i /usr/local/opt/dart/libexec/bin/pub global run webdev serve web:50858 webdev could not run for this project. No pubspec.lock file found, please run \"pub get\" first. Dart Dev Server terminated H\u00e3y ch\u1ea1y l\u1ec7nh $ pub get (Ho\u1eb7c right-click v\u00e0o pubspec.yaml v\u00e0 ch\u1ecdn Pub: Get Dependencies ). Sau \u0111\u00f3 Open in Browser l\u1ea1i file index.html v\u00e0 ch\u1edd Dart Dev Server ch\u1ea1y xong tr\u00ean c\u1eeda s\u1ed5 Log. Truy c\u1eadp \u0111\u1ecba ch\u1ec9 http://localhost:8080 \u0111\u1ec3 xem k\u1ebft qu\u1ea3: DONE ! Note: T\u1eeb Dart 1.x \u0111\u1ebfn Dart 2 m\u1ecdi th\u1ee9 \u0111\u00e3 thay \u0111\u1ed5i: | Dart 1.x | Dart 2 | | Dartium, content shell | Chrome and dartdevc | | pub build | webdev build | | pub serve | webdev serve | | pub run angular_test | pub run build_runner test -- -p chrome . See: Running tests | | pub transformers | build package transformers. See: Transforming code |","title":"Angular Dart project"},{"location":"dart/dart_environment_settings/#console-dart-project","text":"\u0110\u1ec3 b\u1eaft \u0111\u1ea7u h\u1ecdc Dart , m\u00ecnh khuy\u00ean c\u00e1c b\u1ea1n n\u00ean t\u1ea1o Command-line application , v\u1eeba nh\u1eb9 nh\u00e0ng l\u1ea1i t\u0103ng m\u1ee9c \u0111\u1ed9 t\u1eadp trung v\u00e0o ng\u00f4n ng\u1eef h\u01a1n. Ch\u1ec9 c\u1ea7n ch\u00fa \u00fd khi t\u1ea1o Project nh\u1edb l\u1ea1i ki\u1ec3u d\u1ef1 \u00e1n l\u00e0 \u0111\u01b0\u1ee3c:","title":"Console dart project"},{"location":"dart/dart_environment_settings/#learn-dart-2","text":"N\u1ebfu b\u1ea1n \u0111\u00e3 c\u00f3 ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh th\u00ec vi\u1ec7c h\u1ecdc Dart 2 kh\u00f4ng h\u1ec1 kh\u00f3. Dart v\u00e0 Java theo m\u00ecnh ch\u1eafc ph\u1ea3i gi\u1ed1ng nhau t\u1edbi 99,99% m\u1ea5t tuy nhi\u00ean 0,01% \u0111\u00f3 c\u0169ng r\u1ea5t nhi\u1ec1u th\u1ee9c c\u1ea7n h\u1ecdc. \u0110\u1ecdc b\u00e0i vi\u1ebft n\u00e0y n\u1ebfu b\u1ea1n mu\u1ed1n c\u00f3 c\u00e1i nh\u00ecn to\u00e0n c\u1ea3nh v\u1ec1 Dart 2 nh\u00e9.","title":"Learn dart 2"},{"location":"dart/dart_environment_settings/#references","text":"Dart Home Page IntelliJ IDEA supports developing, running, and debugging Dart Dart 2 Migration Guide for Web Apps","title":"References"},{"location":"kotlin/kotlin_basic/","text":"1. Val v\u00e0 var \u00b6 Trong Java ch\u00fang ta khai b\u00e1o bi\u1ebfn nh\u01b0 v\u1ea7y: String s ; s = \"hello\" ; final String u = \"hi\" ; //khai b\u00e1o m\u1ed9t constant V\u1edbi Kotlin , ch\u00fang ta c\u00f3 t\u1eeb kh\u00f3a var \u0111\u1ec3 khai b\u00e1o bi\u1ebfn v\u00e0 val \u0111\u1ec3 khai b\u00e1o m\u1ed9t constant, c\u00fa ph\u00e1p s\u1ebd l\u00e0: var s : String s = \"hello\" val v : String = \"hi\" //khai b\u00e1o m\u1ed9t constant, b\u1eaft bu\u1ed9c ph\u1ea3i kh\u1edfi t\u1ea1o khi khai b\u00e1o var u = \"hey\" //C\u00f3 th\u1ec3 kh\u00f4ng x\u00e1c \u0111\u1ecbnh ki\u1ec3u cho bi\u1ebfn m\u00e0 \u0111\u1ec3 t\u1ef1 compiler x\u00e1c \u0111\u1ecbnh Note: Kotlin kh\u00f4ng y\u00eau c\u1ea7u d\u1ea5u ; sau m\u1ed7i statement n\u1eefa C\u01a1 ch\u1ebf gi\u00fap Kotlin t\u1ef1 x\u00e1c \u0111\u1ecbnh ki\u1ec3u c\u1ee7a bi\u1ebfn g\u1ecdi l\u00e0 Type inference, ngo\u00e0i t\u1ef1 suy ra ki\u1ec3u bi\u1ebfn, c\u01a1 ch\u1ebf n\u00e0y c\u00f2n s\u1eed d\u1ee5ng trong single-expression function (s\u1ebd n\u00f3i sau), l\u00e0m cho boilerplate code gi\u1ea3m \u0111i r\u1ea5t nhi\u1ec1u 2. Ki\u1ec3u d\u1eef li\u1ec7u \u00b6 Everything trong Kotlin \u0111\u1ec1u l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng, kh\u00f4ng c\u00f2n d\u1eef li\u1ec7u ki\u1ec3u nguy\u00ean th\u1ee7y (primitive type) n\u1eefa. \u0110i\u1ec1u n\u00e0y gi\u00fap cho m\u1ecdi bi\u1ebfn \u0111\u1ec1u s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c generic, g\u1ecdi \u0111\u01b0\u1ee3c c\u00e1c function, property ho\u1eb7c c\u00f3 th\u1ec3 g\u00e1n \u0111\u01b0\u1ee3c b\u1eb1ng null Ti\u1ebfp theo, ch\u00fang ta s\u1ebd n\u00f3i v\u1ec1 c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u trong Kotlin : numbers characters booleans strings arrays a. Numbers \u00b6 Size \u00b6 \u0110\u1ed9 d\u00e0i bit c\u1ee7a t\u1eebng ki\u1ec3u \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n trong b\u1ea3ng sau: Type Bit width Double 46 Float 32 Long 64 Int 32 Short 16 Byte 8 Note: character kh\u00f4ng \u0111\u01b0\u1ee3c coi l\u00e0 ki\u1ec3u s\u1ed1 trong Kotlin Constant literal \u00b6 T\u01b0\u01a1ng t\u1ef1 nh\u01b0 trong Java , Kotlin c\u0169ng c\u00f3 c\u00e1c constant literal \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh ki\u1ec3u d\u1eef li\u1ec7u cho c\u00e1c s\u1ed1: val int = 123 val long = 123456L val double = 123.45 val float = 123.45F val hexa = 0 xAB val binary = 0 b0001 D\u1ea5u g\u1ea1ch ngang '_' \u00b6 T\u1eeb Kotlin 1.1, khi s\u1eed d\u1ee5ng m\u1ed9t s\u1ed1 c\u00f3 nhi\u1ec1u ch\u1eef s\u1ed1, ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng d\u1ea5u g\u1ea1ch ngang \u0111\u1ec3 code d\u1ec5 \u0111\u1ecdc h\u01a1n val million = 1 _000_000 val billion = 1 _000_000_000L Representation (Bi\u1ec3u di\u1ec5n number) \u00b6 Trong Java , number \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef m\u1ed9t c\u00e1ch v\u1eadt l\u00fd nh\u01b0 ki\u1ec3u d\u1eef li\u1ec7u nguy\u00ean th\u1ee7y c\u1ee7a JVM tr\u1eeb khi ch\u00fang ta c\u1ea7n bi\u1ebfn \u0111\u00f3 c\u00f3 th\u1ec3 g\u00e1n \u0111\u01b0\u1ee3c b\u1eb1ng null (VD: Int? ) ho\u1eb7c c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi generic. Trong tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3, number s\u1ebd \u0111\u01b0\u1ee3c boxing - t\u1ee9c l\u00e0 t\u1ef1 wrap ki\u1ec3u nguy\u00ean th\u1ee7y \u0111\u00f3 \u0111\u1ec3 n\u00f3 tr\u1edf th\u00e0nh ki\u1ec3u Object . Note: khi boxing, \u0111\u1ecbnh danh c\u1ee7a number kh\u00f4ng nh\u1ea5t thi\u1ebft \u0111\u01b0\u1ee3c gi\u1eef l\u1ea1i val a : Int = 10000 print ( a === a ) // Prints 'true' val boxedA : Int ? = a val anotherBoxedA : Int ? = a print ( boxedA === anotherBoxedA ) // !!!Prints 'false'!!! V\u1edbi to\u00e1n t\u1eed === , boxedA v\u00e0 anotherBoxedA b\u1eb1ng nhau khi v\u00e0 ch\u1ec9 khi 2 bi\u1ebfn n\u00e0y tr\u1ecf \u0111\u1ebfn c\u00f9ng 1 \u0111\u1ed1i t\u01b0\u1ee3ng. Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, khi g\u00e1n gi\u00e1 tr\u1ecb 10000 cho bi\u1ebfn a . 10000 s\u1ebd \u0111\u01b0\u1ee3c boxing th\u00e0nh ki\u1ec3u Int . B\u1edfi v\u1eady, theo nh\u01b0 suy lu\u1eadn b\u00ecnh th\u01b0\u1eddng, bi\u1ebfn boxedA v\u00e0 anotherBoxedA \u0111\u01b0\u1ee3c g\u00e1n b\u1eb1ng a s\u1ebd b\u1eb1ng nhau v\u00ec c\u00f9ng tr\u1ecf t\u1edbi c\u00f9ng m\u1ed9t object l\u00e0 a . Tuy nhi\u00ean, v\u1edbi c\u00e1c gi\u00e1 tr\u1ecb t\u1eeb 0 -> 127 (2^7 - 1), c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u trong c\u00f9ng m\u1ed9t v\u00f9ng nh\u1edb. V\u1edbi c\u00e1c gi\u00e1 tr\u1ecb l\u1edbn h\u01a1n m\u1ed1c 127 n\u00e0y, v\u00ec boxing, c\u00e1c \u0111\u1ecbnh danh s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c gi\u1eef, t\u1ee9c l\u00e0 2 bi\u1ebfn boxedA v\u00e0 anotherBoxedA s\u1ebd tr\u1ecf \u0111\u1ebfn 2 v\u00f9ng nh\u1edb kh\u00e1c nhau. B\u1edfi v\u1eady, boxedA ==== anotherBoxedA tr\u1ea3 v\u1ec1 false Th\u1eed l\u1ea1i v\u1edbi a = 127 val a : Int = 127 print ( a === a ) // Prints 'true' val boxedA : Int ? = a val anotherBoxedA : Int ? = a print ( boxedA === anotherBoxedA ) // !!!Prints 'true'!!! M\u1eb7t kh\u00e1c, n\u00f3 gi\u1eef l\u1ea1i s\u1ef1 b\u1eb1ng nhau val a : Int = 10000 print ( a == a ) // Prints 'true' val boxedA : Int ? = a val anotherBoxedA : Int ? = a print ( boxedA == anotherBoxedA ) // Prints 'true' To\u00e1n t\u1eed == tr\u1ea3 v\u1ec1 true n\u1ebfu 2 bi\u1ebfn kh\u00f4ng null v\u00e0 c\u00f3 gi\u00e1 tr\u1ecb b\u1eb1ng nhau Explicity conversion (Chuy\u1ec3n \u0111\u1ed5i ki\u1ec3u t\u01b0\u1eddng minh) \u00b6 Trong Java , khi mu\u1ed1n convert m\u1ed9t bi\u1ebfn c\u00f3 ki\u1ec3u d\u1eef li\u1ec7u nh\u1ecf h\u01a1n sang ki\u1ec3u l\u1edbn h\u01a1n, ta ch\u1ec9 c\u1ea7n g\u00e1n bi\u1ebfn \u0111\u00f3 cho m\u1ed9t bi\u1ebfn kh\u00e1c v\u1edbi ki\u1ec3u d\u1eef li\u1ec7u ta mu\u1ed1n convert byte b = 1 ; int a = b ; // ngon V\u1edbi Kotlin , vi\u1ec7c n\u00e0y l\u00e0 kh\u00f4ng th\u1ec3 b\u1edfi: Kotlin kh\u00f4ng h\u1ed7 tr\u1ee3 vi\u1ec7c m\u1edf r\u1ed9ng size c\u1ee7a m\u1ed9t s\u1ed1 nh\u01b0 trong Java . val b : Byte = 1 val i : Int = b //compiler b\u00e1o l\u1ed7i: type mismatch \u0110\u1ec3 l\u00e0m vi\u1ec7c n\u00e0y, ta b\u1eaft bu\u1ed9c ph\u1ea3i d\u00f9ng c\u00e1c function \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 b\u1edfi Kotlin nh\u01b0: toByte(): Byte toShort(): Short toInt(): Int toLong(): Long toFloat(): Float toDouble(): Double toChar(): Char val b : Byte = 1 val i : Int = b . toInt () //ngon To\u00e1n t\u1eed \u00b6 V\u1edbi Kotlin , c\u00e1c to\u00e1n t\u1eed l\u00e0 m\u1ed9t function member c\u1ee7a c\u00e1c l\u1edbp, ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c to\u00e1n t\u1eed n\u00e0y nh\u01b0 m\u1ed9t function ho\u1eb7c g\u1ecdi ch\u00fang nh\u01b0 m\u1ed9t to\u00e1n t\u1eed trung t\u1ed1(infix) v\u00e0 overload c\u00e1c to\u00e1n t\u1eed n\u00e0y. C\u00e1c to\u00e1n t\u1eed thao t\u00e1c v\u1ec1 bit bao g\u1ed3m: shl(bits) -- signed shift left (Java's <<) shr(bits) -- signed shift right (Java's >>) ushr(bits) -- unsigned shift right (Java's >>>) and(bits) -- bitwise and or(bits) -- bitwise or xor(bits) -- bitwise xor inv() -- bitwise inversion val x = ( 1 shl 2 ) and 0 x000FF000 val y = 1. shl ( 2 ). and ( 0 x000FF000 ) b. Characters \u00b6 L\u1edbp \u0111\u1ea1i di\u1ec7n cho character trong Kotlin l\u00e0 Char . \u0110\u1ec3 bi\u1ec3u di\u1ec5n m\u1ed9t k\u00fd t\u1ef1, ta d\u00f9ng d\u1ea5u nh\u00e1y \u0111\u01a1n val c : Char = 'a' val d : Char = 4 //compiler s\u1ebd b\u00e1o l\u1ed7i Note: Char kh\u00f4ng \u0111\u01b0\u1ee3c coi l\u00e0 s\u1ed1 trong Kotlin . B\u1edfi v\u1eady, vi\u1ec7c g\u00e1n nh\u01b0 tr\u00ean s\u1ebd kh\u00f4ng th\u00e0nh c\u00f4ng c. Boolean \u00b6 L\u1edbp \u0111\u1ea1i di\u1ec7n cho ki\u1ec3u Boolean trong Kotlin l\u00e0 Boolean . Boolean c\u00f3 2 gi\u00e1 tr\u1ecb l\u00e0 true v\u00e0 false . C\u00e1c to\u00e1n t\u1eed \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 cho Boolean l\u00e0: || - ph\u00e9p tuy\u1ec3n && - ph\u00e9p h\u1ed9i ! - ph\u1ee7 \u0111\u1ecbnh d. String \u00b6 \u0110\u1ea1i di\u1ec7n cho string trong Kotlin l\u00e0 l\u1edbp String . String l\u00e0 ki\u1ec3u immutable. Th\u00e0nh ph\u1ea7n c\u1ee7a string l\u00e0 c\u00e1c character, c\u00f3 th\u1ec3 truy c\u1eadp b\u1eb1ng c\u00e1ch d\u00f9ng [] Java String s = \"hello\" ; s . charAt ( 0 ); // 'h' Kotlin var s : String = \"hello\" s [ 0 ] // 'h' String Literals \u00b6 Kotlin c\u00f3 2 lo\u1ea1i literal: Double quote: \u0111\u1ec3 xu\u1ed1ng d\u00f2ng ho\u1eb7c tab th\u00ec s\u1eed d\u1ee5ng c\u00e1c k\u00fd t\u1ef1 \u0111\u1eb7c bi\u1ec7t: \\n , \\t ... val s1 = \"hello\\n\" Triple quote: ch\u00fang ta s\u1ebd t\u1ea1o \u0111\u01b0\u1ee3c m\u1ed9t raw string, c\u00f3 th\u1ec3 bao g\u1ed3m c\u1ea3 m\u1ed9t d\u00f2ng m\u1edbi val text = \"\"\" for ( c in \"foo\" ) { print ( c ) } \"\"\" String template \u00b6 Kotlin cho ph\u00e9p truy\u1ec1n bi\u1ebfn v\u00e0o string b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a ${} Java int result = 3 ; String s = \"K\u1ebft qu\u1ea3 l\u00e0 \" + result ; Kotlin val s3 = \"abc\" val str = \"$s3.length is ${s3.length}\" // \"abc.length is 3\" e. Arrays \u00b6 L\u1edbp \u0111\u1ea1i di\u1ec7n cho m\u1ea3ng trong Kotlin l\u00e0 Array . Vi\u1ec7c truy c\u1eadp v\u00e0o c\u00e1c ph\u1ea7n t\u1eed s\u1eed d\u1ee5ng get, set ho\u1eb7c [], size l\u00e0 m\u1ed9t thu\u1ed9c t\u00ednh c\u1ee7a l\u1edbp Array . Kh\u1edfi t\u1ea1o \u00b6 \u0110\u1ec3 t\u1ea1o m\u1ea3ng, ta s\u1eed d\u1ee5ng function arrayOf ho\u1eb7c h\u00e0m t\u1ea1o val a : Array < Int > = arrayOf ( 1 , 2 , 3 , 4 ) // [1,2,3,4] var a1 : Array < Int > = Array ( 3 , { it -> it * 3 }) //[0,3,6,9] B\u1ea5t bi\u1ebfn \u00b6 Array trong Kotlin l\u00e0 m\u1ed9t \u0111\u1ea1i l\u01b0\u1ee3ng b\u1ea5t bi\u1ebfn. B\u1edfi v\u1eady, kh\u00f4ng th\u1ec3 g\u00e1n m\u1ed9t Array<String> cho m\u1ed9t Array<Any> (M\u1ecdi l\u1edbp trong Kotlin \u0111\u1ec1u extends t\u1eeb \u0111\u1ed1i t\u01b0\u1ee3ng Any ) Java String a1 [] = new String [ 3 ]; Object a [] = a1 ; //ngon Kotlin var a2 : Array < String > = arrayOf ( 1 , 2 , 3 ) var a3 : Array < Any > = a2 //compiler s\u1ebd b\u00e1o l\u1ed7i C\u00e1c l\u1edbp Array kh\u00e1c \u00b6 Kotlin c\u00f3 h\u1ed7 tr\u1ee3 m\u1ed9t s\u1ed1 c\u00e1c l\u1edbp \u0111\u1ec3 chuy\u00ean l\u01b0u tr\u1eef c\u00e1c gi\u00e1 tr\u1ecb nguy\u00ean th\u1ee7y nh\u1eb1m gi\u1ea3m b\u1edbt chi ph\u00ed boxing: ByteArray , ShortArray , IntArray ... Tuy nhi\u00ean th\u00ec c\u00e1c l\u1edbp n\u00e0y k c\u00f3 quan h\u1ec7 k\u1ebf th\u1eeba g\u00ec v\u1edbi Array . Tuy nhi\u00ean, c\u00e1c l\u1edbp n\u00e0y v\u1eabn c\u00f3 thu\u1ed9c t\u00ednh v\u00e0 function t\u01b0\u01a1ng t\u1ef1 nh\u01b0 Array 3. Null safety \u00b6 Kotlin cung c\u1ea5p c\u1ea3 2 ki\u1ec3u l\u00e0 non-null v\u00e0 nullable(nh\u01b0 trong Java). T\u1eeb b\u00e2y gi\u1edd, exception ch\u1ec9 c\u00f3 th\u1ec3 null trong tr\u01b0\u1eddng h\u1ee3p T\u1ef1 throw NullPointerException() S\u1eed d\u1ee5ng to\u00e1n t\u1eed !! (s\u1ebd \u0111\u01b0\u1ee3c n\u00f3i sau) Java code g\u00e2y ra 1 tr\u01b0\u1eddng h\u1ee3p ch\u01b0a hi\u1ec3u M\u1eb7c \u0111\u1ecbnh, ki\u1ec3u c\u1ee7a bi\u1ebfn l\u00e0 non-null. \u0110\u1ec3 khai b\u00e1o m\u1ed9t bi\u1ebfn ki\u1ec3u nullable, ta s\u1eed d\u1ee5ng ? var e : String ? = null V\u1edbi m\u1ed9t bi\u1ebfn non-null, vi\u1ec7c g\u00e1n null s\u1ebd l\u00e0 kh\u00f4ng th\u1ec3 var e : String = null //compiler b\u00e1o l\u1ed7i Khi ki\u1ec3u bi\u1ebfn l\u00e0 non null, vi\u1ec7c g\u1ecdi \u0111\u1ebfn c\u00e1c bi\u1ebfn, function ho\u00e0n to\u00e0n safe. Ng\u01b0\u1ee3c l\u1ea1i, n\u1ebfu truy c\u1eadp \u0111\u1ebfn m\u1ed9t bi\u1ebfn c\u00f3 ki\u1ec3u nullable, NPE v\u1eabn c\u00f3 th\u1ec3 x\u1ea3y ra -> unsafe call Safe call \u00b6 S\u1eed d\u1ee5ng d\u1ea5u ? \u0111\u1ec3 safe call e ?. length Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, n\u1ebfu bi\u1ebfn e null, k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 s\u1ebd l\u00e0 null. Ng\u01b0\u1ee3c l\u1ea1i, k\u1ebft qu\u1ea3 l\u00e0 \u0111\u1ed9 d\u00e0i c\u1ee7a x\u00e2u e. \u0110\u1eb7c bi\u1ec7t, c\u01a1 ch\u1ebf safe call c\u00f3 th\u1ec3 g\u1ecdi theo chain: var user : User ? = User ( \"tu\" , 22 ) var length = user ?. name ?. length Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, n\u1ebfu user null ho\u1eb7c name null, gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 cho length l\u00e0 null. N\u1ebfu t\u1ea5t c\u1ea3 kh\u00f4ng null, length khi n\u00e0y m\u1edbi c\u00f3 gi\u00e1 tr\u1ecb. \u0110\u1ec3 th\u1ef1c hi\u1ec7n vi\u1ec7c g\u00ec ch\u1ec9 v\u1edbi c\u00e1c gi\u00e1 tr\u1ecb kh\u00e1c null, ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng to\u00e1n t\u1eed ?. v\u00e0 c\u00e1c h\u00e0m apply , let ... val listWithNulls : List < String ?> = listOf ( \"A\" , null ) for ( item in listWithNulls ) { item ?. let { println ( it ) } // ch\u1ec9 th\u1ef1c hi\u1ec7n v\u1edbi c\u00e1c gi\u00e1 tr\u1ecb kh\u00e1c null } To\u00e1n t\u1eed elvis ?: \u00b6 B\u00ecnh th\u01b0\u1eddng, \u0111\u1ec3 g\u00e1n gi\u00e1 tr\u1ecb cho m\u1ed9t bi\u1ebfn, ta l\u00e0m nh\u01b0 th\u1ebf n\u00e0y var b : String ? = \"hello\" val l : Int = if ( b != null ) b . length else - 1 V\u1edbi to\u00e1n t\u1eed elvis, ta c\u00f3 th\u1ec3 l\u00e0m nh\u01b0 th\u1ebf n\u00e0y val l = b ?. length ?: - 1 N\u1ebfu b kh\u00e1c null, l = b.length, n\u1ebfu b null, l = -1 Ngo\u00e0i ra, v\u00ec throw v\u00e0 return l\u00e0 bi\u1ec3u th\u1ee9c trong Kotlin , ta c\u00f3 th\u1ec3 l\u00e0m nh\u01b0 th\u1ebf n\u00e0y fun foo ( node : Node ): String ? { val parent = node . getParent () ?: return null val name = node . getName () ?: throw IllegalArgumentException ( \"name expected\" ) // ... } To\u00e1n t\u1eed !! \u00b6 val l = b !! . length V\u1edbi !!, n\u1ebfu b kh\u00f4ng null, l = b.length. N\u1ebfu b null, NPE s\u1ebd \u0111\u01b0\u1ee3c throw -> V\u1edbi Kotlin, NPE xu\u1ea5t hi\u1ec7n n\u1ebfu n\u00f3 \u0111\u01b0\u1ee3c y\u00eau c\u1ea7u m\u1ed9t c\u00e1ch t\u01b0\u1eddng minh ch\u1ee9 kh\u00f4ng th\u1ec3 xu\u1ea5t hi\u1ec7n n\u1ebfu b\u1ea1n kh\u00f4ng mong mu\u1ed1n 4. To\u00e1n t\u1eed so s\u00e1nh \u00b6 Trong Kotlin , c\u00f3 2 lo\u1ea1i \u0111\u1eb3ng th\u1ee9c: Referential equality: 2 references tr\u1ecf t\u1edb c\u00f9ng m\u1ed9t object Structural equality: function equals Referential equality \u00b6 To\u00e1n t\u1eed === v\u00e0 kh\u00e1c l\u00e0 !== . a === b khi v\u00e0 ch\u1ec9 khi a v\u00e0 b c\u00f9ng tr\u1ecf \u0111\u1ebfn c\u00f9ng m\u1ed9t object Structural equality \u00b6 To\u00e1n t\u1eed == v\u00e0 kh\u00e1c != . Theo quy \u01b0\u1edbc, khi g\u1ecdi a == b, compiler s\u1ebd t\u1ef1 \u0111\u1ed9ng translate th\u00e0nh a ? equals ( b ) ?: ( b === null ) T\u1ee9c l\u00e0 n\u1ebfu a kh\u00f4ng null, s\u1ebd g\u1ecdi function equals \u0111\u1ec3 ki\u1ec3m tra v\u1edbi b, n\u1ebfu a null, th\u00ec s\u1ebd ki\u1ec3m tra b c\u00f3 tr\u1ecf t\u1edbi null kh\u00f4ng Note: L\u01b0u \u00fd: khi s\u1eed d\u1ee5ng a==null, m\u1eb7c \u0111\u1ecbnh compiler s\u1ebd t\u1ef1 \u0111\u1ed9ng chuy\u1ec3n th\u00e0nh a===null 5. Check ki\u1ec3u v\u00e0 casting \u00b6 Ki\u1ec3m tra ki\u1ec3u bi\u1ebfn \u00b6 V\u1edbi Java , ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a instanceOf . V\u1edbi Kotlin , \u0111\u1ec3 ki\u1ec3m tra ki\u1ec3u bi\u1ebfn trong Kotlin , ta s\u1eed d\u1ee5ng is v\u00e0 !is Java if ( s instanceOf String ){ } Kotlin if ( s is String ){ } Casting \u00b6 S\u1eed d\u1ee5ng to\u00e1n t\u1eed as val t : String = y as String Unsafe cast \u00b6 Trong Java, n\u1ebfu vi\u1ec7c cast kh\u00f4ng th\u00e0nh c\u00f4ng, s\u1ebd c\u00f3 m\u1ed9t exception c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c throw: ClassCastException . \u0110\u1ed1i t\u01b0\u1ee3ng c\u00f3 ki\u1ec3u nullable kh\u00f4ng th\u1ec3 cast th\u00e0nh \u0111\u1ed1i t\u01b0\u1ee3ng non-null. N\u1ebfu y = null trong tr\u01b0\u1eddng h\u1ee3p tr\u00ean, s\u1ebd c\u00f3 exception \u0111\u01b0\u1ee3c b\u1eafn ra. \u0110\u1ec3 cast \u0111\u01b0\u1ee3c, Kotlin cung c\u1ea5p nh\u01b0 sau val t : String ? = null as String ? Safe cast \u00b6 \u0110\u1ec3 tr\u00e1nh vi\u1ec7c exception \u0111\u01b0\u1ee3c b\u1eafn ra, Kotlin cung c\u1ea5p as? val s4 : String ? = s5 as ? String s4 s\u1ebd c\u00f3 gi\u00e1 tr\u1ecb c\u1ee7a s5 n\u1ebfu s5 kh\u00f4ng null, ng\u01b0\u1ee3c l\u1ea1i, s4 = null. Smart casting \u00b6 Trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p, ch\u00fang ta kh\u00f4ng ph\u1ea3i cast m\u1ed9t c\u00e1ch t\u01b0\u1eddng minh v\u00ec compiler s\u1ebd track vi\u1ec7c check ki\u1ec3u b\u1eb1ng is v\u00e0 s\u1ebd t\u1ef1 \u0111\u1ed9ng cast n\u1ebfu c\u1ea7n: if ( s is String ) { print ( s . length ) // x \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng cast th\u00e0nh ki\u1ec3u String } if ( s ! is String ) return print ( s . length ) // x \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng cast th\u00e0nh ki\u1ec3u String if ( s ! is String || s . length == 0 ) return // x \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng cast th\u00e0nh ki\u1ec3u String 6. C\u1ea5u tr\u00fac \u0111i\u1ec1u khi\u1ec3n \u00b6 a. C\u1ea5u tr\u00fac if \u00b6 Trong Kotlin , if l\u00e0 m\u1ed9t bi\u1ec3u th\u1ee9c. B\u1edfi v\u1eady, Kotlin kh\u00f4ng c\u00f2n to\u00e1n t\u1eed 3 y\u1ebfu t\u1ed1 Java int a = result ? 1 : 0 ; Kotlin var a : Int = if ( result ) 1 else 0 var r : Int = if ( result ) { print ( \"ok\" ) 1 } else { print ( \"fail\" ) 0 } N\u1ebfu l\u00e0 kh\u1ed1i l\u1ec7nh, gi\u00e1 tr\u1ecb \u1edf cu\u1ed1i kh\u1ed1i l\u1ec7nh l\u00e0 gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1. Khi g\u00e1n gi\u00e1 tr\u1ecb, nh\u00e1nh else b\u1eaft bu\u1ed9c ph\u1ea3i c\u00f3 b. C\u1ea5u tr\u00fac when: \u00b6 C\u1ea5u tr\u00fac when thay th\u1ebf switch trong Java . C\u1ea5u tr\u00fac c\u1ee7a when l\u00e0 when ( x ) { 1 -> print ( \"x == 1\" ) 2 -> print ( \"x == 2\" ) else -> { print ( \"x ch\u1ea3 b\u1eb1ng 1 c\u0169ng m\u00e9o b\u1eb1ng 2\" ) } } Note: else l\u00e0 b\u1eaft bu\u1ed9c , tr\u1eeb khi compiler c\u00f3 th\u1ec3 ch\u1ee9ng minh \u0111\u01b0\u1ee3c t\u1ea5t c\u1ea3 c\u00e1 tr\u01b0\u1eddng h\u1ee3p \u0111\u00e3 \u0111\u01b0\u1ee3c cover. C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng when \u0111\u1ec3 thay th\u1ebf vi\u1ec7c s\u1eed d\u1ee5ng if else if N\u1ebfu vi\u1ec7c x\u1eed l\u00fd c\u1ee7a 1 s\u1ed1 tr\u01b0\u1eddng h\u1ee3p gi\u1ed1ng nhau: when ( x ) { 0 , 1 -> print ( \"x == 0 or x == 1\" ) else -> print ( \"ng\u01b0\u1ee3c l\u1ea1i\" ) } C\u00e1c tr\u01b0\u1eddng h\u1ee3p c\u1ee7a when kh\u00f4ng nh\u1ea5t thi\u1ebft ph\u1ea3i l\u00e0 constant, ch\u00fang c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t function when ( x ) { parseInt ( s ) -> print ( \"s encodes x\" ) else -> print ( \"s does not encode x\" ) } Ho\u1eb7c ki\u1ec3u d\u1eef li\u1ec7u var result1 = when ( s ) { is String -> s . startsWith ( \"prefix\" ) else -> false } C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng when \u0111\u1ec3 g\u00e1n gi\u00e1 tr\u1ecb var l : Int = when ( s ) { \"hello\" -> 0 \"hi\" -> 1 else -> 2 } \u0110i\u1ec1u ki\u1ec7n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 ki\u1ec3m tra trong kho\u1ea3ng val validNumbers = arrayOf ( 11 , 13 , 17 , 19 ) when ( x ) { in 1. . 10 -> print ( \"x is in the range\" ) in validNumbers -> print ( \"x is valid\" ) ! in 10. . 20 -> print ( \"x is outside the range\" ) else -> print ( \"none of the above\" ) } c. C\u1ea5u tr\u00fac for \u00b6 V\u00f2ng l\u1eb7p for c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 duy\u1ec7t b\u1ea5t k\u1ef3 th\u1ee9 g\u00ec cung c\u1ea5p m\u1ed9t iterator. VD: C\u00f3 m\u1ed9t member ho\u1eb7c extension function t\u00ean l\u00e0 iterator() , ki\u1ec3u tr\u1ea3 v\u1ec1 l\u00e0 Iterator C\u00f3 m\u1ed9t member ho\u1eb7c extension function next() C\u00f3 m\u1ed9t member ho\u1eb7c extension function hasNext tr\u1ea3 v\u1ec1 ki\u1ec3u Boolean T\u1ea5t c\u1ea3 3 function n\u00e0y \u0111\u1ec1u c\u1ea7n \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u l\u00e0 operator VD: class DateRange ( start : Int , val end : Int ) { var current = start operator fun iterator (): Iterator < Int >{ return object : Iterator < Int >{ override fun next (): Int { val result = current current ++ return result } override fun hasNext (): Boolean { return current <= end } } } } //for for ( i in DateRange ( 1 , 10 )) { print ( i ) //1..10 } M\u1ed9t v\u00f2ng l\u1eb7p for \u0111\u1ed1i v\u1edbi m\u1ed9t array s\u1ebd \u0111\u01b0\u1ee3c compile th\u00e0nh m\u1ed9t v\u00f2ng l\u1eb7p index m\u00e0 kh\u00f4ng c\u1ea7n t\u1ea1o m\u1ed9t iterator object: //Kotlin var array : Array < Int > = arrayOf ( 1 , 2 , 5 , 6 , 7 ) for ( i in array ) { // do something } //Decompile code Object [] elements $ iv = new Integer []{ Integer . valueOf ( 1 ), Integer . valueOf ( 2 ), Integer . valueOf ( 5 ), Integer . valueOf ( 6 ), Integer . valueOf ( 7 )}; Integer [] array = elements $ iv ; for ( int var4 = 0 ; var4 < array . length ; ++ var4 ) { int i = array [ var4 ]. intValue (); } N\u1ebfu b\u1ea1n mu\u1ed1n duy\u1ec7t qua m\u1ed9t array ho\u1eb7c m\u1ed9t list b\u1eb1ng c\u00e1c ch\u1ec9 s\u1ed1, b\u1ea1n c\u00f3 th\u1ec3 l\u00e0m nh\u01b0 sau: val array = arrayOf ( 1 , 3 , 2 , 6 , 8 ) for ( i in array . indices ) { print ( array [ i ]) //13268 } L\u01b0u \u00fd r\u1eb1ng vi\u1ec7c duy\u1ec7t qua m\u1ed9t ph\u1ea1m vi (iteration through a range) \u0111\u01b0\u1ee3c compile thanh m\u1ed9t c\u00e1ch th\u1ef1c thi t\u1ed1i \u01b0u m\u00e0 kh\u00f4ng ph\u1ea3i c\u1ea7n th\u00eam object n\u00e0o \u0111\u01b0\u1ee3c t\u1ea1o ra Ngo\u00e0i ra, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng function withIndex trong th\u01b0 vi\u1ec7n chu\u1ea9n: val array = arrayOf ( 1 , 3 , 2 , 6 , 8 ) for ( pair in array . withIndex ()) { println ( \"element at ${pair.index} is ${pair.value}\" ) } //result //element at 0 is 1 //element at 1 is 3 //element at 2 is 2 //element at 3 is 6 //element at 4 is 8 M\u1ed9t s\u1ed1 so s\u00e1nh V\u00f2ng l\u1eb7p xu\u00f4i Java for ( int i = 1 ; i <= 11 ; i ++) { //... } Kotlin for ( i in 1. . 11 ){ } V\u00f2ng l\u1eb7p b\u01b0\u1edbc 2 Java for ( int i = 1 ; i <= 11 ; i += 2 ) { //... } Kotlin for ( i in 1. . 11 step 2 ){ } V\u00f2ng l\u1eb7p l\u00f9i Java for ( int i = 10 ; i >= 0 ; i --) { //... } Kotlin for ( i in 11 downTo 1 ){ } V\u00f2ng l\u1eb7p t\u1eebng gi\u00e1 tr\u1ecb Java for ( String s : arrayList ) { //... } Kotlin for ( item : Int in ints ){ } d. C\u1ea5u tr\u00fac while \u00b6 T\u01b0\u01a1ng t\u1ef1 nh\u01b0 Java while ( x > 0 ) { x -- } do { val y = retrieveData () } while ( y != null ) // y is visible here! e. break, continue v\u00e0 return \u00b6 Ch\u1ee9c n\u0103ng c\u1ee7a t\u1eebng t\u1eeb kh\u00f3a m\u1eb7c \u0111\u1ecbnh nh\u01b0 sau: return : tho\u00e1t kh\u1ecfi function g\u1ea7n nh\u1ea5t break : tho\u00e1t kh\u1ecfi v\u00f2ng l\u1eb7p g\u1ea7n nh\u1ea5t continue : ti\u1ebfp t\u1ee5c b\u01b0\u1edbc ti\u1ebfp theo c\u1ee7a v\u00f2ng l\u1eb7p g\u1ea7n nh\u1ea5t Label v\u1edbi break v\u00e0 continue \u00b6 \u0110\u1ec3 ch\u1ec9 \u0111\u1ecbnh break v\u00e0 continue \u0111\u1ebfn m\u1ed9t expression n\u00e0o \u0111\u00f3, s\u1eed d\u1ee5ng label: @label loop @ for ( i in 1. . 100 ) { for ( j in 1. . 100 ) { if ( j > 2 ) break @loop } } M\u1eb7c \u0111\u1ecbnh, n\u1ebfu kh\u00f4ng c\u00f3 label @loop , break s\u1ebd tho\u00e1t ra kh\u1ecfi v\u00f2ng l\u1eb7p g\u1ea7n nh\u1ea5t, v\u00f2ng l\u1eb7p j. V\u1edbi label @loop , break@loop s\u1ebd tho\u00e1t ra c\u1ea3 2 v\u00f2ng l\u1eb7p. T\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1eady, continue c\u0169ng c\u00f3 th\u1ec3 dung label \u0111\u1ec3 \u0111i \u0111\u1ebfn b\u01b0\u1edbc ti\u1ebfp theo c\u1ee7a v\u00f2ng l\u1eb7p Label v\u1edbi return \u00b6 fun foo (){ var ints : Array < Int > = arrayOf ( 1 , 3 , 5 , 6 ) ints . forEach lit @ { if ( it == 0 ) return @lit print ( it ) } } V\u1edbi tr\u01b0\u1eddng h\u1ee3p tr\u00ean, c\u00e2u l\u1ec7nh return s\u1ebd ch\u1ec9 tho\u00e1t ra kh\u1ecfi function forEach , v\u00e0 s\u1ebd l\u00e0m ti\u1ebfp c\u00e1c c\u00f4ng vi\u1ec7c ph\u00eda sau. N\u1ebfu kh\u00f4ng c\u00f3 label, return s\u1ebd tho\u00e1t ra kh\u1ecfi function foo() . Ta c\u00f3 th\u1ec3 \u0111\u1eb7t label ho\u1eb7c s\u1eed d\u1ee5ng implicit label \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a d\u1ef1a theo t\u00ean function fun foo (){ var ints : Array < Int > = arrayOf ( 1 , 3 , 5 , 6 ) ints . forEach lit @ { if ( it == 0 ) return @forEach print ( it ) } } Ngo\u00e0i ra, ta c\u00f2n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng label vs return trong tr\u01b0\u1eddng h\u1ee3p mu\u1ed1n tr\u1ea3 v\u1ec1 m\u1ed9t gi\u00e1 tr\u1ecb n\u00e0o \u0111\u00f3 t\u1ea1i label \u0111\u00f3 b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng return lit @ 4 7. Visibility modifier \u00b6 Trong Java , \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a kh\u1ea3 n\u0103ng truy c\u1eadp c\u1ee7a c\u00e1c property, function c\u1ee7a m\u1ed9t class, ta s\u1eed d\u1ee5ng access modifier. Trong Kotlin , \u0111\u00f3 l\u00e0 visibility modifier. Visibility modifier c\u1ee7a Kotlin g\u1ed3m 4 m\u1ee9c, t\u01b0\u01a1ng \u0111\u01b0\u01a1ng nh\u01b0 v\u1edbi Java: public internal protected private \u0110\u1ec3 hi\u1ec3u chi ti\u1ebft h\u01a1n, h\u00e3y xem Visibility modifier 8. Kh\u1edfi t\u1ea1o m\u1ed9t l\u1edbp \u00b6 Trong Java , \u0111\u1ec3 kh\u1edfi t\u1ea1o m\u1ed9t class, ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a new , v\u1edbi Kotlin . Function t\u1ea1o \u0111\u01b0\u1ee3c g\u1ecdi nh\u01b0 m\u1ed9t function b\u00ecnh th\u01b0\u1eddng Java User user = new User ( \"nam\" , 22 ); Kotlin var user : User = User ( \"nam\" , 22 ) 9. Bi\u1ec3u th\u1ee9c This \u00b6 \u0110\u1ec3 bi\u1ec3u th\u1ecb \u0111\u1ed1i t\u01b0\u1ee3ng hi\u1ec7n t\u1ea1i, ta s\u1eed d\u1ee5ng bieru th\u1ee9c this Trong m\u1ed9t th\u00e0nh ph\u1ea7n c\u1ee7a class, this tham chi\u1ebfu \u0111\u1ebfn \u0111\u1ed1i t\u01b0\u1ee3ng hi\u1ec7n t\u1ea1i c\u1ee7a class Trong extension function, ho\u1eb7c function literal with receiver, this bi\u1ec3u th\u1ecb param c\u1ee7a function - t\u1ee9c l\u00e0 gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o b\u00ean tr\u00e1i d\u1ea5u . N\u1ebfu this kh\u00f4ng c\u00f3 label ch\u1ec9 \u0111\u1ecbnh \u0111\u1ed1i t\u01b0\u1ee3ng ch\u1ec9 v\u00e0o, this tham chi\u1ebfu t\u1edbi ph\u1ea1m vi ch\u1ee9a g\u1ea7n nh\u1ea5t. \u0110\u1ec3 tham chi\u1ebfu \u0111\u1ebfn m\u1ed9t ph\u1ea1m vi kh\u00e1c, label ch\u1ec9 \u0111\u1ecbnh s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng Label ch\u1ec9 \u0111\u1ecbnh \u00b6 \u0110\u1ec3 truy c\u1eadp \u0111\u1ebfn this t\u1eeb ph\u1ea1m vi b\u00ean ngo\u00e0i (m\u1ed9t class ho\u1eb7c extension function), ch\u00fang ta s\u1eed d\u1ee5ng this@label v\u1edbi @label l\u00e0 ch\u1ec9 \u0111\u1ecbnh \u0111\u1ebfn ph\u1ea1m vi this mong mu\u1ed1n class A { // implicit label @A inner class B { // implicit label @B fun Int . foo () { // implicit label @foo val a = this @A // tr\u1ecf \u0111\u1ebfn l\u1edbp A val b = this @B // tr\u1ecf \u0111\u1ebfn l\u1edbp B val c = this // tr\u1ecf \u0111\u1ebfn param (m\u1ed9t s\u1ed1 Int) c\u1ee7a function foo() b\u1edfi foo() l\u00e0 m\u1ed9t extension function val c1 = this @foo // tr\u1ecf \u0111\u1ebfn param (m\u1ed9t s\u1ed1 Int) c\u1ee7a function foo() b\u1edfi foo() l\u00e0 m\u1ed9t extension function val funLit = lambda @ fun String .() { val d = this // tr\u1ecf \u0111\u1ebfn param (m\u1ed9t String) c\u1ee7a function funLit() } val funLit2 = { s : String -> // tr\u1ecf \u0111\u1ebfn param (m\u1ed9t s\u1ed1 Int) c\u1ee7a function foo() b\u1edfi foo() l\u00e0 m\u1ed9t extension function val d1 = this } } } } 10. Package \u00b6 Package cho ph\u00e9p ch\u00fang ta chia nh\u1ecf code b\u1eb1ng namspace. B\u1ea5t k\u1ef3 file n\u00e0o c\u0169ng c\u00f3 th\u1ec3 b\u1eaft \u0111\u1ea7u b\u1eb1ng vi\u1ec7c khai b\u00e1o m\u1ed9t package package com.packt.myproject class Foo fun bar (): String = \"bar\" \u1ede \u0111\u00e2y, t\u1ea5t c\u1ea3 c\u00e1c n\u1ed9i dung(VD: class, function...) \u0111\u1ec1u thu\u1ed9c package \u0111\u00e3 \u0111\u01b0\u1ee3c khai b\u00e1o. B\u1edfi v\u1eady, fully qualified name (FQN) c\u1ee7a c\u00e1c th\u00e0nh ph\u1ea7n trong \u0111\u00f3 t\u01b0\u01a1ng \u1ee9ng l\u00e0: com.packt.myproject.Foo l\u00e0 t\u00ean c\u1ee7a class Foo , com.packt.myproject.bar l\u00e0 t\u00ean c\u1ee7a function bar . N\u1ebfu package kh\u00f4ng \u0111\u01b0\u1ee3c khai b\u00e1o, c\u00e1c th\u00e0nh ph\u1ea7n trong file \u0111\u00f3 s\u1ebd thu\u1ed9c v\u1ec1 root package .","title":"Kotlin Basic"},{"location":"kotlin/kotlin_basic/#146-val-va-var","text":"Trong Java ch\u00fang ta khai b\u00e1o bi\u1ebfn nh\u01b0 v\u1ea7y: String s ; s = \"hello\" ; final String u = \"hi\" ; //khai b\u00e1o m\u1ed9t constant V\u1edbi Kotlin , ch\u00fang ta c\u00f3 t\u1eeb kh\u00f3a var \u0111\u1ec3 khai b\u00e1o bi\u1ebfn v\u00e0 val \u0111\u1ec3 khai b\u00e1o m\u1ed9t constant, c\u00fa ph\u00e1p s\u1ebd l\u00e0: var s : String s = \"hello\" val v : String = \"hi\" //khai b\u00e1o m\u1ed9t constant, b\u1eaft bu\u1ed9c ph\u1ea3i kh\u1edfi t\u1ea1o khi khai b\u00e1o var u = \"hey\" //C\u00f3 th\u1ec3 kh\u00f4ng x\u00e1c \u0111\u1ecbnh ki\u1ec3u cho bi\u1ebfn m\u00e0 \u0111\u1ec3 t\u1ef1 compiler x\u00e1c \u0111\u1ecbnh Note: Kotlin kh\u00f4ng y\u00eau c\u1ea7u d\u1ea5u ; sau m\u1ed7i statement n\u1eefa C\u01a1 ch\u1ebf gi\u00fap Kotlin t\u1ef1 x\u00e1c \u0111\u1ecbnh ki\u1ec3u c\u1ee7a bi\u1ebfn g\u1ecdi l\u00e0 Type inference, ngo\u00e0i t\u1ef1 suy ra ki\u1ec3u bi\u1ebfn, c\u01a1 ch\u1ebf n\u00e0y c\u00f2n s\u1eed d\u1ee5ng trong single-expression function (s\u1ebd n\u00f3i sau), l\u00e0m cho boilerplate code gi\u1ea3m \u0111i r\u1ea5t nhi\u1ec1u","title":"1. Val v\u00e0 var"},{"location":"kotlin/kotlin_basic/#246-kieu-du-lieu","text":"Everything trong Kotlin \u0111\u1ec1u l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng, kh\u00f4ng c\u00f2n d\u1eef li\u1ec7u ki\u1ec3u nguy\u00ean th\u1ee7y (primitive type) n\u1eefa. \u0110i\u1ec1u n\u00e0y gi\u00fap cho m\u1ecdi bi\u1ebfn \u0111\u1ec1u s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c generic, g\u1ecdi \u0111\u01b0\u1ee3c c\u00e1c function, property ho\u1eb7c c\u00f3 th\u1ec3 g\u00e1n \u0111\u01b0\u1ee3c b\u1eb1ng null Ti\u1ebfp theo, ch\u00fang ta s\u1ebd n\u00f3i v\u1ec1 c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u trong Kotlin : numbers characters booleans strings arrays","title":"2. Ki\u1ec3u d\u1eef li\u1ec7u"},{"location":"kotlin/kotlin_basic/#a-numbers","text":"","title":"a. Numbers"},{"location":"kotlin/kotlin_basic/#size","text":"\u0110\u1ed9 d\u00e0i bit c\u1ee7a t\u1eebng ki\u1ec3u \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n trong b\u1ea3ng sau: Type Bit width Double 46 Float 32 Long 64 Int 32 Short 16 Byte 8 Note: character kh\u00f4ng \u0111\u01b0\u1ee3c coi l\u00e0 ki\u1ec3u s\u1ed1 trong Kotlin","title":"Size"},{"location":"kotlin/kotlin_basic/#constant-literal","text":"T\u01b0\u01a1ng t\u1ef1 nh\u01b0 trong Java , Kotlin c\u0169ng c\u00f3 c\u00e1c constant literal \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh ki\u1ec3u d\u1eef li\u1ec7u cho c\u00e1c s\u1ed1: val int = 123 val long = 123456L val double = 123.45 val float = 123.45F val hexa = 0 xAB val binary = 0 b0001","title":"Constant literal"},{"location":"kotlin/kotlin_basic/#dau-gach-ngang-_","text":"T\u1eeb Kotlin 1.1, khi s\u1eed d\u1ee5ng m\u1ed9t s\u1ed1 c\u00f3 nhi\u1ec1u ch\u1eef s\u1ed1, ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng d\u1ea5u g\u1ea1ch ngang \u0111\u1ec3 code d\u1ec5 \u0111\u1ecdc h\u01a1n val million = 1 _000_000 val billion = 1 _000_000_000L","title":"D\u1ea5u g\u1ea1ch ngang '_'"},{"location":"kotlin/kotlin_basic/#representation-bieu-dien-number","text":"Trong Java , number \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef m\u1ed9t c\u00e1ch v\u1eadt l\u00fd nh\u01b0 ki\u1ec3u d\u1eef li\u1ec7u nguy\u00ean th\u1ee7y c\u1ee7a JVM tr\u1eeb khi ch\u00fang ta c\u1ea7n bi\u1ebfn \u0111\u00f3 c\u00f3 th\u1ec3 g\u00e1n \u0111\u01b0\u1ee3c b\u1eb1ng null (VD: Int? ) ho\u1eb7c c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi generic. Trong tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3, number s\u1ebd \u0111\u01b0\u1ee3c boxing - t\u1ee9c l\u00e0 t\u1ef1 wrap ki\u1ec3u nguy\u00ean th\u1ee7y \u0111\u00f3 \u0111\u1ec3 n\u00f3 tr\u1edf th\u00e0nh ki\u1ec3u Object . Note: khi boxing, \u0111\u1ecbnh danh c\u1ee7a number kh\u00f4ng nh\u1ea5t thi\u1ebft \u0111\u01b0\u1ee3c gi\u1eef l\u1ea1i val a : Int = 10000 print ( a === a ) // Prints 'true' val boxedA : Int ? = a val anotherBoxedA : Int ? = a print ( boxedA === anotherBoxedA ) // !!!Prints 'false'!!! V\u1edbi to\u00e1n t\u1eed === , boxedA v\u00e0 anotherBoxedA b\u1eb1ng nhau khi v\u00e0 ch\u1ec9 khi 2 bi\u1ebfn n\u00e0y tr\u1ecf \u0111\u1ebfn c\u00f9ng 1 \u0111\u1ed1i t\u01b0\u1ee3ng. Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, khi g\u00e1n gi\u00e1 tr\u1ecb 10000 cho bi\u1ebfn a . 10000 s\u1ebd \u0111\u01b0\u1ee3c boxing th\u00e0nh ki\u1ec3u Int . B\u1edfi v\u1eady, theo nh\u01b0 suy lu\u1eadn b\u00ecnh th\u01b0\u1eddng, bi\u1ebfn boxedA v\u00e0 anotherBoxedA \u0111\u01b0\u1ee3c g\u00e1n b\u1eb1ng a s\u1ebd b\u1eb1ng nhau v\u00ec c\u00f9ng tr\u1ecf t\u1edbi c\u00f9ng m\u1ed9t object l\u00e0 a . Tuy nhi\u00ean, v\u1edbi c\u00e1c gi\u00e1 tr\u1ecb t\u1eeb 0 -> 127 (2^7 - 1), c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u trong c\u00f9ng m\u1ed9t v\u00f9ng nh\u1edb. V\u1edbi c\u00e1c gi\u00e1 tr\u1ecb l\u1edbn h\u01a1n m\u1ed1c 127 n\u00e0y, v\u00ec boxing, c\u00e1c \u0111\u1ecbnh danh s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c gi\u1eef, t\u1ee9c l\u00e0 2 bi\u1ebfn boxedA v\u00e0 anotherBoxedA s\u1ebd tr\u1ecf \u0111\u1ebfn 2 v\u00f9ng nh\u1edb kh\u00e1c nhau. B\u1edfi v\u1eady, boxedA ==== anotherBoxedA tr\u1ea3 v\u1ec1 false Th\u1eed l\u1ea1i v\u1edbi a = 127 val a : Int = 127 print ( a === a ) // Prints 'true' val boxedA : Int ? = a val anotherBoxedA : Int ? = a print ( boxedA === anotherBoxedA ) // !!!Prints 'true'!!! M\u1eb7t kh\u00e1c, n\u00f3 gi\u1eef l\u1ea1i s\u1ef1 b\u1eb1ng nhau val a : Int = 10000 print ( a == a ) // Prints 'true' val boxedA : Int ? = a val anotherBoxedA : Int ? = a print ( boxedA == anotherBoxedA ) // Prints 'true' To\u00e1n t\u1eed == tr\u1ea3 v\u1ec1 true n\u1ebfu 2 bi\u1ebfn kh\u00f4ng null v\u00e0 c\u00f3 gi\u00e1 tr\u1ecb b\u1eb1ng nhau","title":"Representation (Bi\u1ec3u di\u1ec5n number)"},{"location":"kotlin/kotlin_basic/#explicity-conversion-chuyen-oi-kieu-tuong-minh","text":"Trong Java , khi mu\u1ed1n convert m\u1ed9t bi\u1ebfn c\u00f3 ki\u1ec3u d\u1eef li\u1ec7u nh\u1ecf h\u01a1n sang ki\u1ec3u l\u1edbn h\u01a1n, ta ch\u1ec9 c\u1ea7n g\u00e1n bi\u1ebfn \u0111\u00f3 cho m\u1ed9t bi\u1ebfn kh\u00e1c v\u1edbi ki\u1ec3u d\u1eef li\u1ec7u ta mu\u1ed1n convert byte b = 1 ; int a = b ; // ngon V\u1edbi Kotlin , vi\u1ec7c n\u00e0y l\u00e0 kh\u00f4ng th\u1ec3 b\u1edfi: Kotlin kh\u00f4ng h\u1ed7 tr\u1ee3 vi\u1ec7c m\u1edf r\u1ed9ng size c\u1ee7a m\u1ed9t s\u1ed1 nh\u01b0 trong Java . val b : Byte = 1 val i : Int = b //compiler b\u00e1o l\u1ed7i: type mismatch \u0110\u1ec3 l\u00e0m vi\u1ec7c n\u00e0y, ta b\u1eaft bu\u1ed9c ph\u1ea3i d\u00f9ng c\u00e1c function \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 b\u1edfi Kotlin nh\u01b0: toByte(): Byte toShort(): Short toInt(): Int toLong(): Long toFloat(): Float toDouble(): Double toChar(): Char val b : Byte = 1 val i : Int = b . toInt () //ngon","title":"Explicity conversion (Chuy\u1ec3n \u0111\u1ed5i ki\u1ec3u t\u01b0\u1eddng minh)"},{"location":"kotlin/kotlin_basic/#toan-tu","text":"V\u1edbi Kotlin , c\u00e1c to\u00e1n t\u1eed l\u00e0 m\u1ed9t function member c\u1ee7a c\u00e1c l\u1edbp, ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c to\u00e1n t\u1eed n\u00e0y nh\u01b0 m\u1ed9t function ho\u1eb7c g\u1ecdi ch\u00fang nh\u01b0 m\u1ed9t to\u00e1n t\u1eed trung t\u1ed1(infix) v\u00e0 overload c\u00e1c to\u00e1n t\u1eed n\u00e0y. C\u00e1c to\u00e1n t\u1eed thao t\u00e1c v\u1ec1 bit bao g\u1ed3m: shl(bits) -- signed shift left (Java's <<) shr(bits) -- signed shift right (Java's >>) ushr(bits) -- unsigned shift right (Java's >>>) and(bits) -- bitwise and or(bits) -- bitwise or xor(bits) -- bitwise xor inv() -- bitwise inversion val x = ( 1 shl 2 ) and 0 x000FF000 val y = 1. shl ( 2 ). and ( 0 x000FF000 )","title":"To\u00e1n t\u1eed"},{"location":"kotlin/kotlin_basic/#b-characters","text":"L\u1edbp \u0111\u1ea1i di\u1ec7n cho character trong Kotlin l\u00e0 Char . \u0110\u1ec3 bi\u1ec3u di\u1ec5n m\u1ed9t k\u00fd t\u1ef1, ta d\u00f9ng d\u1ea5u nh\u00e1y \u0111\u01a1n val c : Char = 'a' val d : Char = 4 //compiler s\u1ebd b\u00e1o l\u1ed7i Note: Char kh\u00f4ng \u0111\u01b0\u1ee3c coi l\u00e0 s\u1ed1 trong Kotlin . B\u1edfi v\u1eady, vi\u1ec7c g\u00e1n nh\u01b0 tr\u00ean s\u1ebd kh\u00f4ng th\u00e0nh c\u00f4ng","title":"b. Characters"},{"location":"kotlin/kotlin_basic/#c-boolean","text":"L\u1edbp \u0111\u1ea1i di\u1ec7n cho ki\u1ec3u Boolean trong Kotlin l\u00e0 Boolean . Boolean c\u00f3 2 gi\u00e1 tr\u1ecb l\u00e0 true v\u00e0 false . C\u00e1c to\u00e1n t\u1eed \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 cho Boolean l\u00e0: || - ph\u00e9p tuy\u1ec3n && - ph\u00e9p h\u1ed9i ! - ph\u1ee7 \u0111\u1ecbnh","title":"c. Boolean"},{"location":"kotlin/kotlin_basic/#d-string","text":"\u0110\u1ea1i di\u1ec7n cho string trong Kotlin l\u00e0 l\u1edbp String . String l\u00e0 ki\u1ec3u immutable. Th\u00e0nh ph\u1ea7n c\u1ee7a string l\u00e0 c\u00e1c character, c\u00f3 th\u1ec3 truy c\u1eadp b\u1eb1ng c\u00e1ch d\u00f9ng [] Java String s = \"hello\" ; s . charAt ( 0 ); // 'h' Kotlin var s : String = \"hello\" s [ 0 ] // 'h'","title":"d. String"},{"location":"kotlin/kotlin_basic/#string-literals","text":"Kotlin c\u00f3 2 lo\u1ea1i literal: Double quote: \u0111\u1ec3 xu\u1ed1ng d\u00f2ng ho\u1eb7c tab th\u00ec s\u1eed d\u1ee5ng c\u00e1c k\u00fd t\u1ef1 \u0111\u1eb7c bi\u1ec7t: \\n , \\t ... val s1 = \"hello\\n\" Triple quote: ch\u00fang ta s\u1ebd t\u1ea1o \u0111\u01b0\u1ee3c m\u1ed9t raw string, c\u00f3 th\u1ec3 bao g\u1ed3m c\u1ea3 m\u1ed9t d\u00f2ng m\u1edbi val text = \"\"\" for ( c in \"foo\" ) { print ( c ) } \"\"\"","title":"String Literals"},{"location":"kotlin/kotlin_basic/#string-template","text":"Kotlin cho ph\u00e9p truy\u1ec1n bi\u1ebfn v\u00e0o string b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a ${} Java int result = 3 ; String s = \"K\u1ebft qu\u1ea3 l\u00e0 \" + result ; Kotlin val s3 = \"abc\" val str = \"$s3.length is ${s3.length}\" // \"abc.length is 3\"","title":"String template"},{"location":"kotlin/kotlin_basic/#e-arrays","text":"L\u1edbp \u0111\u1ea1i di\u1ec7n cho m\u1ea3ng trong Kotlin l\u00e0 Array . Vi\u1ec7c truy c\u1eadp v\u00e0o c\u00e1c ph\u1ea7n t\u1eed s\u1eed d\u1ee5ng get, set ho\u1eb7c [], size l\u00e0 m\u1ed9t thu\u1ed9c t\u00ednh c\u1ee7a l\u1edbp Array .","title":"e. Arrays"},{"location":"kotlin/kotlin_basic/#khoi-tao","text":"\u0110\u1ec3 t\u1ea1o m\u1ea3ng, ta s\u1eed d\u1ee5ng function arrayOf ho\u1eb7c h\u00e0m t\u1ea1o val a : Array < Int > = arrayOf ( 1 , 2 , 3 , 4 ) // [1,2,3,4] var a1 : Array < Int > = Array ( 3 , { it -> it * 3 }) //[0,3,6,9]","title":"Kh\u1edfi t\u1ea1o"},{"location":"kotlin/kotlin_basic/#bat-bien","text":"Array trong Kotlin l\u00e0 m\u1ed9t \u0111\u1ea1i l\u01b0\u1ee3ng b\u1ea5t bi\u1ebfn. B\u1edfi v\u1eady, kh\u00f4ng th\u1ec3 g\u00e1n m\u1ed9t Array<String> cho m\u1ed9t Array<Any> (M\u1ecdi l\u1edbp trong Kotlin \u0111\u1ec1u extends t\u1eeb \u0111\u1ed1i t\u01b0\u1ee3ng Any ) Java String a1 [] = new String [ 3 ]; Object a [] = a1 ; //ngon Kotlin var a2 : Array < String > = arrayOf ( 1 , 2 , 3 ) var a3 : Array < Any > = a2 //compiler s\u1ebd b\u00e1o l\u1ed7i","title":"B\u1ea5t bi\u1ebfn"},{"location":"kotlin/kotlin_basic/#cac-lop-array-khac","text":"Kotlin c\u00f3 h\u1ed7 tr\u1ee3 m\u1ed9t s\u1ed1 c\u00e1c l\u1edbp \u0111\u1ec3 chuy\u00ean l\u01b0u tr\u1eef c\u00e1c gi\u00e1 tr\u1ecb nguy\u00ean th\u1ee7y nh\u1eb1m gi\u1ea3m b\u1edbt chi ph\u00ed boxing: ByteArray , ShortArray , IntArray ... Tuy nhi\u00ean th\u00ec c\u00e1c l\u1edbp n\u00e0y k c\u00f3 quan h\u1ec7 k\u1ebf th\u1eeba g\u00ec v\u1edbi Array . Tuy nhi\u00ean, c\u00e1c l\u1edbp n\u00e0y v\u1eabn c\u00f3 thu\u1ed9c t\u00ednh v\u00e0 function t\u01b0\u01a1ng t\u1ef1 nh\u01b0 Array","title":"C\u00e1c l\u1edbp Array kh\u00e1c"},{"location":"kotlin/kotlin_basic/#346-null-safety","text":"Kotlin cung c\u1ea5p c\u1ea3 2 ki\u1ec3u l\u00e0 non-null v\u00e0 nullable(nh\u01b0 trong Java). T\u1eeb b\u00e2y gi\u1edd, exception ch\u1ec9 c\u00f3 th\u1ec3 null trong tr\u01b0\u1eddng h\u1ee3p T\u1ef1 throw NullPointerException() S\u1eed d\u1ee5ng to\u00e1n t\u1eed !! (s\u1ebd \u0111\u01b0\u1ee3c n\u00f3i sau) Java code g\u00e2y ra 1 tr\u01b0\u1eddng h\u1ee3p ch\u01b0a hi\u1ec3u M\u1eb7c \u0111\u1ecbnh, ki\u1ec3u c\u1ee7a bi\u1ebfn l\u00e0 non-null. \u0110\u1ec3 khai b\u00e1o m\u1ed9t bi\u1ebfn ki\u1ec3u nullable, ta s\u1eed d\u1ee5ng ? var e : String ? = null V\u1edbi m\u1ed9t bi\u1ebfn non-null, vi\u1ec7c g\u00e1n null s\u1ebd l\u00e0 kh\u00f4ng th\u1ec3 var e : String = null //compiler b\u00e1o l\u1ed7i Khi ki\u1ec3u bi\u1ebfn l\u00e0 non null, vi\u1ec7c g\u1ecdi \u0111\u1ebfn c\u00e1c bi\u1ebfn, function ho\u00e0n to\u00e0n safe. Ng\u01b0\u1ee3c l\u1ea1i, n\u1ebfu truy c\u1eadp \u0111\u1ebfn m\u1ed9t bi\u1ebfn c\u00f3 ki\u1ec3u nullable, NPE v\u1eabn c\u00f3 th\u1ec3 x\u1ea3y ra -> unsafe call","title":"3. Null safety"},{"location":"kotlin/kotlin_basic/#safe-call","text":"S\u1eed d\u1ee5ng d\u1ea5u ? \u0111\u1ec3 safe call e ?. length Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, n\u1ebfu bi\u1ebfn e null, k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 s\u1ebd l\u00e0 null. Ng\u01b0\u1ee3c l\u1ea1i, k\u1ebft qu\u1ea3 l\u00e0 \u0111\u1ed9 d\u00e0i c\u1ee7a x\u00e2u e. \u0110\u1eb7c bi\u1ec7t, c\u01a1 ch\u1ebf safe call c\u00f3 th\u1ec3 g\u1ecdi theo chain: var user : User ? = User ( \"tu\" , 22 ) var length = user ?. name ?. length Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, n\u1ebfu user null ho\u1eb7c name null, gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 cho length l\u00e0 null. N\u1ebfu t\u1ea5t c\u1ea3 kh\u00f4ng null, length khi n\u00e0y m\u1edbi c\u00f3 gi\u00e1 tr\u1ecb. \u0110\u1ec3 th\u1ef1c hi\u1ec7n vi\u1ec7c g\u00ec ch\u1ec9 v\u1edbi c\u00e1c gi\u00e1 tr\u1ecb kh\u00e1c null, ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng to\u00e1n t\u1eed ?. v\u00e0 c\u00e1c h\u00e0m apply , let ... val listWithNulls : List < String ?> = listOf ( \"A\" , null ) for ( item in listWithNulls ) { item ?. let { println ( it ) } // ch\u1ec9 th\u1ef1c hi\u1ec7n v\u1edbi c\u00e1c gi\u00e1 tr\u1ecb kh\u00e1c null }","title":"Safe call"},{"location":"kotlin/kotlin_basic/#toan-tu-elvis","text":"B\u00ecnh th\u01b0\u1eddng, \u0111\u1ec3 g\u00e1n gi\u00e1 tr\u1ecb cho m\u1ed9t bi\u1ebfn, ta l\u00e0m nh\u01b0 th\u1ebf n\u00e0y var b : String ? = \"hello\" val l : Int = if ( b != null ) b . length else - 1 V\u1edbi to\u00e1n t\u1eed elvis, ta c\u00f3 th\u1ec3 l\u00e0m nh\u01b0 th\u1ebf n\u00e0y val l = b ?. length ?: - 1 N\u1ebfu b kh\u00e1c null, l = b.length, n\u1ebfu b null, l = -1 Ngo\u00e0i ra, v\u00ec throw v\u00e0 return l\u00e0 bi\u1ec3u th\u1ee9c trong Kotlin , ta c\u00f3 th\u1ec3 l\u00e0m nh\u01b0 th\u1ebf n\u00e0y fun foo ( node : Node ): String ? { val parent = node . getParent () ?: return null val name = node . getName () ?: throw IllegalArgumentException ( \"name expected\" ) // ... }","title":"To\u00e1n t\u1eed elvis\u00a0?:"},{"location":"kotlin/kotlin_basic/#toan-tu_1","text":"val l = b !! . length V\u1edbi !!, n\u1ebfu b kh\u00f4ng null, l = b.length. N\u1ebfu b null, NPE s\u1ebd \u0111\u01b0\u1ee3c throw -> V\u1edbi Kotlin, NPE xu\u1ea5t hi\u1ec7n n\u1ebfu n\u00f3 \u0111\u01b0\u1ee3c y\u00eau c\u1ea7u m\u1ed9t c\u00e1ch t\u01b0\u1eddng minh ch\u1ee9 kh\u00f4ng th\u1ec3 xu\u1ea5t hi\u1ec7n n\u1ebfu b\u1ea1n kh\u00f4ng mong mu\u1ed1n","title":"To\u00e1n t\u1eed\u00a0!!"},{"location":"kotlin/kotlin_basic/#446-toan-tu-so-sanh","text":"Trong Kotlin , c\u00f3 2 lo\u1ea1i \u0111\u1eb3ng th\u1ee9c: Referential equality: 2 references tr\u1ecf t\u1edb c\u00f9ng m\u1ed9t object Structural equality: function equals","title":"4. To\u00e1n t\u1eed so s\u00e1nh"},{"location":"kotlin/kotlin_basic/#referential-equality","text":"To\u00e1n t\u1eed === v\u00e0 kh\u00e1c l\u00e0 !== . a === b khi v\u00e0 ch\u1ec9 khi a v\u00e0 b c\u00f9ng tr\u1ecf \u0111\u1ebfn c\u00f9ng m\u1ed9t object","title":"Referential equality"},{"location":"kotlin/kotlin_basic/#structural-equality","text":"To\u00e1n t\u1eed == v\u00e0 kh\u00e1c != . Theo quy \u01b0\u1edbc, khi g\u1ecdi a == b, compiler s\u1ebd t\u1ef1 \u0111\u1ed9ng translate th\u00e0nh a ? equals ( b ) ?: ( b === null ) T\u1ee9c l\u00e0 n\u1ebfu a kh\u00f4ng null, s\u1ebd g\u1ecdi function equals \u0111\u1ec3 ki\u1ec3m tra v\u1edbi b, n\u1ebfu a null, th\u00ec s\u1ebd ki\u1ec3m tra b c\u00f3 tr\u1ecf t\u1edbi null kh\u00f4ng Note: L\u01b0u \u00fd: khi s\u1eed d\u1ee5ng a==null, m\u1eb7c \u0111\u1ecbnh compiler s\u1ebd t\u1ef1 \u0111\u1ed9ng chuy\u1ec3n th\u00e0nh a===null","title":"Structural equality"},{"location":"kotlin/kotlin_basic/#546-check-kieu-va-casting","text":"","title":"5. Check ki\u1ec3u v\u00e0 casting"},{"location":"kotlin/kotlin_basic/#kiem-tra-kieu-bien","text":"V\u1edbi Java , ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a instanceOf . V\u1edbi Kotlin , \u0111\u1ec3 ki\u1ec3m tra ki\u1ec3u bi\u1ebfn trong Kotlin , ta s\u1eed d\u1ee5ng is v\u00e0 !is Java if ( s instanceOf String ){ } Kotlin if ( s is String ){ }","title":"Ki\u1ec3m tra ki\u1ec3u bi\u1ebfn"},{"location":"kotlin/kotlin_basic/#casting","text":"S\u1eed d\u1ee5ng to\u00e1n t\u1eed as val t : String = y as String","title":"Casting"},{"location":"kotlin/kotlin_basic/#unsafe-cast","text":"Trong Java, n\u1ebfu vi\u1ec7c cast kh\u00f4ng th\u00e0nh c\u00f4ng, s\u1ebd c\u00f3 m\u1ed9t exception c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c throw: ClassCastException . \u0110\u1ed1i t\u01b0\u1ee3ng c\u00f3 ki\u1ec3u nullable kh\u00f4ng th\u1ec3 cast th\u00e0nh \u0111\u1ed1i t\u01b0\u1ee3ng non-null. N\u1ebfu y = null trong tr\u01b0\u1eddng h\u1ee3p tr\u00ean, s\u1ebd c\u00f3 exception \u0111\u01b0\u1ee3c b\u1eafn ra. \u0110\u1ec3 cast \u0111\u01b0\u1ee3c, Kotlin cung c\u1ea5p nh\u01b0 sau val t : String ? = null as String ?","title":"Unsafe cast"},{"location":"kotlin/kotlin_basic/#safe-cast","text":"\u0110\u1ec3 tr\u00e1nh vi\u1ec7c exception \u0111\u01b0\u1ee3c b\u1eafn ra, Kotlin cung c\u1ea5p as? val s4 : String ? = s5 as ? String s4 s\u1ebd c\u00f3 gi\u00e1 tr\u1ecb c\u1ee7a s5 n\u1ebfu s5 kh\u00f4ng null, ng\u01b0\u1ee3c l\u1ea1i, s4 = null.","title":"Safe cast"},{"location":"kotlin/kotlin_basic/#smart-casting","text":"Trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p, ch\u00fang ta kh\u00f4ng ph\u1ea3i cast m\u1ed9t c\u00e1ch t\u01b0\u1eddng minh v\u00ec compiler s\u1ebd track vi\u1ec7c check ki\u1ec3u b\u1eb1ng is v\u00e0 s\u1ebd t\u1ef1 \u0111\u1ed9ng cast n\u1ebfu c\u1ea7n: if ( s is String ) { print ( s . length ) // x \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng cast th\u00e0nh ki\u1ec3u String } if ( s ! is String ) return print ( s . length ) // x \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng cast th\u00e0nh ki\u1ec3u String if ( s ! is String || s . length == 0 ) return // x \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng cast th\u00e0nh ki\u1ec3u String","title":"Smart casting"},{"location":"kotlin/kotlin_basic/#646-cau-truc-ieu-khien","text":"","title":"6. C\u1ea5u tr\u00fac \u0111i\u1ec1u khi\u1ec3n"},{"location":"kotlin/kotlin_basic/#a-cau-truc-if","text":"Trong Kotlin , if l\u00e0 m\u1ed9t bi\u1ec3u th\u1ee9c. B\u1edfi v\u1eady, Kotlin kh\u00f4ng c\u00f2n to\u00e1n t\u1eed 3 y\u1ebfu t\u1ed1 Java int a = result ? 1 : 0 ; Kotlin var a : Int = if ( result ) 1 else 0 var r : Int = if ( result ) { print ( \"ok\" ) 1 } else { print ( \"fail\" ) 0 } N\u1ebfu l\u00e0 kh\u1ed1i l\u1ec7nh, gi\u00e1 tr\u1ecb \u1edf cu\u1ed1i kh\u1ed1i l\u1ec7nh l\u00e0 gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1. Khi g\u00e1n gi\u00e1 tr\u1ecb, nh\u00e1nh else b\u1eaft bu\u1ed9c ph\u1ea3i c\u00f3","title":"a. C\u1ea5u tr\u00fac if"},{"location":"kotlin/kotlin_basic/#b-cau-truc-when","text":"C\u1ea5u tr\u00fac when thay th\u1ebf switch trong Java . C\u1ea5u tr\u00fac c\u1ee7a when l\u00e0 when ( x ) { 1 -> print ( \"x == 1\" ) 2 -> print ( \"x == 2\" ) else -> { print ( \"x ch\u1ea3 b\u1eb1ng 1 c\u0169ng m\u00e9o b\u1eb1ng 2\" ) } } Note: else l\u00e0 b\u1eaft bu\u1ed9c , tr\u1eeb khi compiler c\u00f3 th\u1ec3 ch\u1ee9ng minh \u0111\u01b0\u1ee3c t\u1ea5t c\u1ea3 c\u00e1 tr\u01b0\u1eddng h\u1ee3p \u0111\u00e3 \u0111\u01b0\u1ee3c cover. C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng when \u0111\u1ec3 thay th\u1ebf vi\u1ec7c s\u1eed d\u1ee5ng if else if N\u1ebfu vi\u1ec7c x\u1eed l\u00fd c\u1ee7a 1 s\u1ed1 tr\u01b0\u1eddng h\u1ee3p gi\u1ed1ng nhau: when ( x ) { 0 , 1 -> print ( \"x == 0 or x == 1\" ) else -> print ( \"ng\u01b0\u1ee3c l\u1ea1i\" ) } C\u00e1c tr\u01b0\u1eddng h\u1ee3p c\u1ee7a when kh\u00f4ng nh\u1ea5t thi\u1ebft ph\u1ea3i l\u00e0 constant, ch\u00fang c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t function when ( x ) { parseInt ( s ) -> print ( \"s encodes x\" ) else -> print ( \"s does not encode x\" ) } Ho\u1eb7c ki\u1ec3u d\u1eef li\u1ec7u var result1 = when ( s ) { is String -> s . startsWith ( \"prefix\" ) else -> false } C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng when \u0111\u1ec3 g\u00e1n gi\u00e1 tr\u1ecb var l : Int = when ( s ) { \"hello\" -> 0 \"hi\" -> 1 else -> 2 } \u0110i\u1ec1u ki\u1ec7n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 ki\u1ec3m tra trong kho\u1ea3ng val validNumbers = arrayOf ( 11 , 13 , 17 , 19 ) when ( x ) { in 1. . 10 -> print ( \"x is in the range\" ) in validNumbers -> print ( \"x is valid\" ) ! in 10. . 20 -> print ( \"x is outside the range\" ) else -> print ( \"none of the above\" ) }","title":"b. C\u1ea5u tr\u00fac when:"},{"location":"kotlin/kotlin_basic/#c-cau-truc-for","text":"V\u00f2ng l\u1eb7p for c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 duy\u1ec7t b\u1ea5t k\u1ef3 th\u1ee9 g\u00ec cung c\u1ea5p m\u1ed9t iterator. VD: C\u00f3 m\u1ed9t member ho\u1eb7c extension function t\u00ean l\u00e0 iterator() , ki\u1ec3u tr\u1ea3 v\u1ec1 l\u00e0 Iterator C\u00f3 m\u1ed9t member ho\u1eb7c extension function next() C\u00f3 m\u1ed9t member ho\u1eb7c extension function hasNext tr\u1ea3 v\u1ec1 ki\u1ec3u Boolean T\u1ea5t c\u1ea3 3 function n\u00e0y \u0111\u1ec1u c\u1ea7n \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u l\u00e0 operator VD: class DateRange ( start : Int , val end : Int ) { var current = start operator fun iterator (): Iterator < Int >{ return object : Iterator < Int >{ override fun next (): Int { val result = current current ++ return result } override fun hasNext (): Boolean { return current <= end } } } } //for for ( i in DateRange ( 1 , 10 )) { print ( i ) //1..10 } M\u1ed9t v\u00f2ng l\u1eb7p for \u0111\u1ed1i v\u1edbi m\u1ed9t array s\u1ebd \u0111\u01b0\u1ee3c compile th\u00e0nh m\u1ed9t v\u00f2ng l\u1eb7p index m\u00e0 kh\u00f4ng c\u1ea7n t\u1ea1o m\u1ed9t iterator object: //Kotlin var array : Array < Int > = arrayOf ( 1 , 2 , 5 , 6 , 7 ) for ( i in array ) { // do something } //Decompile code Object [] elements $ iv = new Integer []{ Integer . valueOf ( 1 ), Integer . valueOf ( 2 ), Integer . valueOf ( 5 ), Integer . valueOf ( 6 ), Integer . valueOf ( 7 )}; Integer [] array = elements $ iv ; for ( int var4 = 0 ; var4 < array . length ; ++ var4 ) { int i = array [ var4 ]. intValue (); } N\u1ebfu b\u1ea1n mu\u1ed1n duy\u1ec7t qua m\u1ed9t array ho\u1eb7c m\u1ed9t list b\u1eb1ng c\u00e1c ch\u1ec9 s\u1ed1, b\u1ea1n c\u00f3 th\u1ec3 l\u00e0m nh\u01b0 sau: val array = arrayOf ( 1 , 3 , 2 , 6 , 8 ) for ( i in array . indices ) { print ( array [ i ]) //13268 } L\u01b0u \u00fd r\u1eb1ng vi\u1ec7c duy\u1ec7t qua m\u1ed9t ph\u1ea1m vi (iteration through a range) \u0111\u01b0\u1ee3c compile thanh m\u1ed9t c\u00e1ch th\u1ef1c thi t\u1ed1i \u01b0u m\u00e0 kh\u00f4ng ph\u1ea3i c\u1ea7n th\u00eam object n\u00e0o \u0111\u01b0\u1ee3c t\u1ea1o ra Ngo\u00e0i ra, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng function withIndex trong th\u01b0 vi\u1ec7n chu\u1ea9n: val array = arrayOf ( 1 , 3 , 2 , 6 , 8 ) for ( pair in array . withIndex ()) { println ( \"element at ${pair.index} is ${pair.value}\" ) } //result //element at 0 is 1 //element at 1 is 3 //element at 2 is 2 //element at 3 is 6 //element at 4 is 8 M\u1ed9t s\u1ed1 so s\u00e1nh V\u00f2ng l\u1eb7p xu\u00f4i Java for ( int i = 1 ; i <= 11 ; i ++) { //... } Kotlin for ( i in 1. . 11 ){ } V\u00f2ng l\u1eb7p b\u01b0\u1edbc 2 Java for ( int i = 1 ; i <= 11 ; i += 2 ) { //... } Kotlin for ( i in 1. . 11 step 2 ){ } V\u00f2ng l\u1eb7p l\u00f9i Java for ( int i = 10 ; i >= 0 ; i --) { //... } Kotlin for ( i in 11 downTo 1 ){ } V\u00f2ng l\u1eb7p t\u1eebng gi\u00e1 tr\u1ecb Java for ( String s : arrayList ) { //... } Kotlin for ( item : Int in ints ){ }","title":"c. C\u1ea5u tr\u00fac for"},{"location":"kotlin/kotlin_basic/#d-cau-truc-while","text":"T\u01b0\u01a1ng t\u1ef1 nh\u01b0 Java while ( x > 0 ) { x -- } do { val y = retrieveData () } while ( y != null ) // y is visible here!","title":"d. C\u1ea5u tr\u00fac while"},{"location":"kotlin/kotlin_basic/#e-break-continue-va-return","text":"Ch\u1ee9c n\u0103ng c\u1ee7a t\u1eebng t\u1eeb kh\u00f3a m\u1eb7c \u0111\u1ecbnh nh\u01b0 sau: return : tho\u00e1t kh\u1ecfi function g\u1ea7n nh\u1ea5t break : tho\u00e1t kh\u1ecfi v\u00f2ng l\u1eb7p g\u1ea7n nh\u1ea5t continue : ti\u1ebfp t\u1ee5c b\u01b0\u1edbc ti\u1ebfp theo c\u1ee7a v\u00f2ng l\u1eb7p g\u1ea7n nh\u1ea5t","title":"e. break, continue v\u00e0 return"},{"location":"kotlin/kotlin_basic/#label-voi-break-va-continue","text":"\u0110\u1ec3 ch\u1ec9 \u0111\u1ecbnh break v\u00e0 continue \u0111\u1ebfn m\u1ed9t expression n\u00e0o \u0111\u00f3, s\u1eed d\u1ee5ng label: @label loop @ for ( i in 1. . 100 ) { for ( j in 1. . 100 ) { if ( j > 2 ) break @loop } } M\u1eb7c \u0111\u1ecbnh, n\u1ebfu kh\u00f4ng c\u00f3 label @loop , break s\u1ebd tho\u00e1t ra kh\u1ecfi v\u00f2ng l\u1eb7p g\u1ea7n nh\u1ea5t, v\u00f2ng l\u1eb7p j. V\u1edbi label @loop , break@loop s\u1ebd tho\u00e1t ra c\u1ea3 2 v\u00f2ng l\u1eb7p. T\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1eady, continue c\u0169ng c\u00f3 th\u1ec3 dung label \u0111\u1ec3 \u0111i \u0111\u1ebfn b\u01b0\u1edbc ti\u1ebfp theo c\u1ee7a v\u00f2ng l\u1eb7p","title":"Label v\u1edbi break v\u00e0 continue"},{"location":"kotlin/kotlin_basic/#label-voi-return","text":"fun foo (){ var ints : Array < Int > = arrayOf ( 1 , 3 , 5 , 6 ) ints . forEach lit @ { if ( it == 0 ) return @lit print ( it ) } } V\u1edbi tr\u01b0\u1eddng h\u1ee3p tr\u00ean, c\u00e2u l\u1ec7nh return s\u1ebd ch\u1ec9 tho\u00e1t ra kh\u1ecfi function forEach , v\u00e0 s\u1ebd l\u00e0m ti\u1ebfp c\u00e1c c\u00f4ng vi\u1ec7c ph\u00eda sau. N\u1ebfu kh\u00f4ng c\u00f3 label, return s\u1ebd tho\u00e1t ra kh\u1ecfi function foo() . Ta c\u00f3 th\u1ec3 \u0111\u1eb7t label ho\u1eb7c s\u1eed d\u1ee5ng implicit label \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a d\u1ef1a theo t\u00ean function fun foo (){ var ints : Array < Int > = arrayOf ( 1 , 3 , 5 , 6 ) ints . forEach lit @ { if ( it == 0 ) return @forEach print ( it ) } } Ngo\u00e0i ra, ta c\u00f2n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng label vs return trong tr\u01b0\u1eddng h\u1ee3p mu\u1ed1n tr\u1ea3 v\u1ec1 m\u1ed9t gi\u00e1 tr\u1ecb n\u00e0o \u0111\u00f3 t\u1ea1i label \u0111\u00f3 b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng return lit @ 4","title":"Label v\u1edbi return"},{"location":"kotlin/kotlin_basic/#746-visibility-modifier","text":"Trong Java , \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a kh\u1ea3 n\u0103ng truy c\u1eadp c\u1ee7a c\u00e1c property, function c\u1ee7a m\u1ed9t class, ta s\u1eed d\u1ee5ng access modifier. Trong Kotlin , \u0111\u00f3 l\u00e0 visibility modifier. Visibility modifier c\u1ee7a Kotlin g\u1ed3m 4 m\u1ee9c, t\u01b0\u01a1ng \u0111\u01b0\u01a1ng nh\u01b0 v\u1edbi Java: public internal protected private \u0110\u1ec3 hi\u1ec3u chi ti\u1ebft h\u01a1n, h\u00e3y xem Visibility modifier","title":"7. Visibility modifier"},{"location":"kotlin/kotlin_basic/#846-khoi-tao-mot-lop","text":"Trong Java , \u0111\u1ec3 kh\u1edfi t\u1ea1o m\u1ed9t class, ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a new , v\u1edbi Kotlin . Function t\u1ea1o \u0111\u01b0\u1ee3c g\u1ecdi nh\u01b0 m\u1ed9t function b\u00ecnh th\u01b0\u1eddng Java User user = new User ( \"nam\" , 22 ); Kotlin var user : User = User ( \"nam\" , 22 )","title":"8. Kh\u1edfi t\u1ea1o m\u1ed9t l\u1edbp"},{"location":"kotlin/kotlin_basic/#946-bieu-thuc-this","text":"\u0110\u1ec3 bi\u1ec3u th\u1ecb \u0111\u1ed1i t\u01b0\u1ee3ng hi\u1ec7n t\u1ea1i, ta s\u1eed d\u1ee5ng bieru th\u1ee9c this Trong m\u1ed9t th\u00e0nh ph\u1ea7n c\u1ee7a class, this tham chi\u1ebfu \u0111\u1ebfn \u0111\u1ed1i t\u01b0\u1ee3ng hi\u1ec7n t\u1ea1i c\u1ee7a class Trong extension function, ho\u1eb7c function literal with receiver, this bi\u1ec3u th\u1ecb param c\u1ee7a function - t\u1ee9c l\u00e0 gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o b\u00ean tr\u00e1i d\u1ea5u . N\u1ebfu this kh\u00f4ng c\u00f3 label ch\u1ec9 \u0111\u1ecbnh \u0111\u1ed1i t\u01b0\u1ee3ng ch\u1ec9 v\u00e0o, this tham chi\u1ebfu t\u1edbi ph\u1ea1m vi ch\u1ee9a g\u1ea7n nh\u1ea5t. \u0110\u1ec3 tham chi\u1ebfu \u0111\u1ebfn m\u1ed9t ph\u1ea1m vi kh\u00e1c, label ch\u1ec9 \u0111\u1ecbnh s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng","title":"9. Bi\u1ec3u th\u1ee9c This"},{"location":"kotlin/kotlin_basic/#label-chi-inh","text":"\u0110\u1ec3 truy c\u1eadp \u0111\u1ebfn this t\u1eeb ph\u1ea1m vi b\u00ean ngo\u00e0i (m\u1ed9t class ho\u1eb7c extension function), ch\u00fang ta s\u1eed d\u1ee5ng this@label v\u1edbi @label l\u00e0 ch\u1ec9 \u0111\u1ecbnh \u0111\u1ebfn ph\u1ea1m vi this mong mu\u1ed1n class A { // implicit label @A inner class B { // implicit label @B fun Int . foo () { // implicit label @foo val a = this @A // tr\u1ecf \u0111\u1ebfn l\u1edbp A val b = this @B // tr\u1ecf \u0111\u1ebfn l\u1edbp B val c = this // tr\u1ecf \u0111\u1ebfn param (m\u1ed9t s\u1ed1 Int) c\u1ee7a function foo() b\u1edfi foo() l\u00e0 m\u1ed9t extension function val c1 = this @foo // tr\u1ecf \u0111\u1ebfn param (m\u1ed9t s\u1ed1 Int) c\u1ee7a function foo() b\u1edfi foo() l\u00e0 m\u1ed9t extension function val funLit = lambda @ fun String .() { val d = this // tr\u1ecf \u0111\u1ebfn param (m\u1ed9t String) c\u1ee7a function funLit() } val funLit2 = { s : String -> // tr\u1ecf \u0111\u1ebfn param (m\u1ed9t s\u1ed1 Int) c\u1ee7a function foo() b\u1edfi foo() l\u00e0 m\u1ed9t extension function val d1 = this } } } }","title":"Label ch\u1ec9 \u0111\u1ecbnh"},{"location":"kotlin/kotlin_basic/#1046-package","text":"Package cho ph\u00e9p ch\u00fang ta chia nh\u1ecf code b\u1eb1ng namspace. B\u1ea5t k\u1ef3 file n\u00e0o c\u0169ng c\u00f3 th\u1ec3 b\u1eaft \u0111\u1ea7u b\u1eb1ng vi\u1ec7c khai b\u00e1o m\u1ed9t package package com.packt.myproject class Foo fun bar (): String = \"bar\" \u1ede \u0111\u00e2y, t\u1ea5t c\u1ea3 c\u00e1c n\u1ed9i dung(VD: class, function...) \u0111\u1ec1u thu\u1ed9c package \u0111\u00e3 \u0111\u01b0\u1ee3c khai b\u00e1o. B\u1edfi v\u1eady, fully qualified name (FQN) c\u1ee7a c\u00e1c th\u00e0nh ph\u1ea7n trong \u0111\u00f3 t\u01b0\u01a1ng \u1ee9ng l\u00e0: com.packt.myproject.Foo l\u00e0 t\u00ean c\u1ee7a class Foo , com.packt.myproject.bar l\u00e0 t\u00ean c\u1ee7a function bar . N\u1ebfu package kh\u00f4ng \u0111\u01b0\u1ee3c khai b\u00e1o, c\u00e1c th\u00e0nh ph\u1ea7n trong file \u0111\u00f3 s\u1ebd thu\u1ed9c v\u1ec1 root package .","title":"10. Package"},{"location":"kotlin/kotlin_class_inheritance/","text":"1. Class \u00b6 T\u01b0\u01a1ng t\u1ef1 v\u1edbi Java , \u0111\u1ec3 t\u1ea1o ra m\u1ed9t class ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a class \u0111\u1ec3 khai b\u00e1o. Java public class Invoice { } Kotlin class Invoice { } Ta th\u1ea5y d\u00f2ng code khai b\u00e1o class Invoice trong Kotlin kh\u00f4ng x\u00e1c \u0111\u1ecbnh visibility modifier ( access modifier ) cho class, tuy nhi\u00ean trong Kotlin n\u1ebfu ta kh\u00f4ng x\u00e1c \u0111\u1ecbnh visibility modifier cho class, th\u00ec m\u1eb7c \u0111\u1ecbnh s\u1ebd l\u00e0 public . N\u1ebfu m\u1ed9t class kh\u00f4ng c\u00f3 body, kh\u00f4ng c\u00f3 b\u1ea5t k\u00ec m\u1ed9t param n\u00e0o ta c\u00f3 th\u1ec3 khai b\u00e1o nh\u01b0 sau, kh\u00f4ng c\u1ea7n d\u1ea5u {} class Empty Constructor \u00b6 Primary Constructor \u00b6 Kotlin c\u00f3 m\u1ed9t primary constructor v\u00e0 c\u00f3 th\u1ec3 c\u00f3 m\u1ed9t ho\u1eb7c nhi\u1ec1u secondary constructors . \u0110\u1ec3 x\u00e1c \u0111\u1ecbnh primary constructor ta khai b\u00e1o nh\u01b0 sau: class Person constructor ( firstName : String ) { } N\u1ebfu nh\u01b0 primary constructor kh\u00f4ng c\u00f3 b\u1ea5t k\u00ec m\u1ed9t visibility modifier ho\u1eb7c annotation th\u00ec t\u1eeb kh\u00f3a constructor c\u00f3 th\u1ec3 b\u1ecf: class Person ( firstName : String ) { } C\u00f2n n\u1ebfu c\u00f3 visibility modifier ho\u1eb7c annotation th\u00ec t\u1eeb kh\u00f3a constructor s\u1ebd c\u1ea7n ph\u1ea3i c\u00f3: class Customer public @Inject constructor ( name : String ) { ... } Primary constructor kh\u00f4ng ch\u1ee9a b\u1ea5t c\u1ee9 d\u00f2ng code n\u00e0o, n\u1ebfu mu\u1ed1n th\u1ef1c hi\u1ec7n c\u00e1c logic code ngay sau primary constructor c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n b\u1eb1ng c\u00e1ch kh\u1edfi t\u1ea1o ra m\u1ed9t block {} v\u1edbi t\u1eeb kh\u00f3a ti\u1ec1n t\u1ed1 init \u1edf tr\u01b0\u1edbc: class Customer ( name : String ) { init { print ( \"Customer's name is $name\" ) } } Ch\u00fa \u00fd: C\u00e1c param c\u1ee7a primary constructor n\u1ebfu khai b\u00e1o name: String , n\u00f3 ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong c\u00e1c block init{...} v\u00e0 \u0111\u1ec3 kh\u1edfi t\u1ea1o c\u00e1c property trong body class , kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng trong c\u00e1c function c\u1ee7a class ho\u1eb7c c\u00e1c instance c\u1ee7a class \u0111\u00f3: class Customer ( name : String ) { val customerKey = name . toUpperCase () init { print ( \"Customer's name is $name\" ) } } Do \u0111\u00f3 \u0111\u1ec3 coi c\u00e1c param c\u1ee7a primary constructor nh\u01b0 m\u1ed9t property trong class, ta th\u00eam var ho\u1eb7c val cho c\u00e1c param c\u1ee7a primary constructor : class Person ( val firstName : String , val lastName : String , var age : Int ) { // ... } Secondary Constructors \u00b6 Trong m\u1ed9t class ch\u1ec9 c\u00f3 duy nh\u1ea5t m\u1ed9t primary constructor , tuy nhi\u00ean c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u secondary constructor . \u0110\u1ec3 t\u1ea1o secondary constructor ta khai b\u00e1o nh\u01b0 sau: class Person { constructor ( parent : Person ) { parent . children . add ( this ) } } N\u1ebfu nh\u01b0 class c\u00f3 primary constructor th\u00ec m\u1ed7i secondary constructor ph\u1ea3i kh\u1edfi t\u1ea1o gi\u00e1 tr\u1ecb cho primary constructor b\u1eb1ng c\u00e1ch g\u1ecdi primary constructor m\u1ed9t c\u00e1ch gi\u00e1n ti\u1ebfp ho\u1eb7c tr\u1ef1c ti\u1ebfp: class Invoice ( id : Int ) { constructor ( id : Int , name : String ) : this ( id ) { //this \u1edf \u0111\u00e2y g\u1ecdi tr\u1ef1c ti\u1ebfp \u0111\u1ebfn primary constructor // v\u00e0 truy\u1ec1n gi\u00e1 tr\u1ecb id cho primary constructor } constructor ( id : Int , name : String , version : Int ) : this ( id , name ) { //this \u1edf \u0111\u00e2y g\u1ecdi tr\u1ef1c ti\u1ebfp secondary constructor 2 tham s\u1ed1 // v\u00e0 \u0111\u01b0\u1ee3c coi l\u00e0 g\u1ecdi gi\u00e1n ti\u1ebfp primary constructor qua secondary constructor 2 tham s\u1ed1 \u0111\u00f3 } } N\u1ebfu nh\u01b0 m\u1ed9t class kh\u00f4ng t\u1ea1o ra b\u1ea5t k\u00ec m\u1ed9t constructor n\u00e0o ( primary v\u00e0 secondary ) th\u00ec m\u1eb7c \u0111\u1ecbnh Kotlin s\u1ebd t\u1ea1o ra m\u1ed9t primary constructor 0 param v\u00e0 visibility modifier l\u00e0 public , n\u1ebfu ta kh\u00f4ng mu\u1ed1n ai s\u1eed d\u1ee5ng constructor \u0111\u00f3 (\u0111\u1ed3ng ngh\u0129a v\u1edbi vi\u1ec7c kh\u00f4ng t\u1ea1o ra b\u1ea5t k\u00ec m\u1ed9t instance n\u00e0o c\u1ee7a class \u0111\u00f3) th\u00ec ta th\u00eam visibility modifier l\u00e0 private tr\u01b0\u1edbc primary constructor kh\u00f4ng tham s\u1ed1: class DontCreateMe private constructor () { } T\u1ea1o instance cho class \u00b6 Java Invoice invoice = new Invoice (); Customer customer = new Customer ( \"Joe Smith\" ) Kotlin val invoice = Invoice () val customer = Customer ( \"Joe Smith\" ) Vi\u1ec7c t\u1ea1o instance cho class gi\u1ed1ng nh\u01b0 g\u1ecdi m\u1ed9t function. L\u01b0u \u00fd l\u00e0 trong Kotlin kh\u00f4ng c\u00f3 t\u1eeb kh\u00f3a new . T\u1ea1o instance cho nested class s\u1ebd \u0111\u01b0\u1ee3c tr\u00ecnh b\u00e0y trong ph\u1ea7n Nested Class 2. K\u1ebf th\u1eeba (Inheritance) \u00b6 Kh\u00e1c v\u1edbi Java , m\u1ecdi class \u0111\u1ec1u ng\u1ea7m hi\u1ec3u l\u00e0 k\u1ebf th\u1eeba t\u1eeb l\u1edbp cha Object , c\u00f2n \u1edf trong Kotlin c\u00e1c class s\u1ebd \u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 k\u1ebf th\u1eeba t\u1eeb l\u1edbp cha Any class Example // Implicitly inherits from Any L\u01b0u \u00fd \u1edf \u0111\u00e2y Any kh\u00f4ng ph\u1ea3i l\u00e0 Object , v\u00ec Any kh\u00f4ng c\u00f3 b\u1ea5t c\u1ee9 m\u1ed9t function n\u00e0o kh\u00e1c ngo\u00e0i c\u00e1c function l\u00e0 equals() , hashCode() v\u00e0 toString() . \u0110\u1ec3 th\u1ef1c hi\u1ec7n k\u1ebf th\u1eeba ta khai b\u00e1o t\u00ean class cha sau t\u00ean d\u1ea5u : : open class Base ( p : Int ) class Derived ( p : Int ) : Base ( p ) open class Base ( p : Int ) { constructor ( p : Int , t : String ) : this ( p ) } class Derived ( p : Int ) : Base ( p , \"Hello\" ) \u1ede \u0111\u00e2y class Derived k\u1ebf th\u1eeba class Base . Class Derived c\u00f3 primary constructor , do \u0111\u00f3 khi th\u1ef1c hi\u1ec7n k\u1ebf th\u1eeba ph\u1ea3i kh\u1edfi t\u1ea1o gi\u00e1 tr\u1ecb cho c\u00e1c param c\u1ee7a primary constructor ho\u1eb7c secondary constructor class cha ngay sau t\u00ean class cha. N\u1ebfu class th\u1ef1c hi\u1ec7n k\u1ebf th\u1eeba (v\u00ed d\u1ee5 nh\u01b0 Derived ) kh\u00f4ng c\u00f3 primary constructor , ta c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n kh\u1edfi t\u1ea1o c\u00e1c gi\u00e1 tr\u1ecb param c\u1ee7a primary constructor ho\u1eb7c secondary constructor class cha qua c\u00e1c secondary constructor c\u1ee7a class th\u1ef1c hi\u1ec7n k\u1ebf th\u1eeba b\u1eb1ng t\u1eeb kh\u00f3a super : class MyView : View { constructor ( ctx : Context ) : super ( ctx ) constructor ( ctx : Context , attrs : AttributeSet ) : super ( ctx , attrs ) } Ch\u00fa \u00fd: t\u1eeb kh\u00f3a open c\u00f3 ngh\u0129a ng\u01b0\u1ee3c l\u1ea1i v\u1edbi final trong Java . Th\u00eam open khi khai b\u00e1o class Base cho ph\u00e9p c\u00e1c class c\u00f3 th\u1ec3 k\u1ebf th\u1eeba t\u1eeb n\u00f3. M\u1eb7c \u0111\u1ecbnh t\u1ea5t c\u1ea3 c\u00e1c class trong Kotlin \u0111\u1ec1u l\u00e0 final . Overriding method \u00b6 T\u01b0\u01a1ng t\u1ef1 v\u1edbi Java c\u00e1c class con trong Kotlin c\u00f3 th\u1ec3 override l\u1ea1i c\u00e1c function c\u1ee7a class cha, v\u1edbi \u0111i\u1ec1u ki\u1ec7n function \u0111\u00f3 c\u1ee7a class cha ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o v\u1edbi t\u1eeb kh\u00f3a open . Kh\u00e1c v\u1edbi Java khi override method ta c\u00f3 th\u1ec3 kh\u1ed3ng c\u1ea7n annotation @Override , tuy nhi\u00ean trong Kotlin th\u00ec nh\u1ea5t \u0111\u1ecbnh ph\u1ea3i x\u00e1c \u0111\u1ecbnh n\u00f3 b\u1eb1ng annotation override : open class Base { open fun v () {} fun nv () {} } class Derived () : Base () { override fun v () {} } L\u00fac n\u00e0y function fun() trong class Derived t\u1ef1 \u0111\u1ed9ng \u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 open , do \u0111\u00f3 n\u1ebfu kh\u00f4ng mu\u1ed1n b\u1ea5t c\u1ee9 class n\u00e0o override l\u1ea1i function func() khi k\u1ebf th\u1eeba class Derived. Ta \u0111\u00e1nh d\u1ea5u n\u00f3 v\u1edbi t\u1eeb kh\u00f3a final : class Derived () : Base () { final override fun v () {} } verriding property \u00b6 C\u00e1c ph\u1ea7n li\u00ean quan \u0111\u1ebfn overriding property \u0111\u01b0\u1ee3c tr\u00ecnh b\u00e0y t\u1ea1i \u0111\u00e2y Overriding rule \u00b6 M\u1ed9t v\u1ea5n \u0111\u1ec1 xu\u1ea5t hi\u1ec7n khi th\u1ef1c hi\u1ec7n \u0111a th\u1eeba k\u1ebf trong Kotlin \u0111\u00f3 l\u00e0 c\u00f3 nh\u1eefng property ho\u1eb7c method gi\u1ed1ng nhau gi\u1eefa c\u00e1c superclass v\u00ed d\u1ee5 nh\u01b0 m\u1ed9t class k\u1ebf th\u1eeba c\u1ea3 class A v\u00e0 interface B : open class A { open fun f () { print ( \"A\" ) } fun a () { print ( \"a\" ) } } interface B { fun f () { print ( \"B\" ) } // interface members are 'open' by default fun b () { print ( \"b\" ) } } Khi k\u1ebf th\u1eeba c\u1ea3 A v\u00e0 B , \u0111\u1ec3 g\u1ecdi \u0111\u00edch th\u1ecb \u0111\u1ebfn function f() c\u1ee7a class A hay interface B ta s\u1eed d\u1ee5ng super<Base> \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh: class C () : A (), B { // The compiler requires f() to be overridden: override fun f () { super < A >. f () // call to A.f() super < B >. f () // call to B.f() } } Abstract Classes \u00b6 Class ho\u1eb7c c\u00e1c th\u00e0nh ph\u1ea7n c\u1ee7a n\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c khai b\u00e1o l\u00e0 abstract . C\u00e1c th\u00e0nh ph\u1ea7n \u0111\u01b0\u1ee3c khai b\u00e1o abstract trong m\u1ed9t class abstract kh\u00f4ng c\u1ea7n ph\u1ea3i khai b\u00e1o body: abstract class Base { abstract fun calculate () } class Invoice ( id : Int ) : Base () { override fun calculate () { } } Ta c\u0169ng c\u00f3 th\u1ec3 bi\u1ebfn m\u1ed9t open function non-abtract th\u00e0nh abstract b\u1eb1ng c\u00e1ch override l\u1ea1i n\u00f3: open class Base { open fun f () {} } abstract class Derived : Base () { override abstract fun f () }","title":"Kotlin Class v\u00e0 k\u1ebf th\u1eeba"},{"location":"kotlin/kotlin_class_inheritance/#1-class","text":"T\u01b0\u01a1ng t\u1ef1 v\u1edbi Java , \u0111\u1ec3 t\u1ea1o ra m\u1ed9t class ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a class \u0111\u1ec3 khai b\u00e1o. Java public class Invoice { } Kotlin class Invoice { } Ta th\u1ea5y d\u00f2ng code khai b\u00e1o class Invoice trong Kotlin kh\u00f4ng x\u00e1c \u0111\u1ecbnh visibility modifier ( access modifier ) cho class, tuy nhi\u00ean trong Kotlin n\u1ebfu ta kh\u00f4ng x\u00e1c \u0111\u1ecbnh visibility modifier cho class, th\u00ec m\u1eb7c \u0111\u1ecbnh s\u1ebd l\u00e0 public . N\u1ebfu m\u1ed9t class kh\u00f4ng c\u00f3 body, kh\u00f4ng c\u00f3 b\u1ea5t k\u00ec m\u1ed9t param n\u00e0o ta c\u00f3 th\u1ec3 khai b\u00e1o nh\u01b0 sau, kh\u00f4ng c\u1ea7n d\u1ea5u {} class Empty","title":"1. Class"},{"location":"kotlin/kotlin_class_inheritance/#constructor","text":"","title":"Constructor"},{"location":"kotlin/kotlin_class_inheritance/#primary-constructor","text":"Kotlin c\u00f3 m\u1ed9t primary constructor v\u00e0 c\u00f3 th\u1ec3 c\u00f3 m\u1ed9t ho\u1eb7c nhi\u1ec1u secondary constructors . \u0110\u1ec3 x\u00e1c \u0111\u1ecbnh primary constructor ta khai b\u00e1o nh\u01b0 sau: class Person constructor ( firstName : String ) { } N\u1ebfu nh\u01b0 primary constructor kh\u00f4ng c\u00f3 b\u1ea5t k\u00ec m\u1ed9t visibility modifier ho\u1eb7c annotation th\u00ec t\u1eeb kh\u00f3a constructor c\u00f3 th\u1ec3 b\u1ecf: class Person ( firstName : String ) { } C\u00f2n n\u1ebfu c\u00f3 visibility modifier ho\u1eb7c annotation th\u00ec t\u1eeb kh\u00f3a constructor s\u1ebd c\u1ea7n ph\u1ea3i c\u00f3: class Customer public @Inject constructor ( name : String ) { ... } Primary constructor kh\u00f4ng ch\u1ee9a b\u1ea5t c\u1ee9 d\u00f2ng code n\u00e0o, n\u1ebfu mu\u1ed1n th\u1ef1c hi\u1ec7n c\u00e1c logic code ngay sau primary constructor c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n b\u1eb1ng c\u00e1ch kh\u1edfi t\u1ea1o ra m\u1ed9t block {} v\u1edbi t\u1eeb kh\u00f3a ti\u1ec1n t\u1ed1 init \u1edf tr\u01b0\u1edbc: class Customer ( name : String ) { init { print ( \"Customer's name is $name\" ) } } Ch\u00fa \u00fd: C\u00e1c param c\u1ee7a primary constructor n\u1ebfu khai b\u00e1o name: String , n\u00f3 ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong c\u00e1c block init{...} v\u00e0 \u0111\u1ec3 kh\u1edfi t\u1ea1o c\u00e1c property trong body class , kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng trong c\u00e1c function c\u1ee7a class ho\u1eb7c c\u00e1c instance c\u1ee7a class \u0111\u00f3: class Customer ( name : String ) { val customerKey = name . toUpperCase () init { print ( \"Customer's name is $name\" ) } } Do \u0111\u00f3 \u0111\u1ec3 coi c\u00e1c param c\u1ee7a primary constructor nh\u01b0 m\u1ed9t property trong class, ta th\u00eam var ho\u1eb7c val cho c\u00e1c param c\u1ee7a primary constructor : class Person ( val firstName : String , val lastName : String , var age : Int ) { // ... }","title":"Primary Constructor"},{"location":"kotlin/kotlin_class_inheritance/#secondary-constructors","text":"Trong m\u1ed9t class ch\u1ec9 c\u00f3 duy nh\u1ea5t m\u1ed9t primary constructor , tuy nhi\u00ean c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u secondary constructor . \u0110\u1ec3 t\u1ea1o secondary constructor ta khai b\u00e1o nh\u01b0 sau: class Person { constructor ( parent : Person ) { parent . children . add ( this ) } } N\u1ebfu nh\u01b0 class c\u00f3 primary constructor th\u00ec m\u1ed7i secondary constructor ph\u1ea3i kh\u1edfi t\u1ea1o gi\u00e1 tr\u1ecb cho primary constructor b\u1eb1ng c\u00e1ch g\u1ecdi primary constructor m\u1ed9t c\u00e1ch gi\u00e1n ti\u1ebfp ho\u1eb7c tr\u1ef1c ti\u1ebfp: class Invoice ( id : Int ) { constructor ( id : Int , name : String ) : this ( id ) { //this \u1edf \u0111\u00e2y g\u1ecdi tr\u1ef1c ti\u1ebfp \u0111\u1ebfn primary constructor // v\u00e0 truy\u1ec1n gi\u00e1 tr\u1ecb id cho primary constructor } constructor ( id : Int , name : String , version : Int ) : this ( id , name ) { //this \u1edf \u0111\u00e2y g\u1ecdi tr\u1ef1c ti\u1ebfp secondary constructor 2 tham s\u1ed1 // v\u00e0 \u0111\u01b0\u1ee3c coi l\u00e0 g\u1ecdi gi\u00e1n ti\u1ebfp primary constructor qua secondary constructor 2 tham s\u1ed1 \u0111\u00f3 } } N\u1ebfu nh\u01b0 m\u1ed9t class kh\u00f4ng t\u1ea1o ra b\u1ea5t k\u00ec m\u1ed9t constructor n\u00e0o ( primary v\u00e0 secondary ) th\u00ec m\u1eb7c \u0111\u1ecbnh Kotlin s\u1ebd t\u1ea1o ra m\u1ed9t primary constructor 0 param v\u00e0 visibility modifier l\u00e0 public , n\u1ebfu ta kh\u00f4ng mu\u1ed1n ai s\u1eed d\u1ee5ng constructor \u0111\u00f3 (\u0111\u1ed3ng ngh\u0129a v\u1edbi vi\u1ec7c kh\u00f4ng t\u1ea1o ra b\u1ea5t k\u00ec m\u1ed9t instance n\u00e0o c\u1ee7a class \u0111\u00f3) th\u00ec ta th\u00eam visibility modifier l\u00e0 private tr\u01b0\u1edbc primary constructor kh\u00f4ng tham s\u1ed1: class DontCreateMe private constructor () { }","title":"Secondary Constructors"},{"location":"kotlin/kotlin_class_inheritance/#tao-instance-cho-class","text":"Java Invoice invoice = new Invoice (); Customer customer = new Customer ( \"Joe Smith\" ) Kotlin val invoice = Invoice () val customer = Customer ( \"Joe Smith\" ) Vi\u1ec7c t\u1ea1o instance cho class gi\u1ed1ng nh\u01b0 g\u1ecdi m\u1ed9t function. L\u01b0u \u00fd l\u00e0 trong Kotlin kh\u00f4ng c\u00f3 t\u1eeb kh\u00f3a new . T\u1ea1o instance cho nested class s\u1ebd \u0111\u01b0\u1ee3c tr\u00ecnh b\u00e0y trong ph\u1ea7n Nested Class","title":"T\u1ea1o instance cho class"},{"location":"kotlin/kotlin_class_inheritance/#2-ke-thua-inheritance","text":"Kh\u00e1c v\u1edbi Java , m\u1ecdi class \u0111\u1ec1u ng\u1ea7m hi\u1ec3u l\u00e0 k\u1ebf th\u1eeba t\u1eeb l\u1edbp cha Object , c\u00f2n \u1edf trong Kotlin c\u00e1c class s\u1ebd \u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 k\u1ebf th\u1eeba t\u1eeb l\u1edbp cha Any class Example // Implicitly inherits from Any L\u01b0u \u00fd \u1edf \u0111\u00e2y Any kh\u00f4ng ph\u1ea3i l\u00e0 Object , v\u00ec Any kh\u00f4ng c\u00f3 b\u1ea5t c\u1ee9 m\u1ed9t function n\u00e0o kh\u00e1c ngo\u00e0i c\u00e1c function l\u00e0 equals() , hashCode() v\u00e0 toString() . \u0110\u1ec3 th\u1ef1c hi\u1ec7n k\u1ebf th\u1eeba ta khai b\u00e1o t\u00ean class cha sau t\u00ean d\u1ea5u : : open class Base ( p : Int ) class Derived ( p : Int ) : Base ( p ) open class Base ( p : Int ) { constructor ( p : Int , t : String ) : this ( p ) } class Derived ( p : Int ) : Base ( p , \"Hello\" ) \u1ede \u0111\u00e2y class Derived k\u1ebf th\u1eeba class Base . Class Derived c\u00f3 primary constructor , do \u0111\u00f3 khi th\u1ef1c hi\u1ec7n k\u1ebf th\u1eeba ph\u1ea3i kh\u1edfi t\u1ea1o gi\u00e1 tr\u1ecb cho c\u00e1c param c\u1ee7a primary constructor ho\u1eb7c secondary constructor class cha ngay sau t\u00ean class cha. N\u1ebfu class th\u1ef1c hi\u1ec7n k\u1ebf th\u1eeba (v\u00ed d\u1ee5 nh\u01b0 Derived ) kh\u00f4ng c\u00f3 primary constructor , ta c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n kh\u1edfi t\u1ea1o c\u00e1c gi\u00e1 tr\u1ecb param c\u1ee7a primary constructor ho\u1eb7c secondary constructor class cha qua c\u00e1c secondary constructor c\u1ee7a class th\u1ef1c hi\u1ec7n k\u1ebf th\u1eeba b\u1eb1ng t\u1eeb kh\u00f3a super : class MyView : View { constructor ( ctx : Context ) : super ( ctx ) constructor ( ctx : Context , attrs : AttributeSet ) : super ( ctx , attrs ) } Ch\u00fa \u00fd: t\u1eeb kh\u00f3a open c\u00f3 ngh\u0129a ng\u01b0\u1ee3c l\u1ea1i v\u1edbi final trong Java . Th\u00eam open khi khai b\u00e1o class Base cho ph\u00e9p c\u00e1c class c\u00f3 th\u1ec3 k\u1ebf th\u1eeba t\u1eeb n\u00f3. M\u1eb7c \u0111\u1ecbnh t\u1ea5t c\u1ea3 c\u00e1c class trong Kotlin \u0111\u1ec1u l\u00e0 final .","title":"2. K\u1ebf th\u1eeba (Inheritance)"},{"location":"kotlin/kotlin_class_inheritance/#overriding-method","text":"T\u01b0\u01a1ng t\u1ef1 v\u1edbi Java c\u00e1c class con trong Kotlin c\u00f3 th\u1ec3 override l\u1ea1i c\u00e1c function c\u1ee7a class cha, v\u1edbi \u0111i\u1ec1u ki\u1ec7n function \u0111\u00f3 c\u1ee7a class cha ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o v\u1edbi t\u1eeb kh\u00f3a open . Kh\u00e1c v\u1edbi Java khi override method ta c\u00f3 th\u1ec3 kh\u1ed3ng c\u1ea7n annotation @Override , tuy nhi\u00ean trong Kotlin th\u00ec nh\u1ea5t \u0111\u1ecbnh ph\u1ea3i x\u00e1c \u0111\u1ecbnh n\u00f3 b\u1eb1ng annotation override : open class Base { open fun v () {} fun nv () {} } class Derived () : Base () { override fun v () {} } L\u00fac n\u00e0y function fun() trong class Derived t\u1ef1 \u0111\u1ed9ng \u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 open , do \u0111\u00f3 n\u1ebfu kh\u00f4ng mu\u1ed1n b\u1ea5t c\u1ee9 class n\u00e0o override l\u1ea1i function func() khi k\u1ebf th\u1eeba class Derived. Ta \u0111\u00e1nh d\u1ea5u n\u00f3 v\u1edbi t\u1eeb kh\u00f3a final : class Derived () : Base () { final override fun v () {} }","title":"Overriding method"},{"location":"kotlin/kotlin_class_inheritance/#verriding-property","text":"C\u00e1c ph\u1ea7n li\u00ean quan \u0111\u1ebfn overriding property \u0111\u01b0\u1ee3c tr\u00ecnh b\u00e0y t\u1ea1i \u0111\u00e2y","title":"verriding property"},{"location":"kotlin/kotlin_class_inheritance/#overriding-rule","text":"M\u1ed9t v\u1ea5n \u0111\u1ec1 xu\u1ea5t hi\u1ec7n khi th\u1ef1c hi\u1ec7n \u0111a th\u1eeba k\u1ebf trong Kotlin \u0111\u00f3 l\u00e0 c\u00f3 nh\u1eefng property ho\u1eb7c method gi\u1ed1ng nhau gi\u1eefa c\u00e1c superclass v\u00ed d\u1ee5 nh\u01b0 m\u1ed9t class k\u1ebf th\u1eeba c\u1ea3 class A v\u00e0 interface B : open class A { open fun f () { print ( \"A\" ) } fun a () { print ( \"a\" ) } } interface B { fun f () { print ( \"B\" ) } // interface members are 'open' by default fun b () { print ( \"b\" ) } } Khi k\u1ebf th\u1eeba c\u1ea3 A v\u00e0 B , \u0111\u1ec3 g\u1ecdi \u0111\u00edch th\u1ecb \u0111\u1ebfn function f() c\u1ee7a class A hay interface B ta s\u1eed d\u1ee5ng super<Base> \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh: class C () : A (), B { // The compiler requires f() to be overridden: override fun f () { super < A >. f () // call to A.f() super < B >. f () // call to B.f() } }","title":"Overriding rule"},{"location":"kotlin/kotlin_class_inheritance/#abstract-classes","text":"Class ho\u1eb7c c\u00e1c th\u00e0nh ph\u1ea7n c\u1ee7a n\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c khai b\u00e1o l\u00e0 abstract . C\u00e1c th\u00e0nh ph\u1ea7n \u0111\u01b0\u1ee3c khai b\u00e1o abstract trong m\u1ed9t class abstract kh\u00f4ng c\u1ea7n ph\u1ea3i khai b\u00e1o body: abstract class Base { abstract fun calculate () } class Invoice ( id : Int ) : Base () { override fun calculate () { } } Ta c\u0169ng c\u00f3 th\u1ec3 bi\u1ebfn m\u1ed9t open function non-abtract th\u00e0nh abstract b\u1eb1ng c\u00e1ch override l\u1ea1i n\u00f3: open class Base { open fun f () {} } abstract class Derived : Base () { override abstract fun f () }","title":"Abstract Classes"},{"location":"kotlin/kotlin_data_class/","text":"1. Gi\u1edbi thi\u1ec7u \u00b6 Trong m\u1ed9t \u1ee9ng d\u1ee5ng, ta c\u1ea7n ph\u1ea3i \u0111\u1ecbnh ngh\u0129a r\u1ea5t nhi\u1ec1u c\u00e1c class ch\u1ec9 nh\u1eb1m m\u1ee5c \u0111\u00edch l\u01b0u tr\u1eef d\u1eef li\u1ec7u. V\u1edbi Java , vi\u1ec7c khai b\u00e1o c\u00e1c class nh\u01b0 th\u1ebf kh\u00e1 l\u00e0 m\u1ea5t th\u1eddi gian: Java public class User { private String name ; private int age ; public User ( String name , int age ) { this . name = name ; this . age = age ; } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public int getAge () { return age ; } public void setAge ( int age ) { this . age = age ; } } \u0110\u1ec3 t\u1ed1i \u01b0u h\u00f3a vi\u1ec7c n\u00e0y, Kotlin cung c\u1ea5p c\u00e1c data class. Ch\u00fang \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u b\u1eb1ng t\u1eeb kh\u00f3a data khi khai b\u00e1o class: data class User ( val name : String , val age : Int ) T\u1eeb \u0111\u00f3, compiler s\u1ebd t\u1ef1 \u0111\u1ed9ng suy ra c\u00e1c function t\u1eeb c\u00e1c param khai b\u00e1o trong primary constructor: function equals() , hashCode() function toString() d\u01b0\u1edbi d\u1ea1ng User(name=John, age=42) c\u00e1c function componentN() . C\u00e1c h\u00e0m n\u00e0y \u0111\u01b0\u1ee3c sinh ra d\u1ef1a tr\u00ean s\u1ed1 l\u01b0\u1ee3ng c\u00e1c property c\u1ee7a class v\u1edbi N l\u00e0 s\u1ed1 th\u1ee9 t\u1ef1 c\u1ee7a c\u00e1c thu\u1ed9c t\u00ednh. Nh\u01b0 trong tr\u01b0\u1eddng h\u1ee3p tr\u00ean: var user : User = User ( \"tu\" , 12 ) user . component1 () // property 'name', ki\u1ec3u 'String' user . component2 () // property 'age', ki\u1ec3u 'Int' function copy() : S\u1ebd \u0111\u01b0\u1ee3c n\u00f3i \u1edf ph\u00eda sau N\u1ebfu m\u1ed9t trong c\u00e1c function \u0111\u00f3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a m\u1ed9t c\u00e1ch t\u01b0\u1eddng minh trong body class, ch\u00fang s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c sinh ra. \u0110\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c t\u00ednh nh\u1ea5t qu\u00e1n v\u00e0 c\u00e1c h\u00e0nh vi c\u00f3 \u00fd ngh\u0129a c\u1ee7a code \u0111\u01b0\u1ee3c sinh ra, data class ph\u1ea3i th\u1ecfa m\u00e3n nh\u1eefng y\u00eau c\u1ea7u sau: Primary constructor ph\u1ea3i c\u00f3 \u00edt nh\u1ea5t 1 param T\u1ea5t c\u1ea3 param c\u1ee7a primary constructor ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o l\u00e0 var ho\u1eb7c val Data class kh\u00f4ng th\u1ec3 l\u00e0 abstract , open , sealed hay inner class. Data class ch\u1ec9 c\u00f3 th\u1ec3 implement c\u00e1c interface (Tr\u01b0\u1edbc phi\u00ean b\u1ea3n 1.1) Nh\u01b0 \u0111\u00e3 n\u00f3i trong ph\u1ea7n constructor , n\u1ebfu t\u1ea5t c\u1ea3 c\u00e1c param c\u1ee7a primary constructor c\u00f3 gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh, compiler s\u1ebd t\u1ef1 sinh ra th\u00eam m\u1ed9t constructor kh\u00f4ng c\u00f3 tham s\u1ed1 s\u1eed d\u1ee5ng c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh \u0111\u00e3 khai b\u00e1o \u1edf primary constructor: data class User ( val name : String = \"\" , val age : Int = 0 ) 2. Function copy() \u00b6 Trong tr\u01b0\u1eddng h\u1ee3p b\u1ea1n c\u1ea7n copy m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng nh\u01b0ng l\u1ea1i mu\u1ed1n thay \u0111\u1ed5i m\u1ed9t s\u1ed1 property v\u00e0 gi\u1eef nguy\u00ean ph\u1ea7n c\u00f2n l\u1ea1i. H\u00e0m copy() \u0111\u01b0\u1ee3c sinh ra l\u00e0 \u0111\u1ec3 l\u00e0m \u0111i\u1ec1u \u0111\u00f3. V\u1edbi VD v\u1ec1 \u0111\u1ed1i t\u01b0\u1ee3ng User \u1edf tr\u00ean, h\u00e0m copy() s\u1ebd \u0111\u01b0\u1ee3c implement nh\u01b0 th\u1ebf n\u00e0y: fun copy ( name : String = this . name , age : Int = this . age ) = User ( name , age ) Nh\u1edd v\u1eady, copy() cho ph\u00e9p ch\u00fang ta copy nh\u01b0 th\u1ebf n\u00e0y: val jack = User ( name = \"Jack\" , age = 1 ) val olderJack = jack . copy ( age = 2 ) 3. Data class v\u00e0 Destructuring Declaration \u00b6 V\u1edbi c\u00e1c h\u00e0m componentN() \u0111\u01b0\u1ee3c sinh ra, data class c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u01a1 ch\u1ebf destructuring declaration nh\u01b0 sau: val jane = User ( \"Jane\" , 35 ) val ( name , age ) = jane println ( \"$name, $age tu\u1ed5i\" ) // prints \"Jane, 35 tu\u1ed5i\"","title":"Kotlin Data class"},{"location":"kotlin/kotlin_data_class/#146-gioi-thieu","text":"Trong m\u1ed9t \u1ee9ng d\u1ee5ng, ta c\u1ea7n ph\u1ea3i \u0111\u1ecbnh ngh\u0129a r\u1ea5t nhi\u1ec1u c\u00e1c class ch\u1ec9 nh\u1eb1m m\u1ee5c \u0111\u00edch l\u01b0u tr\u1eef d\u1eef li\u1ec7u. V\u1edbi Java , vi\u1ec7c khai b\u00e1o c\u00e1c class nh\u01b0 th\u1ebf kh\u00e1 l\u00e0 m\u1ea5t th\u1eddi gian: Java public class User { private String name ; private int age ; public User ( String name , int age ) { this . name = name ; this . age = age ; } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public int getAge () { return age ; } public void setAge ( int age ) { this . age = age ; } } \u0110\u1ec3 t\u1ed1i \u01b0u h\u00f3a vi\u1ec7c n\u00e0y, Kotlin cung c\u1ea5p c\u00e1c data class. Ch\u00fang \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u b\u1eb1ng t\u1eeb kh\u00f3a data khi khai b\u00e1o class: data class User ( val name : String , val age : Int ) T\u1eeb \u0111\u00f3, compiler s\u1ebd t\u1ef1 \u0111\u1ed9ng suy ra c\u00e1c function t\u1eeb c\u00e1c param khai b\u00e1o trong primary constructor: function equals() , hashCode() function toString() d\u01b0\u1edbi d\u1ea1ng User(name=John, age=42) c\u00e1c function componentN() . C\u00e1c h\u00e0m n\u00e0y \u0111\u01b0\u1ee3c sinh ra d\u1ef1a tr\u00ean s\u1ed1 l\u01b0\u1ee3ng c\u00e1c property c\u1ee7a class v\u1edbi N l\u00e0 s\u1ed1 th\u1ee9 t\u1ef1 c\u1ee7a c\u00e1c thu\u1ed9c t\u00ednh. Nh\u01b0 trong tr\u01b0\u1eddng h\u1ee3p tr\u00ean: var user : User = User ( \"tu\" , 12 ) user . component1 () // property 'name', ki\u1ec3u 'String' user . component2 () // property 'age', ki\u1ec3u 'Int' function copy() : S\u1ebd \u0111\u01b0\u1ee3c n\u00f3i \u1edf ph\u00eda sau N\u1ebfu m\u1ed9t trong c\u00e1c function \u0111\u00f3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a m\u1ed9t c\u00e1ch t\u01b0\u1eddng minh trong body class, ch\u00fang s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c sinh ra. \u0110\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c t\u00ednh nh\u1ea5t qu\u00e1n v\u00e0 c\u00e1c h\u00e0nh vi c\u00f3 \u00fd ngh\u0129a c\u1ee7a code \u0111\u01b0\u1ee3c sinh ra, data class ph\u1ea3i th\u1ecfa m\u00e3n nh\u1eefng y\u00eau c\u1ea7u sau: Primary constructor ph\u1ea3i c\u00f3 \u00edt nh\u1ea5t 1 param T\u1ea5t c\u1ea3 param c\u1ee7a primary constructor ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o l\u00e0 var ho\u1eb7c val Data class kh\u00f4ng th\u1ec3 l\u00e0 abstract , open , sealed hay inner class. Data class ch\u1ec9 c\u00f3 th\u1ec3 implement c\u00e1c interface (Tr\u01b0\u1edbc phi\u00ean b\u1ea3n 1.1) Nh\u01b0 \u0111\u00e3 n\u00f3i trong ph\u1ea7n constructor , n\u1ebfu t\u1ea5t c\u1ea3 c\u00e1c param c\u1ee7a primary constructor c\u00f3 gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh, compiler s\u1ebd t\u1ef1 sinh ra th\u00eam m\u1ed9t constructor kh\u00f4ng c\u00f3 tham s\u1ed1 s\u1eed d\u1ee5ng c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh \u0111\u00e3 khai b\u00e1o \u1edf primary constructor: data class User ( val name : String = \"\" , val age : Int = 0 )","title":"1. Gi\u1edbi thi\u1ec7u"},{"location":"kotlin/kotlin_data_class/#246-function-copy","text":"Trong tr\u01b0\u1eddng h\u1ee3p b\u1ea1n c\u1ea7n copy m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng nh\u01b0ng l\u1ea1i mu\u1ed1n thay \u0111\u1ed5i m\u1ed9t s\u1ed1 property v\u00e0 gi\u1eef nguy\u00ean ph\u1ea7n c\u00f2n l\u1ea1i. H\u00e0m copy() \u0111\u01b0\u1ee3c sinh ra l\u00e0 \u0111\u1ec3 l\u00e0m \u0111i\u1ec1u \u0111\u00f3. V\u1edbi VD v\u1ec1 \u0111\u1ed1i t\u01b0\u1ee3ng User \u1edf tr\u00ean, h\u00e0m copy() s\u1ebd \u0111\u01b0\u1ee3c implement nh\u01b0 th\u1ebf n\u00e0y: fun copy ( name : String = this . name , age : Int = this . age ) = User ( name , age ) Nh\u1edd v\u1eady, copy() cho ph\u00e9p ch\u00fang ta copy nh\u01b0 th\u1ebf n\u00e0y: val jack = User ( name = \"Jack\" , age = 1 ) val olderJack = jack . copy ( age = 2 )","title":"2. Function\u00a0copy()"},{"location":"kotlin/kotlin_data_class/#346-data-class-va-destructuring-declaration","text":"V\u1edbi c\u00e1c h\u00e0m componentN() \u0111\u01b0\u1ee3c sinh ra, data class c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u01a1 ch\u1ebf destructuring declaration nh\u01b0 sau: val jane = User ( \"Jane\" , 35 ) val ( name , age ) = jane println ( \"$name, $age tu\u1ed5i\" ) // prints \"Jane, 35 tu\u1ed5i\"","title":"3. Data class v\u00e0 Destructuring Declaration"},{"location":"kotlin/kotlin_function/","text":"1. \u0110\u1ecbnh ngh\u0129a Function \u00b6 Function \u1edf trong Kotlin \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1eb1ng t\u1eeb kh\u00f3a fun Java public String doSomething ( String matter ) { } Kotlin fun doSomething ( matter : String ): String { } T\u00ean function: doSomething Khai b\u00e1o parameter truy\u1ec1n v\u00e0o function: <t\u00ean param> : <type param> Return type c\u1ee7a function l\u00e0 String : func <t\u00ean function>(): <return type> {//body} Single-Expression Function \u00b6 N\u1ebfu function v\u1edbi return type ch\u1ec9 c\u00f3 m\u1ed9t bi\u1ec3u th\u1ee9c (expression) th\u00ec \u0111\u1ecbnh ngh\u0129a function theo 2 c\u00e1ch d\u01b0\u1edbi t\u01b0\u01a1ng \u0111\u01b0\u01a1ng nhau: ( getInfo() g\u1ecdi l\u00e0 Single-Expression Function) fun getInfo () : String = \"Hello world...\" fun getInfo2 () : String { return \"Hello world...\" } Function Scope \u00b6 C\u00f3 3 lo\u1ea1i function (d\u1ef1a v\u00e0o m\u1ee9c truy c\u1eadp): Member function: L\u00e0 c\u00e1c function \u0111\u01b0\u1ee3c khai b\u00e1o \u1edf trong class, object ho\u1eb7c interface. C\u00e1c function n\u00e0y \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng th\u00f4ng c\u00e1c instance c\u1ee7a class, object ho\u1eb7c interface. Gi\u1ed1ng nh\u01b0 vi\u1ec7c s\u1eed d\u1ee5ng method trong Java. Local function: C\u00f3 th\u1ec3 hi\u1ec3u r\u1eb1ng local function l\u00e0 c\u00e1c function \u0111\u01b0\u1ee3c khai b\u00e1o b\u00ean trong m\u1ed9t function kh\u00e1c (nested). Local function kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u1edf ngo\u00e0i function \u0111\u1ecbnh ngh\u0129a n\u00f3. V\u00ed d\u1ee5 nh\u01b0 trong printArea() , ta \u0111\u1ecbnh ngh\u0129a m\u1ed9t function kh\u00e1c l\u00e0 calculateArea() , do \u0111\u00f3 ta g\u1ecdi calculateArea() l\u00e0 local function: fun printArea ( width : Int , height : Int ): Unit { fun calculateArea ( width : Int , height : Int ): Int = width * height val area = calculateArea ( width , height ) println ( \"The area is $area\" ) } L\u01b0u \u00fd: Local function c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c param v\u00e0 c\u00e1c bi\u1ebfn khai b\u00e1o tr\u01b0\u1edbc n\u00f3 trong function. L\u01b0u \u00fd c\u00e1c bi\u1ebfn khai b\u00e1o sau n\u00f3 th\u00ec kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng: fun reformat ( age : Int , somethingUnknown : String = \"hello\" ) { var birthMonth : Int = 8 fun localRefomat () { birthMonth = 5 //kh\u00f4ng s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c variable birthYear } var birthYear : Int = 1995 } Top-level function: C\u00f3 th\u1ec3 hi\u1ec3u r\u1eb1ng \u0111\u00e2y l\u00e0 nh\u1eefng function \u0111\u01b0\u1ee3c khai b\u00e1o ngo\u00e0i t\u1ea5t c\u1ea3 nh\u01b0 class , object , interface v\u00e0 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong file Kotlin ( .kt ). C\u00e1c method \u0111\u01b0\u1ee3c truy c\u1eadp th\u00f4ng qua t\u00ean c\u1ee7a file vs k\u00ed hi\u1ec7u \"kt\" (\u0111\u1ed1i v\u1edbi Java), trong Kotlin c\u00e1c function n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi tr\u1ef1c ti\u1ebfp qua t\u00ean c\u1ee7a function. Vi\u1ec7c n\u00e0y r\u1ea5t h\u1eefu \u00edch trong vi\u1ec7c \u0111\u1ecbnh ngh\u0129a c\u00e1c c\u00e1c function hepler , util m\u00e0 trong Java hay l\u00e0m th\u00f4ng qua c\u00e1c method static : //file name is DataManager.kt fun isTokenExpired () : Boolean { var isExpired = false //...... return isExpired } G\u1ecdi function Kotlin trong Java: public class JavaMain { public static void main ( String [] args ) { //call top-level function in java DataManagerKt . isTokenExpired (); } } 2. Parameter \u00b6 fun powerOf ( number : Int , exponent : Int ) { //... } Function powerOf c\u00f3 param number v\u00e0 exponent ki\u1ec3u Int . Khai b\u00e1o param theo c\u00fa ph\u00e1p: <t\u00ean param> : <type param> 3. Gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho parameter \u00b6 fun read ( b : Array < Byte >, off : Int = 0 , len : Int = b . size ()) { ... } M\u1ed7i param trong function c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c g\u00e1n gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh ho\u1eb7c kh\u00f4ng g\u00e1n. Gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho ph\u00e9p l\u00fac truy\u1ec1n param cho function c\u00f3 th\u1ec3 b\u1ecf qua c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh. \u0110i\u1ec1u n\u00e0y gi\u00fap kh\u00f4ng ph\u1ea3i vi\u1ebft qu\u00e1 nhi\u1ec1u overload function. L\u01b0u \u00fd: open class A { open fun foo ( i : Int = 10 ) { ... } } class B : A () { override fun foo ( i : Int ) { ... } // no default value allowed } Khi function foo() c\u1ee7a class A \u0111\u00e3 khai b\u00e1o gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho param, th\u00ec khi class B k\u1ebf th\u1eeba class A v\u00e0 override l\u1ea1i function foo() \u0111\u00f3, th\u00ec gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh c\u1ee7a param \u1edf function foo()``class A \u0111\u01b0\u1ee3c gi\u1eef l\u1ea1i v\u00e0 \u1edf class B kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a l\u1ea1i gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh \u0111\u00f3. \u0110\u1eb7t t\u00ean cho \u0111\u1ed1i truy\u1ec1n v\u00e0o \u00b6 \u0110\u1ea7u ti\u00ean ta c\u00f3 function reformat() v\u1edbi c\u00e1c param, trong \u0111\u00f3 c\u00f3 4 param c\u00f3 gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh. fun reformat ( str : String , normalizeCase : Boolean = true , upperCaseFirstLetter : Boolean = true , divideByCamelHumps : Boolean = false , wordSeparator : Char = ' ' ) { ... } C\u00f3 th\u1ec3 g\u1ecdi function theo c\u00e1c c\u00e1ch: S\u1eed d\u1ee5ng c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh c\u1ee7a param reformat ( str ) Kh\u00f4ng s\u1eed d\u1ee5ng c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh c\u1ee7a param reformat ( str , true , true , false , '_' ) Ho\u1eb7c c\u00f3 th\u1ec3 \u0111\u1eb7t t\u00ean cho c\u00e1c \u0111\u1ed1i truy\u1ec1n v\u00e0o \u0111\u1ec3 d\u1ec5 \u0111\u1ecdc h\u01a1n (t\u00f9y ch\u1ecdn). L\u01b0u \u00fd l\u00e0 t\u00ean \u0111\u01b0\u1ee3c \u0111\u1eb7t s\u1ebd ph\u1ea3i gi\u1ed1ng v\u1edbi t\u00ean param c\u1ee7a function \u0111\u00f3 reformat ( str , wordSeparator = '_' ) L\u01b0u \u00fd: Khi s\u1eed function c\u1ee7a Kotlin trong Java, c\u00e1c param \u0111\u01b0\u1ee3c khai b\u00e1o gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh s\u1ebd kh\u00f4ng c\u00f3 t\u00e1c d\u1ee5ng. V\u00ec Java kh\u00f4ng th\u1ec3 b\u1ecf qua c\u00e1c param c\u00f3 gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh. Khi s\u1eed d\u1ee5ng method c\u1ee7a Java trong Kotlin , kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c ch\u1ee9c n\u0103ng \u0111\u1eb7t t\u00ean cho \u0111\u1ed1i truy\u1ec1n v\u00e0o. 4. Unit-returning functions \u00b6 fun printHello ( name : String ?): Unit { if ( name != null ) println ( \"Hello ${name}\" ) else println ( \"Hi there!\" ) // `return Unit` or `return` is optional } Unit \u1edf \u0111\u00e2y c\u00f3 th\u1ec3 hi\u1ec3u nh\u01b0 l\u00e0 Void \u1edf trong Java ho\u1eb7c c\u00e1c ng\u00f4n ng\u1eef kh\u00e1c. Vi\u1ec7c khai b\u00e1o return type l\u00e0 Unit l\u00e0 kh\u00f4ng b\u1eaft bu\u1ed9c. V\u00ed d\u1ee5 nh\u01b0: fun printHello ( name : String ?) { ... } Unit c\u0169ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong vi\u1ec7c khai b\u00e1o c\u00e1c Higher-Order Function \u1edf ph\u1ea7n s\u1eafp t\u1edbi. 5. Extension functions \u00b6 Gi\u1ed1ng v\u1edbi Swift , Kotlin cho ph\u00e9p ta m\u1edf r\u1ed9ng class m\u00e0 kh\u00f4ng ph\u1ea3i k\u1ebf th\u1eeba t\u1eeb class kh\u00e1c. V\u00ed d\u1ee5 nh\u01b0 ta mu\u1ed1n th\u00eam function swap() cho class MutableList<Int> : fun MutableList < Int >. swap ( index1 : Int , index2 : Int ) { val tmp = this [ index1 ] // 'this' corresponds to the list this [ index1 ] = this [ index2 ] this [ index2 ] = tmp } T\u1eeb kh\u00f3a this \u1edf \u0111\u00e2y d\u00f9ng \u0111\u1ec3 ch\u1ec9 \u0111\u1ebfn instance MutableList<Int> m\u00e0 g\u1ecdi function swap() val l = mutableListOf ( 1 , 2 , 3 ) l . swap ( 0 , 2 ) // 'this' inside 'swap()' will hold the value of 'l' Tuy nhi\u00ean n\u1ebfu extension cho MutableList<Int> ch\u00fang ta ch\u1ec9 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c v\u1edbi c\u00e1c instance c\u1ee7a MutableList<Int> , ch\u00fang ta c\u0169ng c\u00f3 th\u1ec3 kh\u1edfi t\u1ea1o chung b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng Generic Function: fun < T > MutableList < T >. swap ( index1 : Int , index2 : Int ) { val tmp = this [ index1 ] // 'this' corresponds to the list this [ index1 ] = this [ index2 ] this [ index2 ] = tmp } 6. Return nhi\u1ec1u gi\u00e1 tr\u1ecb (Mutiple return values) \u00b6 Xem v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y: data class Result ( val result : Int , val status : Status ) fun function (...): Result { // computations return Result ( result , status ) } // Now, to use this function: val ( result , status ) = function (...) Nh\u01b0 ta th\u1ea5y, function c\u00f3 th\u1ec3 tr\u1ea3 v\u1ec1 \u0111\u1ed3ng th\u1eddi 2 gi\u00e1 tr\u1ecb result v\u00e0 status . B\u1ea3n ch\u1ea5t c\u1ee7a vi\u1ec7c n\u00e0y l\u00e0 g\u00f3i ch\u00fang v\u00e0o m\u1ed9t data class m\u00e0 th\u00f4i v\u00e0 s\u1eed Destructure (tr\u00ecnh b\u00e0y ph\u1ea7n ti\u1ebfp theo) \u0111\u1ec3 g\u00e1n ch\u00fang cho c\u00e1c bi\u1ebfn. Nh\u00ecn \u0111\u1ebfn \u0111\u00e2y ta c\u00f3 th\u1ec3 ngh\u0129 \u0111\u1ebfn s\u1eed d\u1ee5ng Pair<L, R> . Tuy nhi\u00ean vi\u1ec7c s\u1eed d\u1ee5ng class v\u1edbi c\u00e1c t\u00ean c\u00f3 ngh\u0129a gi\u00fap code d\u1ec5 \u0111\u1ecdc h\u01a1n vi\u1ec7c s\u1eed d\u1ee5ng first v\u00e0 second trong Pair . Destructuring Declarations \u00b6 Xem v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y: data class Person ( var name : String , var age : Int ) val ( name , age ) = Person ( \"Hado\" , 22 ) println ( \"Name: $name\" ) //print: Name: Hado println ( \"Age: $age\" ) //print: Age: 22 \u0110o\u1ea1n code tr\u00ean sau khi \u0111\u01b0\u1ee3c complie th\u1ef1c ra s\u1ebd nh\u01b0 th\u1ebf n\u00e0y: data class Person ( var name : String , var age : Int ) val person = Person ( \"Hado\" , 22 ) val name = person . component1 () val age = person . component2 () println ( \"Name: $name\" ) //print: Name: Hado println ( \"Age: $age\" ) //print: Age: 22 Ta c\u00f3 data class v\u1edbi primary constructor c\u00f3 2 param name v\u00e0 age , class s\u1ebd l\u1ea7n l\u01b0\u1ee3t t\u1ef1 \u0111\u1ed9ng t\u1ea1o ra c\u00e1c function componentN (N: 1, 2, 3, ...) cho c\u00e1c param. L\u01b0u \u00fd ch\u1ec9 c\u00f3 c\u00e1c param trong primary constructor m\u1edbi \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng t\u1ea1o ra function component . N\u1ebfu ch\u00fang ta khai b\u00e1o th\u00eam bi\u1ebfn trong class v\u00e0 mu\u1ed1n s\u1eed d\u1ee5ng Destructure th\u00ec c\u1ea7n kh\u1edfi t\u1ea1o th\u00eam c\u00e1c function component t\u01b0\u01a1ng \u1ee9ng v\u1edbi param \u0111\u00f3. V\u00ed d\u1ee5 nh\u01b0: data class Person ( var name : String , var age : Int ) { var province : String = \"Ha Noi\" operator fun component3 (): String { return province } } val ( name , age , province ) = Person ( \"Hado\" , 22 ) println ( \"Name: $name\" ) //print: Name: Hado println ( \"Age: $age\" ) //print: Age: 22 println ( \"Province: $province\" ) //print: Province: Ha Noi N\u1ebfu nh\u01b0 trong class Person , ta ch\u1ec9 c\u1ea7n l\u1ea5y 2 gi\u00e1 tr\u1ecb l\u00e0 age v\u00e0 province , \u0111\u1ed3ng th\u1eddi kh\u00f4ng mu\u1ed1n t\u1ea1o ra bi\u1ebfn name ta s\u1eed d\u1ee5ng d\u1ea5u \"_\" \u0111\u1ec3 thay cho c\u00e1c bi\u1ebfn kh\u00f4ng c\u1ea7n s\u1eed d\u1ee5ng: val ( _ , age , province ) = Person ( \"Hado\" , 22 ) println ( \"Age: $age\" ) //print: Age: 22 println ( \"Province: $province\" ) //print: Province: Ha Noi 7. Generic functions \u00b6 Gi\u1ed1ng nh\u01b0 Java , Kotlin cho ph\u00e9p s\u1eed d\u1ee5ng generic function gi\u00fap cho vi\u1ec7c gi\u1ea3m s\u1ed1 l\u01b0\u1ee3ng code, function c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi nhi\u1ec1u ki\u1ec3u kh\u00e1c nhau \u0110\u1ec3 \u0111\u1ecbnh ngh\u0129a generic function , ta s\u1eed d\u1ee5ng form sau: fun < T > singletonList ( item : T ): List < T > { // ... } fun < T > T . basicToString () : String { // extension function // ... } \u0110\u1ec3 g\u1ecdi function, c\u1ea7n x\u00e1c \u0111\u1ecbnh ki\u1ec3u cho function: val l = singletonList < Int >( 1 ) Ngo\u00e0i ra, gi\u1ed1ng nh\u01b0 Java , ta c\u0169ng c\u00f3 th\u1ec3 t\u1ea1o generic function v\u1edbi ki\u1ec3u \u0111\u01b0\u1ee3c extends t\u1eeb m\u1ed9t ki\u1ec3u kh\u00e1c: fun < T : Comparable < T >> sort ( list : List < T >) { // ... } B\u00e2y gi\u1edd, ta c\u00f3 th\u1ec3 g\u1ecdi function v\u1edbi c\u00e1c bi\u1ebfn c\u00f3 ki\u1ec3u l\u00e0 subclass c\u1ee7a Comparable : sort ( listOf ( 1 , 2 , 3 )) // OK. Int is a subtype of Comparable<Int> sort ( listOf ( HashMap < Int , String >())) // Error: HashMap<Int, String> is not a subtype of Comparable<HashMap<Int, String>> 8. Infix notation \u00b6 Xem v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y: class Fly ( var currentPlace : String ) { infix fun flyTo ( nextPlace : String ) { println ( \"The plane fly from $currentPlace to $nextPlace\" ) } } val plane1 = Fly ( \"Ha Noi\" ) plane1 flyTo \"Ho Chi Minh\" //print: The plane fly from Ha Noi to Ho Chi Minh plane1 . flyTo ( \"Ho Chi Minh\" ) //print: The plane fly from Ha Noi to Ho Chi Minh Nh\u1edd s\u1eed d\u1ee5ng k\u00fd hi\u1ec7u infix cho function flyTo() , ta c\u00f3 th\u1ec3 s\u1ef1 d\u1ee5ng t\u00ean function nh\u01b0 trung t\u1ed1 li\u00ean k\u1ebft gi\u1eefa instance class v\u00e0 param truy\u1ec1n v\u00e0o. Function c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng infix notation (trung t\u1ed1) khi Function l\u00e0 member c\u1ee7a m\u1ed9t class ho\u1eb7c l\u00e0 extension c\u1ee7a class Function ch\u1ec9 c\u00f3 m\u1ed9t param duy nh\u1ea5t Function \u0111\u01b0\u1ee3c mark b\u1eb1ng infix \u1edf \u0111\u1ea7u function 9. Function v\u1edbi parameter kh\u00f4ng x\u00e1c \u0111\u1ecbnh \u00b6 T\u01b0\u01a1ng t\u1ef1 trong Java , Kotlin cho ph\u00e9p m\u1ed9t function kh\u00f4ng c\u1ea7n x\u00e1c \u0111\u1ecbnh s\u1ed1 l\u01b0\u1ee3ng param m\u1ed9t c\u00e1ch c\u1ee5 th\u1ec3. Java public int add ( int ... array ) { int s = 0 ; for ( int i : array ) { s += i ; } return s ; } Kotlin fun add ( vararg array : Int ) : Int { var s = 0 for ( i in array ) { s += i } return s } Ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a vararg . V\u00e0 c\u0169ng t\u01b0\u01a1ng t\u1ef1 nh\u01b0 Java , bi\u1ebfn array \u0111\u01b0\u1ee3c coi l\u00e0 m\u1ed9t m\u1ea3ng. L\u01b0u \u00fd: Ch\u1ec9 c\u00f3 m\u1ed9t param \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u l\u00e0 vararg . N\u1ebfu param kh\u00f4ng ph\u1ea3i l\u00e0 param cu\u1ed1i c\u00f9ng, khi g\u1ecdi h\u00e0m, ta ph\u1ea3i ch\u1ec9 \u0111\u1ecbnh r\u00f5 c\u00e1c param sau \u0111\u00f3 fun multiPrint ( prefix : String , vararg strings : String , suffix : String ) { //..... } S\u1eed d\u1ee5ng function multiPrint() : multiPrint ( \"Start\" , \"a\" , \"b\" , \"c\" , suffix = \"End\" ) 10. Inline function \u00b6 Inline function \u0111\u01b0\u1ee3c gi\u1ea3i th\u00edch \u1edf \u0111\u00e2y","title":"Kotlin Funtion"},{"location":"kotlin/kotlin_function/#146-inh-nghia-function","text":"Function \u1edf trong Kotlin \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1eb1ng t\u1eeb kh\u00f3a fun Java public String doSomething ( String matter ) { } Kotlin fun doSomething ( matter : String ): String { } T\u00ean function: doSomething Khai b\u00e1o parameter truy\u1ec1n v\u00e0o function: <t\u00ean param> : <type param> Return type c\u1ee7a function l\u00e0 String : func <t\u00ean function>(): <return type> {//body}","title":"1. \u0110\u1ecbnh ngh\u0129a Function"},{"location":"kotlin/kotlin_function/#single-expression-function","text":"N\u1ebfu function v\u1edbi return type ch\u1ec9 c\u00f3 m\u1ed9t bi\u1ec3u th\u1ee9c (expression) th\u00ec \u0111\u1ecbnh ngh\u0129a function theo 2 c\u00e1ch d\u01b0\u1edbi t\u01b0\u01a1ng \u0111\u01b0\u01a1ng nhau: ( getInfo() g\u1ecdi l\u00e0 Single-Expression Function) fun getInfo () : String = \"Hello world...\" fun getInfo2 () : String { return \"Hello world...\" }","title":"Single-Expression Function"},{"location":"kotlin/kotlin_function/#function-scope","text":"C\u00f3 3 lo\u1ea1i function (d\u1ef1a v\u00e0o m\u1ee9c truy c\u1eadp): Member function: L\u00e0 c\u00e1c function \u0111\u01b0\u1ee3c khai b\u00e1o \u1edf trong class, object ho\u1eb7c interface. C\u00e1c function n\u00e0y \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng th\u00f4ng c\u00e1c instance c\u1ee7a class, object ho\u1eb7c interface. Gi\u1ed1ng nh\u01b0 vi\u1ec7c s\u1eed d\u1ee5ng method trong Java. Local function: C\u00f3 th\u1ec3 hi\u1ec3u r\u1eb1ng local function l\u00e0 c\u00e1c function \u0111\u01b0\u1ee3c khai b\u00e1o b\u00ean trong m\u1ed9t function kh\u00e1c (nested). Local function kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u1edf ngo\u00e0i function \u0111\u1ecbnh ngh\u0129a n\u00f3. V\u00ed d\u1ee5 nh\u01b0 trong printArea() , ta \u0111\u1ecbnh ngh\u0129a m\u1ed9t function kh\u00e1c l\u00e0 calculateArea() , do \u0111\u00f3 ta g\u1ecdi calculateArea() l\u00e0 local function: fun printArea ( width : Int , height : Int ): Unit { fun calculateArea ( width : Int , height : Int ): Int = width * height val area = calculateArea ( width , height ) println ( \"The area is $area\" ) } L\u01b0u \u00fd: Local function c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c param v\u00e0 c\u00e1c bi\u1ebfn khai b\u00e1o tr\u01b0\u1edbc n\u00f3 trong function. L\u01b0u \u00fd c\u00e1c bi\u1ebfn khai b\u00e1o sau n\u00f3 th\u00ec kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng: fun reformat ( age : Int , somethingUnknown : String = \"hello\" ) { var birthMonth : Int = 8 fun localRefomat () { birthMonth = 5 //kh\u00f4ng s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c variable birthYear } var birthYear : Int = 1995 } Top-level function: C\u00f3 th\u1ec3 hi\u1ec3u r\u1eb1ng \u0111\u00e2y l\u00e0 nh\u1eefng function \u0111\u01b0\u1ee3c khai b\u00e1o ngo\u00e0i t\u1ea5t c\u1ea3 nh\u01b0 class , object , interface v\u00e0 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong file Kotlin ( .kt ). C\u00e1c method \u0111\u01b0\u1ee3c truy c\u1eadp th\u00f4ng qua t\u00ean c\u1ee7a file vs k\u00ed hi\u1ec7u \"kt\" (\u0111\u1ed1i v\u1edbi Java), trong Kotlin c\u00e1c function n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi tr\u1ef1c ti\u1ebfp qua t\u00ean c\u1ee7a function. Vi\u1ec7c n\u00e0y r\u1ea5t h\u1eefu \u00edch trong vi\u1ec7c \u0111\u1ecbnh ngh\u0129a c\u00e1c c\u00e1c function hepler , util m\u00e0 trong Java hay l\u00e0m th\u00f4ng qua c\u00e1c method static : //file name is DataManager.kt fun isTokenExpired () : Boolean { var isExpired = false //...... return isExpired } G\u1ecdi function Kotlin trong Java: public class JavaMain { public static void main ( String [] args ) { //call top-level function in java DataManagerKt . isTokenExpired (); } }","title":"Function Scope"},{"location":"kotlin/kotlin_function/#246-parameter","text":"fun powerOf ( number : Int , exponent : Int ) { //... } Function powerOf c\u00f3 param number v\u00e0 exponent ki\u1ec3u Int . Khai b\u00e1o param theo c\u00fa ph\u00e1p: <t\u00ean param> : <type param>","title":"2. Parameter"},{"location":"kotlin/kotlin_function/#3-gia-tri-mac-inh-cho-parameter","text":"fun read ( b : Array < Byte >, off : Int = 0 , len : Int = b . size ()) { ... } M\u1ed7i param trong function c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c g\u00e1n gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh ho\u1eb7c kh\u00f4ng g\u00e1n. Gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho ph\u00e9p l\u00fac truy\u1ec1n param cho function c\u00f3 th\u1ec3 b\u1ecf qua c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh. \u0110i\u1ec1u n\u00e0y gi\u00fap kh\u00f4ng ph\u1ea3i vi\u1ebft qu\u00e1 nhi\u1ec1u overload function. L\u01b0u \u00fd: open class A { open fun foo ( i : Int = 10 ) { ... } } class B : A () { override fun foo ( i : Int ) { ... } // no default value allowed } Khi function foo() c\u1ee7a class A \u0111\u00e3 khai b\u00e1o gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho param, th\u00ec khi class B k\u1ebf th\u1eeba class A v\u00e0 override l\u1ea1i function foo() \u0111\u00f3, th\u00ec gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh c\u1ee7a param \u1edf function foo()``class A \u0111\u01b0\u1ee3c gi\u1eef l\u1ea1i v\u00e0 \u1edf class B kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a l\u1ea1i gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh \u0111\u00f3.","title":"3. Gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho parameter"},{"location":"kotlin/kotlin_function/#at-ten-cho-oi-truyen-vao","text":"\u0110\u1ea7u ti\u00ean ta c\u00f3 function reformat() v\u1edbi c\u00e1c param, trong \u0111\u00f3 c\u00f3 4 param c\u00f3 gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh. fun reformat ( str : String , normalizeCase : Boolean = true , upperCaseFirstLetter : Boolean = true , divideByCamelHumps : Boolean = false , wordSeparator : Char = ' ' ) { ... } C\u00f3 th\u1ec3 g\u1ecdi function theo c\u00e1c c\u00e1ch: S\u1eed d\u1ee5ng c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh c\u1ee7a param reformat ( str ) Kh\u00f4ng s\u1eed d\u1ee5ng c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh c\u1ee7a param reformat ( str , true , true , false , '_' ) Ho\u1eb7c c\u00f3 th\u1ec3 \u0111\u1eb7t t\u00ean cho c\u00e1c \u0111\u1ed1i truy\u1ec1n v\u00e0o \u0111\u1ec3 d\u1ec5 \u0111\u1ecdc h\u01a1n (t\u00f9y ch\u1ecdn). L\u01b0u \u00fd l\u00e0 t\u00ean \u0111\u01b0\u1ee3c \u0111\u1eb7t s\u1ebd ph\u1ea3i gi\u1ed1ng v\u1edbi t\u00ean param c\u1ee7a function \u0111\u00f3 reformat ( str , wordSeparator = '_' ) L\u01b0u \u00fd: Khi s\u1eed function c\u1ee7a Kotlin trong Java, c\u00e1c param \u0111\u01b0\u1ee3c khai b\u00e1o gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh s\u1ebd kh\u00f4ng c\u00f3 t\u00e1c d\u1ee5ng. V\u00ec Java kh\u00f4ng th\u1ec3 b\u1ecf qua c\u00e1c param c\u00f3 gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh. Khi s\u1eed d\u1ee5ng method c\u1ee7a Java trong Kotlin , kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c ch\u1ee9c n\u0103ng \u0111\u1eb7t t\u00ean cho \u0111\u1ed1i truy\u1ec1n v\u00e0o.","title":"\u0110\u1eb7t t\u00ean cho \u0111\u1ed1i truy\u1ec1n v\u00e0o"},{"location":"kotlin/kotlin_function/#4-unit-returning-functions","text":"fun printHello ( name : String ?): Unit { if ( name != null ) println ( \"Hello ${name}\" ) else println ( \"Hi there!\" ) // `return Unit` or `return` is optional } Unit \u1edf \u0111\u00e2y c\u00f3 th\u1ec3 hi\u1ec3u nh\u01b0 l\u00e0 Void \u1edf trong Java ho\u1eb7c c\u00e1c ng\u00f4n ng\u1eef kh\u00e1c. Vi\u1ec7c khai b\u00e1o return type l\u00e0 Unit l\u00e0 kh\u00f4ng b\u1eaft bu\u1ed9c. V\u00ed d\u1ee5 nh\u01b0: fun printHello ( name : String ?) { ... } Unit c\u0169ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong vi\u1ec7c khai b\u00e1o c\u00e1c Higher-Order Function \u1edf ph\u1ea7n s\u1eafp t\u1edbi.","title":"4. Unit-returning functions"},{"location":"kotlin/kotlin_function/#5-extension-functions","text":"Gi\u1ed1ng v\u1edbi Swift , Kotlin cho ph\u00e9p ta m\u1edf r\u1ed9ng class m\u00e0 kh\u00f4ng ph\u1ea3i k\u1ebf th\u1eeba t\u1eeb class kh\u00e1c. V\u00ed d\u1ee5 nh\u01b0 ta mu\u1ed1n th\u00eam function swap() cho class MutableList<Int> : fun MutableList < Int >. swap ( index1 : Int , index2 : Int ) { val tmp = this [ index1 ] // 'this' corresponds to the list this [ index1 ] = this [ index2 ] this [ index2 ] = tmp } T\u1eeb kh\u00f3a this \u1edf \u0111\u00e2y d\u00f9ng \u0111\u1ec3 ch\u1ec9 \u0111\u1ebfn instance MutableList<Int> m\u00e0 g\u1ecdi function swap() val l = mutableListOf ( 1 , 2 , 3 ) l . swap ( 0 , 2 ) // 'this' inside 'swap()' will hold the value of 'l' Tuy nhi\u00ean n\u1ebfu extension cho MutableList<Int> ch\u00fang ta ch\u1ec9 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c v\u1edbi c\u00e1c instance c\u1ee7a MutableList<Int> , ch\u00fang ta c\u0169ng c\u00f3 th\u1ec3 kh\u1edfi t\u1ea1o chung b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng Generic Function: fun < T > MutableList < T >. swap ( index1 : Int , index2 : Int ) { val tmp = this [ index1 ] // 'this' corresponds to the list this [ index1 ] = this [ index2 ] this [ index2 ] = tmp }","title":"5. Extension functions"},{"location":"kotlin/kotlin_function/#6-return-nhieu-gia-tri-mutiple-return-values","text":"Xem v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y: data class Result ( val result : Int , val status : Status ) fun function (...): Result { // computations return Result ( result , status ) } // Now, to use this function: val ( result , status ) = function (...) Nh\u01b0 ta th\u1ea5y, function c\u00f3 th\u1ec3 tr\u1ea3 v\u1ec1 \u0111\u1ed3ng th\u1eddi 2 gi\u00e1 tr\u1ecb result v\u00e0 status . B\u1ea3n ch\u1ea5t c\u1ee7a vi\u1ec7c n\u00e0y l\u00e0 g\u00f3i ch\u00fang v\u00e0o m\u1ed9t data class m\u00e0 th\u00f4i v\u00e0 s\u1eed Destructure (tr\u00ecnh b\u00e0y ph\u1ea7n ti\u1ebfp theo) \u0111\u1ec3 g\u00e1n ch\u00fang cho c\u00e1c bi\u1ebfn. Nh\u00ecn \u0111\u1ebfn \u0111\u00e2y ta c\u00f3 th\u1ec3 ngh\u0129 \u0111\u1ebfn s\u1eed d\u1ee5ng Pair<L, R> . Tuy nhi\u00ean vi\u1ec7c s\u1eed d\u1ee5ng class v\u1edbi c\u00e1c t\u00ean c\u00f3 ngh\u0129a gi\u00fap code d\u1ec5 \u0111\u1ecdc h\u01a1n vi\u1ec7c s\u1eed d\u1ee5ng first v\u00e0 second trong Pair .","title":"6. Return nhi\u1ec1u gi\u00e1 tr\u1ecb (Mutiple return values)"},{"location":"kotlin/kotlin_function/#destructuring-declarations","text":"Xem v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y: data class Person ( var name : String , var age : Int ) val ( name , age ) = Person ( \"Hado\" , 22 ) println ( \"Name: $name\" ) //print: Name: Hado println ( \"Age: $age\" ) //print: Age: 22 \u0110o\u1ea1n code tr\u00ean sau khi \u0111\u01b0\u1ee3c complie th\u1ef1c ra s\u1ebd nh\u01b0 th\u1ebf n\u00e0y: data class Person ( var name : String , var age : Int ) val person = Person ( \"Hado\" , 22 ) val name = person . component1 () val age = person . component2 () println ( \"Name: $name\" ) //print: Name: Hado println ( \"Age: $age\" ) //print: Age: 22 Ta c\u00f3 data class v\u1edbi primary constructor c\u00f3 2 param name v\u00e0 age , class s\u1ebd l\u1ea7n l\u01b0\u1ee3t t\u1ef1 \u0111\u1ed9ng t\u1ea1o ra c\u00e1c function componentN (N: 1, 2, 3, ...) cho c\u00e1c param. L\u01b0u \u00fd ch\u1ec9 c\u00f3 c\u00e1c param trong primary constructor m\u1edbi \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng t\u1ea1o ra function component . N\u1ebfu ch\u00fang ta khai b\u00e1o th\u00eam bi\u1ebfn trong class v\u00e0 mu\u1ed1n s\u1eed d\u1ee5ng Destructure th\u00ec c\u1ea7n kh\u1edfi t\u1ea1o th\u00eam c\u00e1c function component t\u01b0\u01a1ng \u1ee9ng v\u1edbi param \u0111\u00f3. V\u00ed d\u1ee5 nh\u01b0: data class Person ( var name : String , var age : Int ) { var province : String = \"Ha Noi\" operator fun component3 (): String { return province } } val ( name , age , province ) = Person ( \"Hado\" , 22 ) println ( \"Name: $name\" ) //print: Name: Hado println ( \"Age: $age\" ) //print: Age: 22 println ( \"Province: $province\" ) //print: Province: Ha Noi N\u1ebfu nh\u01b0 trong class Person , ta ch\u1ec9 c\u1ea7n l\u1ea5y 2 gi\u00e1 tr\u1ecb l\u00e0 age v\u00e0 province , \u0111\u1ed3ng th\u1eddi kh\u00f4ng mu\u1ed1n t\u1ea1o ra bi\u1ebfn name ta s\u1eed d\u1ee5ng d\u1ea5u \"_\" \u0111\u1ec3 thay cho c\u00e1c bi\u1ebfn kh\u00f4ng c\u1ea7n s\u1eed d\u1ee5ng: val ( _ , age , province ) = Person ( \"Hado\" , 22 ) println ( \"Age: $age\" ) //print: Age: 22 println ( \"Province: $province\" ) //print: Province: Ha Noi","title":"Destructuring Declarations"},{"location":"kotlin/kotlin_function/#7-generic-functions","text":"Gi\u1ed1ng nh\u01b0 Java , Kotlin cho ph\u00e9p s\u1eed d\u1ee5ng generic function gi\u00fap cho vi\u1ec7c gi\u1ea3m s\u1ed1 l\u01b0\u1ee3ng code, function c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi nhi\u1ec1u ki\u1ec3u kh\u00e1c nhau \u0110\u1ec3 \u0111\u1ecbnh ngh\u0129a generic function , ta s\u1eed d\u1ee5ng form sau: fun < T > singletonList ( item : T ): List < T > { // ... } fun < T > T . basicToString () : String { // extension function // ... } \u0110\u1ec3 g\u1ecdi function, c\u1ea7n x\u00e1c \u0111\u1ecbnh ki\u1ec3u cho function: val l = singletonList < Int >( 1 ) Ngo\u00e0i ra, gi\u1ed1ng nh\u01b0 Java , ta c\u0169ng c\u00f3 th\u1ec3 t\u1ea1o generic function v\u1edbi ki\u1ec3u \u0111\u01b0\u1ee3c extends t\u1eeb m\u1ed9t ki\u1ec3u kh\u00e1c: fun < T : Comparable < T >> sort ( list : List < T >) { // ... } B\u00e2y gi\u1edd, ta c\u00f3 th\u1ec3 g\u1ecdi function v\u1edbi c\u00e1c bi\u1ebfn c\u00f3 ki\u1ec3u l\u00e0 subclass c\u1ee7a Comparable : sort ( listOf ( 1 , 2 , 3 )) // OK. Int is a subtype of Comparable<Int> sort ( listOf ( HashMap < Int , String >())) // Error: HashMap<Int, String> is not a subtype of Comparable<HashMap<Int, String>>","title":"7. Generic functions"},{"location":"kotlin/kotlin_function/#8-infix-notation","text":"Xem v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y: class Fly ( var currentPlace : String ) { infix fun flyTo ( nextPlace : String ) { println ( \"The plane fly from $currentPlace to $nextPlace\" ) } } val plane1 = Fly ( \"Ha Noi\" ) plane1 flyTo \"Ho Chi Minh\" //print: The plane fly from Ha Noi to Ho Chi Minh plane1 . flyTo ( \"Ho Chi Minh\" ) //print: The plane fly from Ha Noi to Ho Chi Minh Nh\u1edd s\u1eed d\u1ee5ng k\u00fd hi\u1ec7u infix cho function flyTo() , ta c\u00f3 th\u1ec3 s\u1ef1 d\u1ee5ng t\u00ean function nh\u01b0 trung t\u1ed1 li\u00ean k\u1ebft gi\u1eefa instance class v\u00e0 param truy\u1ec1n v\u00e0o. Function c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng infix notation (trung t\u1ed1) khi Function l\u00e0 member c\u1ee7a m\u1ed9t class ho\u1eb7c l\u00e0 extension c\u1ee7a class Function ch\u1ec9 c\u00f3 m\u1ed9t param duy nh\u1ea5t Function \u0111\u01b0\u1ee3c mark b\u1eb1ng infix \u1edf \u0111\u1ea7u function","title":"8. Infix notation"},{"location":"kotlin/kotlin_function/#9-function-voi-parameter-khong-xac-inh","text":"T\u01b0\u01a1ng t\u1ef1 trong Java , Kotlin cho ph\u00e9p m\u1ed9t function kh\u00f4ng c\u1ea7n x\u00e1c \u0111\u1ecbnh s\u1ed1 l\u01b0\u1ee3ng param m\u1ed9t c\u00e1ch c\u1ee5 th\u1ec3. Java public int add ( int ... array ) { int s = 0 ; for ( int i : array ) { s += i ; } return s ; } Kotlin fun add ( vararg array : Int ) : Int { var s = 0 for ( i in array ) { s += i } return s } Ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a vararg . V\u00e0 c\u0169ng t\u01b0\u01a1ng t\u1ef1 nh\u01b0 Java , bi\u1ebfn array \u0111\u01b0\u1ee3c coi l\u00e0 m\u1ed9t m\u1ea3ng. L\u01b0u \u00fd: Ch\u1ec9 c\u00f3 m\u1ed9t param \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u l\u00e0 vararg . N\u1ebfu param kh\u00f4ng ph\u1ea3i l\u00e0 param cu\u1ed1i c\u00f9ng, khi g\u1ecdi h\u00e0m, ta ph\u1ea3i ch\u1ec9 \u0111\u1ecbnh r\u00f5 c\u00e1c param sau \u0111\u00f3 fun multiPrint ( prefix : String , vararg strings : String , suffix : String ) { //..... } S\u1eed d\u1ee5ng function multiPrint() : multiPrint ( \"Start\" , \"a\" , \"b\" , \"c\" , suffix = \"End\" )","title":"9. Function v\u1edbi parameter kh\u00f4ng x\u00e1c \u0111\u1ecbnh"},{"location":"kotlin/kotlin_function/#1046-inline-function","text":"Inline function \u0111\u01b0\u1ee3c gi\u1ea3i th\u00edch \u1edf \u0111\u00e2y","title":"10. Inline function"},{"location":"kotlin/kotlin_higher_order_function/","text":"Higher-Order function l\u00e0 function c\u00f3 th\u1ec3 nh\u1eadn m\u1ed9t function nh\u01b0 m\u1ed9t param ho\u1eb7c c\u00f3 th\u1ec3 tr\u1ea3 v\u1ec1 m\u1ed9t function: fun doSomethingWithNumber ( number : Int , receiver : ( String ?) -> Unit ) { var result : String ? = null //...do complex work with number receiver ( result ) } Function doSomethingWithNumber() c\u00f3 2 param l\u00e0 number ki\u1ec3u Int v\u00e0 receiver l\u00e0 m\u1ed9t function (String?) -> Unit v\u1edbi String l\u00e0 ki\u1ec3u c\u1ee7a tham s\u1ed1 truy\u1ec1n v\u00e0o v\u00e0 Unit ( Void ) l\u00e0 ki\u1ec3u tr\u1ea3 v\u1ec1 c\u1ee7a h\u00e0m. Ta c\u00f3 th\u1ec3 g\u1ecdi doSomethingWithNumber() b\u1eb1ng nh\u1eefng c\u00e1ch sau: Function References: \u00b6 doSomethingWithNumber ( 1000 , :: processWithResult ) fun processWithResult ( result : String ?) : Unit { // do something with result } L\u00fac n\u00e0y sau khi m\u00e0 function doSomethingWithNumber() g\u1ecdi receiver(result) , s\u1ebd nh\u1ea3y v\u00e0o function processWithResult() v\u1edbi result \u0111\u01b0\u1ee3c truy\u1ec1n t\u1eeb function doSomethingWithNumber() , \u0111i\u1ec1u n\u00e0y gi\u1ed1ng v\u1edbi callback trong Java hay c\u00e1c ng\u00f4n ng\u1eef kh\u00e1c. Thay v\u00ec ta truy\u1ec1n interface th\u00ec \u1edf \u0111\u00e2y ta truy\u1ec1n reference c\u1ee7a function v\u00e0o b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng to\u00e1n t\u1eed :: v\u00e0 t\u00ean function. N\u00f3i th\u00eam m\u1ed9t ch\u00fat v\u1ec1 Function References . To\u00e1n t\u1eed :: c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi c\u00e1c overload function v\u00ed d\u1ee5 nh\u01b0: fun isOdd ( x : Int ) = x % 2 != 0 fun isOdd ( s : String ) = s == \"brillig\" || s == \"slithy\" || s == \"tove\" val numbers = listOf ( 1 , 2 , 3 ) println ( numbers . filter ( :: isOdd )) // refers to isOdd(x: Int) Function Anonymous \u00b6 doSomethingWithNumber ( 1000 , fun ( result : String ?) { // do something with result }) Thay v\u00ec truy\u1ec1n reference c\u1ee7a function v\u00e0o, ta \u0111\u1ecbnh ngh\u0129a lu\u00f4n function \u1edf argument. Function Anonymous kh\u00e1 gi\u1ed1ng v\u1edbi v\u1edbi c\u00e1c function th\u00f4ng th\u01b0\u1eddng, ch\u1ec9 kh\u00e1c m\u1ed9t \u0111i\u1ec1u l\u00e0 t\u00ean c\u1ee7a function b\u1ecb b\u1ecf qua.","title":"Kotlin Higher order funtion"},{"location":"kotlin/kotlin_higher_order_function/#function-references","text":"doSomethingWithNumber ( 1000 , :: processWithResult ) fun processWithResult ( result : String ?) : Unit { // do something with result } L\u00fac n\u00e0y sau khi m\u00e0 function doSomethingWithNumber() g\u1ecdi receiver(result) , s\u1ebd nh\u1ea3y v\u00e0o function processWithResult() v\u1edbi result \u0111\u01b0\u1ee3c truy\u1ec1n t\u1eeb function doSomethingWithNumber() , \u0111i\u1ec1u n\u00e0y gi\u1ed1ng v\u1edbi callback trong Java hay c\u00e1c ng\u00f4n ng\u1eef kh\u00e1c. Thay v\u00ec ta truy\u1ec1n interface th\u00ec \u1edf \u0111\u00e2y ta truy\u1ec1n reference c\u1ee7a function v\u00e0o b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng to\u00e1n t\u1eed :: v\u00e0 t\u00ean function. N\u00f3i th\u00eam m\u1ed9t ch\u00fat v\u1ec1 Function References . To\u00e1n t\u1eed :: c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi c\u00e1c overload function v\u00ed d\u1ee5 nh\u01b0: fun isOdd ( x : Int ) = x % 2 != 0 fun isOdd ( s : String ) = s == \"brillig\" || s == \"slithy\" || s == \"tove\" val numbers = listOf ( 1 , 2 , 3 ) println ( numbers . filter ( :: isOdd )) // refers to isOdd(x: Int)","title":"Function References:"},{"location":"kotlin/kotlin_higher_order_function/#function-anonymous","text":"doSomethingWithNumber ( 1000 , fun ( result : String ?) { // do something with result }) Thay v\u00ec truy\u1ec1n reference c\u1ee7a function v\u00e0o, ta \u0111\u1ecbnh ngh\u0129a lu\u00f4n function \u1edf argument. Function Anonymous kh\u00e1 gi\u1ed1ng v\u1edbi v\u1edbi c\u00e1c function th\u00f4ng th\u01b0\u1eddng, ch\u1ec9 kh\u00e1c m\u1ed9t \u0111i\u1ec1u l\u00e0 t\u00ean c\u1ee7a function b\u1ecb b\u1ecf qua.","title":"Function Anonymous"},{"location":"kotlin/kotlin_inteface/","text":"Trong Kotlin interface kh\u00e1 gi\u1ed1ng so v\u1edbi Java 8 . N\u00f3 c\u00f3 th\u1ec3 ch\u1ee9a c\u00e1c function \u1ea3o (abstract function) c\u0169ng nh\u01b0 c\u00e1c implement function (c\u00e1c function c\u00f3 body) v\u00e0 \u0111\u1ed3ng th\u1eddi c\u0169ng c\u00f3 th\u1ec3 ch\u1ee9a c\u00e1c property. \u0110i\u1ec1u kh\u00e1c bi\u1ec7t gi\u1eefa abstract class v\u00e0 interface l\u00e0 interface kh\u00f4ng c\u00f3 state trong khi abstract class th\u00ec c\u00f3. Ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a interface \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a m\u1ed9t interface: interface MyInterface { fun bar () fun foo () { // optional body } } K\u1ebf th\u1eeba interface : class Child : MyInterface { override fun bar () { // body } } Property trong interface \u00b6 B\u1ea1n c\u00f3 th\u1ec3 kh\u1edfi t\u1ea1o c\u00e1c property \u1edf trong interface . interface MyInterface { val prop : Int // abstract val post : String get () = \"Any post\" val propertyWithImplementation : String get () = \"foo\" fun foo () { print ( prop ) } } class Child : MyInterface { override val prop : Int = 29 } L\u01b0u \u00fd l\u00e0 ch\u00fang ta kh\u00f4ng \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o cho property trong interface , v\u00e0 interface kh\u00f4ng c\u00f3 backing fields Overriding conflict \u00b6 interface A { fun foo () { print ( \"A\" ) } fun bar () } interface B { fun foo () { print ( \"B\" ) } fun bar () { print ( \"bar\" ) } } class C : A { override fun bar () { print ( \"bar\" ) } } class D : A , B { override fun foo () { super < A >. foo () super < B >. foo () } override fun bar () { super < B >. bar () } } V\u1ea5n \u0111\u1ec1 x\u1ea3y ra khi c\u1ea3 interface A v\u00e0 B \u0111\u00e8u c\u00f3 function foo() v\u00e0 bar() , chi ti\u1ebft t\u1ea1i \u0111\u00e2y","title":"Kotlin Inteface"},{"location":"kotlin/kotlin_inteface/#property-trong-interface","text":"B\u1ea1n c\u00f3 th\u1ec3 kh\u1edfi t\u1ea1o c\u00e1c property \u1edf trong interface . interface MyInterface { val prop : Int // abstract val post : String get () = \"Any post\" val propertyWithImplementation : String get () = \"foo\" fun foo () { print ( prop ) } } class Child : MyInterface { override val prop : Int = 29 } L\u01b0u \u00fd l\u00e0 ch\u00fang ta kh\u00f4ng \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o cho property trong interface , v\u00e0 interface kh\u00f4ng c\u00f3 backing fields","title":"Property trong interface"},{"location":"kotlin/kotlin_inteface/#overriding-conflict","text":"interface A { fun foo () { print ( \"A\" ) } fun bar () } interface B { fun foo () { print ( \"B\" ) } fun bar () { print ( \"bar\" ) } } class C : A { override fun bar () { print ( \"bar\" ) } } class D : A , B { override fun foo () { super < A >. foo () super < B >. foo () } override fun bar () { super < B >. bar () } } V\u1ea5n \u0111\u1ec1 x\u1ea3y ra khi c\u1ea3 interface A v\u00e0 B \u0111\u00e8u c\u00f3 function foo() v\u00e0 bar() , chi ti\u1ebft t\u1ea1i \u0111\u00e2y","title":"Overriding conflict"},{"location":"kotlin/kotlin_lambda/","text":"T\u1ed5ng quan: \u00b6 Bi\u1ec3u th\u1ee9c c\u1ee7a lambda lu\u00f4n \u0111\u01b0\u1ee3c bao b\u1edfi {} N\u1ebfu lambda function c\u00f3 b\u1ea5t k\u00ec param n\u00e0o n\u00f3 ph\u1ea3i \u1edf tr\u01b0\u1edbc to\u00e1n t\u1eed -> (ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a param c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c b\u1ecf qua) Body c\u1ee7a lambda function ph\u1ea3i \u1edf sau to\u00e1n t\u1eed -> //1 doSomethingWithNumber ( 1000 , { result -> // do something with result }) //2 doSomethingWithNumber ( 1000 , { result : String ? -> // do something with result }) //3 doSomethingWithNumber ( 1000 ) { result -> // do something with result } 3 c\u00e1ch s\u1eed d\u1ee5ng tr\u00ean l\u00e0 nh\u01b0 nhau v\u00e0 nh\u01b0 c\u00e1c c\u00e1ch function reference v\u00e0 function anonymous . C\u00e1ch g\u1ecdi th\u1ee9 3 nh\u00ecn c\u00f3 v\u1ebb kh\u00e1c bi\u1ec7t ch\u00fat so v\u1edbi 2 c\u00e1ch g\u1ecdi c\u00f2n l\u1ea1i. M\u1ed9t \u0111i\u1ec3m th\u00eam \u1edf \u0111\u00e2y l\u00e0 n\u1ebfu param cu\u1ed1i l\u00e0 function th\u00ec ta c\u00f3 th\u1ec3 khai b\u00e1o lambda function b\u00ean ngo\u00e0i () . implicit name of a single parameter \u00b6 doSomethingWithNumber ( 1000 ) { println ( \"The result is $it\" ) // do something with result } C\u00f3 th\u1ec3 hi\u1ec3u \u1edf \u0111\u00e2y it l\u00e0 t\u00ean \u0111\u1ea1i di\u1ec7n cho parameter duy nh\u1ea5t Destructuring trong Lambdas \u00b6 Trong ph\u1ea7n Function m\u00ecnh \u0111\u00e3 gi\u1edbi thi\u1ec7u v\u1ec1 Destructure , \u00e1p d\u1ee5ng n\u00f3 v\u1edbi Lambdas kh\u00f4ng c\u00f3 g\u00ec kh\u00e1c bi\u1ec7t l\u1eafm. map . mapValues { entry -> \"${entry.value}!\" } map . mapValues { ( key , value ) -> \"$value!\" } \u1ede \u0111\u00e2y ta \u0111\u00e3 destructure entry ra 2 tham s\u1ed1 key v\u00e0 value . Lambda return \u00b6 //The first way ints . filter { val shouldFilter = it > 0 shouldFilter } //The second way ints . filter { val shouldFilter = it > 0 return @filter shouldFilter } \u1ede \u0111\u00e2y ta c\u00f3 m\u1ed9t m\u1ed9t Collection ints g\u1ecdi \u0111\u1ebfn function filter() , param c\u1ee7a function filter() l\u00e0 function c\u00f3 ki\u1ec3u tr\u1ea3 v\u1ec1 l\u00e0 Boolean . Ta s\u1eed d\u1ee5ng lambda \u0111\u1ec3 th\u1ef1c hi\u1ec7n \u0111i\u1ec1u n\u00e0y. C\u00f3 2 c\u00e1ch \u0111\u1ec3 return m\u1ed9t function: C\u00e1ch th\u1ee9 nh\u1ea5t, gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ec3u th\u1ee9c cu\u1ed1i c\u00f9ng tr\u00f9ng v\u1edbi return type s\u1ebd \u0111\u01b0\u1ee3c coi l\u00e0 gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1, shouldFilter \u0111\u01b0\u1ee3c coi l\u00e0 gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1. C\u00e1ch th\u1ee9 hai, s\u1eed d\u1ee5ng Return at Labels \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh v\u1ecb tr\u00ed tr\u1ea3 v\u1ec1, n\u1ebfu ch\u1ec9 \u0111\u1ec3 return shouldFilter n\u00f3 s\u1ebd hi\u1ec3u l\u00e0 \u0111ang return tr\u1ea3 function b\u00ean ngo\u00e0i. Closures \u00b6 Lambda, anonymous function, local function v\u00e0 object expression \u0111\u1ec1u c\u00f3 th\u1ec3 truy c\u1eadp closure c\u1ee7a n\u00f3 (n\u00f4m na nh\u01b0 l\u00e0 v\u00f9ng b\u00ean ngo\u00e0i khai b\u00e1o n\u00f3). N\u00f3 c\u00f3 th\u1ec3 truy c\u1eadp c\u00e1c function, bi\u1ebfn v\u00e0 param \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o \u1edf b\u00ean ngo\u00e0i, kh\u00f4ng gi\u1ed1ng Java , ta ch\u1ec9 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c c\u00e1c bi\u1ebfn v\u00e0 param \u1edf v\u00f9ng b\u00ean ngo\u00e0i n\u1ebfu nh\u01b0 ch\u00fang \u0111\u01b0\u1ee3c khai b\u00e1o l\u00e0 final Java final String username = edtUsername . getText (). toString (); btnLogin . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { //username ph\u1ea3i l\u00e0 final if ( username != null && ! username . isEmpty ()) { //..... } } }); Kotlin var sum = 0 ints . filter { it > 0 }. forEach { sum += it //sum kh\u00f4ng c\u1ea7n ph\u1ea3i l\u00e0 val (final) } print ( sum ) Function Literals \u00b6 Theo m\u00ecnh t\u00ecm hi\u1ec3u \u0111\u1ecbnh ngh\u0129a c\u1ee7a Function Literals nh\u01b0 sau v\u00e0 m\u00ecnh th\u1ea5y h\u1ee3p l\u00fd: Comment A function literal is just an expression that defines an unnamed function. M\u1ed9t s\u1ed1 v\u00ed d\u1ee5 v\u1ec1 function literal trong Kotlin : val m = { ( x : String ) -> println ( \"$x\" ) } val n : ( String ) -> Unit = { x -> println ( \"$x\" ) } val o : ( String ) -> Unit = { ( x : String ) -> println ( \"$x\" ) } fun main ( args : Array < String >) { m ( \"good morning\" ) n ( \"good morning\" ) o ( \"good morning\" ) } T\u1ea5t c\u1ea3 m , n v\u00e0 o \u0111\u1ec1u th\u1ef1c hi\u1ec7n ch\u1ee9c n\u0103ng nh\u01b0 nhau. Function Literals v\u1edbi receiver \u00b6 N\u1ebfu b\u1ea1n n\u00e0o \u0111\u1ecdc docs b\u1eb1ng ti\u1ebfng anh c\u00f3 th\u1ec3 hi\u1ec3u receiver object n\u00f3i \u0111\u1ebfn \u0111\u1ed1i t\u01b0\u1ee3ng th\u1ef1c hi\u1ec7n extension : fun Person . run () { ... } \u0110o\u1ea1n code tr\u00ean class Person \u0111\u01b0\u1ee3c coi l\u00e0 receiver object . \u0110\u1ec3 extension class Int m\u1ed9t function sum() b\u00ecnh th\u01b0\u1eddng s\u1ebd nh\u01b0 sau: fun Int . sum ( other : Int ): Int { return this + other } V\u1ee1i vi\u1ec7c s\u1eed d\u1ee5ng function literal nh\u01b0 sau: val sum = fun Int .( other : Int ): Int = this + other Inline function (N\u00e2ng cao) \u00b6 Inline function \u0111\u01b0\u1ee3c gi\u1ea3i th\u00edch \u1edf \u0111\u00e2y","title":"Kotlin Lambda"},{"location":"kotlin/kotlin_lambda/#tong-quan","text":"Bi\u1ec3u th\u1ee9c c\u1ee7a lambda lu\u00f4n \u0111\u01b0\u1ee3c bao b\u1edfi {} N\u1ebfu lambda function c\u00f3 b\u1ea5t k\u00ec param n\u00e0o n\u00f3 ph\u1ea3i \u1edf tr\u01b0\u1edbc to\u00e1n t\u1eed -> (ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a param c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c b\u1ecf qua) Body c\u1ee7a lambda function ph\u1ea3i \u1edf sau to\u00e1n t\u1eed -> //1 doSomethingWithNumber ( 1000 , { result -> // do something with result }) //2 doSomethingWithNumber ( 1000 , { result : String ? -> // do something with result }) //3 doSomethingWithNumber ( 1000 ) { result -> // do something with result } 3 c\u00e1ch s\u1eed d\u1ee5ng tr\u00ean l\u00e0 nh\u01b0 nhau v\u00e0 nh\u01b0 c\u00e1c c\u00e1ch function reference v\u00e0 function anonymous . C\u00e1ch g\u1ecdi th\u1ee9 3 nh\u00ecn c\u00f3 v\u1ebb kh\u00e1c bi\u1ec7t ch\u00fat so v\u1edbi 2 c\u00e1ch g\u1ecdi c\u00f2n l\u1ea1i. M\u1ed9t \u0111i\u1ec3m th\u00eam \u1edf \u0111\u00e2y l\u00e0 n\u1ebfu param cu\u1ed1i l\u00e0 function th\u00ec ta c\u00f3 th\u1ec3 khai b\u00e1o lambda function b\u00ean ngo\u00e0i () .","title":"T\u1ed5ng quan:"},{"location":"kotlin/kotlin_lambda/#implicit-name-of-a-single-parameter","text":"doSomethingWithNumber ( 1000 ) { println ( \"The result is $it\" ) // do something with result } C\u00f3 th\u1ec3 hi\u1ec3u \u1edf \u0111\u00e2y it l\u00e0 t\u00ean \u0111\u1ea1i di\u1ec7n cho parameter duy nh\u1ea5t","title":"implicit name of a single parameter"},{"location":"kotlin/kotlin_lambda/#destructuring-trong-lambdas","text":"Trong ph\u1ea7n Function m\u00ecnh \u0111\u00e3 gi\u1edbi thi\u1ec7u v\u1ec1 Destructure , \u00e1p d\u1ee5ng n\u00f3 v\u1edbi Lambdas kh\u00f4ng c\u00f3 g\u00ec kh\u00e1c bi\u1ec7t l\u1eafm. map . mapValues { entry -> \"${entry.value}!\" } map . mapValues { ( key , value ) -> \"$value!\" } \u1ede \u0111\u00e2y ta \u0111\u00e3 destructure entry ra 2 tham s\u1ed1 key v\u00e0 value .","title":"Destructuring trong Lambdas"},{"location":"kotlin/kotlin_lambda/#lambda-return","text":"//The first way ints . filter { val shouldFilter = it > 0 shouldFilter } //The second way ints . filter { val shouldFilter = it > 0 return @filter shouldFilter } \u1ede \u0111\u00e2y ta c\u00f3 m\u1ed9t m\u1ed9t Collection ints g\u1ecdi \u0111\u1ebfn function filter() , param c\u1ee7a function filter() l\u00e0 function c\u00f3 ki\u1ec3u tr\u1ea3 v\u1ec1 l\u00e0 Boolean . Ta s\u1eed d\u1ee5ng lambda \u0111\u1ec3 th\u1ef1c hi\u1ec7n \u0111i\u1ec1u n\u00e0y. C\u00f3 2 c\u00e1ch \u0111\u1ec3 return m\u1ed9t function: C\u00e1ch th\u1ee9 nh\u1ea5t, gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ec3u th\u1ee9c cu\u1ed1i c\u00f9ng tr\u00f9ng v\u1edbi return type s\u1ebd \u0111\u01b0\u1ee3c coi l\u00e0 gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1, shouldFilter \u0111\u01b0\u1ee3c coi l\u00e0 gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1. C\u00e1ch th\u1ee9 hai, s\u1eed d\u1ee5ng Return at Labels \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh v\u1ecb tr\u00ed tr\u1ea3 v\u1ec1, n\u1ebfu ch\u1ec9 \u0111\u1ec3 return shouldFilter n\u00f3 s\u1ebd hi\u1ec3u l\u00e0 \u0111ang return tr\u1ea3 function b\u00ean ngo\u00e0i.","title":"Lambda return"},{"location":"kotlin/kotlin_lambda/#closures","text":"Lambda, anonymous function, local function v\u00e0 object expression \u0111\u1ec1u c\u00f3 th\u1ec3 truy c\u1eadp closure c\u1ee7a n\u00f3 (n\u00f4m na nh\u01b0 l\u00e0 v\u00f9ng b\u00ean ngo\u00e0i khai b\u00e1o n\u00f3). N\u00f3 c\u00f3 th\u1ec3 truy c\u1eadp c\u00e1c function, bi\u1ebfn v\u00e0 param \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o \u1edf b\u00ean ngo\u00e0i, kh\u00f4ng gi\u1ed1ng Java , ta ch\u1ec9 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c c\u00e1c bi\u1ebfn v\u00e0 param \u1edf v\u00f9ng b\u00ean ngo\u00e0i n\u1ebfu nh\u01b0 ch\u00fang \u0111\u01b0\u1ee3c khai b\u00e1o l\u00e0 final Java final String username = edtUsername . getText (). toString (); btnLogin . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { //username ph\u1ea3i l\u00e0 final if ( username != null && ! username . isEmpty ()) { //..... } } }); Kotlin var sum = 0 ints . filter { it > 0 }. forEach { sum += it //sum kh\u00f4ng c\u1ea7n ph\u1ea3i l\u00e0 val (final) } print ( sum )","title":"Closures"},{"location":"kotlin/kotlin_lambda/#function-literals","text":"Theo m\u00ecnh t\u00ecm hi\u1ec3u \u0111\u1ecbnh ngh\u0129a c\u1ee7a Function Literals nh\u01b0 sau v\u00e0 m\u00ecnh th\u1ea5y h\u1ee3p l\u00fd: Comment A function literal is just an expression that defines an unnamed function. M\u1ed9t s\u1ed1 v\u00ed d\u1ee5 v\u1ec1 function literal trong Kotlin : val m = { ( x : String ) -> println ( \"$x\" ) } val n : ( String ) -> Unit = { x -> println ( \"$x\" ) } val o : ( String ) -> Unit = { ( x : String ) -> println ( \"$x\" ) } fun main ( args : Array < String >) { m ( \"good morning\" ) n ( \"good morning\" ) o ( \"good morning\" ) } T\u1ea5t c\u1ea3 m , n v\u00e0 o \u0111\u1ec1u th\u1ef1c hi\u1ec7n ch\u1ee9c n\u0103ng nh\u01b0 nhau.","title":"Function Literals"},{"location":"kotlin/kotlin_lambda/#function-literals-voi-receiver","text":"N\u1ebfu b\u1ea1n n\u00e0o \u0111\u1ecdc docs b\u1eb1ng ti\u1ebfng anh c\u00f3 th\u1ec3 hi\u1ec3u receiver object n\u00f3i \u0111\u1ebfn \u0111\u1ed1i t\u01b0\u1ee3ng th\u1ef1c hi\u1ec7n extension : fun Person . run () { ... } \u0110o\u1ea1n code tr\u00ean class Person \u0111\u01b0\u1ee3c coi l\u00e0 receiver object . \u0110\u1ec3 extension class Int m\u1ed9t function sum() b\u00ecnh th\u01b0\u1eddng s\u1ebd nh\u01b0 sau: fun Int . sum ( other : Int ): Int { return this + other } V\u1ee1i vi\u1ec7c s\u1eed d\u1ee5ng function literal nh\u01b0 sau: val sum = fun Int .( other : Int ): Int = this + other","title":"Function Literals v\u1edbi receiver"},{"location":"kotlin/kotlin_lambda/#inline-function-nang-cao","text":"Inline function \u0111\u01b0\u1ee3c gi\u1ea3i th\u00edch \u1edf \u0111\u00e2y","title":"Inline function (N\u00e2ng cao)"},{"location":"kotlin/kotlin_nested_class/","text":"1. Gi\u1edbi thi\u1ec7u \u00b6 Trong Java ta c\u00f3 th\u1ec3 vi\u1ebft m\u1ed9t class b\u00ean trong th\u00e2n c\u1ee7a m\u1ed9t class kh\u00e1c: Java class Outer { private int bar = 1 ; class Nested { public int foo (){ return bar ; } } } V\u1edbi Kotlin , ta c\u0169ng c\u00f3 th\u1ec3 l\u00e0m t\u01b0\u01a1ng t\u1ef1: Kotlin class Outer { private val bar : Int = 1 class Nested { fun foo () = 2 } } val demo = Outer . Nested (). foo () // == 2 Tuy nhi\u00ean, khi khai b\u00e1o nh\u01b0 tr\u00ean, trong Kotlin , class Nested s\u1ebd kh\u00f4ng th\u1ec3 truy c\u1eadp \u0111\u1ebfn c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a class Outer ch\u1ee9a n\u00f3 nh\u01b0 trong Java . \u0110\u1ec3 l\u00e0m \u0111\u01b0\u1ee3c \u0111i\u1ec1u \u0111\u00f3, ta c\u1ea7n s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a inner trong Kotlin . 2. Inner class \u00b6 M\u1ed9t class c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c khai b\u00e1o v\u1edbi t\u1eeb kh\u00f3a inner c\u00f3 th\u1ec3 truy c\u1eadp \u0111\u1ebfn c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a class ch\u1ee9a n\u00f3. Inner class mang m\u1ed9t tham chi\u1ebfu \u0111\u1ebfn m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng c\u1ee7a class ch\u1ee9a n\u00f3: class Outer { private val bar : Int = 1 private var fooz : String = \"hello\" inner class Inner { fun foo () = bar fun baz () { this @Outer . fooz = \"hi\" } } } val demo = Outer (). Inner (). foo () // == 1 \u0110\u1ec3 tr\u1ecf \u0111\u1ebfn outer class, ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a this v\u1edbi @label nh\u01b0 \u0111\u00e3 n\u00f3i trong ph\u1ea7n Bi\u1ec3u th\u1ee9c this . 3. Anonymous inner class (L\u1edbp con v\u00f4 danh) \u00b6 \u0110\u1ec3 kh\u1edfi t\u1ea1o anonymous inner class, ch\u00fang ta s\u1eed d\u1ee5ng [object expression]: textView ?. setOnClickListener ( object : View . OnClickListener { override fun onClick ( v : View ?) { //.... } }) N\u1ebfu object \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o l\u00e0 m\u1ed9t functional Java interface (m\u1ed9t interface ch\u1ec9 c\u00f3 duy nh\u1ea5t m\u1ed9t method), ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng lambda v\u00e0 khai b\u00e1o nh\u01b0 sau: val listener = View . OnClickListener { }","title":"Kotlin Nested class"},{"location":"kotlin/kotlin_nested_class/#146-gioi-thieu","text":"Trong Java ta c\u00f3 th\u1ec3 vi\u1ebft m\u1ed9t class b\u00ean trong th\u00e2n c\u1ee7a m\u1ed9t class kh\u00e1c: Java class Outer { private int bar = 1 ; class Nested { public int foo (){ return bar ; } } } V\u1edbi Kotlin , ta c\u0169ng c\u00f3 th\u1ec3 l\u00e0m t\u01b0\u01a1ng t\u1ef1: Kotlin class Outer { private val bar : Int = 1 class Nested { fun foo () = 2 } } val demo = Outer . Nested (). foo () // == 2 Tuy nhi\u00ean, khi khai b\u00e1o nh\u01b0 tr\u00ean, trong Kotlin , class Nested s\u1ebd kh\u00f4ng th\u1ec3 truy c\u1eadp \u0111\u1ebfn c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a class Outer ch\u1ee9a n\u00f3 nh\u01b0 trong Java . \u0110\u1ec3 l\u00e0m \u0111\u01b0\u1ee3c \u0111i\u1ec1u \u0111\u00f3, ta c\u1ea7n s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a inner trong Kotlin .","title":"1. Gi\u1edbi thi\u1ec7u"},{"location":"kotlin/kotlin_nested_class/#246-inner-class","text":"M\u1ed9t class c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c khai b\u00e1o v\u1edbi t\u1eeb kh\u00f3a inner c\u00f3 th\u1ec3 truy c\u1eadp \u0111\u1ebfn c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a class ch\u1ee9a n\u00f3. Inner class mang m\u1ed9t tham chi\u1ebfu \u0111\u1ebfn m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng c\u1ee7a class ch\u1ee9a n\u00f3: class Outer { private val bar : Int = 1 private var fooz : String = \"hello\" inner class Inner { fun foo () = bar fun baz () { this @Outer . fooz = \"hi\" } } } val demo = Outer (). Inner (). foo () // == 1 \u0110\u1ec3 tr\u1ecf \u0111\u1ebfn outer class, ta s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a this v\u1edbi @label nh\u01b0 \u0111\u00e3 n\u00f3i trong ph\u1ea7n Bi\u1ec3u th\u1ee9c this .","title":"2. Inner class"},{"location":"kotlin/kotlin_nested_class/#346-anonymous-inner-class-lop-con-vo-danh","text":"\u0110\u1ec3 kh\u1edfi t\u1ea1o anonymous inner class, ch\u00fang ta s\u1eed d\u1ee5ng [object expression]: textView ?. setOnClickListener ( object : View . OnClickListener { override fun onClick ( v : View ?) { //.... } }) N\u1ebfu object \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o l\u00e0 m\u1ed9t functional Java interface (m\u1ed9t interface ch\u1ec9 c\u00f3 duy nh\u1ea5t m\u1ed9t method), ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng lambda v\u00e0 khai b\u00e1o nh\u01b0 sau: val listener = View . OnClickListener { }","title":"3. Anonymous inner class (L\u1edbp con v\u00f4 danh)"},{"location":"kotlin/kotlin_property_field/","text":"1. Khai b\u00e1o property \u00b6 C\u00e1c class trong Kotlin c\u00f3 th\u1ec3 c\u00f3 c\u00e1c property . Ch\u00fang c\u00f3 th\u1ec3 khai b\u00e1o l\u00e0 c\u00e1c bi\u1ebfn - s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a var ho\u1eb7c c\u00e1c constant - s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a val . Java class Address { String name ; String street ; String city ; String state ; String zip ; } Kotlin class Address { var name : String = ... var street : String = ... var city : String = ... var state : String ? = ... var zip : String = ... } \u0110\u1ec3 s\u1eed d\u1ee5ng c\u00e1c property n\u00e0y, ch\u00fang ta ch\u1ec9 c\u1ea7n access \u0111\u1ebfn ch\u00fang b\u1eb1ng t\u00ean, ho\u1eb7c b\u1eb1ng c\u00e1c h\u00e0m getter/setter nh\u01b0 trong Java Java public Address copyAddress(Address address) { Address result = new Address(); result.setName(address.getName()); result.setStreet(address.getStreet()); //.... return result; } Kotlin fun copyAddress ( address : Address ): Address { val result = Address () // kh\u00f4ng c\u00f2n t\u1eeb kh\u00f3a 'new' trong Kotlin result . name = address . name //c\u00e1c h\u00e0m 'getter/setter' s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi, d\u00f9 nh\u00ecn tr\u00f4ng nh\u01b0 b\u1ea1n \u0111ang truy c\u1eadp tr\u1ef1c ti\u1ebfp v\u00e0o 'property' result . street = address . street // ... return result } 2. C\u00e1c h\u00e0m getter/setter \u00b6 C\u1ea5u tr\u00fac \u0111\u1ea7y \u0111\u1ee7 c\u1ee7a khai b\u00e1o property trong Kotlin l\u00e0: var < propertyName >[: < PropertyType >] [= < property_initializer >] [<getter>] [<setter>] Trong \u0111\u00f3, gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o, v\u00e0 c\u00e1c h\u00e0m getter/setter l\u00e0 kh\u00f4ng b\u1eaft bu\u1ed9c, ki\u1ec3u d\u1eef li\u1ec7u c\u0169ng l\u00e0 kh\u00f4ng b\u1eaft bu\u1ed9c n\u1ebfu n\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c suy ra t\u1eeb vi\u1ec7c kh\u1edfi t\u1ea1o (ho\u1eb7c t\u1eeb ki\u1ec3u c\u1ee7a m\u00e0 h\u00e0m getter tr\u1ea3 v\u1ec1, s\u1ebd \u0111\u01b0\u1ee3c n\u00f3i ph\u00eda sau). Tuy nhi\u00ean, \u0111\u1ec3 code \u0111\u01b0\u1ee3c trong s\u00e1ng, l\u1eddi khuy\u00ean l\u00e0 n\u00ean th\u00eam ki\u1ec3u c\u1ee7a thu\u1ed9c t\u00ednh khi khai b\u00e1o. var allByDefault : Int ? // compiler b\u00e1o l\u1ed7i v\u00ec vi\u1ec7c kh\u1edfi t\u1ea1o \u0111\u01b0\u1ee3c y\u00eau c\u1ea7u, c\u00e1c h\u00e0m 'getter/setter' m\u1eb7c \u0111\u1ecbnh \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh var initialized = 1 // ki\u1ec3u 'Int', h\u00e0m 'getter/setter' m\u1eb7c \u0111\u1ecbnh V\u1edbi c\u00e1c constant, vi\u1ec7c khai b\u00e1o s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a val v\u00e0 kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a h\u00e0m setter : val simple : Int ? // compiler b\u00e1o l\u1ed7i: y\u00eau c\u1ea7u vi\u1ec7c kh\u1edfi t\u1ea1o, 'getter' m\u1eb7c \u0111\u1ecbnh val inferredType = 1 // ki\u1ec3u 'Int', h\u00e0m 'getter' m\u1eb7c \u0111\u1ecbnh V\u1edbi c\u00e1c h\u00e0m getter/setter , n\u1ebfu kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a, c\u00e1c h\u00e0m getter/setter m\u1eb7c \u0111\u1ecbnh s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Ch\u00fang ta c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a c\u00e1c h\u00e0m n\u00e0y ngay sau vi\u1ec7c khai b\u00e1o c\u00e1c property . M\u1eb7c \u0111\u1ecbnh, t\u00ean c\u1ee7a param c\u1ee7a h\u00e0m setter l\u00e0 value . Tuy nhi\u00ean, b\u1ea1n c\u00f3 th\u1ec3 ch\u1ecdn m\u1ed9t c\u00e1i t\u00ean kh\u00e1c. N\u1ebfu th\u00edch! var isEmpty : Boolean get () { // return field // h\u00e0m 'getter' m\u1eb7c \u0111\u1ecbnh } // set ( value ) { field = value } var isEmpty : Boolean get () = this . size == 0 // h\u00e0m 'getter' t\u1ef1 \u0111\u1ecbnh ngh\u0129a set ( value ){ // print ( \"Setter: $value\" ) //h\u00e0m 'setter' t\u1ef1 \u0111\u1ecbnh ngh\u0129a field = value // } T\u1eeb Kotlin 1.1 , b\u1ea1n c\u00f3 th\u1ec3 b\u1ecf qua ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a property n\u1ebfu n\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c suy ra t\u1eeb ki\u1ec3u tr\u1ea3 v\u1ec1 c\u1ee7a h\u00e0m getter : val isEmpty get () = this . size == 0 // isEmpty s\u1ebd c\u00f3 ki\u1ec3u l\u00e0 Boolean Ngo\u00e0i ra, ta c\u0169ng c\u00f3 th\u1ec3 x\u00e1c \u0111\u1ecbnh visibility modifier c\u1ee7a h\u00e0m setter . L\u01b0u \u00fd: modifier c\u1ee7a setter ph\u1ea3i c\u00f3 ph\u1ea1m vi kh\u00f4ng \u0111\u01b0\u1ee3c l\u1edbn h\u01a1n ph\u1ea1m vi modifier c\u1ee7a property . V\u1edbi getter , ch\u00fang ta kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i modifier c\u1ee7a h\u00e0m getter b\u1edfi modifier c\u1ee7a getter ph\u1ea3i gi\u1ed1ng v\u1edbi modifier c\u1ee7a property . B\u1ea1n c\u0169ng c\u00f3 th\u1ec3 ch\u1ec9 x\u00e1c \u0111\u1ecbnh l\u1ea1i modifier c\u1ee7a h\u00e0m setter m\u00e0 kh\u00f4ng c\u1ea7n implement h\u00e0m \u0111\u00f3: var setterVisibility: String = \"abc\" private set // h\u00e0m 'setter' c\u00f3 modifier l\u00e0 'private' v\u00e0 vi\u1ec7c implement l\u00e0 m\u1eb7c \u0111\u1ecbnh 3. Backing field \u00b6 Trong m\u1ed9t VD \u1edf ph\u00eda tr\u00ean tr\u00ean, ta c\u00f3 th\u1ec3 th\u1ea5y m\u1ed9t bi\u1ebfn xu\u1ea5t hi\u1ec7n trong c\u00e1c h\u00e0m getter/setter t\u1ef1 \u0111\u1ecbnh ngh\u0129a, \u0111\u00f3 l\u00e0 field . L\u01b0u \u00fd, field ch\u1ec9 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng b\u00ean trong c\u00e1c h\u00e0m getter/setter v\u00e0 field s\u1ebd \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng gen cho property n\u1ebfu m\u1ed9t trong c\u00e1c h\u00e0m getter/setter tham chi\u1ebfu \u0111\u1ebfn n\u00f3. N\u1ebfu kh\u00f4ng, property s\u1ebd kh\u00f4ng c\u00f3 field . Nh\u01b0ng v\u00ec sao ph\u1ea3i d\u00f9ng field thay v\u00ec d\u00f9ng property m\u1ed9t c\u00e1ch tr\u1ef1c ti\u1ebfp nh\u01b0 th\u1ebf n\u00e0y: var isEmpty : Boolean get () = { return isEmpty } set ( value ){ isEmpty = value } Nh\u01b0 trong m\u1ed9t vd \u1edf tr\u00ean \u0111\u00e3 \u0111\u1ec1 c\u1eadp, khi b\u1ea1n access \u0111\u1ebfn m\u1ed9t property : val result = Address () result . name = address . name Khi n\u00e0y, th\u1ef1c ch\u1ea5t, h\u00e0m setter v\u00e0 getter c\u1ee7a property name s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi ch\u1ee9 kh\u00f4ng ph\u1ea3i b\u1ea1n \u0111ang access tr\u1ef1c ti\u1ebfp \u0111\u1ebfn name . B\u1edfi v\u1eady, trong c\u00e1c h\u00e0m getter/setter t\u1ef1 \u0111\u1ecbnh ngh\u0129a, n\u1ebfu s\u1eed d\u1ee5ng tr\u1ef1c ti\u1ebfp c\u00e1c property (vd h\u00e0m getter ), Kotlin s\u1ebd g\u1ecdi l\u1ea1i ch\u00ednh h\u00e0m getter \u0111\u00f3, t\u1eeb \u0111\u00f3 g\u00e2y ra tr\u00e0n b\u1ed9 nh\u1edb Stack - StackOverflowError . 4. Backing property \u00b6 N\u1ebfu b\u1ea1n kh\u00f4ng quen (ho\u1eb7c kh\u00f4ng th\u00edch) c\u00e1ch d\u00f9ng field \u1edf tr\u00ean, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng backing property. Vi\u1ec7c n\u00e0y t\u01b0\u01a1ng t\u1ef1 nh\u01b0 trong Java , v\u00e0 c\u00e1c h\u00e0m getter/ setter s\u1ebd \u0111\u01b0\u1ee3c t\u1ed1i \u01b0u \u0111\u1ec3 vi\u1ec7c tr\u00e0n b\u1ed9 nh\u1edb kh\u00f4ng x\u1ea3y ra. Tuy nhi\u00ean, vi\u1ec7c vi\u1ebft code s\u1ebd v\u1ea5t v\u1ea3 h\u01a1n, t\u1ea5t nhi\u00ean r\u1ed3i: private var _table : Map < String , Int >? = null public var table : Map < String , Int > get () { if ( _table == null ) { _table = HashMap () // Type parameters are inferred } return _table ?: throw AssertionError ( \"Set to null by another thread\" ) } set ( value ) { _table = value } Trong VD tr\u00ean, property m\u00e0 ch\u00fang ta s\u1eed d\u1ee5ng \u0111\u1ec3 l\u01b0u d\u1eef li\u1ec7u l\u00e0 _table c\u00f2n table ch\u1ec9 l\u00e0 c\u00e1ch th\u1ee9c \u0111\u1ec3 ch\u00fang ta truy c\u1eadp \u0111\u1ebfn _table . 5. Compile-time constant \u00b6 C\u00e1c thu\u1ed9c t\u00ednh m\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a ch\u00fang \u0111\u01b0\u1ee3c bi\u1ebfn \u0111\u1ebfn l\u00fac compile c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u l\u00e0 compile time constant, s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a const . Nh\u1eefng property \u0111\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c c\u1ea7n th\u1ecfa m\u00e3n nh\u01b0ng y\u00eau c\u1ea7u sau: L\u00e0 top-level property ho\u1eb7c l\u00e0 member c\u1ee7a m\u1ed9t object (object trong Kotlin l\u00e0 m\u1ed9t singleton, kh\u00f4ng ph\u1ea3i l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng) \u0110\u01b0\u1ee3c kh\u1edfi t\u1ea1o v\u1edbi ki\u1ec3u String ho\u1eb7c ki\u1ec3u nguy\u00ean th\u1ee7y(Int, Float, Char, Boolean...), kh\u00f4ng th\u1ec3 l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a Kh\u00f4ng \u0111\u01b0\u1ee3c c\u00f3 h\u00e0m getter t\u1ef1 \u0111\u1ecbnh ngh\u0129a const val SUBSYSTEM_DEPRECATED : String = \"This subsystem is deprecated\" @Deprecated ( SUBSYSTEM_DEPRECATED ) fun foo () { ... } 6. Late-initialized property (Kh\u1edfi t\u1ea1o ch\u1eadm c\u00e1c thu\u1ed9c t\u00ednh) \u00b6 B\u00ecnh th\u01b0\u1eddng, khi c\u00e1c property \u0111\u01b0\u1ee3c khai b\u00e1o trong class m\u00e0 thu\u1ed9c ki\u1ec3u non-null ph\u1ea3i \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o: tr\u1ef1c ti\u1ebfp ho\u1eb7c b\u1eb1ng constructor. Tuy nhi\u00ean, vi\u1ec7c n\u00e0y kh\u00f4ng \u0111\u01b0\u1ee3c ti\u1ec7n cho l\u1eafm. VD: property c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o th\u00f4ng qua Dependency injection ho\u1eb7c \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u00ean trong method setup c\u1ee7a m\u1ed9t unit tets ho\u1eb7c \u0111\u01b0\u1ee3c g\u00e1n trong m\u1ed9t method kh\u00e1c b\u00ean trong class. B\u1edfi v\u1eady, Kotlin cung c\u1ea5p c\u01a1 ch\u1ebf cho ph\u00e9p delay vi\u1ec7c kh\u1edfi t\u1ea1o: t\u1eeb kh\u00f3a lateinit class Teacher ( var name : String , var age : Int ) { lateinit var className : String } Y\u00eau c\u1ea7u \u0111\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c t\u1eeb kh\u00f3a lateinit l\u00e0: Ph\u1ea3i s\u1eed d\u1ee5ng v\u1edbi var property \u0111\u01b0\u1ee3c khai b\u00e1o b\u00ean trong m\u1ed9t class nh\u01b0ng kh\u00f4ng ph\u1ea3i l\u00e0 trong primary constructor. - property n\u00e0y kh\u00f4ng \u0111\u01b0\u1ee3c c\u00f3 c\u00e1c h\u00e0m getter/setter t\u1ef1 \u0111\u1ecbnh ngh\u0129a m\u00e0 ph\u1ea3i d\u00f9ng c\u00e1c h\u00e0m m\u1eb7c \u0111\u1ecbnh Ki\u1ec3u c\u1ee7a c\u00e1c property n\u00e0y ph\u1ea3i l\u00e0 non-null v\u00e0 kh\u00f4ng th\u1ec3 l\u00e0 ki\u1ec3u d\u1eef li\u1ec7u nguy\u00ean th\u1ee7y(Int, Float,Char, Boolean...) N\u1ebfu truy c\u1eadp c\u00e1c property n\u00e0y khi ch\u00fang ch\u01b0a \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o, xin ch\u00fac m\u1eebng: kotlin.UninitializedPropertyAccessException s\u1ebd xu\u1ea5t hi\u1ec7n. 7. Overriding property (Ghi \u0111\u00e8 c\u00e1c property ) \u00b6 Trong Kotlin , ch\u00fang ta c\u00f3 th\u1ec3 ghi \u0111\u00e8 c\u00e1c property b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a override t\u01b0\u01a1ng t\u1ef1 nh\u01b0 override c\u00e1c method. open class Foo { open val x : Int get { ... } } class Bar1 : Foo () { override val x : Int = ... } \u0110\u1eb7c bi\u1ec7t, ch\u00fang ta c\u00f3 th\u1ec3 override l\u1ea1i m\u1ed9t val property b\u1eb1ng m\u1ed9t var property, nh\u01b0ng kh\u00f4ng th\u1ec3 l\u00e0m \u0111i\u1ec1u ng\u01b0\u1ee3c l\u1ea1i. \u0110i\u1ec1u n\u00e0y \u0111\u01b0\u1ee3c ph\u00e9p b\u1edfi v\u00ec m\u1ed9t val property \u0111\u00e3 khai b\u00e1o h\u00e0m getter , v\u00e0 khi override l\u1ea1i n\u00f3 l\u00e0 var , ch\u00fang ta c\u1ea7n vi\u1ebft th\u00eam h\u00e0m setter trong class con. T\u1eeb kh\u00f3a override c\u0169ng c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng ngay trong primary constructor: interface Foo { val count : Int } class Bar1 ( override val count : Int ) : Foo class Bar2 : Foo { override var count : Int = 0 }","title":"Kotlin Property v\u00e0 field"},{"location":"kotlin/kotlin_property_field/#146-khai-bao-property","text":"C\u00e1c class trong Kotlin c\u00f3 th\u1ec3 c\u00f3 c\u00e1c property . Ch\u00fang c\u00f3 th\u1ec3 khai b\u00e1o l\u00e0 c\u00e1c bi\u1ebfn - s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a var ho\u1eb7c c\u00e1c constant - s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a val . Java class Address { String name ; String street ; String city ; String state ; String zip ; } Kotlin class Address { var name : String = ... var street : String = ... var city : String = ... var state : String ? = ... var zip : String = ... } \u0110\u1ec3 s\u1eed d\u1ee5ng c\u00e1c property n\u00e0y, ch\u00fang ta ch\u1ec9 c\u1ea7n access \u0111\u1ebfn ch\u00fang b\u1eb1ng t\u00ean, ho\u1eb7c b\u1eb1ng c\u00e1c h\u00e0m getter/setter nh\u01b0 trong Java Java public Address copyAddress(Address address) { Address result = new Address(); result.setName(address.getName()); result.setStreet(address.getStreet()); //.... return result; } Kotlin fun copyAddress ( address : Address ): Address { val result = Address () // kh\u00f4ng c\u00f2n t\u1eeb kh\u00f3a 'new' trong Kotlin result . name = address . name //c\u00e1c h\u00e0m 'getter/setter' s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi, d\u00f9 nh\u00ecn tr\u00f4ng nh\u01b0 b\u1ea1n \u0111ang truy c\u1eadp tr\u1ef1c ti\u1ebfp v\u00e0o 'property' result . street = address . street // ... return result }","title":"1. Khai b\u00e1o\u00a0property"},{"location":"kotlin/kotlin_property_field/#246-cac-ham-gettersetter","text":"C\u1ea5u tr\u00fac \u0111\u1ea7y \u0111\u1ee7 c\u1ee7a khai b\u00e1o property trong Kotlin l\u00e0: var < propertyName >[: < PropertyType >] [= < property_initializer >] [<getter>] [<setter>] Trong \u0111\u00f3, gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o, v\u00e0 c\u00e1c h\u00e0m getter/setter l\u00e0 kh\u00f4ng b\u1eaft bu\u1ed9c, ki\u1ec3u d\u1eef li\u1ec7u c\u0169ng l\u00e0 kh\u00f4ng b\u1eaft bu\u1ed9c n\u1ebfu n\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c suy ra t\u1eeb vi\u1ec7c kh\u1edfi t\u1ea1o (ho\u1eb7c t\u1eeb ki\u1ec3u c\u1ee7a m\u00e0 h\u00e0m getter tr\u1ea3 v\u1ec1, s\u1ebd \u0111\u01b0\u1ee3c n\u00f3i ph\u00eda sau). Tuy nhi\u00ean, \u0111\u1ec3 code \u0111\u01b0\u1ee3c trong s\u00e1ng, l\u1eddi khuy\u00ean l\u00e0 n\u00ean th\u00eam ki\u1ec3u c\u1ee7a thu\u1ed9c t\u00ednh khi khai b\u00e1o. var allByDefault : Int ? // compiler b\u00e1o l\u1ed7i v\u00ec vi\u1ec7c kh\u1edfi t\u1ea1o \u0111\u01b0\u1ee3c y\u00eau c\u1ea7u, c\u00e1c h\u00e0m 'getter/setter' m\u1eb7c \u0111\u1ecbnh \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh var initialized = 1 // ki\u1ec3u 'Int', h\u00e0m 'getter/setter' m\u1eb7c \u0111\u1ecbnh V\u1edbi c\u00e1c constant, vi\u1ec7c khai b\u00e1o s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a val v\u00e0 kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a h\u00e0m setter : val simple : Int ? // compiler b\u00e1o l\u1ed7i: y\u00eau c\u1ea7u vi\u1ec7c kh\u1edfi t\u1ea1o, 'getter' m\u1eb7c \u0111\u1ecbnh val inferredType = 1 // ki\u1ec3u 'Int', h\u00e0m 'getter' m\u1eb7c \u0111\u1ecbnh V\u1edbi c\u00e1c h\u00e0m getter/setter , n\u1ebfu kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a, c\u00e1c h\u00e0m getter/setter m\u1eb7c \u0111\u1ecbnh s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Ch\u00fang ta c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a c\u00e1c h\u00e0m n\u00e0y ngay sau vi\u1ec7c khai b\u00e1o c\u00e1c property . M\u1eb7c \u0111\u1ecbnh, t\u00ean c\u1ee7a param c\u1ee7a h\u00e0m setter l\u00e0 value . Tuy nhi\u00ean, b\u1ea1n c\u00f3 th\u1ec3 ch\u1ecdn m\u1ed9t c\u00e1i t\u00ean kh\u00e1c. N\u1ebfu th\u00edch! var isEmpty : Boolean get () { // return field // h\u00e0m 'getter' m\u1eb7c \u0111\u1ecbnh } // set ( value ) { field = value } var isEmpty : Boolean get () = this . size == 0 // h\u00e0m 'getter' t\u1ef1 \u0111\u1ecbnh ngh\u0129a set ( value ){ // print ( \"Setter: $value\" ) //h\u00e0m 'setter' t\u1ef1 \u0111\u1ecbnh ngh\u0129a field = value // } T\u1eeb Kotlin 1.1 , b\u1ea1n c\u00f3 th\u1ec3 b\u1ecf qua ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a property n\u1ebfu n\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c suy ra t\u1eeb ki\u1ec3u tr\u1ea3 v\u1ec1 c\u1ee7a h\u00e0m getter : val isEmpty get () = this . size == 0 // isEmpty s\u1ebd c\u00f3 ki\u1ec3u l\u00e0 Boolean Ngo\u00e0i ra, ta c\u0169ng c\u00f3 th\u1ec3 x\u00e1c \u0111\u1ecbnh visibility modifier c\u1ee7a h\u00e0m setter . L\u01b0u \u00fd: modifier c\u1ee7a setter ph\u1ea3i c\u00f3 ph\u1ea1m vi kh\u00f4ng \u0111\u01b0\u1ee3c l\u1edbn h\u01a1n ph\u1ea1m vi modifier c\u1ee7a property . V\u1edbi getter , ch\u00fang ta kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i modifier c\u1ee7a h\u00e0m getter b\u1edfi modifier c\u1ee7a getter ph\u1ea3i gi\u1ed1ng v\u1edbi modifier c\u1ee7a property . B\u1ea1n c\u0169ng c\u00f3 th\u1ec3 ch\u1ec9 x\u00e1c \u0111\u1ecbnh l\u1ea1i modifier c\u1ee7a h\u00e0m setter m\u00e0 kh\u00f4ng c\u1ea7n implement h\u00e0m \u0111\u00f3: var setterVisibility: String = \"abc\" private set // h\u00e0m 'setter' c\u00f3 modifier l\u00e0 'private' v\u00e0 vi\u1ec7c implement l\u00e0 m\u1eb7c \u0111\u1ecbnh","title":"2. C\u00e1c h\u00e0m\u00a0getter/setter"},{"location":"kotlin/kotlin_property_field/#346-backing-field","text":"Trong m\u1ed9t VD \u1edf ph\u00eda tr\u00ean tr\u00ean, ta c\u00f3 th\u1ec3 th\u1ea5y m\u1ed9t bi\u1ebfn xu\u1ea5t hi\u1ec7n trong c\u00e1c h\u00e0m getter/setter t\u1ef1 \u0111\u1ecbnh ngh\u0129a, \u0111\u00f3 l\u00e0 field . L\u01b0u \u00fd, field ch\u1ec9 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng b\u00ean trong c\u00e1c h\u00e0m getter/setter v\u00e0 field s\u1ebd \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng gen cho property n\u1ebfu m\u1ed9t trong c\u00e1c h\u00e0m getter/setter tham chi\u1ebfu \u0111\u1ebfn n\u00f3. N\u1ebfu kh\u00f4ng, property s\u1ebd kh\u00f4ng c\u00f3 field . Nh\u01b0ng v\u00ec sao ph\u1ea3i d\u00f9ng field thay v\u00ec d\u00f9ng property m\u1ed9t c\u00e1ch tr\u1ef1c ti\u1ebfp nh\u01b0 th\u1ebf n\u00e0y: var isEmpty : Boolean get () = { return isEmpty } set ( value ){ isEmpty = value } Nh\u01b0 trong m\u1ed9t vd \u1edf tr\u00ean \u0111\u00e3 \u0111\u1ec1 c\u1eadp, khi b\u1ea1n access \u0111\u1ebfn m\u1ed9t property : val result = Address () result . name = address . name Khi n\u00e0y, th\u1ef1c ch\u1ea5t, h\u00e0m setter v\u00e0 getter c\u1ee7a property name s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi ch\u1ee9 kh\u00f4ng ph\u1ea3i b\u1ea1n \u0111ang access tr\u1ef1c ti\u1ebfp \u0111\u1ebfn name . B\u1edfi v\u1eady, trong c\u00e1c h\u00e0m getter/setter t\u1ef1 \u0111\u1ecbnh ngh\u0129a, n\u1ebfu s\u1eed d\u1ee5ng tr\u1ef1c ti\u1ebfp c\u00e1c property (vd h\u00e0m getter ), Kotlin s\u1ebd g\u1ecdi l\u1ea1i ch\u00ednh h\u00e0m getter \u0111\u00f3, t\u1eeb \u0111\u00f3 g\u00e2y ra tr\u00e0n b\u1ed9 nh\u1edb Stack - StackOverflowError .","title":"3. Backing field"},{"location":"kotlin/kotlin_property_field/#446-backing-property","text":"N\u1ebfu b\u1ea1n kh\u00f4ng quen (ho\u1eb7c kh\u00f4ng th\u00edch) c\u00e1ch d\u00f9ng field \u1edf tr\u00ean, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng backing property. Vi\u1ec7c n\u00e0y t\u01b0\u01a1ng t\u1ef1 nh\u01b0 trong Java , v\u00e0 c\u00e1c h\u00e0m getter/ setter s\u1ebd \u0111\u01b0\u1ee3c t\u1ed1i \u01b0u \u0111\u1ec3 vi\u1ec7c tr\u00e0n b\u1ed9 nh\u1edb kh\u00f4ng x\u1ea3y ra. Tuy nhi\u00ean, vi\u1ec7c vi\u1ebft code s\u1ebd v\u1ea5t v\u1ea3 h\u01a1n, t\u1ea5t nhi\u00ean r\u1ed3i: private var _table : Map < String , Int >? = null public var table : Map < String , Int > get () { if ( _table == null ) { _table = HashMap () // Type parameters are inferred } return _table ?: throw AssertionError ( \"Set to null by another thread\" ) } set ( value ) { _table = value } Trong VD tr\u00ean, property m\u00e0 ch\u00fang ta s\u1eed d\u1ee5ng \u0111\u1ec3 l\u01b0u d\u1eef li\u1ec7u l\u00e0 _table c\u00f2n table ch\u1ec9 l\u00e0 c\u00e1ch th\u1ee9c \u0111\u1ec3 ch\u00fang ta truy c\u1eadp \u0111\u1ebfn _table .","title":"4. Backing property"},{"location":"kotlin/kotlin_property_field/#546-compile-time-constant","text":"C\u00e1c thu\u1ed9c t\u00ednh m\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a ch\u00fang \u0111\u01b0\u1ee3c bi\u1ebfn \u0111\u1ebfn l\u00fac compile c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u l\u00e0 compile time constant, s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a const . Nh\u1eefng property \u0111\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c c\u1ea7n th\u1ecfa m\u00e3n nh\u01b0ng y\u00eau c\u1ea7u sau: L\u00e0 top-level property ho\u1eb7c l\u00e0 member c\u1ee7a m\u1ed9t object (object trong Kotlin l\u00e0 m\u1ed9t singleton, kh\u00f4ng ph\u1ea3i l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng) \u0110\u01b0\u1ee3c kh\u1edfi t\u1ea1o v\u1edbi ki\u1ec3u String ho\u1eb7c ki\u1ec3u nguy\u00ean th\u1ee7y(Int, Float, Char, Boolean...), kh\u00f4ng th\u1ec3 l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a Kh\u00f4ng \u0111\u01b0\u1ee3c c\u00f3 h\u00e0m getter t\u1ef1 \u0111\u1ecbnh ngh\u0129a const val SUBSYSTEM_DEPRECATED : String = \"This subsystem is deprecated\" @Deprecated ( SUBSYSTEM_DEPRECATED ) fun foo () { ... }","title":"5. Compile-time constant"},{"location":"kotlin/kotlin_property_field/#646-late-initialized-property-khoi-tao-cham-cac-thuoc-tinh","text":"B\u00ecnh th\u01b0\u1eddng, khi c\u00e1c property \u0111\u01b0\u1ee3c khai b\u00e1o trong class m\u00e0 thu\u1ed9c ki\u1ec3u non-null ph\u1ea3i \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o: tr\u1ef1c ti\u1ebfp ho\u1eb7c b\u1eb1ng constructor. Tuy nhi\u00ean, vi\u1ec7c n\u00e0y kh\u00f4ng \u0111\u01b0\u1ee3c ti\u1ec7n cho l\u1eafm. VD: property c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o th\u00f4ng qua Dependency injection ho\u1eb7c \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u00ean trong method setup c\u1ee7a m\u1ed9t unit tets ho\u1eb7c \u0111\u01b0\u1ee3c g\u00e1n trong m\u1ed9t method kh\u00e1c b\u00ean trong class. B\u1edfi v\u1eady, Kotlin cung c\u1ea5p c\u01a1 ch\u1ebf cho ph\u00e9p delay vi\u1ec7c kh\u1edfi t\u1ea1o: t\u1eeb kh\u00f3a lateinit class Teacher ( var name : String , var age : Int ) { lateinit var className : String } Y\u00eau c\u1ea7u \u0111\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c t\u1eeb kh\u00f3a lateinit l\u00e0: Ph\u1ea3i s\u1eed d\u1ee5ng v\u1edbi var property \u0111\u01b0\u1ee3c khai b\u00e1o b\u00ean trong m\u1ed9t class nh\u01b0ng kh\u00f4ng ph\u1ea3i l\u00e0 trong primary constructor. - property n\u00e0y kh\u00f4ng \u0111\u01b0\u1ee3c c\u00f3 c\u00e1c h\u00e0m getter/setter t\u1ef1 \u0111\u1ecbnh ngh\u0129a m\u00e0 ph\u1ea3i d\u00f9ng c\u00e1c h\u00e0m m\u1eb7c \u0111\u1ecbnh Ki\u1ec3u c\u1ee7a c\u00e1c property n\u00e0y ph\u1ea3i l\u00e0 non-null v\u00e0 kh\u00f4ng th\u1ec3 l\u00e0 ki\u1ec3u d\u1eef li\u1ec7u nguy\u00ean th\u1ee7y(Int, Float,Char, Boolean...) N\u1ebfu truy c\u1eadp c\u00e1c property n\u00e0y khi ch\u00fang ch\u01b0a \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o, xin ch\u00fac m\u1eebng: kotlin.UninitializedPropertyAccessException s\u1ebd xu\u1ea5t hi\u1ec7n.","title":"6. Late-initialized property (Kh\u1edfi t\u1ea1o ch\u1eadm c\u00e1c thu\u1ed9c t\u00ednh)"},{"location":"kotlin/kotlin_property_field/#746-overriding-property-ghi-e-cac-property","text":"Trong Kotlin , ch\u00fang ta c\u00f3 th\u1ec3 ghi \u0111\u00e8 c\u00e1c property b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a override t\u01b0\u01a1ng t\u1ef1 nh\u01b0 override c\u00e1c method. open class Foo { open val x : Int get { ... } } class Bar1 : Foo () { override val x : Int = ... } \u0110\u1eb7c bi\u1ec7t, ch\u00fang ta c\u00f3 th\u1ec3 override l\u1ea1i m\u1ed9t val property b\u1eb1ng m\u1ed9t var property, nh\u01b0ng kh\u00f4ng th\u1ec3 l\u00e0m \u0111i\u1ec1u ng\u01b0\u1ee3c l\u1ea1i. \u0110i\u1ec1u n\u00e0y \u0111\u01b0\u1ee3c ph\u00e9p b\u1edfi v\u00ec m\u1ed9t val property \u0111\u00e3 khai b\u00e1o h\u00e0m getter , v\u00e0 khi override l\u1ea1i n\u00f3 l\u00e0 var , ch\u00fang ta c\u1ea7n vi\u1ebft th\u00eam h\u00e0m setter trong class con. T\u1eeb kh\u00f3a override c\u0169ng c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng ngay trong primary constructor: interface Foo { val count : Int } class Bar1 ( override val count : Int ) : Foo class Bar2 : Foo { override var count : Int = 0 }","title":"7. Overriding property (Ghi \u0111\u00e8 c\u00e1c\u00a0property)"},{"location":"kotlin/kotlin_visibility_modifiers/","text":"Class, object, interface, constructor, function, property(v\u00e0 function set() c\u1ee7a n\u00f3) \u0111\u1ec1u c\u00f3 visibility modifiers (hay th\u01b0\u1eddng g\u1ecdi l\u00e0 access modifiers) .(function get() c\u1ee7a property lu\u00f4n c\u00f3 visibility modifier gi\u1ed1ng v\u1edbi property). Kotlin c\u00f3 4 visibility modifiers: private , protected , internal v\u00e0 public . N\u1ebfu kh\u00f4ng x\u00e1c \u0111\u1ecbnh r\u00f5 r\u00e0ng visibility modifier th\u00ec m\u1eb7c \u0111\u1ecbnh s\u1ebd l\u00e0 public . Packages \u00b6 Function, property, class, object v\u00e0 interface \u0111\u1ec1u c\u00f3 th\u1ec3 khai b\u00e1o \u1edf m\u1ee9c \"top-level\" (\u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 n\u00f3 kh\u00f4ng \u1edf b\u00ean trong b\u1ea5t c\u1ee9 th\u00e0nh ph\u1ea7n n\u00e0o). V\u00ed d\u1ee5 nh\u01b0 trong package (\u0111\u1ea1i di\u1ec7n cho \u0111\u01b0\u1eddng d\u1eabn \u0111\u1ebfn file): // file name: example.kt package foo fun baz () {} class Bar {} N\u1ebfu kh\u00f4ng x\u00e1c \u0111\u1ecbnh r\u00f5 r\u00e0ng visibility modifier th\u00ec m\u1eb7c \u0111\u1ecbnh s\u1ebd l\u00e0 public . \u0110i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng n\u00f3 \u1edf b\u1ea5t k\u00ec \u0111\u00e2u. N\u1ebfu khai b\u00e1o l\u00e0 private , n\u00f3 ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u1edf trong file m\u00e0 n\u00f3 khai b\u00e1o. N\u1ebfu khai b\u00e1o l\u00e0 internal , n\u00f3 ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u1edf c\u00e1c n\u01a1i c\u00f9ng module . protected kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng khi khai b\u00e1o \u1edf m\u1ee9c \"top-level\". V\u00ed d\u1ee5: // file name: example.kt package foo private fun foo () {} // visible inside example.kt public var bar : Int = 5 // property is visible everywhere private set // setter is visible only in example.kt internal val baz = 6 // visible inside the same module Classes v\u00e0 Interfaces \u00b6 \u0110\u1ed1i v\u1edbi c\u00e1c th\u00e0nh ph\u1ea7n khai b\u00e1o \u1edf trong Class : private ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong class \u0111\u00f3 (kh\u00f4ng th\u1ec3 truy c\u1eadp qua instance c\u1ee7a class \u0111\u00f3) protected gi\u1ed1ng v\u1edbi private + c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u1edf trong c\u00e1c subclass (c\u00e1c class k\u1ebf th\u1eeba n\u00f3). internal kh\u1ea3 n\u0103ng truy c\u1eadp r\u1ed9ng h\u01a1n 2 lo\u1ea1i tr\u00ean v\u00e0 \u0111\u01b0\u1ee3c truy c\u1eadp b\u1edfi c\u00e1c instance c\u1ee7a class khai b\u00e1o n\u00f3 (c\u00e1c instance v\u00e0 n\u01a1i khai b\u00e1o class thu\u1ed9c c\u00f9ng module) public r\u1ed9ng nh\u1ea5t v\u00e0 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u1edf b\u1ea5t k\u00ec \u0111\u00e2u th\u00f4ng qua instance khai b\u00e1o n\u00f3. V\u00ed d\u1ee5: open class Outer { private val a = 1 protected open val b = 2 internal val c = 3 val d = 4 // public by default protected class Nested { public val e : Int = 5 } } class Subclass : Outer () { // a is not visible // b, c and d are visible // Nested and e are visible override val b = 5 // 'b' is protected } class Unrelated ( o : Outer ) { // o.a, o.b are not visible // o.c and o.d are visible (same module) // Outer.Nested is not visible, and Nested::e is not visible either } Constructors \u00b6 \u0110\u1ec3 x\u00e1c \u0111\u1ecbnh r\u00f5 visibility c\u1ee7a primary constructor, s\u1eed d\u1ee5ng c\u00fa ph\u00e1p d\u01b0\u1edbi \u0111\u00e2y(ch\u00fa \u00fd khi x\u00e1c \u0111\u1ecbnh visibility ph\u1ea3i s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a constructor , b\u00ecnh th\u01b0\u1eddng kh\u00f4ng c\u00f3 visibility modifier ho\u1eb7c annotation th\u00ec constructor c\u00f3 th\u1ec3 b\u1ecf qua): class C private constructor ( a : Int ) { ... } M\u1eb7c \u0111\u1ecbnh c\u00e1c constructor l\u00e0 public . Local declarations \u00b6 Local variables, functions v\u00e0 class kh\u00f4ng c\u00f3 visibility modifier Modules \u00b6 internal visibility modifier c\u00f3 th\u1ec3 truy c\u1eadp n\u1ebfu c\u00f9ng module. Chi ti\u1ebft h\u01a1n th\u00ec module l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c file Kotlin \u0111\u01b0\u1ee3c complie c\u00f9ng nhau nh\u01b0: Intellij IDEA module Maven ho\u1eb7c Gradle project","title":"Kotlin Visibility Modifiers"},{"location":"kotlin/kotlin_visibility_modifiers/#packages","text":"Function, property, class, object v\u00e0 interface \u0111\u1ec1u c\u00f3 th\u1ec3 khai b\u00e1o \u1edf m\u1ee9c \"top-level\" (\u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 n\u00f3 kh\u00f4ng \u1edf b\u00ean trong b\u1ea5t c\u1ee9 th\u00e0nh ph\u1ea7n n\u00e0o). V\u00ed d\u1ee5 nh\u01b0 trong package (\u0111\u1ea1i di\u1ec7n cho \u0111\u01b0\u1eddng d\u1eabn \u0111\u1ebfn file): // file name: example.kt package foo fun baz () {} class Bar {} N\u1ebfu kh\u00f4ng x\u00e1c \u0111\u1ecbnh r\u00f5 r\u00e0ng visibility modifier th\u00ec m\u1eb7c \u0111\u1ecbnh s\u1ebd l\u00e0 public . \u0110i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng n\u00f3 \u1edf b\u1ea5t k\u00ec \u0111\u00e2u. N\u1ebfu khai b\u00e1o l\u00e0 private , n\u00f3 ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u1edf trong file m\u00e0 n\u00f3 khai b\u00e1o. N\u1ebfu khai b\u00e1o l\u00e0 internal , n\u00f3 ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u1edf c\u00e1c n\u01a1i c\u00f9ng module . protected kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng khi khai b\u00e1o \u1edf m\u1ee9c \"top-level\". V\u00ed d\u1ee5: // file name: example.kt package foo private fun foo () {} // visible inside example.kt public var bar : Int = 5 // property is visible everywhere private set // setter is visible only in example.kt internal val baz = 6 // visible inside the same module","title":"Packages"},{"location":"kotlin/kotlin_visibility_modifiers/#classes-va-interfaces","text":"\u0110\u1ed1i v\u1edbi c\u00e1c th\u00e0nh ph\u1ea7n khai b\u00e1o \u1edf trong Class : private ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong class \u0111\u00f3 (kh\u00f4ng th\u1ec3 truy c\u1eadp qua instance c\u1ee7a class \u0111\u00f3) protected gi\u1ed1ng v\u1edbi private + c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u1edf trong c\u00e1c subclass (c\u00e1c class k\u1ebf th\u1eeba n\u00f3). internal kh\u1ea3 n\u0103ng truy c\u1eadp r\u1ed9ng h\u01a1n 2 lo\u1ea1i tr\u00ean v\u00e0 \u0111\u01b0\u1ee3c truy c\u1eadp b\u1edfi c\u00e1c instance c\u1ee7a class khai b\u00e1o n\u00f3 (c\u00e1c instance v\u00e0 n\u01a1i khai b\u00e1o class thu\u1ed9c c\u00f9ng module) public r\u1ed9ng nh\u1ea5t v\u00e0 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u1edf b\u1ea5t k\u00ec \u0111\u00e2u th\u00f4ng qua instance khai b\u00e1o n\u00f3. V\u00ed d\u1ee5: open class Outer { private val a = 1 protected open val b = 2 internal val c = 3 val d = 4 // public by default protected class Nested { public val e : Int = 5 } } class Subclass : Outer () { // a is not visible // b, c and d are visible // Nested and e are visible override val b = 5 // 'b' is protected } class Unrelated ( o : Outer ) { // o.a, o.b are not visible // o.c and o.d are visible (same module) // Outer.Nested is not visible, and Nested::e is not visible either }","title":"Classes v\u00e0 Interfaces"},{"location":"kotlin/kotlin_visibility_modifiers/#constructors","text":"\u0110\u1ec3 x\u00e1c \u0111\u1ecbnh r\u00f5 visibility c\u1ee7a primary constructor, s\u1eed d\u1ee5ng c\u00fa ph\u00e1p d\u01b0\u1edbi \u0111\u00e2y(ch\u00fa \u00fd khi x\u00e1c \u0111\u1ecbnh visibility ph\u1ea3i s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a constructor , b\u00ecnh th\u01b0\u1eddng kh\u00f4ng c\u00f3 visibility modifier ho\u1eb7c annotation th\u00ec constructor c\u00f3 th\u1ec3 b\u1ecf qua): class C private constructor ( a : Int ) { ... } M\u1eb7c \u0111\u1ecbnh c\u00e1c constructor l\u00e0 public .","title":"Constructors"},{"location":"kotlin/kotlin_visibility_modifiers/#local-declarations","text":"Local variables, functions v\u00e0 class kh\u00f4ng c\u00f3 visibility modifier","title":"Local declarations"},{"location":"kotlin/kotlin_visibility_modifiers/#modules","text":"internal visibility modifier c\u00f3 th\u1ec3 truy c\u1eadp n\u1ebfu c\u00f9ng module. Chi ti\u1ebft h\u01a1n th\u00ec module l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c file Kotlin \u0111\u01b0\u1ee3c complie c\u00f9ng nhau nh\u01b0: Intellij IDEA module Maven ho\u1eb7c Gradle project","title":"Modules"}]}