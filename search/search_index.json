{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Flutter \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Flutter"},{"location":"#flutter","text":"For full documentation visit mkdocs.org .","title":"Flutter"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"dart_core/","text":"Trong b\u00e0i vi\u1ebft Dart Home Page m\u00ecnh \u0111\u00e3 h\u01b0\u1edbng d\u1eabn c\u00e1c b\u1ea1n c\u00e0i \u0111\u1eb7t m\u00f4i tr\u01b0\u1eddng v\u00e0 setup c\u00e1c ki\u1ec3u d\u1ef1 \u00e1n Dart tr\u00ean Intellij IDEA. \u1ede b\u00e0i vi\u1ebft n\u00e0y m\u00ecnh s\u1ebd m\u00f4 t\u1ea3 chi ti\u1ebft v\u1ec1 c\u00fa ph\u00e1p c\u0169ng nh\u01b0 c\u00e1c t\u00ednh n\u0103ng c\u1ee7a Dart . N\u1ebfu c\u00e1c b\u1ea1n v\u1eabn ch\u01b0a s\u1eb5n s\u00e0ng c\u00e0i Dart SDK l\u00ean m\u00e1y t\u00ednh th\u00ec d\u00f9ng t\u1ea1m Dartpad \u0111\u1ec3 ch\u1ea1y th\u1eed code nh\u00e9 B\u1ea5m v\u00e0o n\u00fat \u0111\u1ec3 compile v\u00e0 run code. // Define a function. printInteger ( int aNumber ) { print ( 'The number is $ aNumber .' ); // Print to console. } // This is where the app starts executing. main () { var number = 42 ; // Declare and initialize a variable. printInteger ( number ); // Call a function. } Important concepts \u00b6 Khi b\u1ea1n code Dart language, h\u00e3y lu\u00f4n ghi nh\u1edb nh\u1eefng kh\u00e1i ni\u1ec7m sau trong \u0111\u1ea7u: M\u1ecdi th\u1ee9 b\u1ea1n g\u00e1n v\u00e0o c\u00e1c bi\u1ebfn (variable) \u0111\u1ec1u l\u00e0 m\u1ed9t object , v\u00e0 m\u1ed7i object l\u00e0 m\u1ed9t instance c\u1ee7a class . Ngay c\u1ea3 numbers, functions, v\u00e0 null c\u0169ng l\u00e0 c\u00e1c objects . T\u1ea5t c\u1ea3 objects \u0111\u01b0\u1ee3c k\u1ebf th\u1eeba t\u1eeb [Object][] class. M\u1eb7c d\u00f9 Dart l\u00e0 ng\u00f4n ng\u1eef strongly typed (ch\u00fa tr\u1ecdng v\u00e0o ki\u1ec3u d\u1eef li\u1ec7u), nh\u01b0ng type annotations l\u1ea1i l\u00e0 tu\u1ef3 ch\u1ecdn v\u00ec Dart c\u00f3 th\u1ec3 t\u1ef1 suy ra ki\u1ec3u d\u1ef1a v\u00e0o gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn. V\u00ed d\u1ee5 trong \u0111o\u1ea1n code tr\u00ean, number s\u1ebd mang ki\u1ec3u int . Khi b\u1ea1n kh\u00f4ng mong \u0111\u1ee3i m\u1ed9t ki\u1ec3u nh\u1ea5t \u0111\u1ecbnh n\u00e0o, h\u00e3y s\u1eed d\u1ee5ng ki\u1ec3u dynamic . Dart h\u1ed7 tr\u1ee3 generic types, v\u00ed d\u1ee5 nh\u01b0 List<int> (m\u1ed9t danh s\u00e1ch c\u00e1c s\u1ed1 integers) ho\u1eb7c List<dynamic> (m\u1ed9t danh s\u00e1ch c\u00e1c objects mang ki\u1ec3u b\u1ea5t k\u1ef3). Dart h\u1ed7 tr\u1ee3 top-level functions (v\u00ed d\u1ee5 nh\u01b0 main() ), c\u0169ng nh\u01b0 c\u00e1c functions g\u1eafn li\u1ec1n v\u1edbi m\u1ed9t class ho\u1eb7c object (t\u01b0\u01a1ng \u1ee9ng v\u1edbi static v\u00e0 instance methods ). B\u1ea1n c\u0169ng c\u00f3 th\u1ec3 t\u1ea1o ra functions b\u00ean trong functions (g\u1ecdi l\u00e0 nested ho\u1eb7c local functions ). T\u01b0\u01a1ng t\u1ef1, Dart h\u1ed7 tr\u1ee3 top-level variables , c\u0169ng nh\u01b0 c\u00e1c variables g\u1eafn li\u1ec1n v\u1edbi m\u1ed9t class ho\u1eb7c object (st\u01b0\u01a1ng \u1ee9ng v\u1edbi static v\u00e0 instance variables ). Instance variables \u0111\u00f4i l\u00fac \u0111\u01b0\u1ee3c bi\u1ebft t\u1edbi v\u1edbi t\u00ean g\u1ecdi fields ho\u1eb7c properties . Kh\u00f4ng gi\u1ed1ng v\u1edbi Java, Dart kh\u00f4ng c\u00f3 keywords public , protected , private . N\u1ebfu m\u1ed9t bi\u1ebfn (identifier) b\u1eaft \u0111\u1ea7u v\u1edbi d\u1ea5u underscore (_), N\u00f3 s\u1ebd l\u00e0 private trong library c\u1ee7a n\u00f3 (V\u00ed d\u1ee5 khi b\u1ea1n import th\u01b0 vi\u1ec7n \u0111\u00f3 v\u00e0o th\u00ec ch\u00fang s\u1ebd ko th\u1ec3 d\u00f9ng b\u00ean ngo\u00e0i th\u01b0 vi\u1ec7n). Chi ti\u1ebft h\u01a1n t\u1ea1i Libraries and visibility . Identifiers c\u00f3 th\u1ec3 b\u1eaft \u0111\u1ea7u b\u1eb1ng ch\u1eef c\u00e1i ho\u1eb7c d\u1ea5u g\u1ea1ch d\u01b0\u1edbi (_), theo sau l\u00e0 b\u1ea5t k\u1ef3 s\u1ef1 k\u1ebft h\u1ee3p n\u00e0o c\u1ee7a c\u00e1c k\u00fd t\u1ef1 \u0111\u00f3 c\u00f9ng v\u1edbi ch\u1eef s\u1ed1.. \u0110\u00f4i khi, vi\u1ec7c nh\u00ecn nh\u1eadn m\u1ed9t th\u1ee9 n\u00e0o \u0111\u00f3 trong Dart l\u00e0 m\u1ed9t expression hay m\u1ed9t statement c\u00f3 th\u1ec3 tr\u1edf n\u00ean quan tr\u1ecdng, do \u0111\u00f3 vi\u1ec7c s\u1eed d\u1ee5ng 2 t\u1eeb ng\u1eef \u0111\u1ec3 m\u00f4 t\u1ea3 s\u1ebd r\u1ea5t h\u1eefu \u00edch. Dart tools c\u00f3 th\u1ec3 th\u00f4ng b\u00e1o 2 lo\u1ea1i v\u1ea5n \u0111\u1ec1 khi th\u1ef1c thi: warnings v\u00e0 errors . Warnings ch\u1ec9 \u0111\u01a1n gi\u1ea3n ch\u1ec9 ra nh\u1eefng \u0111o\u1ea1n code c\u00f3 th\u1ec3 kh\u00f4ng ch\u1ea1y \u0111\u00fang nh\u01b0ng ch\u00fang kh\u00f4ng ng\u0103n ch\u01b0\u01a1ng tr\u00ecnh c\u1ee7a b\u1ea1n th\u1ef1c thi. Errors c\u00f3 th\u1ec3 l\u00e0 l\u1ed7i x\u1ea3y ra l\u00fac compile-time ho\u1eb7c run-time . Compile-time hi\u1ec3n nhi\u00ean s\u1ebd khi\u1ebfn code b\u1ea1n kh\u00f4ng ch\u1ea1y \u0111\u01b0\u1ee3c; K\u1ebft qu\u1ea3 c\u1ee7a run-time error l\u1ea1i l\u00e0 nh\u1eefng exception \u0111\u01b0\u1ee3c throw ra khi ch\u1ea1y. Variables \u00b6 \u0110\u1ec3 khai b\u00e1o m\u1ed9t bi\u1ebfn name tham chi\u1ebfu t\u1edbi String object v\u1edbi gi\u00e1 tr\u1ecb \u201cBob\u201d, ta c\u00f3 th\u1ec3 d\u00f9ng 1 trong 3 c\u00e1ch sau: var name = 'Bob' ; dynamic name = 'Bob' ; String name = 'Bob' ; Default value \u00b6 Gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o c\u1ee7a m\u1ed9t bi\u1ebfn b\u1ea5t k\u1ef3 \u0111\u1ec1u l\u00e0 null . int lineCount ; assert ( lineCount == null ); Final and const \u00b6 N\u1ebfu b\u1ea1n kh\u00f4ng mu\u1ed1n gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn b\u1ecb thay \u0111\u1ed5i, h\u00e3y s\u1eed d\u1ee5ng final ho\u1eb7c const thay v\u00ec d\u00f9ng var/type ; Vi\u1ec7c hi\u1ec3u r\u00f5 nguy\u00ean l\u00fd ho\u1ea1t \u0111\u1ed9ng final v\u1edbi const kh\u00f4ng h\u1ec1 \u0111\u01a1n gi\u1ea3n m\u1ed9t ch\u00fat n\u00e0o final name = 'Bob' ; // Without a type annotation // name = 'Alice'; // Uncommenting this causes an error: Error: Setter not found: 'name'. final String nickname = 'Bobby' ; // With a type annotation const bar = 1000000 ; // Unit of pressure (dynes/cm2) const double atm = 1.01325 * bar ; // Standard atmosphere final ngh\u0129a l\u00e0 single-assignment M\u1ed7i m\u1ed9t bi\u1ebfn final ho\u1eb7c m\u1ed9t thu\u1ed9c t\u00ednh ph\u1ea3i c\u00f3 m\u1ed9t kh\u1edfi t\u1ea1o. V\u00e0 m\u1ed9t khi b\u1ea1n \u0111\u00e3 g\u00e1n gi\u00e1 tr\u1ecb cho bi\u1ebfn \u0111\u00f3 th\u00ec, b\u1ea1n s\u1ebd ko th\u1ec3 g\u00e1n l\u1ea1i cho n\u00f3 1 gi\u00e1 tr\u1ecb kh\u00e1c. final List finalList = new List (); finalList . addAll ([ 'one' , 'two' , 'three' ]); // Fail: can not assign new value/reference to final finalList finalList = new List (); // But you can change the content of the list finalList . clear (); finalList . forEach (( f ) => print ( f )); //empty const ngh\u0129a l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng b\u1ea5t bi\u1ebfn kh\u00f4ng \u0111\u1ed5i \u1edf th\u1eddi \u0111i\u1ec3m compile code. M\u1ed9t khi b\u1ea1n g\u00e1n gi\u00e1 tr\u1ecb t\u1edbi m\u1ed9t const object th\u00ec b\u1ea1n kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb \u0111\u00f3. V\u00e0 gi\u00e1 tr\u1ecb \u0111\u00f3 ph\u1ea3i \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o v\u00e0o th\u1eddi \u0111i\u1ec3m compile code, ch\u1ee9 ko ph\u1ea3i \u0111\u1ee3i t\u1edbi th\u1eddi \u0111i\u1ec3m run code. const List constList = const [ 'one' , 'two' , 'three' ]; constList . add ( 'four' ); // Can not add to immutable object constList = new List (); // Can not assign new value constList . clear (); // Can not change the content constList . forEach (( f ) => print ( \"const $ f \" )); N\u1ebfu const variable \u1edf class level, h\u00e3y s\u1eed d\u1ee5ng static const . Ngo\u00e0i ra, const kh\u00f4ng ch\u1ec9 \u0111\u01b0\u1ee3c d\u00f9ng trong \u0111\u1ecbnh ngh\u0129a h\u1eb1ng bi\u1ebfn (constant variables), m\u00e0 n\u00f3 c\u00f2n c\u00f3 th\u1ec3 t\u1ea1o ra h\u1eb1ng gi\u00e1 tr\u1ecb (constant values). // Note: [] t\u1ea1o ra m\u1ed9t list r\u1ed7ng. // const [] t\u1ea1o ra m\u1ed9t list r\u1ed7ng v\u00e0 kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i (EIL: empty, immutable list). var foo = const []; // foo \u0111ang l\u00e0 m\u1ed9t EIL. final bar = const []; // bar s\u1ebd lu\u00f4n lu\u00f4n l\u00e0 EIL. const baz = const []; // baz l\u00e0 m\u1ed9t compile-time constant EIL. // N\u1ebfu b\u1ea1n c\u1ed1 t\u00ecnh s\u1eeda gi\u00e1 tr\u1ecb c\u1ee7a const variable list s\u1ebd c\u00f3 l\u1ed7i // foo[0] = 1; // Cannot modify an unmodifiable list // B\u1ea1n c\u00f3 th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a m\u1ed9t non-final, non-const variable // Ngay c\u1ea3 khi n\u00f3 c\u00f3 gi\u00e1 tr\u1ecb = const value. foo = [ 1 , 2 ]; // B\u1ea1n kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a 2 bi\u1ebfn sau. // bar = []; // Unhandled exception. // baz = []; // Unhandled exception. Built-in types \u00b6 Dart h\u1ed7 tr\u1ee3 c\u00e1c ki\u1ec3u sau: numbers strings booleans lists (hay c\u00f2n g\u1ecdi l\u00e0 arrays) maps runes (bi\u1ec3u di\u1ec5n Unicode characters theo d\u1ea1ng chu\u1ed7i) symbols M\u00ecnh s\u1ebd ch\u1ec9 \u0111\u1ec1 c\u1eadp t\u1edbi c\u00e1c ki\u1ec3u m\u00e0 m\u00ecnh th\u00edch =)) Maps \u00b6 \u0110\u1ec3 kh\u1edfi t\u1ea1o m\u1ed9t Map object, ta c\u00f3 th\u1ec3 d\u00f9ng c\u00e1c c\u00e1ch sau: var gifts = { // Key: Value 'first' : 'partridge' , 'second' : 'turtledoves' , 'fifth' : 'golden rings' }; var gifts = Map (); gifts [ 'first' ] = 'partridge' ; gifts [ 'second' ] = 'turtledoves' ; gifts [ 'fifth' ] = 'golden rings' ; S\u1eed d\u1ee5ng .length s\u1ebd tr\u1ea3 v\u1ec1 s\u1ed1 l\u01b0\u1ee3ng c\u1eb7p key-value trong map: var gifts = { 'first' : 'partridge' }; gifts [ 'fourth' ] = 'calling birds' ; assert ( gifts . length == 2 ); Ch\u00fang ta c\u0169ng s\u1ebd g\u1eb7p l\u1ed7i n\u1ebfu c\u1ed1 t\u00ecnh thay \u0111\u1ed5i constant Map (constant values) final constantMap = const { 2 : 'helium' , 10 : 'neon' , 18 : 'argon' , }; // constantMap[2] = 'Helium'; // Uncommenting this causes an error: Cannot set value in unmodifiable Map. Runes \u00b6 Trong Dart, runes l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p m\u00e3 UTF-32 c\u1ee7a string. Unicode \u0111\u1ecbnh ngh\u0129a m\u1ed9t gi\u00e1 tr\u1ecb s\u1ed1 duy nh\u1ea5t cho m\u1ed7i k\u00fd t\u1ef1 g\u1ed3m ch\u1eef c\u00e1i, s\u1ed1 v\u00e0 k\u00fd hi\u1ec7u s\u1eed d\u1ee5ng trong h\u1ec7 th\u1ed1ng ch\u1eef vi\u1ebft tr\u00ean th\u1ebf gi\u1edbi. V\u00ec m\u1ed9t Dart string l\u00e0 s\u1ef1 n\u1ed1i ti\u1ebfp tu\u1ea7n t\u1ef1 c\u1ee7a c\u00e1c UTF-16 code units, bi\u1ec3u di\u1ec5n gi\u00e1 tr\u1ecb 32-bit Unicode trong m\u1ed9t string \u0111\u00f2i h\u1ecfi c\u00e1c c\u00fa ph\u00e1p \u0111\u1eb7c bi\u1ec7t. C\u00e1ch th\u00f4ng d\u1ee5ng \u0111\u1ec3 bi\u1ec3u di\u1ec5n m\u1ed9t m\u00e3 Unicode l\u00e0 \\uXXXX , \u1edf \u0111\u00e2y XXXX l\u00e0 m\u1ed9t chu\u1ed7i g\u1ed3m 4-ch\u1eef s\u1ed1 hexidecimal (h\u1ec7 th\u1eadp l\u1ee5c ph\u00e2n, c\u01a1 s\u1ed1 16). V\u00ed d\u1ee5, K\u00ed t\u1ef1 tr\u00e1i tim (\u2665) l\u00e0 \\u2665 . \u0110\u1ec3 bi\u1ec3u di\u1ec5n nhi\u1ec1u ho\u1eb7c \u00edt h\u01a1n 4 hex digits, ta \u0111\u1eb7t gi\u00e1 tr\u1ecb c\u1ee7a ch\u00fang trong d\u1ea5u ngo\u1eb7c nh\u1ecdn. V\u00ed d\u1ee5 v\u1edbi emoji ( ) s\u1ebd bi\u1ec3u di\u1ec5n l\u00e0 \\u{1f600} . String class c\u00f3 c\u00e1c thu\u1ed9c t\u00ednh m\u00e0 b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 l\u1ea5y th\u00f4ng v\u1ec1 rune. codeUnitAt v\u00e0 codeUnit properties tr\u1ea3 v\u1ec1 m\u00e3 16-bit. Ho\u1eb7c d\u00f9ng runes property \u0111\u1ec3 l\u1ea5y runes of a string . V\u00ed d\u1ee5 b\u00ean d\u01b0\u1edbi mi\u00eau t\u1ea3 m\u1ed1i quan h\u1ec7 gi\u1eefa runes, 16-bit code units, v\u00e0 32-bit code points. var clapping = ' \\u{1f44f} ' ; print ( clapping ); print ( clapping . codeUnits ); print ( clapping . runes . toList ()); Runes input = new Runes ( ' \\u2665 \\u{1f605} \\u{1f60e} \\u{1f47b} \\u{1f596} \\u{1f44d} ' ); print ( new String . fromCharCodes ( input )); S\u1ebd in ra \ud83d\udc4f [55357, 56399] [128079] \u2665 \ud83d\ude05 \ud83d\ude0e \ud83d\udc7b \ud83d\udd96 \ud83d\udc4d Functions \u00b6 V\u00ec Dart l\u00e0 true object-oriented language n\u00ean function c\u0169ng l\u00e0 object. B\u1ea1n c\u00f3 th\u1ec3 khai b\u00e1o 1 function theo c\u00e1c ki\u1ec3u b\u00ean d\u01b0\u1edbi: bool isNoble ( int atomicNumber ) { return _nobleGases [ atomicNumber ] != null ; } isNoble ( atomicNumber ) { return _nobleGases [ atomicNumber ] != null ; } bool isNoble ( int atomicNumber ) => _nobleGases [ atomicNumber ] != null ; Optional parameters \u00b6 Optional named parameters: S\u1eed d\u1ee5ng d\u1ea5u ngo\u1eb7c nh\u1ecdn {param1, param2, \u2026} Optional positional parameters: S\u1eed d\u1ee5ng d\u1ea5u ngo\u1eb7c vu\u00f4ng [param1, param2, \u2026] Default parameter values: S\u1eed d\u1ee5ng d\u1ea5u = \u0111\u1ec3 khai b\u00e1o gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho optional parameter String drink ({ String drinks = 'whisky' }) { return 'I am drink $ drinks ' ; } String say ( String from , String msg , [ String device ]) { var result = ' $ from says $ msg ' ; if ( device != null ) { result = ' $ result with a $ device ' ; } return result ; } print ( drink ()); print ( drink ( drinks: 'vodka' )); print ( say ( 'Bob' , 'Howdy' )); print ( say ( 'Bob' , 'Howdy' , 'smoke signal' )); s\u1ebd cho ra k\u1ebft qu\u1ea3: I am drink whisky I am drink vodka Bob says Howdy Bob says Howdy with a smoke signal The main() function \u00b6 T\u1ea5t c\u1ea3 c\u00e1c \u1ee9ng d\u1ee5ng \u0111\u1ec1u c\u00f3 m\u1ed9t h\u00e0m top-level main() . main() tr\u1ea3 v\u1ec3 ki\u1ec3u void v\u00e0 c\u00f3 tham s\u1ed1 tu\u1ef3 ch\u1ecdn l\u00e0 List<String> . void main ( List < String > arguments ) { print ( arguments ); assert ( arguments . length == 2 ); assert ( int . parse ( arguments [ 0 ]) == 1 ); assert ( arguments [ 1 ] == 'test' ); } Ch\u00fa \u00fd khi compile code n\u1ebfu mu\u1ed1n c\u00e1c c\u00e2u l\u1ec7nh assert c\u00f3 hi\u1ec7u l\u1ef1c th\u00ec b\u1ea1n nh\u1edb th\u00eam flag sau v\u00e0o nh\u00e9: $ dart --enable-asserts bin/main.dart 1 test Functions as first-class objects \u00b6 Dart cho ph\u00e9p truy\u1ec1n m\u1ed9t function v\u1edbi t\u01b0 c\u00e1ch l\u00e0 bi\u1ebfn c\u1ee7a m\u1ed9t function kh\u00e1c, v\u00e0 c\u0169ng c\u00f3 th\u1ec3 g\u00e1n m\u1ed9t function v\u00e0o m\u1ed9t bi\u1ebfn. void printElement ( int element ) { print ( element ); } var list = [ 1 , 2 , 3 ]; // Pass printElement as a parameter. list . forEach ( printElement ); var loudify = ( msg ) => '!!! ${ msg . toUpperCase () } !!!' ; assert ( loudify ( 'hello' ) == '!!! HELLO !!!' ); Anonymous functions \u00b6 B\u1ea1n c\u00f3 th\u1ec3 t\u1ea1o ra c\u00e1c h\u00e0m v\u00f4 danh ( anonymous function ) hay \u0111\u00f4i l\u00fac g\u1ecdi l\u00e0 lambda ho\u1eb7c closure . ([[ Type ] param1 [, \u2026 ]]) { codeBlock ; }; Closures \u00b6 Ch\u1ec9 c\u1ea7n ch\u00fa \u00fd ki\u1ec3u tr\u1ea3 v\u1ec1 c\u1ee7a wrap function l\u00e0 Function . /// Returns a function that adds [addBy] to the /// function's argument. Function makeAdder ( num addBy ) { return ( num i ) => addBy + i ; } // Create a function that adds 2. var add2 = makeAdder ( 2 ); // Create a function that adds 4. var add4 = makeAdder ( 4 ); assert ( add2 ( 3 ) == 5 ); assert ( add4 ( 3 ) == 7 ); Operators \u00b6 Arithmetic operators \u00b6 Th\u1ea5y c\u00f3 c\u00e1i to\u00e1n t\u1eed n\u00e0y l\u1ea1 l\u1ea1 assert ( 5 / 2 == 2.5 ); // Ph\u00e9p chia tr\u1ea3 v\u1ec1 ki\u1ec3u double assert ( 5 ~/ 2 == 2 ); // Ph\u00e9p chia tr\u1ea3 v\u1ec1 ki\u1ec3u int Type test operators \u00b6 M\u1ed9t to\u00e1n t\u1eed m\u00ecnh ngh\u0129 l\u00e0 r\u1ea5t m\u1edbi, d\u00f9ng \u0111\u1ec3 check ki\u1ec3u c\u1ee7a bi\u1ebfn l\u00fac runtime. Ph\u00e9p to\u00e1n \u00dd ngh\u0129a as \u00c9p ki\u1ec3u is True n\u1ebfu object c\u00f3 c\u00f9ng ki\u1ec3u \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh is! True n\u1ebfu object kh\u00f4ng c\u00f9ng ki\u1ec3u \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh M\u1ecdi th\u1ee9 trong dart \u0111\u1ec1u l\u00e0 Object String s = 'String is Object' ; assert ( s is Object == true ); Assignment operators \u00b6 // Assign value to a a = value ; // Assign value to b if b is null; otherwise, b stays the same b ??= value ; Ta d\u00f9ng to\u00e1n t\u1eed ??= khi mu\u1ed1n g\u00e1n gi\u00e1 tr\u1ecb cho bi\u1ebfn ch\u1ec9 khi bi\u1ebfn \u0111\u00f3 \u0111ang l\u00e0 null . Logical operators \u00b6 if ( ! done && ( col == 0 || col == 3 )) { // ...Do something... } Conditional expressions \u00b6 condition ? expr1 : expr2 N\u1ebfu condition l\u00e0 true, th\u1ef1c hi\u1ec7n expr1 (v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a n\u00f3); ng\u01b0\u1ee3c l\u1ea1i, th\u1ef1c hi\u1ec7n v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a expr2 . expr1 ?? expr2 N\u1ebfu expr1 kh\u00e1c null , tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a ch\u00ednh n\u00f3; ng\u01b0\u1ee3c l\u1ea1i, tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a expr2 . Cascade notation (..) \u00b6 Cascades d\u1ecbch n\u00f4m na l\u00e0 th\u00e1c n\u01b0\u1edbc =)) c\u00fa ph\u00e1p l\u00e0 d\u1ea5u .. , cho ph\u00e9p anh em th\u1ef1c hi\u1ec7n nhi\u1ec1u thao t\u00e1c tu\u1ea7n t\u1ef1 tr\u00ean 1 object. Nh\u00ecn th\u00ec gi\u1ed1ng v\u1edbi thu\u1eadt ng\u1eef chain method ( Fluent_interface ) nh\u01b0ng c\u01a1 ch\u1ebf c\u00f3 \u0111\u00f4i ph\u1ea7n kh\u00e1c bi\u1ec7t. querySelector ( '#confirm' ) // Get an object. .. text = 'Confirm' // Use its members. .. classes . add ( 'important' ) .. onClick . listen (( e ) => window . alert ( 'Confirmed!' )); Trong \u0111o\u1ea1n code tr\u00ean, th\u00ec d\u00f2ng \u0111\u1ea7u g\u1ecdi t\u1edbi method querySelector() , tr\u1ea3 v\u1ec1 m\u1ed9t selector object. C\u00e1c d\u00f2ng ti\u1ebfp theo th\u1ef1c hi\u1ec7n c\u00e1c thao t\u00e1c v\u1edbi selector object, ignore b\u1ea5t k\u1ef3 k\u1ebft qu\u1ea3 n\u00e0o m\u00e0 c\u00e1c method \u0111\u00f3 tr\u1ea3 v\u1ec1. Ch\u00fang ta c\u00f3 th\u1ec3 vi\u1ebft l\u1ea1i nh\u01b0 sau: var button = querySelector ( '#confirm' ); button . text = 'Confirm' ; button . classes . add ( 'important' ); button . onClick . listen (( e ) => window . alert ( 'Confirmed!' )); \u0110\u1eb7c bi\u1ec7t l\u01b0u \u00fd l\u00e0 method \u0111\u1ea7u ti\u00ean ho\u1eb7c function kh\u1edfi t\u1ea1o cascade ph\u1ea3i tr\u1ea3 v\u1ec1 m\u1ed9t object th\u1ef1c s\u1ef1. V\u00ed d\u1ee5 \u0111o\u1ea1n code sau s\u1ebd ko th\u1ef1c hi\u1ec7n \u0111c: var sb = StringBuffer (); sb . write ( 'foo' ) .. write ( 'bar' ); // Error: method 'write' isn't defined for 'void'. \u1ede d\u00f2ng tr\u00ean sb.write('foo') ch\u00ednh l\u00e0 gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o, tuy nhi\u00ean sb.write('foo') = void , do \u0111\u00f3 b\u1ea1n kh\u00f4ng th\u1ec3 b\u1eaft \u0111\u1ea7u m\u1ed9t cascade tr\u00ean void . Other operators \u00b6 H\u1ecdc th\u00eam m\u1ed9t to\u00e1n t\u1eed m\u1edbi: ?. , t\u01b0\u01a1ng t\u1ef1 nh\u01b0 . d\u00f9ng \u0111\u1ec3 truy xu\u1ea5t c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a m\u1ed9t object, nh\u01b0ng an to\u00e0n h\u01a1n ch\u00fat. V\u00ed d\u1ee5: foo?.bar s\u1ebd select ra thu\u1ed9c t\u00ednh bar t\u1eeb foo , v\u00e0 n\u1ebfu foo = null th\u00ec k\u1ebft qu\u1ea3 c\u1ee7a foo?.bar = null . Control flow statements \u00b6 Dart s\u1eed d\u1ee5ng c\u00e1c c\u00e2u l\u1ec7nh sau \u0111\u1ec3 control lu\u1ed3ng x\u1eed l\u00fd: \u0110i\u1ec1u ki\u1ec7n if v\u00e0 else V\u00f2ng l\u1eb7p for V\u00f2ng l\u1eb7p while v\u00e0 do-while C\u00e2u l\u1ec7nh break v\u00e0 continue C\u00e2u l\u1ec7nh switch v\u00e0 case C\u00e2u l\u1ec7nh assert If and else \u00b6 Bi\u1ec3u th\u1ee9c trong \u0111i\u1ec1u ki\u1ec7n if b\u1eaft bu\u1ed9c ph\u1ea3i l\u00e0 ki\u1ec3u bool . \u0110o\u1ea1n code sau s\u1ebd kh\u00f4ng th\u1ec3 ch\u1ea1y, do 1 c\u00f3 type l\u00e0 int . if ( 1 ) { print ( 'We can not execute this code!' ); } For loops \u00b6 Closure b\u00ean trong Dart's for loops c\u00f3 th\u1ec3 capture \u0111\u01b0\u1ee3c value v\u00e0 index \u1edf th\u1eddi \u0111i\u1ec3m compile-time, tr\u00e1nh \u0111\u01b0\u1ee3c c\u00e1c l\u1ed7i c\u01a1 b\u1ea3n hay x\u1ea3y ra trong Javascript. H\u00e3y th\u1eed so s\u00e1nh 2 \u0111o\u1ea1n code v\u00e0 k\u1ebft qu\u1ea3 output ra gi\u1eefa 2 ng\u00f4n ng\u1eef xem sao :hugs: Javascript var callbacks = []; for ( var i = 0 ; i < 2 ; i ++ ) { callbacks . push (() => console . log ( i )); } callbacks . forEach (( c ) => c ()); terminal 2 2 Dart var callbacks = []; for ( var i = 0 ; i < 2 ; i ++ ) { callbacks . add (() => print ( i )); } callbacks . forEach (( c ) => c ()); 0 1 Dart support l\u1ec7nh for-in v\u00e0 forEach var collection = [ 0 , 1 , 2 ]; for ( var x in collection ) { print ( x ); // 0 1 2 } candidates . forEach (( candidate ) => candidate . interview ()); Assert \u00b6 Dart h\u1ed7 tr\u1ee3 method assert , d\u00f9ng \u0111\u1ec3 ng\u0103n ch\u01b0\u01a1ng tr\u00ecnh ti\u1ebfp t\u1ee5c th\u1ef1c thi n\u1ebfu c\u00f3 b\u1ea5t k\u1ef3 \u0111i\u1ec1u ki\u1ec7n n\u00e0o b\u00ean trong n\u00f3 l\u00e0 false . // Make sure the variable has a non-null value. assert ( text != null ); // Make sure the value is less than 100. assert ( number < 100 ); // Make sure this is an https URL. assert ( urlString . startsWith ( 'https' )); \u0110\u1ec3 thay th\u1ebf n\u1ed9i dung hi\u1ec3n th\u1ecb khi assert th\u1ea5t b\u1ea1i, ch\u00fang ta th\u00eam message v\u00e0o tham s\u1ed1 th\u1ee9 hai. var urlString = 'www.google.com' ; assert ( urlString . startsWith ( 'https' ), 'URL ( $ urlString ) should start with \"https\".' ); Failed assertion: line 7 pos 8: 'urlString.startsWith('https')': URL (www.google.com) should start with \"https\". Exceptions \u00b6 Throw \u00b6 Th\u00f4ng th\u01b0\u1eddng ch\u00fang ta s\u1ebd raise m\u1ed9t exception nh\u01b0 sau throw new Exception ( \"message\" ); throw UnimplementedError (); throw FormatException ( 'Expected at least 1 section' ); \u0111\u00f4i khi c\u00f3 th\u1ec3 l\u00e0 1 objects throw 'Out of llamas!' ; \u0110\u1ec3 n\u00e2ng cao ch\u1ea5t l\u01b0\u1ee3ng, c\u0169ng nh\u01b0 \u00fd ngh\u0129a c\u1ee7a code th\u00ec b\u1ea1n n\u00ean nghi\u00ean c\u1ee9u implement exception l\u00e0 subtype c\u1ee7a c\u00e1c method/class t\u1eeb Error v\u00e0 Exception Catch \u00b6 try { breedMoreLlamas (); } on OutOfLlamasException { // A specific exception buyMoreLlamas (); } on Exception catch ( e ) { // Anything else that is an exception print ( 'Unknown exception: $ e ' ); } catch ( e ) { // No specified type, handles all print ( 'Something really unknown: $ e ' ); } B\u1ea1n c\u00f3 th\u1ec3 ch\u1ec9 \u0111\u1ecbnh 1 ho\u1eb7c 2 parameters cho method catch() . try { // \u00b7\u00b7\u00b7 } on Exception catch ( e ) { print ( 'Exception details: \\n $ e ' ); } catch ( e , s ) { print ( 'Exception details: \\n $ e ' ); print ( 'Stack trace: \\n $ s ' ); } Finally \u00b6 Ki\u1ebfn th\u1ee9c v\u00f4 c\u00f9ng c\u0103n b\u1ea3n Code block \u0111\u1eb7t trong finally s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi d\u00f9 c\u00f3 hay kh\u00f4ng c\u00f3 ngo\u1ea1i l\u1ec7. try { breedMoreLlamas (); } finally { // Always clean up, even if an exception is thrown. cleanLlamaStalls (); } try { breedMoreLlamas (); } catch ( e ) { print ( 'Error: $ e ' ); // Handle the exception first. } finally { cleanLlamaStalls (); // Then clean up. } Classes \u00b6 Dart l\u00e0 ng\u00f4n ng\u1eef h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng v\u1edbi class (m\u1ecdi object \u0111\u1ec1u l\u00e0 m\u1ed9t instance c\u1ee7a class) v\u00e0 mixin-based inheritance (m\u1eb7c d\u00f9 m\u1ed9t class ch\u1ec9 c\u00f3 duy nh\u1ea5t m\u1ed9t superclass, nh\u01b0ng m\u00e0 class body (c\u00e1c variable, method) c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u1ea1i nh\u01b0 multiple class hierarchies (\u0111a th\u1eeba k\u1ebf)). // Create a Point using Point(). var p1 = new Point ( 2 , 2 ); // Create a Point using Point.fromJson(). var p2 = new Point . fromJson ( jsonData ); T\u1eeb Dart 2 b\u1ea1n c\u00f3 th\u1ec3 b\u1ecf t\u1eeb kh\u00f3a new . V\u00ed d\u1ee5: var p1 = Point(2, 2) . Using class members \u00b6 S\u1eed d\u1ee5ng ?. thay cho . khi truy xu\u1ea5t members c\u1ee7a class gi\u00fap ta tr\u00e1nh \u0111\u01b0\u1ee3c c\u00e1c exception khi object c\u00f3 gi\u00e1 tr\u1ecb null: // If p is non-null, set its y value to 4. p ? . y = 4 ; Constructors \u00b6 class Point { num x , y ; Point ( num x , num y ) { // There's a better way to do this, stay tuned. this . x = x ; this . y = y ; } } this keyword \u0111\u1ec3 ch\u1ec9 current instance. Dart c\u00f2n h\u1ed7 tr\u1ee3 pattern constructor class Point { num x , y ; // Syntactic sugar for setting x and y // before the constructor body runs. Point ( this . x , this . y ); } Default constructors \u00b6 N\u1ebfu b\u1ea1n ko khai b\u00e1o constructor c\u0169ng m\u00e9o sao c\u1ea3 , m\u1eb7c \u0111\u1ecbnh Dart s\u1ebd t\u1ea1o ra constructor kh\u00f4ng tham s\u1ed1 cho class \u0111\u00f3. Constructors aren\u2019t inherited \u00b6 M\u1ed9t \u0111i\u1ec1u \u0111\u00e1ng l\u01b0u \u00fd l\u00e0 trong Dart th\u00ec subclasses kh\u00f4ng k\u1ebf th\u1eeba constructor t\u1eeb superclass Named constructors \u00b6 S\u1eed d\u1ee5ng named constructor \u0111\u1ec3 c\u00f3 th\u1ec3 implement nhi\u1ec1u constructors cho m\u1ed9t class: class Point { num x , y ; Point ( this . x , this . y ); // Named constructor Point . origin () { x = 0 ; y = 0 ; } } Invoking a non-default superclass constructor \u00b6 M\u1eb7c \u0111\u1ecbnh th\u00ec constructor c\u1ee7a subclass s\u1ebd g\u1ecdi t\u1edbi unnamed, no-argument constructor c\u1ee7a superclass. Constructor c\u1ee7a superclass s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi \u1edf \u0111i\u1ec3m b\u1eaft \u0111\u1ea7u c\u1ee7a constructor body. N\u1ebfu c\u00f3 m\u1ed9t initializer list \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng, n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi tr\u01b0\u1edbc khi g\u1ecdi t\u1edbi superclass. V\u1ec1 c\u01a1 b\u1ea3n th\u00ec th\u1ee9 t\u1ef1 th\u1ef1c thi constructor nh\u01b0 sau: initializer list superclass's no-arg constructor main class's no-arg constructor T\u01b0\u01a1ng t\u1ef1 ch\u00fang ta h\u00e3y th\u1eed xem c\u00e1c case sau: Superclass kh\u00f4ng khai b\u00e1o constructor: class Person { String firstName ; } class Employee extends Person { Employee ( Map data ) { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } in Employee Th\u1ebf l\u00e0 subclass kh\u00f4ng g\u1ecdi c\u00e1i default constructor, code v\u1eabn ch\u1ea1y v\u00f4 t\u01b0 Superclass khai b\u00e1o unnamed, no-agrument constructor, v\u00e0 subclass g\u1ecdi constructor \u0111\u00f3 (tr\u01b0\u1eddng h\u1ee3p kh\u00f4ng g\u1ecdi c\u0169ng th\u1ebf) class Person { String firstName ; Person () { print ( 'in Person' ); } } class Employee extends Person { Employee ( Map data ) : super () { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } in Person in Employee Ok, m\u1eb7c cho tham s\u1ed1 gi\u1eefa constructor c\u1ee7a super v\u00e0 subclass kh\u00e1c nhau, code v\u1eabn \u1ed5n Superclass khai b\u00e1o unamed constructor (constructor n\u00e0y c\u00f3 argument) v\u00e0 subclass kh\u00f4ng g\u1ecdi constructor \u0111\u00f3: class Person { String firstName ; Person ( num x ) { print ( 'in Person' ); } } class Employee extends Person { Employee ( Map data ) { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } Error: The unnamed constructor in 'Person' requires arguments. NG, ko g\u1ecdi ko \u0111\u01b0\u1ee3c Superclass khai b\u00e1o named constructor v\u00e0 subclass kh\u00f4ng g\u1ecdi constructor \u0111\u00f3 class Person { String firstName ; Person . fromJson () { print ( 'in Person' ); } } class Employee extends Person { Employee ( Map data ) { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } Error: 'Person' doesn't have an unnamed constructor. Tr\u01b0\u1eddng h\u1ee3p n\u00e0y cho ch\u00fang ta th\u1ea5y ngay m\u1ed9t \u0111i\u1ec1u l\u00e0 n\u1ebfu superclass c\u00f3 m\u1ed9t named constructor, \u0111\u1ed3ng ngh\u0129a v\u1edbi vi\u1ec7c c\u00e1c subclass c\u0169ng ph\u1ea3i t\u1ea1o ra constructor v\u00e0 g\u1ecdi l\u1ea1i construcor c\u1ee7a superclass \u0111\u00f3. Th\u1eed s\u1eeda l\u1ea1i code c\u1ee7a Employee , ta c\u00f3 k\u1ebft qu\u1ea3 sau: class Employee extends Person { Employee ( Map data ) : super . fromJson () { print ( 'in Employee' ); } } in Person in Employee Superclass khai b\u00e1o c\u1ea3 named & unnamed constructor th\u00ec sao ??? class Person { String firstName ; Person () { print ( 'in unnamed Person' ); } Person . fromJson ( Map data ) { print ( 'in fromJson Person' ); } } class Employee extends Person { Employee ( Map data ) : super () { // :super.fromJson(data) print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } in unnamed Person // in fromJson Person in Employee R\u00f5 r\u00e0ng \u1edf tr\u01b0\u1eddng h\u1ee3p superclass c\u00f3 m\u1ed9t unnamed, no-argument constructor th\u00ec g\u1ecdi hay ko g\u1ecdi c\u0169ng ko th\u00e0nh v\u1ea5n \u0111\u1ec1. V\u00e0 g\u1ecdi c\u00e1i n\u00e0o c\u0169ng \u0111c. Ch\u00fang ta c\u0169ng c\u00f3 th\u1ec3 truy\u1ec1n tham s\u1ed1 v\u00e0o superclass constructor th\u00f4ng qua k\u1ebft qu\u1ea3 t\u00ednh to\u00e1n c\u1ee7a m\u1ed9t method , tuy nhi\u00ean tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n n\u00e0y (hay n\u1ed9i t\u1ea1i trong method ) kh\u00f4ng \u0111\u01b0\u1ee3c access t\u1edbi this class Employee extends Person { Employee () : super . fromJson ( getDefaultData ()); // \u00b7\u00b7\u00b7 } Initializer list \u00b6 // Initializer list sets instance variables before // the constructor body runs. Point . fromJson ( Map < String , num > json ) : x = json [ 'x' ], y = json [ 'y' ] { print ( 'In Point.fromJson(): ( $ x , $ y )' ); } L\u01b0u \u00fd: Khi kh\u1edfi t\u1ea1o (\u1ede code tr\u00ean th\u00ec initializer l\u00e0 code block sau d\u1ea5u :) kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p truy c\u1eadp t\u1edbi bi\u1ebfn this . Trong qu\u00e1 tr\u00ecnh development, b\u1ea1n c\u00f3 th\u1ec3 validate inputs b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng assert trong initializer list. Point . withAssert ( this . x , this . y ) : assert ( x >= 0 ) { print ( 'In Point.withAssert(): ( $ x , $ y )' ); } Redirecting constructors \u00b6 \u0110\u00f4i l\u00fac nhi\u1ec7m v\u1ee5 duy nh\u1ea5t c\u1ee7a m\u1ed9t constructor ch\u1ec9 l\u00e0 chuy\u1ec3n h\u01b0\u1edbng sang m\u1ed9t constructor kh\u00e1c trong c\u00f9ng m\u1ed9t class. Redirecting constructor lu\u00f4n c\u00f3 body l\u00e0 r\u1ed7ng, v\u00e0 ch\u1ec9 sinh ra \u0111\u1ec3 g\u1ecdi t\u1edbi m\u1ed9t constructor kh\u00e1c sau d\u1ea5u : . class Point { num x , y ; // The main constructor for this class. Point ( this . x , this . y ) { print ( 'This coordinate: x= $ x y= $ y ' ); } // Delegates to the main constructor. Point . alongXAxis ( num x ) : this ( x , 0 ); } var p = Point . alongXAxis ( 1 ); This coordinate: x=1 y=0 Trong v\u00ed d\u1ee5 tr\u00ean th\u00ec Point1.alongXAxis ch\u00ednh l\u00e0 redirecting constructor . Constant constructors \u00b6 N\u1ebfu nh\u01b0 b\u1ea1n mu\u1ed1n t\u1ea1o ra m\u1ed9t object kh\u00f4ng \u0111\u1ed5i, h\u00e3y t\u1ea1o ra m\u1ed9t const constructor, v\u00e0 \u0111\u1ea3m b\u1ea3o r\u1eb1ng c\u00e1c variable l\u00e0 final: class ImmutablePoint { static final ImmutablePoint origin = const ImmutablePoint ( 0 , 0 ); final num x , y ; const ImmutablePoint ( this . x , this . y ); } Factory constructors \u00b6 Ch\u00fang ta s\u1eed d\u1ee5ng factory khi mu\u1ed1n implement constructor kh\u00f4ng ch\u1ec9 \u0111\u1ec3 t\u1ea1o ra m\u1ed9t instance m\u1edbi c\u1ee7a class m\u00e0 c\u00f2n c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t instance t\u1eeb cache, ho\u1eb7c m\u1ed9t subtype instance. V\u00ed d\u1ee5 sau implement Logger class l\u00e0m nhi\u1ec7m v\u1ee5 class Logger { final String name ; bool mute = false ; // _cache is library-private, thanks to // the _ in front of its name. static final Map < String , Logger > _cache = < String , Logger > {}; factory Logger ( String name ) { print ( 'Logger \\' s name: $ name ' ); print ( 'Logger \\' s cache: $ _cache ' ); if ( _cache . containsKey ( name )) { return _cache [ name ]; } else { final logger = Logger . _internal ( name ); _cache [ name ] = logger ; return logger ; } } Logger . _internal ( this . name ); void log ( String msg ) { if ( ! mute ) print ( 'Log message: $ msg ' ); } } main () { var loggerOne = Logger ( 'UI' ); loggerOne . log ( 'Button clicked' ); print ( '**************' ); var loggerTwo = Logger ( 'UI' ); loggerTwo . log ( 'Icon clicked' ); } Logger's name: UI Logger's cache: {} Log message: Button clicked ************** Logger's name: UI Logger's cache: {UI: Instance of 'Logger'} Log message: Icon clicked L\u01b0u \u00fd r\u1eb1ng Factory constructor kh\u00f4ng th\u1ec3 truy c\u1eadp v\u00e0o this . Methods \u00b6 Instance methods \u00b6 Ko c\u00f3 g\u00ec \u0111\u1eb7c s\u1eafc ngo\u00e0i vi\u1ec7c truy xu\u1ea5t t\u1edbi instance variables m\u00e0 ko c\u1ea7n this . import 'dart:math' ; class Point { num x , y ; Point ( this . x , this . y ); num distanceTo ( Point other ) { var dx = x - other . x ; var dy = y - other . y ; return sqrt ( dx * dx + dy * dy ); } } Getters and setters \u00b6 N\u1ebfu b\u1ea1n \u0111\u00e3 t\u1eebng code Typescript th\u00ec th\u1ea5y kh\u00f4ng kh\u00e1c m\u1ea5y class Rectangle { num left , top , width , height ; Rectangle ( this . left , this . top , this . width , this . height ); // Define two calculated properties: right and bottom. num get right => left + width ; set right ( num value ) => left = value - width ; num get bottom => top + height ; set bottom ( num value ) => top = value - height ; } void main () { var rect = Rectangle ( 3 , 4 , 20 , 15 ); assert ( rect . left == 3 ); rect . right = 12 ; assert ( rect . left == - 8 ); } Abstract methods \u00b6 Abstract methods ch\u1ec9 t\u1ed3n t\u1ea1i b\u00ean trong abstract classes . abstract class Doer { // Define instance variables and methods... void doSomething (); // Define an abstract method. } class EffectiveDoer extends Doer { void doSomething () { // Provide an implementation, so the method is not abstract here... } } Overridable operators \u00b6 Ph\u1ea7n n\u00e0y m\u00f4 t\u1ea3 c\u00e1ch implement ho\u1ea1t \u0111\u1ed9ng c\u1ee7a c\u00e1c to\u00e1n t\u1eed v\u1edbi 1 object. V\u00ed d\u1ee5 b\u1ea1n c\u00f3 Vector class, v\u00e0 b\u1ea1n c\u1ea7n \u0111\u1ecbnh ngh\u0129a th\u00eam ph\u00e9p + 2 vectors ch\u1eb3ng h\u1ea1n. . . . . < + | [] > / ^ []= <= ~/ & ~ >= * << == \u2013 % >> class Vector { final int x , y ; const Vector ( this . x , this . y ); /// Overrides + (a + b). Vector operator + ( Vector v ) { return Vector ( x + v . x , y + v . y ); } /// Overrides - (a - b). Vector operator - ( Vector v ) { return Vector ( x - v . x , y - v . y ); } } void main () { final v = Vector ( 2 , 3 ); final w = Vector ( 2 , 2 ); // v == (2, 3) assert ( v . x == 2 && v . y == 3 ); // v + w == (4, 5) assert (( v + w ). x == 4 && ( v + w ). y == 5 ); // v - w == (0, 1) assert (( v - w ). x == 0 && ( v - w ). y == 1 ); } Abstract classes \u00b6 S\u1eed d\u1ee5ng abstract modifier \u0111\u1ec3 khai b\u00e1o m\u1ed9t abstract class \u2014M\u1ed9t class kh\u00f4ng th\u1ec3 t\u1ea1o instance. Abstract classes th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a interfaces . Tuy nhi\u00ean n\u1ebfu b\u1ea1n mu\u1ed1n t\u1ea1o instance t\u1eebIf you want your abstract class to appear to be instantiable, define a factory constructor. // This class is declared abstract and thus // can't be instantiated. abstract class AbstractContainer { // Define constructors, fields, methods... void updateChildren (); // Abstract method. } Implicit interfaces \u00b6 M\u1ed7i class trong Dart ng\u1ea7m \u0111\u1ecbnh ngh\u0129a m\u1ed9t interface ch\u1ee9a to\u00e0n b\u1ed9 c\u00e1c instance member c\u1ee7a class \u0111\u00f3. D\u1ecb vl, abstract th\u00ec c\u00f3 keyword c\u00f2n interface th\u00ec m\u00e9o ko // A person. The implicit interface contains greet(). // A person. The implicit interface contains greet(). class Person { // In the interface, but visible only in this library. final _name ; // Not in the interface, since this is a constructor. Person ( this . _name ); // In the interface. String greet ( String who ) => 'Hello, $ who . I am $ _name .' ; } // An implementation of the Person interface. class Impostor implements Person { get _name => '' ; String greet ( String who ) => 'Hi $ who . Do you know who I am?' ; } String greetBob ( Person person ) => person . greet ( 'Bob' ); void main () { print ( greetBob ( Person ( 'Kathy' ))); print ( greetBob ( Impostor ())); } N\u1ebfu nh\u01b0 class Impostor kh\u00f4ng khai b\u00e1o method greet th\u00ec ch\u00fang ta s\u1ebd nh\u1eadn qu\u1ea3 \u0111\u1eafng sau Error: The non-abstract class 'Impostor' is missing implementations for these members: 'greet'. Dart h\u1ed7 tr\u1ee3 \u0111a k\u1ebf th\u1eeba class Point implements Comparable , Location {...} Extending a class \u00b6 S\u1eed d\u1ee5ng extends \u0111\u1ec3 t\u1ea1o ra subclass, v\u00e0 super \u0111\u1ec3 tr\u1ecf t\u1edbi superclass: class Television { void turnOn () { _illuminateDisplay (); _activateIrSensor (); } // \u00b7\u00b7\u00b7 } class SmartTelevision extends Television { void turnOn () { super . turnOn (); _bootNetworkInterface (); _initializeMemory (); _upgradeApps (); } // \u00b7\u00b7\u00b7 } Overriding members \u00b6 Subclasses c\u00f3 th\u1ec3 override (ghi \u0111\u00e8) instance methods, getters, v\u00e0 setters. Ch\u00fang ta s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 @override \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh methods, ... b\u1ecb ghi \u0111\u00e8: class SmartTelevision extends Television { @ override void turnOn () {...} // \u00b7\u00b7\u00b7 } \u0110\u1ec3 thu h\u1eb9p (si\u1ebft ch\u1eb7t) ki\u1ec3u c\u1ee7a method parameter ho\u1eb7c instance variable hay c\u00f2n g\u1ecdi l\u00e0 type safe , b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 covariant : class Animal { String name ; Animal ( this . name ); void chase ( Animal x ) { print ( ' $ name chase ${ x . name } ' ); } } class Dog extends Animal { Dog () : super ( 'Dog' ); } class Mouse extends Animal { Mouse () : super ( 'Mouse' ); } class Cat extends Animal { Cat () : super ( 'Cat' ); void chase ( covariant Mouse x ) { super . chase ( x ); } } void main () { Cat c = new Cat (); Dog d = new Dog (); Mouse m = new Mouse (); d . chase ( m ); // Dog chase Mouse c . chase ( m ); // Cat chase Mouse c . chase ( d ); // Error: A value of type '#lib1::Dog' can't be assigned to a variable of type '#lib1::Mouse'. } noSuchMethod() \u00b6 H\u00e3y ghi \u0111\u00e8 ph\u01b0\u01a1ng th\u1ee9c noSuchMethod() trong tr\u01b0\u1eddng h\u1ee3p b\u1ea1n mu\u1ed1n b\u1eaft c\u00e1c tr\u01b0\u1eddng h\u1ee3p ng\u01b0\u1eddi d\u00f9ng truy c\u1eadp method ho\u1eb7c variable kh\u00f4ng t\u1ed3n t\u1ea1i class A { // Unless you override noSuchMethod, using a // non-existent member results in a NoSuchMethodError. @ override void noSuchMethod ( Invocation invocation ) { print ( 'You tried to use a non-existent member: ' + ' ${ invocation . memberName } ' ); } } Enumerated types \u00b6 Using enums \u00b6 \u0110\u1ec3 khai b\u00e1o m\u1ed9t ki\u1ec3u enumerations , ta s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 enum : enum Color { red , green , blue } M\u1ed7i gi\u00e1 tr\u1ecb b\u00ean trong enum \u0111\u1ec1u c\u00f3 method index getter, tr\u1ea3 v\u1ec1 v\u1ecb tr\u00ed c\u1ee7a ch\u00fang (0-based array): assert ( Color . red . index == 0 ); assert ( Color . green . index == 1 ); assert ( Color . blue . index == 2 ); \u0110\u1ec3 l\u1ea5y ra to\u00e0n b\u1ed9 c\u00e1c gi\u00e1 tr\u1ecb trong enum, ch\u00fang ta s\u1eed d\u1ee5ng enum\u2019s values constant. List < Color > colors = Color . values ; assert ( colors [ 2 ] == Color . blue ); Adding features to a class: mixins \u00b6 Mixin l\u00e0 m\u1ed9t t\u00ednh n\u0103ng t\u01b0\u01a1ng t\u1ef1 v\u1edbi trait trong php, ta s\u1eed d\u1ee5ng withth keywords v\u00e0 theo sau n\u00f3 l\u00e0 m\u1ed9t ho\u1eb7c nhi\u1ec1u mixin names. class Musician extends Performer with Musical { // \u00b7\u00b7\u00b7 } class Maestro extends Person with Musical , Aggressive , Demented { Maestro ( String maestroName ) { name = maestroName ; canConduct = true ; } } \u0110\u1ec3 implement mixin c\u1ea7n t\u1ea1o m\u1ed9t class k\u1ebf th\u1eeba Object, kh\u00f4ng c\u00f3 constructor v\u00e0 kh\u00f4ng g\u1ecdi t\u1edbi super : abstract class Musical { bool canPlayPiano = false ; bool canCompose = false ; bool canConduct = false ; void entertainMe () { if ( canPlayPiano ) { print ( 'Playing piano' ); } else if ( canConduct ) { print ( 'Waving hands' ); } else { print ( 'Humming to self' ); } } } Class variables and methods \u00b6 S\u1eed d\u1ee5ng static keyword \u0111\u1ec3 implement class-wide variables v\u00e0 methods. Static variables \u00b6 class Queue { static const initialCapacity = 16 ; // \u00b7\u00b7\u00b7 } void main () { assert ( Queue . initialCapacity == 16 ); } Bi\u1ebfn static s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o cho t\u1edbi khi n\u00f3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Static methods \u00b6 import 'dart:math' ; class Point { num x , y ; Point ( this . x , this . y ); static num distanceBetween ( Point a , Point b ) { var dx = a . x - b . x ; var dy = a . y - b . y ; return sqrt ( dx * dx + dy * dy ); } } void main () { var a = Point ( 2 , 2 ); var b = Point ( 4 , 4 ); var distance = Point . distanceBetween ( a , b ); assert ( 2.8 < distance && distance < 2.9 ); print ( distance ); } B\u00ean trong static method kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p s\u1eed d\u1ee5ng this . Generics \u00b6 N\u1ebfu \u0111\u00e3 \u0111\u1ecdc c\u00e1c ghi ch\u00fa ph\u00eda tr\u00ean th\u00ec \u1eaft h\u1eb3n b\u1ea1n \u0111\u00e3 bi\u1ebft t\u1edbi List<E> v\u1edbi E l\u00e0 m\u1ed9t ki\u1ec3u (v\u00ed d\u1ee5: int ). V\u1ec1 m\u1eb7t quy \u01b0\u1edbc <\u2026> \u0111\u00e1nh d\u1ea5u List l\u00e0 m\u1ed9t ki\u1ec3u generic (ho\u1eb7c parameterized ). Why use generics? \u00b6 L\u1ee3i \u00edch: Code sinh ra t\u1ed1t h\u01a1n n\u1ebfu \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh \u0111\u00fang ki\u1ec3u c\u1ee7a k\u1ebft qu\u1ea3. var names = List < String > (); names . addAll ([ 'Seth' , 'Kathy' , 'Lars' ]); names . add ( 42 ); // Error S\u1eed d\u1ee5ng generic gi\u00fap gi\u1ea3m code duplication. abstract class ObjectCache { Object getByKey ( String key ); void setByKey ( String key , Object value ); } abstract class StringCache { String getByKey ( String key ); void setByKey ( String key , String value ); } 2 class tr\u00ean c\u00f3 th\u1ec3 thay b\u1eb1ng m\u1ed9t class t\u01b0\u01a1ng \u0111\u01b0\u01a1ng abstract class Cache < T > { T getByKey ( String key ); void setByKey ( String key , T value ); } Theo quy \u01b0\u1edbc, ki\u1ec3u b\u00ean trong <\u2026> l\u00e0 nh\u1eefng ch\u1eef c\u00e1i nh\u01b0: E, T, S, K, hay V. Using collection literals \u00b6 List v\u00e0 map \u0111\u1ec1u c\u00f3 th\u1ec3 parameterized. <type> (cho lists) v\u00e0 <keyType, valueType> (cho maps). var names = < String > [ 'Seth' , 'Kathy' , 'Lars' ]; var pages = < String , String > { 'index.html' : 'Homepage' , 'robots.txt' : 'Hints for web robots' , 'humans.txt' : 'We are people, not machines' }; Using parameterized types with constructors \u00b6 Dart h\u1ed7 tr\u1ee3 l\u1eadp tr\u00ecnh vi\u00ean ch\u1ec9 \u0111\u1ecbnh r\u00f5 m\u1ed9t ho\u1eb7c nhi\u1ec1u ki\u1ec3u khi s\u1eed d\u1ee5ng constructor: var names = List < String > (); names . addAll ([ 'Seth' , 'Kathy' , 'Lars' ]); var nameSet = Set < String > . from ( names ); class View { int x ; View ( this . x ); } var views = Map < int , View > (); views [ 0 ] = View ( 0 ); Generic collections and the types they contain \u00b6 var names = List < String > (); names . addAll ([ 'Seth' , 'Kathy' , 'Lars' ]); print ( names is List < String > ); // true M\u1ecdi ki\u1ec3u generic trong Dart \u0111\u1ec1u \u0111\u01b0\u1ee3c reified (c\u1ee5 th\u1ec3 ho\u00e1), \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 th\u00f4ng tin v\u1ec1 ki\u1ec3u d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c mang \u0111i ngay c\u1ea3 khi runtime . Ng\u01b0\u1ee3c l\u1ea1i, generic trong Java s\u1eed d\u1ee5ng erasure (xo\u00e1 b\u1ecf), \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 b\u1ea1n c\u00f3 th\u1ec3 ki\u1ec3m tra \u0111\u01b0\u1ee3c object l\u00e0 m\u1ed9t List, nh\u01b0ng b\u1ea1n kh\u00f4ng th\u1ec3 ki\u1ec3m tra chi ti\u1ebft t\u1edbi m\u1ee9c List<String> . Restricting the parameterized type \u00b6 Khi code m\u1ed9t generic type, b\u1ea1n c\u00f3 th\u1ec3 mu\u1ed1n gi\u1edbi h\u1ea1n c\u00e1c ki\u1ec3u parameters c\u1ee7a n\u00f3. Khi \u0111\u00f3 h\u00e3y s\u1eed d\u1ee5ng extends . class Foo < T extends SomeBaseClass > { // Implementation goes here... String toString () => \"Instance of 'Foo< $ T >'\" ; } class Extender extends SomeBaseClass {...} Ho\u00e0n to\u00e0n OK n\u1ebfu b\u1ea1n s\u1eed d\u1ee5ng SomeBaseClass ho\u1eb7c b\u1ea5t k\u1ef3 subclasses n\u00e0o c\u1ee7a n\u00f3: var someBaseClassFoo = Foo < SomeBaseClass > (); var extenderFoo = Foo < Extender > (); ho\u1eb7c kh\u00f4ng m\u1ed9t ki\u1ec3u n\u00e0o c\u1ea3: var foo = Foo (); print ( foo ); // Instance of 'Foo<SomeBaseClass>' N\u1ebfu b\u1ea1n ch\u1ec9 \u0111\u1ecbnh m\u1ed9t ki\u1ec3u non- SomeBaseClass s\u1ebd c\u00f3 l\u1ed7i: var foo = Foo < Object > (); Using generic methods \u00b6 V\u00e0o l\u00fac kh\u1edfi t\u1ea1o, Dart\u2019s generic gi\u1edbi h\u1ea1n trong classes. T first < T > ( List < T > ts ) { // Do some initial work or error checking, then... T tmp = ts [ 0 ]; // Do some additional checking or processing... return tmp ; } Ki\u1ec3u generic parameter trong first (<T>) cho ph\u00e9p b\u1ea1n s\u1eed ki\u1ec3u argument T \u1edf m\u1ed9t v\u00e0i n\u01a1i: Trong function\u2019s tr\u1ea3 v\u1ec1 ki\u1ec3u ( T ). Trong ki\u1ec3u c\u1ee7a tham s\u1ed1 ( List<T> ). Trong ki\u1ec3u c\u1ee7a bi\u1ebfn \u0111\u1ecba ph\u01b0\u01a1ng ( T tmp ). Chi ti\u1ebft h\u01a1n \u0111\u1ec3 khai b\u00e1o m\u1ed9t generic methods Ki\u1ec3u parameter c\u1ee7a generic methods \u0111\u01b0\u1ee3c li\u1ec7t k\u00ea ngay sau t\u00ean c\u1ee7a method/function v\u00e0 b\u00ean trong <> /// 2 ki\u1ec3u c\u1ee7a parameters, [K] v\u00e0 [V]. Map < K , V > singletonMap < K , V > ( K key , V value ) { return < K , V > { key , value }; } Trong tr\u01b0\u1eddng h\u1ee3p ki\u1ec3u l\u00e0 class, b\u1ea1n c\u00f3 th\u1ec3 th\u00eam gi\u1edbi h\u1ea1n cho n\u00f3 /// Danh s\u00e1ch 2 s\u1ed1 ki\u1ec3u [T] d\u1eabn xu\u1ea5t t\u1eeb ki\u1ec3u num. T sumPair < T extends num > ( List < T > items ) { return items [ 0 ] + items [ 1 ]; } Class methods ( instance v\u00e0 static ) c\u00f3 th\u1ec3 khai b\u00e1o generic parameters theo c\u00e1ch t\u01b0\u01a1ng t\u1ef1: class C { static int f < S , T > ( int x ) => 3 ; int m < S , T > ( int x ) => 3 ; } Generic method v\u1edbi t\u01b0 c\u00e1ch l\u00e0 function-typed parameters, local functions, v\u00e0 function expressions: /// Truy\u1ec1n v\u00e0o generic method l\u00e0 m\u1ed9t [callback] parameter. void functionTypedParameter ( T callback < T > ( T thing )) {} // Khai b\u00e1o local generic function `itself`. void localFunction () { T itself < T > ( T thing ) => thing ; } // G\u00e1n m\u1ed9t generic function expression cho m\u1ed9t local variable. void functionExpression () { var lambda = < T > ( T thing ) => thing ; } Chi ti\u1ebft h\u01a1n v\u1ec1 Generic method, c\u00e1c b\u1ea1n xem th\u00eam t\u1ea1i \u0111\u00e2y . Libraries and visibility \u00b6 \u0110\u1ec3 t\u1ea1o ra c\u00e1c shareable code base, ch\u00fang ta s\u1eed d\u1ee5ng 2 directives l\u00e0 import v\u00e0 library . Libraries ko ch\u1ec9 cung c\u1ea5p c\u00e1c APIs m\u00e0 c\u00f2n \u1ea9n ch\u1ee9a c\u00e1c member ch\u1ec9 t\u1ed3n t\u1ea1i v\u00e0 truy xu\u1ea5t \u0111\u01b0\u1ee3c (visible) b\u00ean trong ch\u00fang. V\u00ed d\u1ee5 c\u00e1c identifiers b\u1eaft \u0111\u1ea7u b\u1eb1ng d\u1ea5u g\u1ea1ch d\u01b0\u1edbi (_). M\u1ecdi \u1ee9ng d\u1ee5ng Dart \u0111\u1ec1u l\u00e0 c\u00e1c library ngay c\u1ea3 khi n\u00f3 kh\u00f4ng s\u1eed d\u1ee5ng library directive. Libraries c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i v\u00e0 s\u1eed d\u1ee5ng th\u00f4ng qua c\u00f4ng c\u1ee5 pub . Using libraries \u00b6 S\u1eed d\u1ee5ng t\u1eeb kho\u00e1 import \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh ph\u1ea1m vi namespace s\u1ebd s\u1eed d\u1ee5ng c\u1ee7a m\u1ed9t library import 'dart:html' ; V\u1edbi c\u00e1c th\u01b0 vi\u1ec7n built-in th\u00ec URI c\u00f3 scheme dart: , c\u00f2n v\u1edbi c\u00e1c th\u01b0 vi\u1ec7n kh\u00e1c ta s\u1eed d\u1ee5ng system path ho\u1eb7c scheme package: import 'package:test/test.dart' ; Specifying a library prefix \u00b6 \u0110\u1ec3 tr\u00e1nh conflict khi import, ta d\u00f9ng alias: If you import two libraries that have conflicting identifiers , then you can specify a prefix for one or both libraries . For example , if library1 and library2 both have an Element class , then you might have code like this : import 'package:lib1/lib1.dart' ; import 'package:lib2/lib2.dart' as lib2 ; // Uses Element from lib1. Element element1 = Element (); // Uses Element from lib2. lib2 . Element element2 = lib2 . Element (); Importing only part of a library \u00b6 Import m\u1ed9t ph\u1ea7n c\u1ee7a library: // Import only foo. import 'package:lib1/lib1.dart' show foo ; // Import all names EXCEPT foo. import 'package:lib2/lib2.dart' hide foo ; Lazily loading a library \u00b6 Deferred loading (hay c\u00f2n g\u1ecdi l\u00e0 lazy loading ) cho ph\u00e9p \u1ee9ng d\u1ee5ng load c\u00e1c library theo nhu c\u1ea7u (on demand) n\u1ebfu c\u1ea7n. M\u1ed9t v\u00e0i tr\u01b0\u1eddng h\u1ee3p sau c\u00f3 th\u1ec3 b\u1ea1n s\u1ebd mu\u1ed1n d\u00f9ng deferred loading: Gi\u1ea3m th\u1eddi gi\u1ea3n b\u1eaft \u0111\u1ea7u kh\u1edfi t\u1ea1o app. Th\u1ef1c hi\u1ec7n A/B testing. \u0110\u1ec3 load ch\u1ee9c n\u0103ng \u00edt s\u1eed d\u1ee5ng nh\u01b0 h\u1ed9p tho\u1ea1i dialog ho\u1eb7c m\u00e0n h\u00ecnh tu\u1ef3 ch\u1ecdn. \u0110\u1ec3 lazily load m\u1ed9t library, b\u1ea1n c\u1ea7n import ch\u00fang b\u1eb1ng c\u00fa ph\u00e1p deferred as . import 'package:greetings/hello.dart' deferred as hello ; Khi b\u1ea1n c\u1ea7n s\u1eed d\u1ee5ng library, g\u1ecdi h\u00e0m loadLibrary() qua \u0111\u1ecbnh danh c\u1ee7a ch\u00fang: Future greet () async { await hello . loadLibrary (); hello . printGreeting (); } Trong \u0111o\u1ea1n code tr\u00ean, await keyword d\u1eebng ch\u01b0\u01a1ng tr\u00ecnh l\u1ea1i cho t\u1edbi khi th\u01b0 vi\u1ec7n \u0111\u01b0\u1ee3c load xong. B\u1ea1n c\u00f3 th\u1ec3 g\u1ecdi loadLibrary() nhi\u1ec1u l\u1ea7n trong m\u1ed9t th\u01b0 vi\u1ec7n m\u00e0 kh\u00f4ng g\u1eb7p b\u1ea5t c\u1ee9 v\u1ea5n \u0111\u1ec1 g\u00ec, v\u00ec th\u01b0 vi\u1ec7n ch\u1ec9 load m\u1ed9t l\u1ea7n duy nh\u1ea5t. Lu\u00f4n ghi nh\u1edb r\u1eb1ng - C\u00e1c constant c\u1ee7a library kh\u00f4ng \u0111\u01b0\u1ee3c coi l\u00e0 constant trong file import. N\u00ean nh\u1edb r\u1eb1ng, constant kh\u00f4ng t\u00f4ng t\u1ea1i cho t\u1edbi khi library \u0111\u01b0\u1ee3c load. - B\u1ea1n ko th\u1ec3 s\u1eed d\u1ee5ng ki\u1ec3u t\u1eeb deferred library trong file import. Thay v\u00e0o \u0111\u00f3, h\u00e3y suy x\u00e9t c\u00e1c di chuy\u1ec3n n\u00f3 sang interface types \u0111\u1ec3 c\u00f3 th\u1ec3 import b\u1eb1ng c\u1ea3 deferred library v\u00e0 importing file. - Dart ng\u1ea7m th\u00eam loadLibrary() v\u00e0o namespace m\u00e0 b\u1ea1n khai b\u00e1o s\u1eed d\u1ee5ng deferred. loadLibrary() function tr\u1ea3 v\u1ec1 Future . Implementing libraries \u00b6 Tham kh\u1ea3o Create Library Packages n\u1ebfu b\u1ea1n mu\u1ed1n vi\u1ebft th\u01b0 vi\u1ec7n cho Dart. Asynchrony support \u00b6 Dart libraries l\u00e0 m\u1ed9t b\u1ed9 si\u00eau \u0111\u1ea7y \u0111\u1ee7 c\u00e1c functions tr\u1ea3 v\u1ec3 Future ho\u1eb7c Stream objects. Nh\u1eefng function n\u00e0y l\u00e0 b\u1ea5t \u0111\u1ed3ng b\u1ed9 ( asynchronous ), t\u01b0\u01a1ng t\u1ef1 Javascript ch\u00fang ta c\u00f3 1 c\u1eb7p t\u1eeb kho\u00e1 async v\u00e0 await . Handling Futures \u00b6 Khi b\u1ea1n mu\u1ed1n k\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c ho\u00e0n th\u00e0nh trong t\u01b0\u01a1ng lai (Future), b\u1ea1n c\u00f3 2 c\u00e1ch sau: - S\u1eed d\u1ee5ng async v\u00e0 await . - S\u1eed d\u1ee5ng Future API. Code s\u1eed d\u1ee5ng async v\u00e0 await l\u00e0 b\u1ea5t \u0111\u1ed3ng b\u1ed9, nh\u01b0ng h\u1ea7u nh\u01b0 ch\u00fang gi\u1ed1ng nh\u01b0 c\u00e1c \u0111o\u1ea1n code x\u1eed l\u00fd \u0111\u1ed3ng b\u1ed9. V\u00ed d\u1ee5, \u0111o\u1ea1n code sau s\u1eed d\u1ee5ng await \u0111\u1ec3 ch\u1edd k\u1ebft qu\u1ea3 c\u1ee7a x\u1eed l\u00fd t\u1eeb function b\u1ea5t \u0111\u1ed3ng b\u1ed9: await lookUpVersion (); \u0110\u1ec3 d\u00f9ng await th\u00ec code b\u1eaft bu\u1ed9c ph\u1ea3i n\u1eb1m trong async function Future checkVersion () async { var version = await lookUpVersion (); // Do something with version } S\u1eed d\u1ee5ng try , catch , v\u00e0 finally \u0111\u1ec3 x\u1eed l\u00fd errors & cleanup trong code c\u00f3 s\u1eed d\u1ee5ng await : try { version = await lookUpVersion (); } catch ( e ) { // React to inability to look up the version } L\u01b0u \u00fd : async function tr\u1ea3 v\u1ec1 Future object. Trong await expression , gi\u00e1 tr\u1ecb c\u1ee7a expression th\u01b0\u1eddng l\u00e0 Future ; v\u00e0 n\u1ebfu kh\u00f4ng ph\u1ea3i th\u00ec gi\u00e1 tr\u1ecb \u0111\u00f3 c\u0169ng s\u1ebd t\u1ef1 \u0111\u1ed9ng \u0111\u01b0\u1ee3c wrapp v\u00e0o trong Future object. Future object d\u1eabn t\u1edbi m\u1ed9t promise tr\u1ea3 v\u1ec1 object. Sau c\u00f9ng, gi\u00e1 tr\u1ecb c\u1ee7a await expression s\u1ebd tr\u1ea3 v\u1ec1 object \u0111\u00f3. await expression s\u1ebd d\u1eebng vi\u1ec7c th\u1ef1c thi l\u1ea1i cho t\u1edbi khi object s\u1eb5n s\u00e0ng. N\u1ebfu b\u1ea1n g\u1eb7p l\u1ed7i compile-time khi s\u1eed d\u1ee5ng await , h\u00e3y \u0111\u1ea3m b\u1ea3o r\u0103ng b\u1ea1n \u0111ang s\u1eed d\u1ee5ng await b\u00ean trong async function. V\u00ed d\u1ee5 sau s\u1eed d\u1ee5ng await trong app\u2019s main() function, body c\u1ee7a main() ph\u1ea3i \u0111i k\u00e8m v\u1edbi keyword async : Future main () async { checkVersion (); print ( 'In main: version is ${ await lookUpVersion () } ' ); } Declaring async functions \u00b6 V\u00ed d\u1ee5 chuy\u1ec3n t\u1eeb function \u0111\u1ed3ng b\u1ed9 sang function b\u1ea5t \u0111\u1ed3ng b\u1ed9: String lookUpVersion () => '1.0.0' ; Future < String > lookUpVersion () async => '1.0.0' ; Handling Streams \u00b6 Khi b\u1ea1n c\u1ea7n l\u1ea5y gi\u00e1 tr\u1ecb t\u1eeb m\u1ed9t Stream, b\u1ea1n c\u00f3 2 l\u1ef1a ch\u1ecdn - S\u1eed d\u1ee5ng async v\u00e0 asynchronous for loop ( await for ). - S\u1eed d\u1ee5ng Stream API. await for ( varOrType identifier in expression ) { // Executes each time the stream emits a value. } Gi\u00e1 tr\u1ecb c\u1ee7a expression ph\u1ea3i c\u00f3 ki\u1ec3u Stream . Qu\u00e1 tr\u00ecnh ch\u1ea1y nh\u01b0 sau: \u0110\u1ee3i cho t\u1edbi khi stream \u0111\u01b0a ra gi\u00e1 tr\u1ecb. Th\u1ef1c thi code b\u00ean trong for loop . L\u1eb7p l\u1ea1i 1 v\u00e0 2 cho t\u1edbi khi stream b\u1ecb close. \u0110\u1ec3 d\u1eebng vi\u1ec7c l\u1eafng nghe stream, b\u1ea1n c\u00f3 th\u1ec3 break ho\u1eb7c return , which breaks out of the for loop and unsubscribes from the stream. Generators \u00b6 Dart h\u1ed7 tr\u1ee3 2 lo\u1ea1i built-in generator functions: - Synchronous generator: Tr\u1ea3 v\u1ec1 Iterable object. Iterable < int > naturalsTo ( int n ) sync * { int k = 0 ; while ( k < n ) yield k ++ ; } - Asynchronous generator: Tr\u1ea3 v\u1ec1 Stream object. Stream < int > asynchronousNaturalsTo ( int n ) async * { int k = 0 ; while ( k < n ) yield k ++ ; } Callable classes \u00b6 \u0110\u1ec3 c\u00f3 th\u1ec3 g\u1ecdi Dart class nh\u01b0 function, ta implement ph\u01b0\u01a1ng th\u1ee9c call(). class WannabeFunction { call ( String a , String b , String c ) => ' $ a $ b $ c !' ; } main () { var wf = new WannabeFunction (); var out = wf ( \"Hi\" , \"there,\" , \"gang\" ); print ( ' $ out ' ); } Hi there, gang! Isolates \u00b6 H\u1ea7u h\u1ebft computers, ho\u1eb7c mobile platforms \u0111\u01b0\u1ee3c trang b\u1ecb multi-core CPUs. \u0110\u1ec3 t\u1eadn d\u1ee5ng t\u1ed1i \u0111a l\u1ee3i th\u1ebf \u0111\u00f3, th\u00f4ng developer c\u00f3 th\u1ec3 ch\u1ea1y \u0111\u1ed3ng th\u1eddi c\u00e1c shared-memory threads. Tuy nhi\u00ean, vi\u1ec7c chia s\u1ebb tr\u1ea1ng th\u00e1i (shared-state) c\u1ee7a c\u00e1c concurrency r\u1ea5t d\u1ec5 d\u1eabn t\u1edbi l\u1ed7i c\u0169ng nh\u01b0 l\u00e0m code tr\u1edf n\u00ean ph\u1ee9c t\u1ea1p. Thay v\u00ec s\u1ee7 d\u1ee5ng threads, t\u1ea5t c\u1ea3 Dart code \u0111\u01b0\u1ee3c th\u1ef1c thi \u1edf b\u00ean trong 1 v\u00f9ng c\u00f4 l\u1eadp. M\u1ed7i v\u00f9ng v\u00f4 l\u1eadp c\u00f3 memory heap ri\u00eang, \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng state c\u1ee7a v\u00f9ng isolate n\u00e0y kh\u00f4ng b\u1ecb truy c\u1eadp b\u1edfi v\u00f9ng isolate kh\u00e1c. Chi ti\u1ebft tham kh\u1ea3o dart:isolate . Typedefs \u00b6 Trong Dart, m\u1ecdi th\u1ee9 \u0111\u1ec1u l\u00e0 object. typedef , ho\u1eb7c function-type alias, \u0111\u1eb7t t\u00ean cho function m\u00e0 b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a c\u00e1c fields v\u00e0 tr\u1ea3 v\u1ec1 types. \u0110o\u1ea1n code sau kh\u00f4ng s\u1eed d\u1ee5ng typedef, v\u00e0 th\u00f4ng tin v\u1ec1 ki\u1ec3u s\u1ebd bi\u1ebfn m\u1ea5t khi b\u1ea1n g\u00e1n compare = f , trong khi ki\u1ec3u c\u1ee7a f l\u00e0 (Object, Object) \u2192 int . class SortedCollection { Function compare ; SortedCollection ( int f ( Object a , Object b )) { compare = f ; } } // Initial, broken implementation. int sort ( Object a , Object b ) => 0 ; void main () { SortedCollection coll = SortedCollection ( sort ); // All we know is that compare is a function, // but what type of function? assert ( coll . compare is Function ); } Hot fix s\u1eed d\u1ee5ng typedef typedef Compare = int Function ( Object a , Object b ); class SortedCollection { Compare compare ; SortedCollection ( this . compare ); } // Initial, broken implementation. int sort ( Object a , Object b ) => 0 ; void main () { SortedCollection coll = SortedCollection ( sort ); assert ( coll . compare is Function ); assert ( coll . compare is Compare ); } V\u1edbi phi\u00ean b\u1ea3n Dart 2 hi\u1ec7n t\u1ea1i th\u00ec typedefs ch\u1ec9 gi\u1edbi h\u1ea1n s\u1eed d\u1ee5ng v\u1edbi function . typedef c\u0169ng ch\u1ec9 \u0111\u01a1n gi\u1ea3n l\u00e0 m\u1ed9t alias, gi\u00fap ch\u00fang ta check ki\u1ec3u c\u1ee7a m\u1ed7i function: typedef Compare < T > = int Function ( T a , T b ); int sort ( int a , int b ) => a - b ; void main () { assert ( sort is Compare < int > ); // True! } Driving Deep \u00b6 \u0110\u1ec3 hi\u1ec3u s\u00e2u h\u01a1n v\u1ec1 Dart th\u00ec kh\u00f4ng c\u00f2n c\u00e1ch n\u00e0o kh\u00e1c ngo\u00e0i m\u1ea7n v\u00e0o core c\u1ee7a Dart. B\u1ea1n c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u s\u00e2u v\u1ec1 c\u01a1 ch\u1ebf ho\u1ea1t \u0111\u1ed9c v\u00e0 c\u00e1ch s\u1eed d\u1ee5ng c\u1ee7a Dart libraries t\u1ea1i A Tour of the Dart Libraries . V\u00e0 l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 code trong s\u00e1ng, convention chu\u1ea9n, hi\u1ec3u nh\u1eefng \u0111i\u1ec1u n\u00ean v\u00e0 kh\u00f4ng n\u00ean khi code Dart, th\u00ec b\u1ea1n n\u00ean \u0111\u1ecdc th\u00eam Effective Dart . References \u00b6 Dart Home Page A Tour of the Dart Language","title":"Dart c\u01a1 b\u1ea3n"},{"location":"dart_core/#important-concepts","text":"Khi b\u1ea1n code Dart language, h\u00e3y lu\u00f4n ghi nh\u1edb nh\u1eefng kh\u00e1i ni\u1ec7m sau trong \u0111\u1ea7u: M\u1ecdi th\u1ee9 b\u1ea1n g\u00e1n v\u00e0o c\u00e1c bi\u1ebfn (variable) \u0111\u1ec1u l\u00e0 m\u1ed9t object , v\u00e0 m\u1ed7i object l\u00e0 m\u1ed9t instance c\u1ee7a class . Ngay c\u1ea3 numbers, functions, v\u00e0 null c\u0169ng l\u00e0 c\u00e1c objects . T\u1ea5t c\u1ea3 objects \u0111\u01b0\u1ee3c k\u1ebf th\u1eeba t\u1eeb [Object][] class. M\u1eb7c d\u00f9 Dart l\u00e0 ng\u00f4n ng\u1eef strongly typed (ch\u00fa tr\u1ecdng v\u00e0o ki\u1ec3u d\u1eef li\u1ec7u), nh\u01b0ng type annotations l\u1ea1i l\u00e0 tu\u1ef3 ch\u1ecdn v\u00ec Dart c\u00f3 th\u1ec3 t\u1ef1 suy ra ki\u1ec3u d\u1ef1a v\u00e0o gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn. V\u00ed d\u1ee5 trong \u0111o\u1ea1n code tr\u00ean, number s\u1ebd mang ki\u1ec3u int . Khi b\u1ea1n kh\u00f4ng mong \u0111\u1ee3i m\u1ed9t ki\u1ec3u nh\u1ea5t \u0111\u1ecbnh n\u00e0o, h\u00e3y s\u1eed d\u1ee5ng ki\u1ec3u dynamic . Dart h\u1ed7 tr\u1ee3 generic types, v\u00ed d\u1ee5 nh\u01b0 List<int> (m\u1ed9t danh s\u00e1ch c\u00e1c s\u1ed1 integers) ho\u1eb7c List<dynamic> (m\u1ed9t danh s\u00e1ch c\u00e1c objects mang ki\u1ec3u b\u1ea5t k\u1ef3). Dart h\u1ed7 tr\u1ee3 top-level functions (v\u00ed d\u1ee5 nh\u01b0 main() ), c\u0169ng nh\u01b0 c\u00e1c functions g\u1eafn li\u1ec1n v\u1edbi m\u1ed9t class ho\u1eb7c object (t\u01b0\u01a1ng \u1ee9ng v\u1edbi static v\u00e0 instance methods ). B\u1ea1n c\u0169ng c\u00f3 th\u1ec3 t\u1ea1o ra functions b\u00ean trong functions (g\u1ecdi l\u00e0 nested ho\u1eb7c local functions ). T\u01b0\u01a1ng t\u1ef1, Dart h\u1ed7 tr\u1ee3 top-level variables , c\u0169ng nh\u01b0 c\u00e1c variables g\u1eafn li\u1ec1n v\u1edbi m\u1ed9t class ho\u1eb7c object (st\u01b0\u01a1ng \u1ee9ng v\u1edbi static v\u00e0 instance variables ). Instance variables \u0111\u00f4i l\u00fac \u0111\u01b0\u1ee3c bi\u1ebft t\u1edbi v\u1edbi t\u00ean g\u1ecdi fields ho\u1eb7c properties . Kh\u00f4ng gi\u1ed1ng v\u1edbi Java, Dart kh\u00f4ng c\u00f3 keywords public , protected , private . N\u1ebfu m\u1ed9t bi\u1ebfn (identifier) b\u1eaft \u0111\u1ea7u v\u1edbi d\u1ea5u underscore (_), N\u00f3 s\u1ebd l\u00e0 private trong library c\u1ee7a n\u00f3 (V\u00ed d\u1ee5 khi b\u1ea1n import th\u01b0 vi\u1ec7n \u0111\u00f3 v\u00e0o th\u00ec ch\u00fang s\u1ebd ko th\u1ec3 d\u00f9ng b\u00ean ngo\u00e0i th\u01b0 vi\u1ec7n). Chi ti\u1ebft h\u01a1n t\u1ea1i Libraries and visibility . Identifiers c\u00f3 th\u1ec3 b\u1eaft \u0111\u1ea7u b\u1eb1ng ch\u1eef c\u00e1i ho\u1eb7c d\u1ea5u g\u1ea1ch d\u01b0\u1edbi (_), theo sau l\u00e0 b\u1ea5t k\u1ef3 s\u1ef1 k\u1ebft h\u1ee3p n\u00e0o c\u1ee7a c\u00e1c k\u00fd t\u1ef1 \u0111\u00f3 c\u00f9ng v\u1edbi ch\u1eef s\u1ed1.. \u0110\u00f4i khi, vi\u1ec7c nh\u00ecn nh\u1eadn m\u1ed9t th\u1ee9 n\u00e0o \u0111\u00f3 trong Dart l\u00e0 m\u1ed9t expression hay m\u1ed9t statement c\u00f3 th\u1ec3 tr\u1edf n\u00ean quan tr\u1ecdng, do \u0111\u00f3 vi\u1ec7c s\u1eed d\u1ee5ng 2 t\u1eeb ng\u1eef \u0111\u1ec3 m\u00f4 t\u1ea3 s\u1ebd r\u1ea5t h\u1eefu \u00edch. Dart tools c\u00f3 th\u1ec3 th\u00f4ng b\u00e1o 2 lo\u1ea1i v\u1ea5n \u0111\u1ec1 khi th\u1ef1c thi: warnings v\u00e0 errors . Warnings ch\u1ec9 \u0111\u01a1n gi\u1ea3n ch\u1ec9 ra nh\u1eefng \u0111o\u1ea1n code c\u00f3 th\u1ec3 kh\u00f4ng ch\u1ea1y \u0111\u00fang nh\u01b0ng ch\u00fang kh\u00f4ng ng\u0103n ch\u01b0\u01a1ng tr\u00ecnh c\u1ee7a b\u1ea1n th\u1ef1c thi. Errors c\u00f3 th\u1ec3 l\u00e0 l\u1ed7i x\u1ea3y ra l\u00fac compile-time ho\u1eb7c run-time . Compile-time hi\u1ec3n nhi\u00ean s\u1ebd khi\u1ebfn code b\u1ea1n kh\u00f4ng ch\u1ea1y \u0111\u01b0\u1ee3c; K\u1ebft qu\u1ea3 c\u1ee7a run-time error l\u1ea1i l\u00e0 nh\u1eefng exception \u0111\u01b0\u1ee3c throw ra khi ch\u1ea1y.","title":"Important concepts"},{"location":"dart_core/#variables","text":"\u0110\u1ec3 khai b\u00e1o m\u1ed9t bi\u1ebfn name tham chi\u1ebfu t\u1edbi String object v\u1edbi gi\u00e1 tr\u1ecb \u201cBob\u201d, ta c\u00f3 th\u1ec3 d\u00f9ng 1 trong 3 c\u00e1ch sau: var name = 'Bob' ; dynamic name = 'Bob' ; String name = 'Bob' ;","title":"Variables"},{"location":"dart_core/#default-value","text":"Gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o c\u1ee7a m\u1ed9t bi\u1ebfn b\u1ea5t k\u1ef3 \u0111\u1ec1u l\u00e0 null . int lineCount ; assert ( lineCount == null );","title":"Default value"},{"location":"dart_core/#final-and-const","text":"N\u1ebfu b\u1ea1n kh\u00f4ng mu\u1ed1n gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn b\u1ecb thay \u0111\u1ed5i, h\u00e3y s\u1eed d\u1ee5ng final ho\u1eb7c const thay v\u00ec d\u00f9ng var/type ; Vi\u1ec7c hi\u1ec3u r\u00f5 nguy\u00ean l\u00fd ho\u1ea1t \u0111\u1ed9ng final v\u1edbi const kh\u00f4ng h\u1ec1 \u0111\u01a1n gi\u1ea3n m\u1ed9t ch\u00fat n\u00e0o final name = 'Bob' ; // Without a type annotation // name = 'Alice'; // Uncommenting this causes an error: Error: Setter not found: 'name'. final String nickname = 'Bobby' ; // With a type annotation const bar = 1000000 ; // Unit of pressure (dynes/cm2) const double atm = 1.01325 * bar ; // Standard atmosphere final ngh\u0129a l\u00e0 single-assignment M\u1ed7i m\u1ed9t bi\u1ebfn final ho\u1eb7c m\u1ed9t thu\u1ed9c t\u00ednh ph\u1ea3i c\u00f3 m\u1ed9t kh\u1edfi t\u1ea1o. V\u00e0 m\u1ed9t khi b\u1ea1n \u0111\u00e3 g\u00e1n gi\u00e1 tr\u1ecb cho bi\u1ebfn \u0111\u00f3 th\u00ec, b\u1ea1n s\u1ebd ko th\u1ec3 g\u00e1n l\u1ea1i cho n\u00f3 1 gi\u00e1 tr\u1ecb kh\u00e1c. final List finalList = new List (); finalList . addAll ([ 'one' , 'two' , 'three' ]); // Fail: can not assign new value/reference to final finalList finalList = new List (); // But you can change the content of the list finalList . clear (); finalList . forEach (( f ) => print ( f )); //empty const ngh\u0129a l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng b\u1ea5t bi\u1ebfn kh\u00f4ng \u0111\u1ed5i \u1edf th\u1eddi \u0111i\u1ec3m compile code. M\u1ed9t khi b\u1ea1n g\u00e1n gi\u00e1 tr\u1ecb t\u1edbi m\u1ed9t const object th\u00ec b\u1ea1n kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb \u0111\u00f3. V\u00e0 gi\u00e1 tr\u1ecb \u0111\u00f3 ph\u1ea3i \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o v\u00e0o th\u1eddi \u0111i\u1ec3m compile code, ch\u1ee9 ko ph\u1ea3i \u0111\u1ee3i t\u1edbi th\u1eddi \u0111i\u1ec3m run code. const List constList = const [ 'one' , 'two' , 'three' ]; constList . add ( 'four' ); // Can not add to immutable object constList = new List (); // Can not assign new value constList . clear (); // Can not change the content constList . forEach (( f ) => print ( \"const $ f \" )); N\u1ebfu const variable \u1edf class level, h\u00e3y s\u1eed d\u1ee5ng static const . Ngo\u00e0i ra, const kh\u00f4ng ch\u1ec9 \u0111\u01b0\u1ee3c d\u00f9ng trong \u0111\u1ecbnh ngh\u0129a h\u1eb1ng bi\u1ebfn (constant variables), m\u00e0 n\u00f3 c\u00f2n c\u00f3 th\u1ec3 t\u1ea1o ra h\u1eb1ng gi\u00e1 tr\u1ecb (constant values). // Note: [] t\u1ea1o ra m\u1ed9t list r\u1ed7ng. // const [] t\u1ea1o ra m\u1ed9t list r\u1ed7ng v\u00e0 kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i (EIL: empty, immutable list). var foo = const []; // foo \u0111ang l\u00e0 m\u1ed9t EIL. final bar = const []; // bar s\u1ebd lu\u00f4n lu\u00f4n l\u00e0 EIL. const baz = const []; // baz l\u00e0 m\u1ed9t compile-time constant EIL. // N\u1ebfu b\u1ea1n c\u1ed1 t\u00ecnh s\u1eeda gi\u00e1 tr\u1ecb c\u1ee7a const variable list s\u1ebd c\u00f3 l\u1ed7i // foo[0] = 1; // Cannot modify an unmodifiable list // B\u1ea1n c\u00f3 th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a m\u1ed9t non-final, non-const variable // Ngay c\u1ea3 khi n\u00f3 c\u00f3 gi\u00e1 tr\u1ecb = const value. foo = [ 1 , 2 ]; // B\u1ea1n kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a 2 bi\u1ebfn sau. // bar = []; // Unhandled exception. // baz = []; // Unhandled exception.","title":"Final and const"},{"location":"dart_core/#built-in-types","text":"Dart h\u1ed7 tr\u1ee3 c\u00e1c ki\u1ec3u sau: numbers strings booleans lists (hay c\u00f2n g\u1ecdi l\u00e0 arrays) maps runes (bi\u1ec3u di\u1ec5n Unicode characters theo d\u1ea1ng chu\u1ed7i) symbols M\u00ecnh s\u1ebd ch\u1ec9 \u0111\u1ec1 c\u1eadp t\u1edbi c\u00e1c ki\u1ec3u m\u00e0 m\u00ecnh th\u00edch =))","title":"Built-in types"},{"location":"dart_core/#maps","text":"\u0110\u1ec3 kh\u1edfi t\u1ea1o m\u1ed9t Map object, ta c\u00f3 th\u1ec3 d\u00f9ng c\u00e1c c\u00e1ch sau: var gifts = { // Key: Value 'first' : 'partridge' , 'second' : 'turtledoves' , 'fifth' : 'golden rings' }; var gifts = Map (); gifts [ 'first' ] = 'partridge' ; gifts [ 'second' ] = 'turtledoves' ; gifts [ 'fifth' ] = 'golden rings' ; S\u1eed d\u1ee5ng .length s\u1ebd tr\u1ea3 v\u1ec1 s\u1ed1 l\u01b0\u1ee3ng c\u1eb7p key-value trong map: var gifts = { 'first' : 'partridge' }; gifts [ 'fourth' ] = 'calling birds' ; assert ( gifts . length == 2 ); Ch\u00fang ta c\u0169ng s\u1ebd g\u1eb7p l\u1ed7i n\u1ebfu c\u1ed1 t\u00ecnh thay \u0111\u1ed5i constant Map (constant values) final constantMap = const { 2 : 'helium' , 10 : 'neon' , 18 : 'argon' , }; // constantMap[2] = 'Helium'; // Uncommenting this causes an error: Cannot set value in unmodifiable Map.","title":"Maps"},{"location":"dart_core/#runes","text":"Trong Dart, runes l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p m\u00e3 UTF-32 c\u1ee7a string. Unicode \u0111\u1ecbnh ngh\u0129a m\u1ed9t gi\u00e1 tr\u1ecb s\u1ed1 duy nh\u1ea5t cho m\u1ed7i k\u00fd t\u1ef1 g\u1ed3m ch\u1eef c\u00e1i, s\u1ed1 v\u00e0 k\u00fd hi\u1ec7u s\u1eed d\u1ee5ng trong h\u1ec7 th\u1ed1ng ch\u1eef vi\u1ebft tr\u00ean th\u1ebf gi\u1edbi. V\u00ec m\u1ed9t Dart string l\u00e0 s\u1ef1 n\u1ed1i ti\u1ebfp tu\u1ea7n t\u1ef1 c\u1ee7a c\u00e1c UTF-16 code units, bi\u1ec3u di\u1ec5n gi\u00e1 tr\u1ecb 32-bit Unicode trong m\u1ed9t string \u0111\u00f2i h\u1ecfi c\u00e1c c\u00fa ph\u00e1p \u0111\u1eb7c bi\u1ec7t. C\u00e1ch th\u00f4ng d\u1ee5ng \u0111\u1ec3 bi\u1ec3u di\u1ec5n m\u1ed9t m\u00e3 Unicode l\u00e0 \\uXXXX , \u1edf \u0111\u00e2y XXXX l\u00e0 m\u1ed9t chu\u1ed7i g\u1ed3m 4-ch\u1eef s\u1ed1 hexidecimal (h\u1ec7 th\u1eadp l\u1ee5c ph\u00e2n, c\u01a1 s\u1ed1 16). V\u00ed d\u1ee5, K\u00ed t\u1ef1 tr\u00e1i tim (\u2665) l\u00e0 \\u2665 . \u0110\u1ec3 bi\u1ec3u di\u1ec5n nhi\u1ec1u ho\u1eb7c \u00edt h\u01a1n 4 hex digits, ta \u0111\u1eb7t gi\u00e1 tr\u1ecb c\u1ee7a ch\u00fang trong d\u1ea5u ngo\u1eb7c nh\u1ecdn. V\u00ed d\u1ee5 v\u1edbi emoji ( ) s\u1ebd bi\u1ec3u di\u1ec5n l\u00e0 \\u{1f600} . String class c\u00f3 c\u00e1c thu\u1ed9c t\u00ednh m\u00e0 b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 l\u1ea5y th\u00f4ng v\u1ec1 rune. codeUnitAt v\u00e0 codeUnit properties tr\u1ea3 v\u1ec1 m\u00e3 16-bit. Ho\u1eb7c d\u00f9ng runes property \u0111\u1ec3 l\u1ea5y runes of a string . V\u00ed d\u1ee5 b\u00ean d\u01b0\u1edbi mi\u00eau t\u1ea3 m\u1ed1i quan h\u1ec7 gi\u1eefa runes, 16-bit code units, v\u00e0 32-bit code points. var clapping = ' \\u{1f44f} ' ; print ( clapping ); print ( clapping . codeUnits ); print ( clapping . runes . toList ()); Runes input = new Runes ( ' \\u2665 \\u{1f605} \\u{1f60e} \\u{1f47b} \\u{1f596} \\u{1f44d} ' ); print ( new String . fromCharCodes ( input )); S\u1ebd in ra \ud83d\udc4f [55357, 56399] [128079] \u2665 \ud83d\ude05 \ud83d\ude0e \ud83d\udc7b \ud83d\udd96 \ud83d\udc4d","title":"Runes"},{"location":"dart_core/#functions","text":"V\u00ec Dart l\u00e0 true object-oriented language n\u00ean function c\u0169ng l\u00e0 object. B\u1ea1n c\u00f3 th\u1ec3 khai b\u00e1o 1 function theo c\u00e1c ki\u1ec3u b\u00ean d\u01b0\u1edbi: bool isNoble ( int atomicNumber ) { return _nobleGases [ atomicNumber ] != null ; } isNoble ( atomicNumber ) { return _nobleGases [ atomicNumber ] != null ; } bool isNoble ( int atomicNumber ) => _nobleGases [ atomicNumber ] != null ;","title":"Functions"},{"location":"dart_core/#optional-parameters","text":"Optional named parameters: S\u1eed d\u1ee5ng d\u1ea5u ngo\u1eb7c nh\u1ecdn {param1, param2, \u2026} Optional positional parameters: S\u1eed d\u1ee5ng d\u1ea5u ngo\u1eb7c vu\u00f4ng [param1, param2, \u2026] Default parameter values: S\u1eed d\u1ee5ng d\u1ea5u = \u0111\u1ec3 khai b\u00e1o gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh cho optional parameter String drink ({ String drinks = 'whisky' }) { return 'I am drink $ drinks ' ; } String say ( String from , String msg , [ String device ]) { var result = ' $ from says $ msg ' ; if ( device != null ) { result = ' $ result with a $ device ' ; } return result ; } print ( drink ()); print ( drink ( drinks: 'vodka' )); print ( say ( 'Bob' , 'Howdy' )); print ( say ( 'Bob' , 'Howdy' , 'smoke signal' )); s\u1ebd cho ra k\u1ebft qu\u1ea3: I am drink whisky I am drink vodka Bob says Howdy Bob says Howdy with a smoke signal","title":"Optional parameters"},{"location":"dart_core/#the-main-function","text":"T\u1ea5t c\u1ea3 c\u00e1c \u1ee9ng d\u1ee5ng \u0111\u1ec1u c\u00f3 m\u1ed9t h\u00e0m top-level main() . main() tr\u1ea3 v\u1ec3 ki\u1ec3u void v\u00e0 c\u00f3 tham s\u1ed1 tu\u1ef3 ch\u1ecdn l\u00e0 List<String> . void main ( List < String > arguments ) { print ( arguments ); assert ( arguments . length == 2 ); assert ( int . parse ( arguments [ 0 ]) == 1 ); assert ( arguments [ 1 ] == 'test' ); } Ch\u00fa \u00fd khi compile code n\u1ebfu mu\u1ed1n c\u00e1c c\u00e2u l\u1ec7nh assert c\u00f3 hi\u1ec7u l\u1ef1c th\u00ec b\u1ea1n nh\u1edb th\u00eam flag sau v\u00e0o nh\u00e9: $ dart --enable-asserts bin/main.dart 1 test","title":"The main() function"},{"location":"dart_core/#functions-as-first-class-objects","text":"Dart cho ph\u00e9p truy\u1ec1n m\u1ed9t function v\u1edbi t\u01b0 c\u00e1ch l\u00e0 bi\u1ebfn c\u1ee7a m\u1ed9t function kh\u00e1c, v\u00e0 c\u0169ng c\u00f3 th\u1ec3 g\u00e1n m\u1ed9t function v\u00e0o m\u1ed9t bi\u1ebfn. void printElement ( int element ) { print ( element ); } var list = [ 1 , 2 , 3 ]; // Pass printElement as a parameter. list . forEach ( printElement ); var loudify = ( msg ) => '!!! ${ msg . toUpperCase () } !!!' ; assert ( loudify ( 'hello' ) == '!!! HELLO !!!' );","title":"Functions as first-class objects"},{"location":"dart_core/#anonymous-functions","text":"B\u1ea1n c\u00f3 th\u1ec3 t\u1ea1o ra c\u00e1c h\u00e0m v\u00f4 danh ( anonymous function ) hay \u0111\u00f4i l\u00fac g\u1ecdi l\u00e0 lambda ho\u1eb7c closure . ([[ Type ] param1 [, \u2026 ]]) { codeBlock ; };","title":"Anonymous functions"},{"location":"dart_core/#closures","text":"Ch\u1ec9 c\u1ea7n ch\u00fa \u00fd ki\u1ec3u tr\u1ea3 v\u1ec1 c\u1ee7a wrap function l\u00e0 Function . /// Returns a function that adds [addBy] to the /// function's argument. Function makeAdder ( num addBy ) { return ( num i ) => addBy + i ; } // Create a function that adds 2. var add2 = makeAdder ( 2 ); // Create a function that adds 4. var add4 = makeAdder ( 4 ); assert ( add2 ( 3 ) == 5 ); assert ( add4 ( 3 ) == 7 );","title":"Closures"},{"location":"dart_core/#operators","text":"","title":"Operators"},{"location":"dart_core/#arithmetic-operators","text":"Th\u1ea5y c\u00f3 c\u00e1i to\u00e1n t\u1eed n\u00e0y l\u1ea1 l\u1ea1 assert ( 5 / 2 == 2.5 ); // Ph\u00e9p chia tr\u1ea3 v\u1ec1 ki\u1ec3u double assert ( 5 ~/ 2 == 2 ); // Ph\u00e9p chia tr\u1ea3 v\u1ec1 ki\u1ec3u int","title":"Arithmetic operators"},{"location":"dart_core/#type-test-operators","text":"M\u1ed9t to\u00e1n t\u1eed m\u00ecnh ngh\u0129 l\u00e0 r\u1ea5t m\u1edbi, d\u00f9ng \u0111\u1ec3 check ki\u1ec3u c\u1ee7a bi\u1ebfn l\u00fac runtime. Ph\u00e9p to\u00e1n \u00dd ngh\u0129a as \u00c9p ki\u1ec3u is True n\u1ebfu object c\u00f3 c\u00f9ng ki\u1ec3u \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh is! True n\u1ebfu object kh\u00f4ng c\u00f9ng ki\u1ec3u \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh M\u1ecdi th\u1ee9 trong dart \u0111\u1ec1u l\u00e0 Object String s = 'String is Object' ; assert ( s is Object == true );","title":"Type test operators"},{"location":"dart_core/#assignment-operators","text":"// Assign value to a a = value ; // Assign value to b if b is null; otherwise, b stays the same b ??= value ; Ta d\u00f9ng to\u00e1n t\u1eed ??= khi mu\u1ed1n g\u00e1n gi\u00e1 tr\u1ecb cho bi\u1ebfn ch\u1ec9 khi bi\u1ebfn \u0111\u00f3 \u0111ang l\u00e0 null .","title":"Assignment operators"},{"location":"dart_core/#logical-operators","text":"if ( ! done && ( col == 0 || col == 3 )) { // ...Do something... }","title":"Logical operators"},{"location":"dart_core/#conditional-expressions","text":"condition ? expr1 : expr2 N\u1ebfu condition l\u00e0 true, th\u1ef1c hi\u1ec7n expr1 (v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a n\u00f3); ng\u01b0\u1ee3c l\u1ea1i, th\u1ef1c hi\u1ec7n v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a expr2 . expr1 ?? expr2 N\u1ebfu expr1 kh\u00e1c null , tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a ch\u00ednh n\u00f3; ng\u01b0\u1ee3c l\u1ea1i, tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a expr2 .","title":"Conditional expressions"},{"location":"dart_core/#cascade-notation","text":"Cascades d\u1ecbch n\u00f4m na l\u00e0 th\u00e1c n\u01b0\u1edbc =)) c\u00fa ph\u00e1p l\u00e0 d\u1ea5u .. , cho ph\u00e9p anh em th\u1ef1c hi\u1ec7n nhi\u1ec1u thao t\u00e1c tu\u1ea7n t\u1ef1 tr\u00ean 1 object. Nh\u00ecn th\u00ec gi\u1ed1ng v\u1edbi thu\u1eadt ng\u1eef chain method ( Fluent_interface ) nh\u01b0ng c\u01a1 ch\u1ebf c\u00f3 \u0111\u00f4i ph\u1ea7n kh\u00e1c bi\u1ec7t. querySelector ( '#confirm' ) // Get an object. .. text = 'Confirm' // Use its members. .. classes . add ( 'important' ) .. onClick . listen (( e ) => window . alert ( 'Confirmed!' )); Trong \u0111o\u1ea1n code tr\u00ean, th\u00ec d\u00f2ng \u0111\u1ea7u g\u1ecdi t\u1edbi method querySelector() , tr\u1ea3 v\u1ec1 m\u1ed9t selector object. C\u00e1c d\u00f2ng ti\u1ebfp theo th\u1ef1c hi\u1ec7n c\u00e1c thao t\u00e1c v\u1edbi selector object, ignore b\u1ea5t k\u1ef3 k\u1ebft qu\u1ea3 n\u00e0o m\u00e0 c\u00e1c method \u0111\u00f3 tr\u1ea3 v\u1ec1. Ch\u00fang ta c\u00f3 th\u1ec3 vi\u1ebft l\u1ea1i nh\u01b0 sau: var button = querySelector ( '#confirm' ); button . text = 'Confirm' ; button . classes . add ( 'important' ); button . onClick . listen (( e ) => window . alert ( 'Confirmed!' )); \u0110\u1eb7c bi\u1ec7t l\u01b0u \u00fd l\u00e0 method \u0111\u1ea7u ti\u00ean ho\u1eb7c function kh\u1edfi t\u1ea1o cascade ph\u1ea3i tr\u1ea3 v\u1ec1 m\u1ed9t object th\u1ef1c s\u1ef1. V\u00ed d\u1ee5 \u0111o\u1ea1n code sau s\u1ebd ko th\u1ef1c hi\u1ec7n \u0111c: var sb = StringBuffer (); sb . write ( 'foo' ) .. write ( 'bar' ); // Error: method 'write' isn't defined for 'void'. \u1ede d\u00f2ng tr\u00ean sb.write('foo') ch\u00ednh l\u00e0 gi\u00e1 tr\u1ecb kh\u1edfi t\u1ea1o, tuy nhi\u00ean sb.write('foo') = void , do \u0111\u00f3 b\u1ea1n kh\u00f4ng th\u1ec3 b\u1eaft \u0111\u1ea7u m\u1ed9t cascade tr\u00ean void .","title":"Cascade notation (..)"},{"location":"dart_core/#other-operators","text":"H\u1ecdc th\u00eam m\u1ed9t to\u00e1n t\u1eed m\u1edbi: ?. , t\u01b0\u01a1ng t\u1ef1 nh\u01b0 . d\u00f9ng \u0111\u1ec3 truy xu\u1ea5t c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a m\u1ed9t object, nh\u01b0ng an to\u00e0n h\u01a1n ch\u00fat. V\u00ed d\u1ee5: foo?.bar s\u1ebd select ra thu\u1ed9c t\u00ednh bar t\u1eeb foo , v\u00e0 n\u1ebfu foo = null th\u00ec k\u1ebft qu\u1ea3 c\u1ee7a foo?.bar = null .","title":"Other operators"},{"location":"dart_core/#control-flow-statements","text":"Dart s\u1eed d\u1ee5ng c\u00e1c c\u00e2u l\u1ec7nh sau \u0111\u1ec3 control lu\u1ed3ng x\u1eed l\u00fd: \u0110i\u1ec1u ki\u1ec7n if v\u00e0 else V\u00f2ng l\u1eb7p for V\u00f2ng l\u1eb7p while v\u00e0 do-while C\u00e2u l\u1ec7nh break v\u00e0 continue C\u00e2u l\u1ec7nh switch v\u00e0 case C\u00e2u l\u1ec7nh assert","title":"Control flow statements"},{"location":"dart_core/#if-and-else","text":"Bi\u1ec3u th\u1ee9c trong \u0111i\u1ec1u ki\u1ec7n if b\u1eaft bu\u1ed9c ph\u1ea3i l\u00e0 ki\u1ec3u bool . \u0110o\u1ea1n code sau s\u1ebd kh\u00f4ng th\u1ec3 ch\u1ea1y, do 1 c\u00f3 type l\u00e0 int . if ( 1 ) { print ( 'We can not execute this code!' ); }","title":"If and else"},{"location":"dart_core/#for-loops","text":"Closure b\u00ean trong Dart's for loops c\u00f3 th\u1ec3 capture \u0111\u01b0\u1ee3c value v\u00e0 index \u1edf th\u1eddi \u0111i\u1ec3m compile-time, tr\u00e1nh \u0111\u01b0\u1ee3c c\u00e1c l\u1ed7i c\u01a1 b\u1ea3n hay x\u1ea3y ra trong Javascript. H\u00e3y th\u1eed so s\u00e1nh 2 \u0111o\u1ea1n code v\u00e0 k\u1ebft qu\u1ea3 output ra gi\u1eefa 2 ng\u00f4n ng\u1eef xem sao :hugs: Javascript var callbacks = []; for ( var i = 0 ; i < 2 ; i ++ ) { callbacks . push (() => console . log ( i )); } callbacks . forEach (( c ) => c ()); terminal 2 2 Dart var callbacks = []; for ( var i = 0 ; i < 2 ; i ++ ) { callbacks . add (() => print ( i )); } callbacks . forEach (( c ) => c ()); 0 1 Dart support l\u1ec7nh for-in v\u00e0 forEach var collection = [ 0 , 1 , 2 ]; for ( var x in collection ) { print ( x ); // 0 1 2 } candidates . forEach (( candidate ) => candidate . interview ());","title":"For loops"},{"location":"dart_core/#assert","text":"Dart h\u1ed7 tr\u1ee3 method assert , d\u00f9ng \u0111\u1ec3 ng\u0103n ch\u01b0\u01a1ng tr\u00ecnh ti\u1ebfp t\u1ee5c th\u1ef1c thi n\u1ebfu c\u00f3 b\u1ea5t k\u1ef3 \u0111i\u1ec1u ki\u1ec7n n\u00e0o b\u00ean trong n\u00f3 l\u00e0 false . // Make sure the variable has a non-null value. assert ( text != null ); // Make sure the value is less than 100. assert ( number < 100 ); // Make sure this is an https URL. assert ( urlString . startsWith ( 'https' )); \u0110\u1ec3 thay th\u1ebf n\u1ed9i dung hi\u1ec3n th\u1ecb khi assert th\u1ea5t b\u1ea1i, ch\u00fang ta th\u00eam message v\u00e0o tham s\u1ed1 th\u1ee9 hai. var urlString = 'www.google.com' ; assert ( urlString . startsWith ( 'https' ), 'URL ( $ urlString ) should start with \"https\".' ); Failed assertion: line 7 pos 8: 'urlString.startsWith('https')': URL (www.google.com) should start with \"https\".","title":"Assert"},{"location":"dart_core/#exceptions","text":"","title":"Exceptions"},{"location":"dart_core/#throw","text":"Th\u00f4ng th\u01b0\u1eddng ch\u00fang ta s\u1ebd raise m\u1ed9t exception nh\u01b0 sau throw new Exception ( \"message\" ); throw UnimplementedError (); throw FormatException ( 'Expected at least 1 section' ); \u0111\u00f4i khi c\u00f3 th\u1ec3 l\u00e0 1 objects throw 'Out of llamas!' ; \u0110\u1ec3 n\u00e2ng cao ch\u1ea5t l\u01b0\u1ee3ng, c\u0169ng nh\u01b0 \u00fd ngh\u0129a c\u1ee7a code th\u00ec b\u1ea1n n\u00ean nghi\u00ean c\u1ee9u implement exception l\u00e0 subtype c\u1ee7a c\u00e1c method/class t\u1eeb Error v\u00e0 Exception","title":"Throw"},{"location":"dart_core/#catch","text":"try { breedMoreLlamas (); } on OutOfLlamasException { // A specific exception buyMoreLlamas (); } on Exception catch ( e ) { // Anything else that is an exception print ( 'Unknown exception: $ e ' ); } catch ( e ) { // No specified type, handles all print ( 'Something really unknown: $ e ' ); } B\u1ea1n c\u00f3 th\u1ec3 ch\u1ec9 \u0111\u1ecbnh 1 ho\u1eb7c 2 parameters cho method catch() . try { // \u00b7\u00b7\u00b7 } on Exception catch ( e ) { print ( 'Exception details: \\n $ e ' ); } catch ( e , s ) { print ( 'Exception details: \\n $ e ' ); print ( 'Stack trace: \\n $ s ' ); }","title":"Catch"},{"location":"dart_core/#finally","text":"Ki\u1ebfn th\u1ee9c v\u00f4 c\u00f9ng c\u0103n b\u1ea3n Code block \u0111\u1eb7t trong finally s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi d\u00f9 c\u00f3 hay kh\u00f4ng c\u00f3 ngo\u1ea1i l\u1ec7. try { breedMoreLlamas (); } finally { // Always clean up, even if an exception is thrown. cleanLlamaStalls (); } try { breedMoreLlamas (); } catch ( e ) { print ( 'Error: $ e ' ); // Handle the exception first. } finally { cleanLlamaStalls (); // Then clean up. }","title":"Finally"},{"location":"dart_core/#classes","text":"Dart l\u00e0 ng\u00f4n ng\u1eef h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng v\u1edbi class (m\u1ecdi object \u0111\u1ec1u l\u00e0 m\u1ed9t instance c\u1ee7a class) v\u00e0 mixin-based inheritance (m\u1eb7c d\u00f9 m\u1ed9t class ch\u1ec9 c\u00f3 duy nh\u1ea5t m\u1ed9t superclass, nh\u01b0ng m\u00e0 class body (c\u00e1c variable, method) c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u1ea1i nh\u01b0 multiple class hierarchies (\u0111a th\u1eeba k\u1ebf)). // Create a Point using Point(). var p1 = new Point ( 2 , 2 ); // Create a Point using Point.fromJson(). var p2 = new Point . fromJson ( jsonData ); T\u1eeb Dart 2 b\u1ea1n c\u00f3 th\u1ec3 b\u1ecf t\u1eeb kh\u00f3a new . V\u00ed d\u1ee5: var p1 = Point(2, 2) .","title":"Classes"},{"location":"dart_core/#using-class-members","text":"S\u1eed d\u1ee5ng ?. thay cho . khi truy xu\u1ea5t members c\u1ee7a class gi\u00fap ta tr\u00e1nh \u0111\u01b0\u1ee3c c\u00e1c exception khi object c\u00f3 gi\u00e1 tr\u1ecb null: // If p is non-null, set its y value to 4. p ? . y = 4 ;","title":"Using class members"},{"location":"dart_core/#constructors","text":"class Point { num x , y ; Point ( num x , num y ) { // There's a better way to do this, stay tuned. this . x = x ; this . y = y ; } } this keyword \u0111\u1ec3 ch\u1ec9 current instance. Dart c\u00f2n h\u1ed7 tr\u1ee3 pattern constructor class Point { num x , y ; // Syntactic sugar for setting x and y // before the constructor body runs. Point ( this . x , this . y ); }","title":"Constructors"},{"location":"dart_core/#default-constructors","text":"N\u1ebfu b\u1ea1n ko khai b\u00e1o constructor c\u0169ng m\u00e9o sao c\u1ea3 , m\u1eb7c \u0111\u1ecbnh Dart s\u1ebd t\u1ea1o ra constructor kh\u00f4ng tham s\u1ed1 cho class \u0111\u00f3.","title":"Default constructors"},{"location":"dart_core/#constructors-arent-inherited","text":"M\u1ed9t \u0111i\u1ec1u \u0111\u00e1ng l\u01b0u \u00fd l\u00e0 trong Dart th\u00ec subclasses kh\u00f4ng k\u1ebf th\u1eeba constructor t\u1eeb superclass","title":"Constructors aren\u2019t inherited"},{"location":"dart_core/#named-constructors","text":"S\u1eed d\u1ee5ng named constructor \u0111\u1ec3 c\u00f3 th\u1ec3 implement nhi\u1ec1u constructors cho m\u1ed9t class: class Point { num x , y ; Point ( this . x , this . y ); // Named constructor Point . origin () { x = 0 ; y = 0 ; } }","title":"Named constructors"},{"location":"dart_core/#invoking-a-non-default-superclass-constructor","text":"M\u1eb7c \u0111\u1ecbnh th\u00ec constructor c\u1ee7a subclass s\u1ebd g\u1ecdi t\u1edbi unnamed, no-argument constructor c\u1ee7a superclass. Constructor c\u1ee7a superclass s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi \u1edf \u0111i\u1ec3m b\u1eaft \u0111\u1ea7u c\u1ee7a constructor body. N\u1ebfu c\u00f3 m\u1ed9t initializer list \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng, n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi tr\u01b0\u1edbc khi g\u1ecdi t\u1edbi superclass. V\u1ec1 c\u01a1 b\u1ea3n th\u00ec th\u1ee9 t\u1ef1 th\u1ef1c thi constructor nh\u01b0 sau: initializer list superclass's no-arg constructor main class's no-arg constructor T\u01b0\u01a1ng t\u1ef1 ch\u00fang ta h\u00e3y th\u1eed xem c\u00e1c case sau: Superclass kh\u00f4ng khai b\u00e1o constructor: class Person { String firstName ; } class Employee extends Person { Employee ( Map data ) { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } in Employee Th\u1ebf l\u00e0 subclass kh\u00f4ng g\u1ecdi c\u00e1i default constructor, code v\u1eabn ch\u1ea1y v\u00f4 t\u01b0 Superclass khai b\u00e1o unnamed, no-agrument constructor, v\u00e0 subclass g\u1ecdi constructor \u0111\u00f3 (tr\u01b0\u1eddng h\u1ee3p kh\u00f4ng g\u1ecdi c\u0169ng th\u1ebf) class Person { String firstName ; Person () { print ( 'in Person' ); } } class Employee extends Person { Employee ( Map data ) : super () { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } in Person in Employee Ok, m\u1eb7c cho tham s\u1ed1 gi\u1eefa constructor c\u1ee7a super v\u00e0 subclass kh\u00e1c nhau, code v\u1eabn \u1ed5n Superclass khai b\u00e1o unamed constructor (constructor n\u00e0y c\u00f3 argument) v\u00e0 subclass kh\u00f4ng g\u1ecdi constructor \u0111\u00f3: class Person { String firstName ; Person ( num x ) { print ( 'in Person' ); } } class Employee extends Person { Employee ( Map data ) { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } Error: The unnamed constructor in 'Person' requires arguments. NG, ko g\u1ecdi ko \u0111\u01b0\u1ee3c Superclass khai b\u00e1o named constructor v\u00e0 subclass kh\u00f4ng g\u1ecdi constructor \u0111\u00f3 class Person { String firstName ; Person . fromJson () { print ( 'in Person' ); } } class Employee extends Person { Employee ( Map data ) { print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } Error: 'Person' doesn't have an unnamed constructor. Tr\u01b0\u1eddng h\u1ee3p n\u00e0y cho ch\u00fang ta th\u1ea5y ngay m\u1ed9t \u0111i\u1ec1u l\u00e0 n\u1ebfu superclass c\u00f3 m\u1ed9t named constructor, \u0111\u1ed3ng ngh\u0129a v\u1edbi vi\u1ec7c c\u00e1c subclass c\u0169ng ph\u1ea3i t\u1ea1o ra constructor v\u00e0 g\u1ecdi l\u1ea1i construcor c\u1ee7a superclass \u0111\u00f3. Th\u1eed s\u1eeda l\u1ea1i code c\u1ee7a Employee , ta c\u00f3 k\u1ebft qu\u1ea3 sau: class Employee extends Person { Employee ( Map data ) : super . fromJson () { print ( 'in Employee' ); } } in Person in Employee Superclass khai b\u00e1o c\u1ea3 named & unnamed constructor th\u00ec sao ??? class Person { String firstName ; Person () { print ( 'in unnamed Person' ); } Person . fromJson ( Map data ) { print ( 'in fromJson Person' ); } } class Employee extends Person { Employee ( Map data ) : super () { // :super.fromJson(data) print ( 'in Employee' ); } } main () { var emp = new Employee ({}); } in unnamed Person // in fromJson Person in Employee R\u00f5 r\u00e0ng \u1edf tr\u01b0\u1eddng h\u1ee3p superclass c\u00f3 m\u1ed9t unnamed, no-argument constructor th\u00ec g\u1ecdi hay ko g\u1ecdi c\u0169ng ko th\u00e0nh v\u1ea5n \u0111\u1ec1. V\u00e0 g\u1ecdi c\u00e1i n\u00e0o c\u0169ng \u0111c. Ch\u00fang ta c\u0169ng c\u00f3 th\u1ec3 truy\u1ec1n tham s\u1ed1 v\u00e0o superclass constructor th\u00f4ng qua k\u1ebft qu\u1ea3 t\u00ednh to\u00e1n c\u1ee7a m\u1ed9t method , tuy nhi\u00ean tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n n\u00e0y (hay n\u1ed9i t\u1ea1i trong method ) kh\u00f4ng \u0111\u01b0\u1ee3c access t\u1edbi this class Employee extends Person { Employee () : super . fromJson ( getDefaultData ()); // \u00b7\u00b7\u00b7 }","title":"Invoking a non-default superclass constructor"},{"location":"dart_core/#initializer-list","text":"// Initializer list sets instance variables before // the constructor body runs. Point . fromJson ( Map < String , num > json ) : x = json [ 'x' ], y = json [ 'y' ] { print ( 'In Point.fromJson(): ( $ x , $ y )' ); } L\u01b0u \u00fd: Khi kh\u1edfi t\u1ea1o (\u1ede code tr\u00ean th\u00ec initializer l\u00e0 code block sau d\u1ea5u :) kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p truy c\u1eadp t\u1edbi bi\u1ebfn this . Trong qu\u00e1 tr\u00ecnh development, b\u1ea1n c\u00f3 th\u1ec3 validate inputs b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng assert trong initializer list. Point . withAssert ( this . x , this . y ) : assert ( x >= 0 ) { print ( 'In Point.withAssert(): ( $ x , $ y )' ); }","title":"Initializer list"},{"location":"dart_core/#redirecting-constructors","text":"\u0110\u00f4i l\u00fac nhi\u1ec7m v\u1ee5 duy nh\u1ea5t c\u1ee7a m\u1ed9t constructor ch\u1ec9 l\u00e0 chuy\u1ec3n h\u01b0\u1edbng sang m\u1ed9t constructor kh\u00e1c trong c\u00f9ng m\u1ed9t class. Redirecting constructor lu\u00f4n c\u00f3 body l\u00e0 r\u1ed7ng, v\u00e0 ch\u1ec9 sinh ra \u0111\u1ec3 g\u1ecdi t\u1edbi m\u1ed9t constructor kh\u00e1c sau d\u1ea5u : . class Point { num x , y ; // The main constructor for this class. Point ( this . x , this . y ) { print ( 'This coordinate: x= $ x y= $ y ' ); } // Delegates to the main constructor. Point . alongXAxis ( num x ) : this ( x , 0 ); } var p = Point . alongXAxis ( 1 ); This coordinate: x=1 y=0 Trong v\u00ed d\u1ee5 tr\u00ean th\u00ec Point1.alongXAxis ch\u00ednh l\u00e0 redirecting constructor .","title":"Redirecting constructors"},{"location":"dart_core/#constant-constructors","text":"N\u1ebfu nh\u01b0 b\u1ea1n mu\u1ed1n t\u1ea1o ra m\u1ed9t object kh\u00f4ng \u0111\u1ed5i, h\u00e3y t\u1ea1o ra m\u1ed9t const constructor, v\u00e0 \u0111\u1ea3m b\u1ea3o r\u1eb1ng c\u00e1c variable l\u00e0 final: class ImmutablePoint { static final ImmutablePoint origin = const ImmutablePoint ( 0 , 0 ); final num x , y ; const ImmutablePoint ( this . x , this . y ); }","title":"Constant constructors"},{"location":"dart_core/#factory-constructors","text":"Ch\u00fang ta s\u1eed d\u1ee5ng factory khi mu\u1ed1n implement constructor kh\u00f4ng ch\u1ec9 \u0111\u1ec3 t\u1ea1o ra m\u1ed9t instance m\u1edbi c\u1ee7a class m\u00e0 c\u00f2n c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t instance t\u1eeb cache, ho\u1eb7c m\u1ed9t subtype instance. V\u00ed d\u1ee5 sau implement Logger class l\u00e0m nhi\u1ec7m v\u1ee5 class Logger { final String name ; bool mute = false ; // _cache is library-private, thanks to // the _ in front of its name. static final Map < String , Logger > _cache = < String , Logger > {}; factory Logger ( String name ) { print ( 'Logger \\' s name: $ name ' ); print ( 'Logger \\' s cache: $ _cache ' ); if ( _cache . containsKey ( name )) { return _cache [ name ]; } else { final logger = Logger . _internal ( name ); _cache [ name ] = logger ; return logger ; } } Logger . _internal ( this . name ); void log ( String msg ) { if ( ! mute ) print ( 'Log message: $ msg ' ); } } main () { var loggerOne = Logger ( 'UI' ); loggerOne . log ( 'Button clicked' ); print ( '**************' ); var loggerTwo = Logger ( 'UI' ); loggerTwo . log ( 'Icon clicked' ); } Logger's name: UI Logger's cache: {} Log message: Button clicked ************** Logger's name: UI Logger's cache: {UI: Instance of 'Logger'} Log message: Icon clicked L\u01b0u \u00fd r\u1eb1ng Factory constructor kh\u00f4ng th\u1ec3 truy c\u1eadp v\u00e0o this .","title":"Factory constructors"},{"location":"dart_core/#methods","text":"","title":"Methods"},{"location":"dart_core/#instance-methods","text":"Ko c\u00f3 g\u00ec \u0111\u1eb7c s\u1eafc ngo\u00e0i vi\u1ec7c truy xu\u1ea5t t\u1edbi instance variables m\u00e0 ko c\u1ea7n this . import 'dart:math' ; class Point { num x , y ; Point ( this . x , this . y ); num distanceTo ( Point other ) { var dx = x - other . x ; var dy = y - other . y ; return sqrt ( dx * dx + dy * dy ); } }","title":"Instance methods"},{"location":"dart_core/#getters-and-setters","text":"N\u1ebfu b\u1ea1n \u0111\u00e3 t\u1eebng code Typescript th\u00ec th\u1ea5y kh\u00f4ng kh\u00e1c m\u1ea5y class Rectangle { num left , top , width , height ; Rectangle ( this . left , this . top , this . width , this . height ); // Define two calculated properties: right and bottom. num get right => left + width ; set right ( num value ) => left = value - width ; num get bottom => top + height ; set bottom ( num value ) => top = value - height ; } void main () { var rect = Rectangle ( 3 , 4 , 20 , 15 ); assert ( rect . left == 3 ); rect . right = 12 ; assert ( rect . left == - 8 ); }","title":"Getters and setters"},{"location":"dart_core/#abstract-methods","text":"Abstract methods ch\u1ec9 t\u1ed3n t\u1ea1i b\u00ean trong abstract classes . abstract class Doer { // Define instance variables and methods... void doSomething (); // Define an abstract method. } class EffectiveDoer extends Doer { void doSomething () { // Provide an implementation, so the method is not abstract here... } }","title":"Abstract methods"},{"location":"dart_core/#overridable-operators","text":"Ph\u1ea7n n\u00e0y m\u00f4 t\u1ea3 c\u00e1ch implement ho\u1ea1t \u0111\u1ed9ng c\u1ee7a c\u00e1c to\u00e1n t\u1eed v\u1edbi 1 object. V\u00ed d\u1ee5 b\u1ea1n c\u00f3 Vector class, v\u00e0 b\u1ea1n c\u1ea7n \u0111\u1ecbnh ngh\u0129a th\u00eam ph\u00e9p + 2 vectors ch\u1eb3ng h\u1ea1n. . . . . < + | [] > / ^ []= <= ~/ & ~ >= * << == \u2013 % >> class Vector { final int x , y ; const Vector ( this . x , this . y ); /// Overrides + (a + b). Vector operator + ( Vector v ) { return Vector ( x + v . x , y + v . y ); } /// Overrides - (a - b). Vector operator - ( Vector v ) { return Vector ( x - v . x , y - v . y ); } } void main () { final v = Vector ( 2 , 3 ); final w = Vector ( 2 , 2 ); // v == (2, 3) assert ( v . x == 2 && v . y == 3 ); // v + w == (4, 5) assert (( v + w ). x == 4 && ( v + w ). y == 5 ); // v - w == (0, 1) assert (( v - w ). x == 0 && ( v - w ). y == 1 ); }","title":"Overridable operators"},{"location":"dart_core/#abstract-classes","text":"S\u1eed d\u1ee5ng abstract modifier \u0111\u1ec3 khai b\u00e1o m\u1ed9t abstract class \u2014M\u1ed9t class kh\u00f4ng th\u1ec3 t\u1ea1o instance. Abstract classes th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a interfaces . Tuy nhi\u00ean n\u1ebfu b\u1ea1n mu\u1ed1n t\u1ea1o instance t\u1eebIf you want your abstract class to appear to be instantiable, define a factory constructor. // This class is declared abstract and thus // can't be instantiated. abstract class AbstractContainer { // Define constructors, fields, methods... void updateChildren (); // Abstract method. }","title":"Abstract classes"},{"location":"dart_core/#implicit-interfaces","text":"M\u1ed7i class trong Dart ng\u1ea7m \u0111\u1ecbnh ngh\u0129a m\u1ed9t interface ch\u1ee9a to\u00e0n b\u1ed9 c\u00e1c instance member c\u1ee7a class \u0111\u00f3. D\u1ecb vl, abstract th\u00ec c\u00f3 keyword c\u00f2n interface th\u00ec m\u00e9o ko // A person. The implicit interface contains greet(). // A person. The implicit interface contains greet(). class Person { // In the interface, but visible only in this library. final _name ; // Not in the interface, since this is a constructor. Person ( this . _name ); // In the interface. String greet ( String who ) => 'Hello, $ who . I am $ _name .' ; } // An implementation of the Person interface. class Impostor implements Person { get _name => '' ; String greet ( String who ) => 'Hi $ who . Do you know who I am?' ; } String greetBob ( Person person ) => person . greet ( 'Bob' ); void main () { print ( greetBob ( Person ( 'Kathy' ))); print ( greetBob ( Impostor ())); } N\u1ebfu nh\u01b0 class Impostor kh\u00f4ng khai b\u00e1o method greet th\u00ec ch\u00fang ta s\u1ebd nh\u1eadn qu\u1ea3 \u0111\u1eafng sau Error: The non-abstract class 'Impostor' is missing implementations for these members: 'greet'. Dart h\u1ed7 tr\u1ee3 \u0111a k\u1ebf th\u1eeba class Point implements Comparable , Location {...}","title":"Implicit interfaces"},{"location":"dart_core/#extending-a-class","text":"S\u1eed d\u1ee5ng extends \u0111\u1ec3 t\u1ea1o ra subclass, v\u00e0 super \u0111\u1ec3 tr\u1ecf t\u1edbi superclass: class Television { void turnOn () { _illuminateDisplay (); _activateIrSensor (); } // \u00b7\u00b7\u00b7 } class SmartTelevision extends Television { void turnOn () { super . turnOn (); _bootNetworkInterface (); _initializeMemory (); _upgradeApps (); } // \u00b7\u00b7\u00b7 }","title":"Extending a class"},{"location":"dart_core/#overriding-members","text":"Subclasses c\u00f3 th\u1ec3 override (ghi \u0111\u00e8) instance methods, getters, v\u00e0 setters. Ch\u00fang ta s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 @override \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh methods, ... b\u1ecb ghi \u0111\u00e8: class SmartTelevision extends Television { @ override void turnOn () {...} // \u00b7\u00b7\u00b7 } \u0110\u1ec3 thu h\u1eb9p (si\u1ebft ch\u1eb7t) ki\u1ec3u c\u1ee7a method parameter ho\u1eb7c instance variable hay c\u00f2n g\u1ecdi l\u00e0 type safe , b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 covariant : class Animal { String name ; Animal ( this . name ); void chase ( Animal x ) { print ( ' $ name chase ${ x . name } ' ); } } class Dog extends Animal { Dog () : super ( 'Dog' ); } class Mouse extends Animal { Mouse () : super ( 'Mouse' ); } class Cat extends Animal { Cat () : super ( 'Cat' ); void chase ( covariant Mouse x ) { super . chase ( x ); } } void main () { Cat c = new Cat (); Dog d = new Dog (); Mouse m = new Mouse (); d . chase ( m ); // Dog chase Mouse c . chase ( m ); // Cat chase Mouse c . chase ( d ); // Error: A value of type '#lib1::Dog' can't be assigned to a variable of type '#lib1::Mouse'. }","title":"Overriding members"},{"location":"dart_core/#nosuchmethod","text":"H\u00e3y ghi \u0111\u00e8 ph\u01b0\u01a1ng th\u1ee9c noSuchMethod() trong tr\u01b0\u1eddng h\u1ee3p b\u1ea1n mu\u1ed1n b\u1eaft c\u00e1c tr\u01b0\u1eddng h\u1ee3p ng\u01b0\u1eddi d\u00f9ng truy c\u1eadp method ho\u1eb7c variable kh\u00f4ng t\u1ed3n t\u1ea1i class A { // Unless you override noSuchMethod, using a // non-existent member results in a NoSuchMethodError. @ override void noSuchMethod ( Invocation invocation ) { print ( 'You tried to use a non-existent member: ' + ' ${ invocation . memberName } ' ); } }","title":"noSuchMethod()"},{"location":"dart_core/#enumerated-types","text":"","title":"Enumerated types"},{"location":"dart_core/#using-enums","text":"\u0110\u1ec3 khai b\u00e1o m\u1ed9t ki\u1ec3u enumerations , ta s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 enum : enum Color { red , green , blue } M\u1ed7i gi\u00e1 tr\u1ecb b\u00ean trong enum \u0111\u1ec1u c\u00f3 method index getter, tr\u1ea3 v\u1ec1 v\u1ecb tr\u00ed c\u1ee7a ch\u00fang (0-based array): assert ( Color . red . index == 0 ); assert ( Color . green . index == 1 ); assert ( Color . blue . index == 2 ); \u0110\u1ec3 l\u1ea5y ra to\u00e0n b\u1ed9 c\u00e1c gi\u00e1 tr\u1ecb trong enum, ch\u00fang ta s\u1eed d\u1ee5ng enum\u2019s values constant. List < Color > colors = Color . values ; assert ( colors [ 2 ] == Color . blue );","title":"Using enums"},{"location":"dart_core/#adding-features-to-a-class-mixins","text":"Mixin l\u00e0 m\u1ed9t t\u00ednh n\u0103ng t\u01b0\u01a1ng t\u1ef1 v\u1edbi trait trong php, ta s\u1eed d\u1ee5ng withth keywords v\u00e0 theo sau n\u00f3 l\u00e0 m\u1ed9t ho\u1eb7c nhi\u1ec1u mixin names. class Musician extends Performer with Musical { // \u00b7\u00b7\u00b7 } class Maestro extends Person with Musical , Aggressive , Demented { Maestro ( String maestroName ) { name = maestroName ; canConduct = true ; } } \u0110\u1ec3 implement mixin c\u1ea7n t\u1ea1o m\u1ed9t class k\u1ebf th\u1eeba Object, kh\u00f4ng c\u00f3 constructor v\u00e0 kh\u00f4ng g\u1ecdi t\u1edbi super : abstract class Musical { bool canPlayPiano = false ; bool canCompose = false ; bool canConduct = false ; void entertainMe () { if ( canPlayPiano ) { print ( 'Playing piano' ); } else if ( canConduct ) { print ( 'Waving hands' ); } else { print ( 'Humming to self' ); } } }","title":"Adding features to a class: mixins"},{"location":"dart_core/#class-variables-and-methods","text":"S\u1eed d\u1ee5ng static keyword \u0111\u1ec3 implement class-wide variables v\u00e0 methods.","title":"Class variables and methods"},{"location":"dart_core/#static-variables","text":"class Queue { static const initialCapacity = 16 ; // \u00b7\u00b7\u00b7 } void main () { assert ( Queue . initialCapacity == 16 ); } Bi\u1ebfn static s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o cho t\u1edbi khi n\u00f3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng.","title":"Static variables"},{"location":"dart_core/#static-methods","text":"import 'dart:math' ; class Point { num x , y ; Point ( this . x , this . y ); static num distanceBetween ( Point a , Point b ) { var dx = a . x - b . x ; var dy = a . y - b . y ; return sqrt ( dx * dx + dy * dy ); } } void main () { var a = Point ( 2 , 2 ); var b = Point ( 4 , 4 ); var distance = Point . distanceBetween ( a , b ); assert ( 2.8 < distance && distance < 2.9 ); print ( distance ); } B\u00ean trong static method kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p s\u1eed d\u1ee5ng this .","title":"Static methods"},{"location":"dart_core/#generics","text":"N\u1ebfu \u0111\u00e3 \u0111\u1ecdc c\u00e1c ghi ch\u00fa ph\u00eda tr\u00ean th\u00ec \u1eaft h\u1eb3n b\u1ea1n \u0111\u00e3 bi\u1ebft t\u1edbi List<E> v\u1edbi E l\u00e0 m\u1ed9t ki\u1ec3u (v\u00ed d\u1ee5: int ). V\u1ec1 m\u1eb7t quy \u01b0\u1edbc <\u2026> \u0111\u00e1nh d\u1ea5u List l\u00e0 m\u1ed9t ki\u1ec3u generic (ho\u1eb7c parameterized ).","title":"Generics"},{"location":"dart_core/#why-use-generics","text":"L\u1ee3i \u00edch: Code sinh ra t\u1ed1t h\u01a1n n\u1ebfu \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh \u0111\u00fang ki\u1ec3u c\u1ee7a k\u1ebft qu\u1ea3. var names = List < String > (); names . addAll ([ 'Seth' , 'Kathy' , 'Lars' ]); names . add ( 42 ); // Error S\u1eed d\u1ee5ng generic gi\u00fap gi\u1ea3m code duplication. abstract class ObjectCache { Object getByKey ( String key ); void setByKey ( String key , Object value ); } abstract class StringCache { String getByKey ( String key ); void setByKey ( String key , String value ); } 2 class tr\u00ean c\u00f3 th\u1ec3 thay b\u1eb1ng m\u1ed9t class t\u01b0\u01a1ng \u0111\u01b0\u01a1ng abstract class Cache < T > { T getByKey ( String key ); void setByKey ( String key , T value ); } Theo quy \u01b0\u1edbc, ki\u1ec3u b\u00ean trong <\u2026> l\u00e0 nh\u1eefng ch\u1eef c\u00e1i nh\u01b0: E, T, S, K, hay V.","title":"Why use generics?"},{"location":"dart_core/#using-collection-literals","text":"List v\u00e0 map \u0111\u1ec1u c\u00f3 th\u1ec3 parameterized. <type> (cho lists) v\u00e0 <keyType, valueType> (cho maps). var names = < String > [ 'Seth' , 'Kathy' , 'Lars' ]; var pages = < String , String > { 'index.html' : 'Homepage' , 'robots.txt' : 'Hints for web robots' , 'humans.txt' : 'We are people, not machines' };","title":"Using collection literals"},{"location":"dart_core/#using-parameterized-types-with-constructors","text":"Dart h\u1ed7 tr\u1ee3 l\u1eadp tr\u00ecnh vi\u00ean ch\u1ec9 \u0111\u1ecbnh r\u00f5 m\u1ed9t ho\u1eb7c nhi\u1ec1u ki\u1ec3u khi s\u1eed d\u1ee5ng constructor: var names = List < String > (); names . addAll ([ 'Seth' , 'Kathy' , 'Lars' ]); var nameSet = Set < String > . from ( names ); class View { int x ; View ( this . x ); } var views = Map < int , View > (); views [ 0 ] = View ( 0 );","title":"Using parameterized types with constructors"},{"location":"dart_core/#generic-collections-and-the-types-they-contain","text":"var names = List < String > (); names . addAll ([ 'Seth' , 'Kathy' , 'Lars' ]); print ( names is List < String > ); // true M\u1ecdi ki\u1ec3u generic trong Dart \u0111\u1ec1u \u0111\u01b0\u1ee3c reified (c\u1ee5 th\u1ec3 ho\u00e1), \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 th\u00f4ng tin v\u1ec1 ki\u1ec3u d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c mang \u0111i ngay c\u1ea3 khi runtime . Ng\u01b0\u1ee3c l\u1ea1i, generic trong Java s\u1eed d\u1ee5ng erasure (xo\u00e1 b\u1ecf), \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 b\u1ea1n c\u00f3 th\u1ec3 ki\u1ec3m tra \u0111\u01b0\u1ee3c object l\u00e0 m\u1ed9t List, nh\u01b0ng b\u1ea1n kh\u00f4ng th\u1ec3 ki\u1ec3m tra chi ti\u1ebft t\u1edbi m\u1ee9c List<String> .","title":"Generic collections and the types they contain"},{"location":"dart_core/#restricting-the-parameterized-type","text":"Khi code m\u1ed9t generic type, b\u1ea1n c\u00f3 th\u1ec3 mu\u1ed1n gi\u1edbi h\u1ea1n c\u00e1c ki\u1ec3u parameters c\u1ee7a n\u00f3. Khi \u0111\u00f3 h\u00e3y s\u1eed d\u1ee5ng extends . class Foo < T extends SomeBaseClass > { // Implementation goes here... String toString () => \"Instance of 'Foo< $ T >'\" ; } class Extender extends SomeBaseClass {...} Ho\u00e0n to\u00e0n OK n\u1ebfu b\u1ea1n s\u1eed d\u1ee5ng SomeBaseClass ho\u1eb7c b\u1ea5t k\u1ef3 subclasses n\u00e0o c\u1ee7a n\u00f3: var someBaseClassFoo = Foo < SomeBaseClass > (); var extenderFoo = Foo < Extender > (); ho\u1eb7c kh\u00f4ng m\u1ed9t ki\u1ec3u n\u00e0o c\u1ea3: var foo = Foo (); print ( foo ); // Instance of 'Foo<SomeBaseClass>' N\u1ebfu b\u1ea1n ch\u1ec9 \u0111\u1ecbnh m\u1ed9t ki\u1ec3u non- SomeBaseClass s\u1ebd c\u00f3 l\u1ed7i: var foo = Foo < Object > ();","title":"Restricting the parameterized type"},{"location":"dart_core/#using-generic-methods","text":"V\u00e0o l\u00fac kh\u1edfi t\u1ea1o, Dart\u2019s generic gi\u1edbi h\u1ea1n trong classes. T first < T > ( List < T > ts ) { // Do some initial work or error checking, then... T tmp = ts [ 0 ]; // Do some additional checking or processing... return tmp ; } Ki\u1ec3u generic parameter trong first (<T>) cho ph\u00e9p b\u1ea1n s\u1eed ki\u1ec3u argument T \u1edf m\u1ed9t v\u00e0i n\u01a1i: Trong function\u2019s tr\u1ea3 v\u1ec1 ki\u1ec3u ( T ). Trong ki\u1ec3u c\u1ee7a tham s\u1ed1 ( List<T> ). Trong ki\u1ec3u c\u1ee7a bi\u1ebfn \u0111\u1ecba ph\u01b0\u01a1ng ( T tmp ). Chi ti\u1ebft h\u01a1n \u0111\u1ec3 khai b\u00e1o m\u1ed9t generic methods Ki\u1ec3u parameter c\u1ee7a generic methods \u0111\u01b0\u1ee3c li\u1ec7t k\u00ea ngay sau t\u00ean c\u1ee7a method/function v\u00e0 b\u00ean trong <> /// 2 ki\u1ec3u c\u1ee7a parameters, [K] v\u00e0 [V]. Map < K , V > singletonMap < K , V > ( K key , V value ) { return < K , V > { key , value }; } Trong tr\u01b0\u1eddng h\u1ee3p ki\u1ec3u l\u00e0 class, b\u1ea1n c\u00f3 th\u1ec3 th\u00eam gi\u1edbi h\u1ea1n cho n\u00f3 /// Danh s\u00e1ch 2 s\u1ed1 ki\u1ec3u [T] d\u1eabn xu\u1ea5t t\u1eeb ki\u1ec3u num. T sumPair < T extends num > ( List < T > items ) { return items [ 0 ] + items [ 1 ]; } Class methods ( instance v\u00e0 static ) c\u00f3 th\u1ec3 khai b\u00e1o generic parameters theo c\u00e1ch t\u01b0\u01a1ng t\u1ef1: class C { static int f < S , T > ( int x ) => 3 ; int m < S , T > ( int x ) => 3 ; } Generic method v\u1edbi t\u01b0 c\u00e1ch l\u00e0 function-typed parameters, local functions, v\u00e0 function expressions: /// Truy\u1ec1n v\u00e0o generic method l\u00e0 m\u1ed9t [callback] parameter. void functionTypedParameter ( T callback < T > ( T thing )) {} // Khai b\u00e1o local generic function `itself`. void localFunction () { T itself < T > ( T thing ) => thing ; } // G\u00e1n m\u1ed9t generic function expression cho m\u1ed9t local variable. void functionExpression () { var lambda = < T > ( T thing ) => thing ; } Chi ti\u1ebft h\u01a1n v\u1ec1 Generic method, c\u00e1c b\u1ea1n xem th\u00eam t\u1ea1i \u0111\u00e2y .","title":"Using generic methods"},{"location":"dart_core/#libraries-and-visibility","text":"\u0110\u1ec3 t\u1ea1o ra c\u00e1c shareable code base, ch\u00fang ta s\u1eed d\u1ee5ng 2 directives l\u00e0 import v\u00e0 library . Libraries ko ch\u1ec9 cung c\u1ea5p c\u00e1c APIs m\u00e0 c\u00f2n \u1ea9n ch\u1ee9a c\u00e1c member ch\u1ec9 t\u1ed3n t\u1ea1i v\u00e0 truy xu\u1ea5t \u0111\u01b0\u1ee3c (visible) b\u00ean trong ch\u00fang. V\u00ed d\u1ee5 c\u00e1c identifiers b\u1eaft \u0111\u1ea7u b\u1eb1ng d\u1ea5u g\u1ea1ch d\u01b0\u1edbi (_). M\u1ecdi \u1ee9ng d\u1ee5ng Dart \u0111\u1ec1u l\u00e0 c\u00e1c library ngay c\u1ea3 khi n\u00f3 kh\u00f4ng s\u1eed d\u1ee5ng library directive. Libraries c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i v\u00e0 s\u1eed d\u1ee5ng th\u00f4ng qua c\u00f4ng c\u1ee5 pub .","title":"Libraries and visibility"},{"location":"dart_core/#using-libraries","text":"S\u1eed d\u1ee5ng t\u1eeb kho\u00e1 import \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh ph\u1ea1m vi namespace s\u1ebd s\u1eed d\u1ee5ng c\u1ee7a m\u1ed9t library import 'dart:html' ; V\u1edbi c\u00e1c th\u01b0 vi\u1ec7n built-in th\u00ec URI c\u00f3 scheme dart: , c\u00f2n v\u1edbi c\u00e1c th\u01b0 vi\u1ec7n kh\u00e1c ta s\u1eed d\u1ee5ng system path ho\u1eb7c scheme package: import 'package:test/test.dart' ;","title":"Using libraries"},{"location":"dart_core/#specifying-a-library-prefix","text":"\u0110\u1ec3 tr\u00e1nh conflict khi import, ta d\u00f9ng alias: If you import two libraries that have conflicting identifiers , then you can specify a prefix for one or both libraries . For example , if library1 and library2 both have an Element class , then you might have code like this : import 'package:lib1/lib1.dart' ; import 'package:lib2/lib2.dart' as lib2 ; // Uses Element from lib1. Element element1 = Element (); // Uses Element from lib2. lib2 . Element element2 = lib2 . Element ();","title":"Specifying a library prefix"},{"location":"dart_core/#importing-only-part-of-a-library","text":"Import m\u1ed9t ph\u1ea7n c\u1ee7a library: // Import only foo. import 'package:lib1/lib1.dart' show foo ; // Import all names EXCEPT foo. import 'package:lib2/lib2.dart' hide foo ;","title":"Importing only part of a library"},{"location":"dart_core/#lazily-loading-a-library","text":"Deferred loading (hay c\u00f2n g\u1ecdi l\u00e0 lazy loading ) cho ph\u00e9p \u1ee9ng d\u1ee5ng load c\u00e1c library theo nhu c\u1ea7u (on demand) n\u1ebfu c\u1ea7n. M\u1ed9t v\u00e0i tr\u01b0\u1eddng h\u1ee3p sau c\u00f3 th\u1ec3 b\u1ea1n s\u1ebd mu\u1ed1n d\u00f9ng deferred loading: Gi\u1ea3m th\u1eddi gi\u1ea3n b\u1eaft \u0111\u1ea7u kh\u1edfi t\u1ea1o app. Th\u1ef1c hi\u1ec7n A/B testing. \u0110\u1ec3 load ch\u1ee9c n\u0103ng \u00edt s\u1eed d\u1ee5ng nh\u01b0 h\u1ed9p tho\u1ea1i dialog ho\u1eb7c m\u00e0n h\u00ecnh tu\u1ef3 ch\u1ecdn. \u0110\u1ec3 lazily load m\u1ed9t library, b\u1ea1n c\u1ea7n import ch\u00fang b\u1eb1ng c\u00fa ph\u00e1p deferred as . import 'package:greetings/hello.dart' deferred as hello ; Khi b\u1ea1n c\u1ea7n s\u1eed d\u1ee5ng library, g\u1ecdi h\u00e0m loadLibrary() qua \u0111\u1ecbnh danh c\u1ee7a ch\u00fang: Future greet () async { await hello . loadLibrary (); hello . printGreeting (); } Trong \u0111o\u1ea1n code tr\u00ean, await keyword d\u1eebng ch\u01b0\u01a1ng tr\u00ecnh l\u1ea1i cho t\u1edbi khi th\u01b0 vi\u1ec7n \u0111\u01b0\u1ee3c load xong. B\u1ea1n c\u00f3 th\u1ec3 g\u1ecdi loadLibrary() nhi\u1ec1u l\u1ea7n trong m\u1ed9t th\u01b0 vi\u1ec7n m\u00e0 kh\u00f4ng g\u1eb7p b\u1ea5t c\u1ee9 v\u1ea5n \u0111\u1ec1 g\u00ec, v\u00ec th\u01b0 vi\u1ec7n ch\u1ec9 load m\u1ed9t l\u1ea7n duy nh\u1ea5t. Lu\u00f4n ghi nh\u1edb r\u1eb1ng - C\u00e1c constant c\u1ee7a library kh\u00f4ng \u0111\u01b0\u1ee3c coi l\u00e0 constant trong file import. N\u00ean nh\u1edb r\u1eb1ng, constant kh\u00f4ng t\u00f4ng t\u1ea1i cho t\u1edbi khi library \u0111\u01b0\u1ee3c load. - B\u1ea1n ko th\u1ec3 s\u1eed d\u1ee5ng ki\u1ec3u t\u1eeb deferred library trong file import. Thay v\u00e0o \u0111\u00f3, h\u00e3y suy x\u00e9t c\u00e1c di chuy\u1ec3n n\u00f3 sang interface types \u0111\u1ec3 c\u00f3 th\u1ec3 import b\u1eb1ng c\u1ea3 deferred library v\u00e0 importing file. - Dart ng\u1ea7m th\u00eam loadLibrary() v\u00e0o namespace m\u00e0 b\u1ea1n khai b\u00e1o s\u1eed d\u1ee5ng deferred. loadLibrary() function tr\u1ea3 v\u1ec1 Future .","title":"Lazily loading a library"},{"location":"dart_core/#implementing-libraries","text":"Tham kh\u1ea3o Create Library Packages n\u1ebfu b\u1ea1n mu\u1ed1n vi\u1ebft th\u01b0 vi\u1ec7n cho Dart.","title":"Implementing libraries"},{"location":"dart_core/#asynchrony-support","text":"Dart libraries l\u00e0 m\u1ed9t b\u1ed9 si\u00eau \u0111\u1ea7y \u0111\u1ee7 c\u00e1c functions tr\u1ea3 v\u1ec3 Future ho\u1eb7c Stream objects. Nh\u1eefng function n\u00e0y l\u00e0 b\u1ea5t \u0111\u1ed3ng b\u1ed9 ( asynchronous ), t\u01b0\u01a1ng t\u1ef1 Javascript ch\u00fang ta c\u00f3 1 c\u1eb7p t\u1eeb kho\u00e1 async v\u00e0 await .","title":"Asynchrony support"},{"location":"dart_core/#handling-futures","text":"Khi b\u1ea1n mu\u1ed1n k\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c ho\u00e0n th\u00e0nh trong t\u01b0\u01a1ng lai (Future), b\u1ea1n c\u00f3 2 c\u00e1ch sau: - S\u1eed d\u1ee5ng async v\u00e0 await . - S\u1eed d\u1ee5ng Future API. Code s\u1eed d\u1ee5ng async v\u00e0 await l\u00e0 b\u1ea5t \u0111\u1ed3ng b\u1ed9, nh\u01b0ng h\u1ea7u nh\u01b0 ch\u00fang gi\u1ed1ng nh\u01b0 c\u00e1c \u0111o\u1ea1n code x\u1eed l\u00fd \u0111\u1ed3ng b\u1ed9. V\u00ed d\u1ee5, \u0111o\u1ea1n code sau s\u1eed d\u1ee5ng await \u0111\u1ec3 ch\u1edd k\u1ebft qu\u1ea3 c\u1ee7a x\u1eed l\u00fd t\u1eeb function b\u1ea5t \u0111\u1ed3ng b\u1ed9: await lookUpVersion (); \u0110\u1ec3 d\u00f9ng await th\u00ec code b\u1eaft bu\u1ed9c ph\u1ea3i n\u1eb1m trong async function Future checkVersion () async { var version = await lookUpVersion (); // Do something with version } S\u1eed d\u1ee5ng try , catch , v\u00e0 finally \u0111\u1ec3 x\u1eed l\u00fd errors & cleanup trong code c\u00f3 s\u1eed d\u1ee5ng await : try { version = await lookUpVersion (); } catch ( e ) { // React to inability to look up the version } L\u01b0u \u00fd : async function tr\u1ea3 v\u1ec1 Future object. Trong await expression , gi\u00e1 tr\u1ecb c\u1ee7a expression th\u01b0\u1eddng l\u00e0 Future ; v\u00e0 n\u1ebfu kh\u00f4ng ph\u1ea3i th\u00ec gi\u00e1 tr\u1ecb \u0111\u00f3 c\u0169ng s\u1ebd t\u1ef1 \u0111\u1ed9ng \u0111\u01b0\u1ee3c wrapp v\u00e0o trong Future object. Future object d\u1eabn t\u1edbi m\u1ed9t promise tr\u1ea3 v\u1ec1 object. Sau c\u00f9ng, gi\u00e1 tr\u1ecb c\u1ee7a await expression s\u1ebd tr\u1ea3 v\u1ec1 object \u0111\u00f3. await expression s\u1ebd d\u1eebng vi\u1ec7c th\u1ef1c thi l\u1ea1i cho t\u1edbi khi object s\u1eb5n s\u00e0ng. N\u1ebfu b\u1ea1n g\u1eb7p l\u1ed7i compile-time khi s\u1eed d\u1ee5ng await , h\u00e3y \u0111\u1ea3m b\u1ea3o r\u0103ng b\u1ea1n \u0111ang s\u1eed d\u1ee5ng await b\u00ean trong async function. V\u00ed d\u1ee5 sau s\u1eed d\u1ee5ng await trong app\u2019s main() function, body c\u1ee7a main() ph\u1ea3i \u0111i k\u00e8m v\u1edbi keyword async : Future main () async { checkVersion (); print ( 'In main: version is ${ await lookUpVersion () } ' ); }","title":"Handling Futures"},{"location":"dart_core/#declaring-async-functions","text":"V\u00ed d\u1ee5 chuy\u1ec3n t\u1eeb function \u0111\u1ed3ng b\u1ed9 sang function b\u1ea5t \u0111\u1ed3ng b\u1ed9: String lookUpVersion () => '1.0.0' ; Future < String > lookUpVersion () async => '1.0.0' ;","title":"Declaring async functions"},{"location":"dart_core/#handling-streams","text":"Khi b\u1ea1n c\u1ea7n l\u1ea5y gi\u00e1 tr\u1ecb t\u1eeb m\u1ed9t Stream, b\u1ea1n c\u00f3 2 l\u1ef1a ch\u1ecdn - S\u1eed d\u1ee5ng async v\u00e0 asynchronous for loop ( await for ). - S\u1eed d\u1ee5ng Stream API. await for ( varOrType identifier in expression ) { // Executes each time the stream emits a value. } Gi\u00e1 tr\u1ecb c\u1ee7a expression ph\u1ea3i c\u00f3 ki\u1ec3u Stream . Qu\u00e1 tr\u00ecnh ch\u1ea1y nh\u01b0 sau: \u0110\u1ee3i cho t\u1edbi khi stream \u0111\u01b0a ra gi\u00e1 tr\u1ecb. Th\u1ef1c thi code b\u00ean trong for loop . L\u1eb7p l\u1ea1i 1 v\u00e0 2 cho t\u1edbi khi stream b\u1ecb close. \u0110\u1ec3 d\u1eebng vi\u1ec7c l\u1eafng nghe stream, b\u1ea1n c\u00f3 th\u1ec3 break ho\u1eb7c return , which breaks out of the for loop and unsubscribes from the stream.","title":"Handling Streams"},{"location":"dart_core/#generators","text":"Dart h\u1ed7 tr\u1ee3 2 lo\u1ea1i built-in generator functions: - Synchronous generator: Tr\u1ea3 v\u1ec1 Iterable object. Iterable < int > naturalsTo ( int n ) sync * { int k = 0 ; while ( k < n ) yield k ++ ; } - Asynchronous generator: Tr\u1ea3 v\u1ec1 Stream object. Stream < int > asynchronousNaturalsTo ( int n ) async * { int k = 0 ; while ( k < n ) yield k ++ ; }","title":"Generators"},{"location":"dart_core/#callable-classes","text":"\u0110\u1ec3 c\u00f3 th\u1ec3 g\u1ecdi Dart class nh\u01b0 function, ta implement ph\u01b0\u01a1ng th\u1ee9c call(). class WannabeFunction { call ( String a , String b , String c ) => ' $ a $ b $ c !' ; } main () { var wf = new WannabeFunction (); var out = wf ( \"Hi\" , \"there,\" , \"gang\" ); print ( ' $ out ' ); } Hi there, gang!","title":"Callable classes"},{"location":"dart_core/#isolates","text":"H\u1ea7u h\u1ebft computers, ho\u1eb7c mobile platforms \u0111\u01b0\u1ee3c trang b\u1ecb multi-core CPUs. \u0110\u1ec3 t\u1eadn d\u1ee5ng t\u1ed1i \u0111a l\u1ee3i th\u1ebf \u0111\u00f3, th\u00f4ng developer c\u00f3 th\u1ec3 ch\u1ea1y \u0111\u1ed3ng th\u1eddi c\u00e1c shared-memory threads. Tuy nhi\u00ean, vi\u1ec7c chia s\u1ebb tr\u1ea1ng th\u00e1i (shared-state) c\u1ee7a c\u00e1c concurrency r\u1ea5t d\u1ec5 d\u1eabn t\u1edbi l\u1ed7i c\u0169ng nh\u01b0 l\u00e0m code tr\u1edf n\u00ean ph\u1ee9c t\u1ea1p. Thay v\u00ec s\u1ee7 d\u1ee5ng threads, t\u1ea5t c\u1ea3 Dart code \u0111\u01b0\u1ee3c th\u1ef1c thi \u1edf b\u00ean trong 1 v\u00f9ng c\u00f4 l\u1eadp. M\u1ed7i v\u00f9ng v\u00f4 l\u1eadp c\u00f3 memory heap ri\u00eang, \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng state c\u1ee7a v\u00f9ng isolate n\u00e0y kh\u00f4ng b\u1ecb truy c\u1eadp b\u1edfi v\u00f9ng isolate kh\u00e1c. Chi ti\u1ebft tham kh\u1ea3o dart:isolate .","title":"Isolates"},{"location":"dart_core/#typedefs","text":"Trong Dart, m\u1ecdi th\u1ee9 \u0111\u1ec1u l\u00e0 object. typedef , ho\u1eb7c function-type alias, \u0111\u1eb7t t\u00ean cho function m\u00e0 b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a c\u00e1c fields v\u00e0 tr\u1ea3 v\u1ec1 types. \u0110o\u1ea1n code sau kh\u00f4ng s\u1eed d\u1ee5ng typedef, v\u00e0 th\u00f4ng tin v\u1ec1 ki\u1ec3u s\u1ebd bi\u1ebfn m\u1ea5t khi b\u1ea1n g\u00e1n compare = f , trong khi ki\u1ec3u c\u1ee7a f l\u00e0 (Object, Object) \u2192 int . class SortedCollection { Function compare ; SortedCollection ( int f ( Object a , Object b )) { compare = f ; } } // Initial, broken implementation. int sort ( Object a , Object b ) => 0 ; void main () { SortedCollection coll = SortedCollection ( sort ); // All we know is that compare is a function, // but what type of function? assert ( coll . compare is Function ); } Hot fix s\u1eed d\u1ee5ng typedef typedef Compare = int Function ( Object a , Object b ); class SortedCollection { Compare compare ; SortedCollection ( this . compare ); } // Initial, broken implementation. int sort ( Object a , Object b ) => 0 ; void main () { SortedCollection coll = SortedCollection ( sort ); assert ( coll . compare is Function ); assert ( coll . compare is Compare ); } V\u1edbi phi\u00ean b\u1ea3n Dart 2 hi\u1ec7n t\u1ea1i th\u00ec typedefs ch\u1ec9 gi\u1edbi h\u1ea1n s\u1eed d\u1ee5ng v\u1edbi function . typedef c\u0169ng ch\u1ec9 \u0111\u01a1n gi\u1ea3n l\u00e0 m\u1ed9t alias, gi\u00fap ch\u00fang ta check ki\u1ec3u c\u1ee7a m\u1ed7i function: typedef Compare < T > = int Function ( T a , T b ); int sort ( int a , int b ) => a - b ; void main () { assert ( sort is Compare < int > ); // True! }","title":"Typedefs"},{"location":"dart_core/#driving-deep","text":"\u0110\u1ec3 hi\u1ec3u s\u00e2u h\u01a1n v\u1ec1 Dart th\u00ec kh\u00f4ng c\u00f2n c\u00e1ch n\u00e0o kh\u00e1c ngo\u00e0i m\u1ea7n v\u00e0o core c\u1ee7a Dart. B\u1ea1n c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u s\u00e2u v\u1ec1 c\u01a1 ch\u1ebf ho\u1ea1t \u0111\u1ed9c v\u00e0 c\u00e1ch s\u1eed d\u1ee5ng c\u1ee7a Dart libraries t\u1ea1i A Tour of the Dart Libraries . V\u00e0 l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 code trong s\u00e1ng, convention chu\u1ea9n, hi\u1ec3u nh\u1eefng \u0111i\u1ec1u n\u00ean v\u00e0 kh\u00f4ng n\u00ean khi code Dart, th\u00ec b\u1ea1n n\u00ean \u0111\u1ecdc th\u00eam Effective Dart .","title":"Driving Deep"},{"location":"dart_core/#references","text":"Dart Home Page A Tour of the Dart Language","title":"References"},{"location":"dart_environment_settings/","text":"Dart \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"C\u00e0i \u0111\u1eb7t dark tr\u00ean IntelliJ"},{"location":"dart_environment_settings/#dart","text":"For full documentation visit mkdocs.org .","title":"Dart"},{"location":"dart_environment_settings/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"dart_environment_settings/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"}]}